{"code": "public static void mainMenu() {     System.out.println(\"1. Add a recipe\");     System.out.println(\"2. Delete a recipe\");     System.out.println(\"3. Edit a recipe\");     System.out.println(\"4. Add inventory\");     System.out.println(\"5. Check inventory\");     System.out.println(\"6. Make coffee\");     System.out.println(\"0. Exit\\n\");               try {       int userInput = Integer.parseInt(inputOutput(\"Please press the number that corresponds to what you would like the coffee maker to do.\"));              if (userInput >= 0 && userInput <=6) {         if (userInput == 1) addRecipe();         if (userInput == 2) deleteRecipe();         if (userInput == 3) editRecipe();         if (userInput == 4) addInventory();         if (userInput == 5) checkInventory();         if (userInput == 6) makeCoffee();         if (userInput == 0) System.exit(0);       } else {         System.out.println(\"Please enter a number from 0 - 6\");         mainMenu();       }     } catch (NumberFormatException e) {       System.out.println(\"Please enter a number from 0 - 6\");       mainMenu();}}", "nl": "Prints the main menu and handles user input for main menu commands"}
{"code": "public synchronized int makeCoffee(int recipeToPurchase, int amtPaid) {     int change = 0;          if (getRecipes()[recipeToPurchase] == null) {       change = amtPaid;     } else if (getRecipes()[recipeToPurchase].getPrice() <= amtPaid) {       if (inventory.useIngredients(getRecipes()[recipeToPurchase])) {         change = amtPaid - getRecipes()[recipeToPurchase].getPrice();       } else {         change = amtPaid;       }     } else {       change = amtPaid;     }          return change;}", "nl": "Returns the change of a user ' s beverage purchase , or the user ' s money if the beverage cannot be made r amtPaid @ return int"}
{"code": "public int getAmtCoffee() {     return amtCoffee;}", "nl": "@ return Returns the amtCoffee"}
{"code": "public synchronized void setMilk(int milk) {     if(milk >= 0) {       Inventory.milk = milk;}}", "nl": "Sets the number of milk units in the inventory to the specified amount"}
{"code": "public int getMilk() {     return milk;}", "nl": "Returns the current number of milk units in the inventory"}
{"code": "public int read(char[] buffer,            int  offset,            int  size)     throws IOException    {     if (this.atEndOfData) {      return -1;     }     int charsRead = 0;     if ((offset + size) > buffer.length) {      size = buffer.length - offset;     }     while (charsRead < size) {      char ch = this.reader.read();      if (ch == '?') {       char ch2 = this.reader.read();       if (ch2 == '>') {          this.atEndOfData = true;          break;       }       this.reader.unread(ch2);      }      buffer[charsRead] = ch;      charsRead++;     }     if (charsRead == 0) {      charsRead = -1;     }     return charsRead;}", "nl": "Reads a block of data"}
{"code": "public void setParameterEntityResolver(IXMLEntityResolver resolver)    {     this.parameterEntityResolver = resolver;}", "nl": "Sets the parameter entity resolver"}
{"code": "static void errorClosingTagNotEmpty(String systemID,                      int  lineNr)     throws XMLParseException    {     throw new XMLParseException(systemID, lineNr,                   \"Closing tag must be empty\");}", "nl": "Throws an XMLParseException to indicate that extra data is encountered in a closing tag"}
{"code": "protected void installApplicationListeners(Application app) {     if (applicationListener == null) {       applicationListener = createApplicationListener();     }     app.addPropertyChangeListener(new WeakPropertyChangeListener(applicationListener));}", "nl": "Installs listeners on the application object"}
{"code": "static void errorInvalidInput(String systemID,                  int  lineNr,                  String   unexpectedString)     throws XMLParseException    {     throw new XMLParseException(systemID, lineNr,                   \"Invalid input: \" + unexpectedString);}", "nl": "Throws an XMLParseException to indicate that a string is not expected at this point"}
{"code": "static char processCharLiteral(String entity)     throws IOException,        XMLParseException    {     if (entity.charAt(2) == 'x') {      entity = entity.substring(3, entity.length() - 1);      return (char) Integer.parseInt(entity, 16);     } else {      entity = entity.substring(2, entity.length() - 1);      return (char) Integer.parseInt(entity, 10);}}", "nl": "Processes a character literal"}
{"code": "public Component getComponent() {     if (invisibleFrame == null) {       invisibleFrame = new JFrame();       invisibleFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);       invisibleFrame.setUndecorated(true);              invisibleFrame.setLocation(10000, 10000);                     invisibleFrame.getRootPane().putClientProperty(\"Window.alpha\", 0f);       invisibleFrame.getRootPane().putClientProperty(\"Window.shadow\", false);              invisibleFrame.setVisible(true);     }     return invisibleFrame;}", "nl": "Returns the Frame which holds the frameless JMenuBar"}
{"code": "public void write(IXMLElement xml,            boolean   prettyPrint,            int     indent,            boolean   collapseEmptyElements)     throws IOException    {     if (prettyPrint) {      for (int i = 0; i < indent; i++) {       this.writer.print(' ');      }     }     if (xml.getName() == null) {      if (xml.getContent() != null) {       if (prettyPrint) {          this.writeEncoded(xml.getContent().trim());          writer.println();       } else {          this.writeEncoded(xml.getContent());       }      }     } else {      this.writer.print('<');      this.writer.print(xml.getFullName());      Vector nsprefixes = new Vector();      if (xml.getNamespace() != null) {       if (xml.getName().equals(xml.getFullName())) {          this.writer.print(\" xmlns=\\\"\" + xml.getNamespace() + '\"');       } else {          String prefix = xml.getFullName();          prefix = prefix.substring(0, prefix.indexOf(':'));          nsprefixes.addElement(prefix);          this.writer.print(\" xmlns:\" + prefix);          this.writer.print(\"=\\\"\" + xml.getNamespace() + \"\\\"\");       }      }      Iterator enm = xml.iterateAttributeNames();      while (enm.hasNext()) {       String key = (String) enm.next();       int index = key.indexOf(':');       if (index >= 0) {          String namespace = xml.getAttributeNamespace(key);          if (namespace != null) {           String prefix = key.substring(0, index);           if (! nsprefixes.contains(prefix)) {            this.writer.print(\" xmlns:\" + prefix);            this.writer.print(\"=\\\"\" + namespace + '\"');            nsprefixes.addElement(prefix);           }          }       }      }      enm = xml.iterateAttributeNames();      while (enm.hasNext()) {       String key = (String) enm.next();       String value = xml.getAttribute(key, null);       this.writer.print(\" \" + key + \"=\\\"\");       this.writeEncoded(value);       this.writer.print('\"');      }      if ((xml.getContent() != null)        && (xml.getContent().length() > 0)) {       writer.print('>');       this.writeEncoded(xml.getContent());       writer.print(\"</\" + xml.getFullName() + '>');       if (prettyPrint) {          writer.println();       }      } else if (xml.hasChildren() || (! collapseEmptyElements)) {       writer.print('>');       if (prettyPrint) {          writer.println();       }       enm = xml.iterateChildren();       while (enm.hasNext()) {          IXMLElement child = (IXMLElement) enm.next();          this.write(child, prettyPrint, indent + 4,               collapseEmptyElements);       }       if (prettyPrint) {          for (int i = 0; i < indent; i++) {           this.writer.print(' ');          }       }       this.writer.print(\"</\" + xml.getFullName() + \">\");       if (prettyPrint) {          writer.println();       }      } else {       this.writer.print(\"/>\");       if (prettyPrint) {          writer.println();       }      }     }     this.writer.flush();}", "nl": "Writes an XML element"}
{"code": "public boolean hasChildren() {     return (! this.children.isEmpty());}", "nl": "Returns whether the element has children"}
{"code": "public void setAttribute(String name,       String value) {     XMLAttribute attr = this.findAttribute(name);     if (attr == null) {       attr = new XMLAttribute(name, name, null, value, \"CDATA\");       this.attributes.add(attr);     } else {       attr.setValue(value);}}", "nl": "Sets an attribute"}
{"code": "public Properties getAttributesInNamespace(String namespace) {     Properties result = new Properties();     Iterator enm = this.attributes.iterator();     while (enm.hasNext()) {       XMLAttribute attr = (XMLAttribute) enm.next();       if (namespace == null) {         if (attr.getNamespace() == null) {           result.put(attr.getName(), attr.getValue());         }       } else {         if (namespace.equals(attr.getNamespace())) {           result.put(attr.getName(), attr.getValue());         }       }     }     return result;}", "nl": "Returns all attributes in a specific namespace as a Properties object"}
{"code": "public int getAttribute(String name,       String namespace,       int  defaultValue) {     String value = this.getAttribute(name, namespace,         Integer.toString(defaultValue));     return Integer.parseInt(value);}", "nl": "Returns the value of an attribute"}
{"code": "public Properties getAttributes() {     Properties result = new Properties();     Iterator enm = this.attributes.iterator();     while (enm.hasNext()) {       XMLAttribute attr = (XMLAttribute) enm.next();       result.put(attr.getFullName(), attr.getValue());     }     return result;}", "nl": "Returns all attributes as a Properties object"}
{"code": "public void setContent(String content) {     this.content = content;}", "nl": "Sets the # PCDATA content"}
{"code": "protected void updateViewTitle(View view, JFrame f) {     URI uri = view.getURI();     String title;     if (uri == null) {       title = labels.getString(\"unnamedFile\");     } else {       title = URIUtil.getName(uri);     }     if (view.hasUnsavedChanges()) {       title += \"*\";     }     view.setTitle(labels.getFormatted(\"frame.title\", title, getName(), view.getMultipleOpenId()));     f.setTitle(view.getTitle());}", "nl": "Updates the title of a view and displays it in the given frame"}
{"code": "protected Reader stream2reader(InputStream  stream,                   StringBuffer charsRead)     throws IOException    {     PushbackInputStream pbstream = new PushbackInputStream(stream);     int b = pbstream.read();     switch (b) {      case 0x00:      case 0xFE:      case 0xFF:       pbstream.unread(b);       return new InputStreamReader(pbstream, \"UTF-16\");      case 0xEF:       for (int i = 0; i < 2; i++) {          pbstream.read();       }       return new InputStreamReader(pbstream, \"UTF-8\");      case 0x3C:       b = pbstream.read();       charsRead.append('<');       while ((b > 0) && (b != 0x3E)) {          charsRead.append((char) b);          b = pbstream.read();       }       if (b > 0) {          charsRead.append((char) b);       }       String encoding = this.getEncoding(charsRead.toString());       if (encoding == null) {          return new InputStreamReader(pbstream, \"UTF-8\");       }       charsRead.setLength(0);       try {          return new InputStreamReader(pbstream, encoding);       } catch (UnsupportedEncodingException e) {          return new InputStreamReader(pbstream, \"UTF-8\");       }       default:          charsRead.append((char) b);          return new InputStreamReader(pbstream, \"UTF-8\");}}", "nl": "Converts a stream to a reader while detecting the encoding"}
{"code": "public IXMLEntityResolver getParameterEntityResolver()    {     return this.delegate.getParameterEntityResolver();}", "nl": "Returns the parameter entity resolver"}
{"code": "public void endElement(String name,               String nsPrefix,               String nsURI)    {     IXMLElement elt = (IXMLElement) this.stack.pop();     if (elt.getChildrenCount() == 1) {      IXMLElement child = elt.getChildAtIndex(0);      if (child.getName() == null) {       elt.setContent(child.getContent());       elt.removeChildAtIndex(0);}}}", "nl": "This method is called when the end of an XML elemnt is encountered"}
{"code": "public StdXMLParser()    {     this.builder = null;     this.validator = null;     this.reader = null;     this.entityResolver = new XMLEntityResolver();}", "nl": "Creates a new parser"}
{"code": "protected void processSpecialTag(boolean allowCDATA)     throws Exception    {     String str = XMLUtil.read(this.reader, '&');     char ch = str.charAt(0);     if (ch == '&') {      XMLUtil.errorUnexpectedEntity(reader.getSystemID(),                      reader.getLineNr(),                      str);     }     switch (ch) {      case '[':       if (allowCDATA) {          this.processCDATA();       } else {          XMLUtil.errorUnexpectedCDATA(reader.getSystemID(),                       reader.getLineNr());       }       return;      case 'D':       this.processDocType();       return;      case '-':       XMLUtil.skipComment(this.reader);       return;}}", "nl": "Processes a tag that starts with a bang"}
{"code": "String getFullName()    {     return this.fullName;}", "nl": "Returns the full name of the attribute"}
{"code": "public XMLException(String msg)    {     this(null, -1, null, msg, false);}", "nl": "Creates a new exception"}
{"code": "public XMLException(Exception e)    {     this(null, -1, e, \"Nested Exception\", false);}", "nl": "Creates a new exception"}
{"code": "public ExitAction(Application app) {     super(app);     ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");     labels.configureAction(this, ID);}", "nl": "Creates a new instance"}
{"code": "protected void updateEnabled(boolean oldValue, boolean newValue) {     firePropertyChange(\"enabled\", oldValue, newValue && isEnabled());}", "nl": "Updates the enabled state of this action depending on the new enabled state of the view"}
{"code": "public Rectangle2D.Double getDrawingArea(Figure f, Point2D.Double p1, Point2D.Double p2) {     Path2D.Double path = getTransformedDecoratorPath(f, p1, p2);     Rectangle2D b = path.getBounds2D();     Rectangle2D.Double area = new Rectangle2D.Double(b.getX(), b.getY(), b.getWidth(), b.getHeight());          if (isStroked) {       double strokeWidth = f.get(STROKE_WIDTH);       int strokeJoin = f.get(STROKE_JOIN);       double miterLimit = (f.get(STROKE_MITER_LIMIT) * strokeWidth);              double grow;       if (strokeJoin == BasicStroke.JOIN_MITER) {         grow  = (int) (1 + strokeWidth / 2 * miterLimit);       } else {         grow  = (int) (1 + strokeWidth / 2);       }       Geom.grow(area, grow, grow);     } else {       Geom.grow(area, 1, 1);      }          return area;}", "nl": "Returns the drawing area of the decorator"}
{"code": "public FigureEvent(Figure source, AttributeKey attribute, Object oldValue, Object newValue) {     super(source);     this.attribute = attribute;     this.oldValue = oldValue;     this.newValue = newValue;}", "nl": "Constructs an event for the given source Figure"}
{"code": "public ExportFileAction(Application app, View view) {     super(app, view);     ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");     labels.configureAction(this, ID);}", "nl": "Creates a new instance"}
{"code": "public void figureChanged(FigureEvent evt) {     updateBounds();}", "nl": "Sent when the bounds or shape of a figure has changed"}
{"code": "public void draw(Graphics2D g) {     BezierFigure f = getBezierFigure();     if (f.getNodeCount() > index) {       BezierPath.Node v = f.getNode(index);       Point2D.Double p0 = new Point2D.Double(v.x[0], v.y[0]);       Point2D.Double pc = new Point2D.Double(v.x[controlPointIndex], v.y[controlPointIndex]);       Figure tOwner = getTransformOwner();       if (tOwner.get(TRANSFORM) != null) {         tOwner.get(TRANSFORM).transform(p0, p0);         tOwner.get(TRANSFORM).transform(pc, pc);       }       Color handleFillColor;       Color handleStrokeColor;       Stroke stroke1;       Color strokeColor1;       Stroke stroke2;       Color strokeColor2;       if (getEditor().getTool().supportsHandleInteraction()) {         handleFillColor = (Color) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_CONTROL_POINT_HANDLE_FILL_COLOR);         handleStrokeColor = (Color) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_CONTROL_POINT_HANDLE_STROKE_COLOR);         stroke1 = (Stroke) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_STROKE_1);         strokeColor1 = (Color) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_COLOR_1);         stroke2 = (Stroke) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_STROKE_2);         strokeColor2 = (Color) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_COLOR_2);       } else {         handleFillColor = (Color) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_CONTROL_POINT_HANDLE_FILL_COLOR_DISABLED);         handleStrokeColor = (Color) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_CONTROL_POINT_HANDLE_STROKE_COLOR_DISABLED);         stroke1 = (Stroke) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_STROKE_1_DISABLED);         strokeColor1 = (Color) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_COLOR_1_DISABLED);         stroke2 = (Stroke) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_STROKE_2_DISABLED);         strokeColor2 = (Color) getEditor().getHandleAttribute(HandleAttributeKeys.BEZIER_TANGENT_COLOR_2_DISABLED);       }       if (stroke1 != null && strokeColor1 != null) {         g.setStroke(stroke1);         g.setColor(strokeColor1);         g.draw(new Line2D.Double(             view.drawingToView(p0),             view.drawingToView(pc)));       }       if (stroke2 != null && strokeColor2 != null) {         g.setStroke(stroke2);         g.setColor(strokeColor2);         g.draw(new Line2D.Double(             view.drawingToView(p0),             view.drawingToView(pc)));       }       if (v.keepColinear && v.mask == BezierPath.C1C2_MASK &&           (index > 0 && index < f.getNodeCount() - 1 || f.isClosed())) {         drawCircle(g, handleStrokeColor, handleFillColor);       } else {         drawCircle(g, handleFillColor, handleStrokeColor);}}}", "nl": "Draws this handle"}
{"code": "public void printJava2D(PrintableView v) {     Pageable pageable = v.createPageable();     if (pageable == null) {       throw new InternalError(\"View does not have a method named java.awt.Pageable createPageable()\");     }     try {       PrinterJob job = PrinterJob.getPrinterJob();              PrintRequestAttributeSet attr = new HashPrintRequestAttributeSet();       attr.add(new PrinterResolution(300, 300, PrinterResolution.DPI));       job.setPageable(pageable);       if (job.printDialog()) {         try {           job.print();         } catch (PrinterException e) {           String message = (e.getMessage() == null) ? e.toString() : e.getMessage();           View view = getActiveView();           ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");           JSheet.showMessageSheet(view.getComponent(),               \"<html>\" + UIManager.getString(\"OptionPane.css\") +               \"<b>\" + labels.getString(\"couldntPrint\") + \"</b><br>\" +               ((message == null) ? \"\" : message));         }       } else {         System.out.println(\"JOB ABORTED!\");       }     } catch (Throwable t) {       t.printStackTrace();}}", "nl": "This prints at 72 DPI only"}
{"code": "public void transform(AffineTransform tx) {     for (Figure f : getChildren()) {       f.transform(tx);     }     invalidate();}", "nl": "Transforms the figure"}
{"code": "public void basicRemoveAll(Collection<? extends Figure> figures) {     for (Figure f : figures) {       basicRemove(f);}}", "nl": "Removes all children"}
{"code": "public CloseHandle(Figure owner, Locator locator) {     super(owner, locator);}", "nl": "Creates a new instance"}
{"code": "public BoundsOutlineHandle(Figure owner,        AttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled,       AttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled,       AttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled,       AttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled       ) {     super(owner);     this.stroke1Enabled = stroke1Enabled;     this.strokeColor1Enabled = strokeColor1Enabled;     this.stroke2Enabled = stroke2Enabled;     this.strokeColor2Enabled = strokeColor2Enabled;     this.stroke1Disabled = stroke1Disabled;     this.strokeColor1Disabled = strokeColor1Disabled;     this.stroke2Disabled = stroke2Disabled;     this.strokeColor2Disabled = strokeColor2Disabled;}", "nl": "Creates a bounds outline handle for resizing or transforming a component"}
{"code": "public static void setOpenApplicationHandler(ActionListener openHandler) {     setHandler(new OSXAdapter(\"handleOpenApplication\", openHandler));}", "nl": "The action listener will be called when the application receives an Open Application event from the Finder or another application"}
{"code": "@Override   public void redo() throws CannotRedoException {     super.redo();     try {       getSetter().invoke(source, newValue);     } catch (Exception e) {       InternalError ie = new InternalError(\"Couldn't invoke setter for property \\\"\" + propertyName + \"\\\" in \" + source);       ie.initCause(e);       throw ie;}}", "nl": "Redoes the change"}
{"code": "static public void addEdgeResizeHandles(Figure f, Collection<Handle> handles) {     handles.add(south(f));     handles.add(north(f));     handles.add(east(f));     handles.add(west(f));}", "nl": "Fills the given Vector with handles at each the north , south , east , and west of the figure"}
{"code": "public CMYKICCColorSystem() {     try {       read(getClass().getResourceAsStream(\"Generic CMYK Profile.icc\"));     } catch (IOException e) {       InternalError err = new InternalError(\"Couldn't load \\\"Generic CMYK Profile.icc\\\".\");       err.initCause(e);       throw err;}}", "nl": "Creates a new instance"}
{"code": "public ImageInputFormat(ImageHolderFigure prototype) {     this(prototype, \"Image\", \"Image\", ImageIO.getReaderFileSuffixes(), ImageIO.getReaderMIMETypes());}", "nl": "Creates a new image input format for all formats supported by javax . imageio . ImageIO"}
{"code": "static public Locator south() {     return new RelativeDecoratorLocator(0.5, 1.0);}", "nl": "South"}
{"code": "public void editDelete() {     getView().getDrawing().removeAll(getView().getSelectedFigures());}", "nl": "Deletes the selection"}
{"code": "public ImageOutputFormat() {     this(\"PNG\", \"Portable Network Graphics (PNG)\", \"png\", BufferedImage.TYPE_INT_ARGB);}", "nl": "Creates a new image output format for Portable Network Graphics PNG"}
{"code": "static public Locator southWest() {     return southWest(false);}", "nl": "Non - transforming South west"}
{"code": "static public Locator west() {     return west(false);}", "nl": "Non - transforming West"}
{"code": "public TextInputFormat(TextHolderFigure prototype) {     this(prototype, \"Text\", \"Text\", \"txt\", false);}", "nl": "Creates a new image output format for text , for a figure that can not"}
{"code": "public DrawingPageable(Drawing drawing) {     this.drawing = drawing;     Paper paper = new Paper();     pageFormat = new PageFormat();     pageFormat.setPaper(paper);}", "nl": "Creates a new instance"}
{"code": "public void removeActionListener(ActionListener listener) {     textField.removeActionListener(listener);}", "nl": "Remove an action listener"}
{"code": "public PropertyDescriptor[] getPropertyDescriptors() {     return getPdescriptor();}", "nl": "Gets the bean ' s PropertyDescriptors"}
{"code": "public MethodDescriptor[] getMethodDescriptors() {     return getMdescriptor();}", "nl": "Gets the bean ' s MethodDescriptors"}
{"code": "public PropertyDescriptor[] getPropertyDescriptors() {     return getPdescriptor();}", "nl": "Gets the bean ' s PropertyDescriptors"}
{"code": "public static double length(Point2D.Double p1, Point2D.Double p2) {     return sqrt(length2(p1.x, p1.y, p2.x, p2.y));}", "nl": "Gets the distance between to points"}
{"code": "public static void grow(Rectangle2D.Double r, double h, double v) {     r.x -= h;     r.y -= v;     r.width += h * 2d;     r.height += v * 2d;}", "nl": "Resizes the Rectangle2D . Double both horizontally and vertically"}
{"code": "public static long length2(int x1, int y1, int x2, int y2) {     return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);}", "nl": "Gets the square distance between two points"}
{"code": "public Float(float xpoints[], float ypoints[], int npoints) {                     if (npoints > xpoints.length || npoints > ypoints.length) {         throw new IndexOutOfBoundsException(\"npoints > xpoints.length || \" +             \"npoints > ypoints.length\");       }                     if (npoints < 0) {         throw new NegativeArraySizeException(\"npoints < 0\");       }                     this.npoints = npoints;       this.xpoints = new float[npoints];       System.arraycopy(xpoints, 0, this.xpoints, 0,           npoints);       this.ypoints = new float[npoints];       System.arraycopy(ypoints, 0, this.ypoints, 0,           npoints);}", "nl": "Constructs and initializes a Polygon from the specified parameters"}
{"code": "public void next() {       index++;}", "nl": "Moves the iterator forwards , along the primary direction of traversal , to the next segment of the path when there are more points in that direction"}
{"code": "public boolean equals(Object obj) {     if (obj instanceof Insets2D) {       Insets2D that = (Insets2D)obj;       return ((getTop() == that.getTop()) &&           (getLeft() == that.getLeft()) &&           (getBottom() == that.getBottom()) &&           (getRight() == that.getRight()));     }     return false;}", "nl": "Checks whether two insets objects are equal"}
{"code": "public boolean equals(Object obj) {   if (obj instanceof Dimension2DDouble) {     Dimension2DDouble d = (Dimension2DDouble)obj;     return (width == d.width) && (height == d.height);   }   return false;}", "nl": "Checks whether two dimension objects have equal values"}
{"code": "@Override   public boolean isConnectable() {     return isConnectable;}", "nl": "Checks whether this figure is connectable"}
{"code": "public void setClone(Figure f, T value) {     try {        f.set(this, value == null ? null : clazz.cast(Methods.invoke(value, \"clone\")));     } catch (NoSuchMethodException ex) {       InternalError e = new InternalError();       e.initCause(ex);       throw e;}}", "nl": "Convenience method for setting a clone of a value on a figure"}
{"code": "public BezierFigure(boolean isClosed) {     path = new BezierPath();     set(PATH_CLOSED, isClosed);}", "nl": "Creates an empty BezierFigure , for example without any BezierPath . Nodes"}
{"code": "public BezierFigure() {     this(false);}", "nl": "Creates an empty BezierFigure , for example without any BezierPath . Nodes"}
{"code": "public void setNode(int index, BezierPath.Node p) {     path.set(index, p);     invalidate();}", "nl": "Sets a control point"}
{"code": "protected InputMap createInputMap() {     InputMap m = new InputMap();     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), DeleteAction.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE, 0), DeleteAction.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_A, 0), SelectAllAction.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_A, InputEvent.CTRL_DOWN_MASK), SelectAllAction.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_A, InputEvent.META_DOWN_MASK), SelectAllAction.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE, 0), IncreaseHandleDetailLevelAction.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0), MoveConstrainedAction.West.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), MoveConstrainedAction.East.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0), MoveConstrainedAction.North.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0), MoveConstrainedAction.South.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, InputEvent.ALT_DOWN_MASK), MoveAction.West.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, InputEvent.ALT_DOWN_MASK), MoveAction.East.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, InputEvent.ALT_DOWN_MASK), MoveAction.North.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, InputEvent.ALT_DOWN_MASK), MoveAction.South.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, InputEvent.SHIFT_DOWN_MASK), MoveAction.West.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, InputEvent.SHIFT_DOWN_MASK), MoveAction.East.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, InputEvent.SHIFT_DOWN_MASK), MoveAction.North.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, InputEvent.SHIFT_DOWN_MASK), MoveAction.South.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, InputEvent.CTRL_DOWN_MASK), MoveAction.West.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, InputEvent.CTRL_DOWN_MASK), MoveAction.East.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, InputEvent.CTRL_DOWN_MASK), MoveAction.North.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, InputEvent.CTRL_DOWN_MASK), MoveAction.South.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_DOWN_MASK), CopyAction.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.META_DOWN_MASK), CopyAction.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_V, InputEvent.CTRL_DOWN_MASK), PasteAction.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_V, InputEvent.META_DOWN_MASK), PasteAction.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_X, InputEvent.CTRL_DOWN_MASK), CutAction.ID);     m.put(KeyStroke.getKeyStroke(KeyEvent.VK_X, InputEvent.META_DOWN_MASK), CutAction.ID);      return m;}", "nl": "Override this method to create a tool - specific input map , which overrides the input map of the drawing edtior"}
{"code": "public static JPopupButton createSelectionColorButton(       DrawingEditor editor, AttributeKey<Color> attributeKey,       java.util.List<ColorIcon> swatches, int columnCount,       String labelKey, ResourceBundleUtil labels,       Map<AttributeKey, Object> defaultAttributes,       Shape colorShape) {     return createSelectionColorButton(editor, attributeKey,         swatches, columnCount, labelKey, labels, defaultAttributes,         colorShape, new LinkedList<Disposable>());}", "nl": "Creates a color button , with an action region and a popup menu"}
{"code": "public static JToggleButton addToolTo(JToolBar tb, DrawingEditor editor,       Tool tool, String labelKey,       ResourceBundleUtil labels) {     ButtonGroup group = (ButtonGroup) tb.getClientProperty(\"toolButtonGroup\");     ToolListener toolHandler = (ToolListener) tb.getClientProperty(\"toolHandler\");     JToggleButton t = new JToggleButton();     labels.configureToolBarButton(t, labelKey);     t.addItemListener(new ToolButtonListener(tool, editor));     t.setFocusable(false);     tool.addToolListener(toolHandler);     group.add(t);     tb.add(t);     return t;}", "nl": "Method addSelectionToolTo must have been invoked prior to this on the JToolBar"}
{"code": "public DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value) {     this(editor, key, value, null, null);}", "nl": "Creates a new instance"}
{"code": "protected void drawCanvas(Graphics2D g) {     Rectangle cb = getCanvasViewBounds();          Color canvasColor;     if (drawing == null) {       canvasColor = CANVAS_FILL_COLOR.getDefaultValue();     } else {       canvasColor = drawing.get(CANVAS_FILL_COLOR);       if (canvasColor != null) {         canvasColor = new Color((canvasColor.getRGB() & 0xffffff) | ((int) (drawing.get(CANVAS_FILL_OPACITY) * 255) << 24), true);       }     }     if (canvasColor == null || canvasColor.getAlpha() != 255) {       g.setPaint(getBackgroundPaint(cb.x, cb.y));       g.fillRect(cb.x, cb.y, cb.width, cb.height);     }     if (canvasColor != null) {       g.setColor(canvasColor);       g.fillRect(cb.x, cb.y, cb.width, cb.height);}}", "nl": "Draws the canvas"}
{"code": "protected void drawDrawingVolatileBuffered(Graphics2D g) {     Rectangle vr = getVisibleRect();     Point shift = new Point(0, 0);     if (bufferedArea.contains(vr) ||         bufferedArea.width >= vr.width && bufferedArea.height >= vr.height) {              shift.x = bufferedArea.x - vr.x;       shift.y = bufferedArea.y - vr.y;       if (shift.x > 0) {         dirtyArea.add(new Rectangle(bufferedArea.x - shift.x, vr.y, shift.x + bufferedArea.width - vr.width, bufferedArea.height));       } else if (shift.x < 0) {         dirtyArea.add(new Rectangle(bufferedArea.x + vr.width, vr.y, -shift.x + bufferedArea.width - vr.width, bufferedArea.height));       }       if (shift.y > 0) {         dirtyArea.add(new Rectangle(vr.x, bufferedArea.y - shift.y, bufferedArea.width, shift.y + bufferedArea.height - vr.height));       } else if (shift.y < 0) {         dirtyArea.add(new Rectangle(vr.x, bufferedArea.y + vr.height, bufferedArea.width, -shift.y + bufferedArea.height - vr.height));       }       bufferedArea.x = vr.x;       bufferedArea.y = vr.y;     } else {                     bufferedArea.setBounds(vr);       dirtyArea.setBounds(vr);       if (drawingBufferV != null &&            (drawingBufferV.getWidth() != vr.width ||           drawingBufferV.getHeight() != vr.height)) {                           drawingBufferV.flush();         drawingBufferV = null;       }     }          while (true) {       int valid = (drawingBufferV == null) ?            VolatileImage.IMAGE_INCOMPATIBLE :            drawingBufferV.validate(getGraphicsConfiguration());       switch (valid) {         case VolatileImage.IMAGE_INCOMPATIBLE:                      try {             drawingBufferV = getGraphicsConfiguration().createCompatibleVolatileImage(vr.width, vr.height, Transparency.TRANSLUCENT);           } catch (OutOfMemoryError e) {             drawingBufferV = null;           }           dirtyArea.setBounds(bufferedArea);           break;         case VolatileImage.IMAGE_RESTORED:                      dirtyArea.setBounds(bufferedArea);           break;       }       if (drawingBufferV == null) {                           drawDrawing(g);         break;       }       if (!dirtyArea.isEmpty()) {                  Graphics2D gBuf = drawingBufferV.createGraphics();         setViewRenderingHints(gBuf);                  gBuf.setComposite(AlphaComposite.Src);                  if (shift.x != 0 || shift.y != 0) {           gBuf.copyArea(Math.max(0, -shift.x), Math.max(0, -shift.y), drawingBufferV.getWidth() - Math.abs(shift.x), drawingBufferV.getHeight() - Math.abs(shift.y), shift.x, shift.y);           shift.x = shift.y = 0;         }                  gBuf.translate(-bufferedArea.x, -bufferedArea.y);         gBuf.clip(dirtyArea);                  gBuf.setBackground(new Color(0x0, true));         gBuf.clearRect(dirtyArea.x, dirtyArea.y, dirtyArea.width, dirtyArea.height);         gBuf.setComposite(AlphaComposite.SrcOver);                  drawDrawing(gBuf);         gBuf.dispose();       }       if (!drawingBufferV.contentsLost()) {         g.drawImage(drawingBufferV, bufferedArea.x, bufferedArea.y, null);       }       if (drawingBufferV.contentsLost()) {         dirtyArea.setBounds(bufferedArea);       } else {         dirtyArea.setSize(-1, -1);         break;}}}", "nl": "Draws the drawing double buffered using a volatile image"}
{"code": "@Override   public void clearSelection() {     if (getSelectionCount() > 0) {       Set<Figure> oldSelection = new HashSet<Figure>(selectedFigures);       selectedFigures.clear();       Set<Figure> newSelection = new HashSet<Figure>(selectedFigures);       invalidateHandles();       fireSelectionChanged(oldSelection, newSelection);}}", "nl": "Clears the current selection"}
{"code": "public void transform(AffineTransform tx) {     Point2D.Double anchor = getStartPoint();     Point2D.Double lead = getEndPoint();     setBounds(         (Point2D.Double) tx.transform(anchor, anchor),         (Point2D.Double) tx.transform(lead, lead));}", "nl": "Moves the Figure to a new location"}
{"code": "public int getColumns() {     return cols;}", "nl": "Gets the number of columns in this layout"}
{"code": "public void layoutContainer(Container parent) {     synchronized (parent.getTreeLock()) {       Insets insets = parent.getInsets();       int ncomponents = parent.getComponentCount();       int nrows = rows;       int ncols = cols;       boolean ltr = parent.getComponentOrientation().isLeftToRight();              if (ncomponents == 0) {         return;       }       if (nrows > 0) {         ncols = (ncomponents + nrows - 1) / nrows;       } else {         nrows = (ncomponents + ncols - 1) / ncols;       }       int w = parent.getWidth() - (insets.left + insets.right);       int h = parent.getHeight() - (insets.top + insets.bottom);       w = (w - (ncols - 1) * hgap) / ncols;       h = (h - (nrows - 1) * vgap) / nrows;              int i;       if (ltr) {         for (int c = 0, x = insets.left ; c < ncols ; c++, x += w + hgap) {           for (int r = 0, y = insets.top ; r < nrows ; r++, y += h + vgap) {             if (isVertical) {               i = r + c * nrows;             } else {               i = r * ncols + c;             }             if (i < ncomponents) {               parent.getComponent(i).setBounds(x, y, w, h);             }           }         }       } else {         for (int c = 0, x = parent.getWidth() - insets.right - w; c < ncols ; c++, x -= w + hgap) {           for (int r = 0, y = insets.top ; r < nrows ; r++, y += h + vgap) {             if (isVertical) {               i = r + c * nrows;             } else {               i = r * ncols + c;             }             if (i < ncomponents) {               parent.getComponent(i).setBounds(x, y, w, h);}}}}}}", "nl": "Lays out the specified container using this layout"}
{"code": "private synchronized void setValue(T x) {     value = x;}", "nl": "Set the value produced by construct"}
{"code": "protected void uninstallSheet() {     if (isInstalled) {       Window owner = getOwner();       if (owner != null) {                                    owner.setEnabled(true);                  owner.removeComponentListener(ownerMovementHandler);         if (shiftBackLocation != null) {           owner.setLocation(shiftBackLocation);         }         if (oldFocusOwner != null) {           owner.toFront();           oldFocusOwner.requestFocus();         }       }       isInstalled = false;}}", "nl": "Uninstalls the sheet on the owner"}
{"code": "public static void showConfirmSheet(Component parentComponent,       Object message, int optionType,       int messageType, Icon icon, SheetListener listener) {     showOptionSheet(parentComponent, message, optionType,         messageType, icon, null, null, listener);}", "nl": "Brings up a sheet with a specified icon , where the number of choices is determined by the optionType parameter"}
{"code": "public static void showInputSheet(Component parentComponent, Object message,       Object initialSelectionValue, SheetListener listener) {     showInputSheet(parentComponent, message,         JOptionPane.QUESTION_MESSAGE, null, null,         initialSelectionValue, listener);}", "nl": "Shows a question - message sheet requesting input from the user and parented to parentComponent"}
{"code": "public int getPopupAnchor() {     return popupAnchor;}", "nl": "Gets the popup anchor"}
{"code": "@Override   public void updateUI() {               if (UIManager.get(getUIClassID()) != null) {       setUI((FontChooserUI) UIManager.getUI(this));     } else {       setUI(PaletteFontChooserUI.createUI(this));}}", "nl": "Resets the UI property with a value from the current look and feel"}
{"code": "public EventSetDescriptor[] getEventSetDescriptors() {     return getEdescriptor();}", "nl": "Gets the bean ' s EventSetDescriptors"}
{"code": "public GroupFigure() {     setConnectable(false);}", "nl": "Creates a new instance"}
{"code": "public GraphicalCompositeFigure(Figure newPresentationFigure) {     super();     setPresentationFigure(newPresentationFigure);}", "nl": "Constructor which creates a GraphicalCompositeFigure with a given graphical figure for presenting it"}
{"code": "public Figure getPresentationFigure() {     return presentationFigure;}", "nl": "Get a figure which renders this BasicCompositeFigure"}
{"code": "public GridConstrainer(double width, double height, boolean visible) {     this(width, height, Math.PI / 8d, visible);}", "nl": "Creates a new instance with the specified grid size"}
{"code": "public EllipseFigure() {     this(0, 0, 0, 0);}", "nl": "Constructs a new EllipseFigure , initialized to location and size"}
{"code": "public CreationTool(Figure prototype, Map<AttributeKey, Object> attributes) {     this(prototype, attributes, null);}", "nl": "Creates a new instance with the specified prototype but without an attribute set"}
{"code": "public void setAttributeEditor(AttributeEditor<T> newValue) {     if (attributeEditor != null) {       attributeEditor.removePropertyChangeListener(eventHandler);     }     this.attributeEditor = newValue;     if (attributeEditor != null) {       attributeEditor.addPropertyChangeListener(eventHandler);}}", "nl": "Attaches the FigureAttributeEditorHandler to the specified AttributeEditor"}
{"code": "public java.util.List<JToolBar> createToolBars(Application a, View pr) {     ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");     ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.net.Labels\");     NetView p = (NetView) pr;     DrawingEditor editor;     if (p == null) {       editor = getSharedEditor();     } else {       editor = p.getDrawingEditor();     }     LinkedList<JToolBar> list = new LinkedList<JToolBar>();     JToolBar tb;     tb = new JToolBar();     addCreationButtonsTo(tb, editor);     tb.setName(drawLabels.getString(\"window.drawToolBar.title\"));     list.add(tb);     tb = new JToolBar();     ButtonFactory.addAttributesButtonsTo(tb, editor);     tb.setName(drawLabels.getString(\"window.attributesToolBar.title\"));     list.add(tb);     tb = new JToolBar();     ButtonFactory.addAlignmentButtonsTo(tb, editor);     tb.setName(drawLabels.getString(\"window.alignmentToolBar.title\"));     list.add(tb);     return list;}", "nl": "Creates toolbars for the application"}
{"code": "public SheetEvent(JSheet source, JOptionPane optionPane, int option, Object value, Object inputValue) {     super(source);     this.pane = optionPane;     this.option = option;     this.value = value;     this.inputValue = inputValue;}", "nl": "Creates a new instance"}
{"code": "public TogglePropertiesPanelAction(Application app, View view) {     super(app, view);     setPropertyName(\"propertiesPanelVisible\");     ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.odg.Labels\");     putValue(AbstractAction.NAME, labels.getString(\"propertiesPanel\"));}", "nl": "Creates a new instance"}
{"code": "public void write(URI f, URIChooser fc) throws IOException {     new SVGOutputFormat().write(new File(f), view.getDrawing());}", "nl": "Writes the view to the specified uri"}
{"code": "public PaletteFontChooserPreviewPanel() {     initComponents();          previewLabel.setUI((LabelUI) PaletteLabelUI.createUI(previewLabel));     previewLabel.setBackground(Color.WHITE);     previewLabel.setForeground(Color.BLACK);     previewLabel.setOpaque(true);          setPreferredSize(new Dimension(100,50));     setMinimumSize(new Dimension(100,50));}", "nl": "Creates new form PaletteFontChooserPreviewPanel"}
{"code": "@Override   protected void creationFinished(Figure createdFigure) {     getView().clearSelection();     getView().addToSelection(createdFigure);     beginEdit((TextHolderFigure) createdFigure);}", "nl": "This method allows subclasses to do perform additonal user interactions after the new figure has been created"}
{"code": "public Path2D.Double toGeneralPath() {     Path2D.Double gp = new Path2D.Double();     gp.setWindingRule(windingRule);     if (size() == 0) {       gp.moveTo(0, 0);       gp.lineTo(0, 0 + 1);     } else if (size() == 1) {       Node current = get(0);       gp.moveTo(current.x[0], current.y[0]);       gp.lineTo(current.x[0], current.y[0] + 1);     } else {       Node previous;       Node current;       previous = current = get(0);       gp.moveTo(current.x[0], current.y[0]);       for (int i = 1, n = size(); i < n; i++) {         previous = current;         current = get(i);         if ((previous.mask & C2_MASK) == 0) {           if ((current.mask & C1_MASK) == 0) {             gp.lineTo(                 current.x[0], current.y[0]);           } else {             gp.quadTo(                 current.x[1], current.y[1],                 current.x[0], current.y[0]);           }         } else {           if ((current.mask & C1_MASK) == 0) {             gp.quadTo(                 previous.x[2], previous.y[2],                 current.x[0], current.y[0]);           } else {             gp.curveTo(                 previous.x[2], previous.y[2],                 current.x[1], current.y[1],                 current.x[0], current.y[0]);           }         }       }       if (isClosed) {         if (size() > 1) {           previous = get(size() - 1);           current = get(0);           if ((previous.mask & C2_MASK) == 0) {             if ((current.mask & C1_MASK) == 0) {               gp.lineTo(                   current.x[0], current.y[0]);             } else {               gp.quadTo(                   current.x[1], current.y[1],                   current.x[0], current.y[0]);             }           } else {             if ((current.mask & C1_MASK) == 0) {               gp.quadTo(                   previous.x[2], previous.y[2],                   current.x[0], current.y[0]);             } else {               gp.curveTo(                   previous.x[2], previous.y[2],                   current.x[1], current.y[1],                   current.x[0], current.y[0]);             }           }         }         gp.closePath();       }     }     return gp;}", "nl": "Converts the BezierPath into a Path2D . Double"}
{"code": "public void arcTo(double rx, double ry,       double xAxisRotation,       boolean largeArcFlag, boolean sweepFlag,       double x, double y) {           if (rx == 0 || ry == 0) {       lineTo(x, y);       return;     }          Node lastPoint = get(size() - 1);     double x0 = ((lastPoint.mask & C2_MASK) == C2_MASK) ? lastPoint.x[2] : lastPoint.x[0];     double y0 = ((lastPoint.mask & C2_MASK) == C2_MASK) ? lastPoint.y[2] : lastPoint.y[0];     if (x0 == x && y0 == y) {                     return;     }          double dx2 = (x0 - x) / 2d;     double dy2 = (y0 - y) / 2d;          double angle = Math.toRadians(xAxisRotation);     double cosAngle = Math.cos(angle);     double sinAngle = Math.sin(angle);                    double x1 = (cosAngle * dx2 + sinAngle * dy2);     double y1 = (-sinAngle * dx2 + cosAngle * dy2);          rx = Math.abs(rx);     ry = Math.abs(ry);     double Prx = rx * rx;     double Pry = ry * ry;     double Px1 = x1 * x1;     double Py1 = y1 * y1;          double radiiCheck = Px1 / Prx + Py1 / Pry;     if (radiiCheck > 1) {       rx = Math.sqrt(radiiCheck) * rx;       ry = Math.sqrt(radiiCheck) * ry;       Prx = rx * rx;       Pry = ry * ry;     }                    double sign = (largeArcFlag == sweepFlag) ? -1 : 1;     double sq = ((Prx * Pry) - (Prx * Py1) - (Pry * Px1)) / ((Prx * Py1) + (Pry * Px1));     sq = (sq < 0) ? 0 : sq;     double coef = (sign * Math.sqrt(sq));     double cx1 = coef * ((rx * y1) / ry);     double cy1 = coef * -((ry * x1) / rx);                    double sx2 = (x0 + x) / 2.0;     double sy2 = (y0 + y) / 2.0;     double cx = sx2 + (cosAngle * cx1 - sinAngle * cy1);     double cy = sy2 + (sinAngle * cx1 + cosAngle * cy1);                    double ux = (x1 - cx1) / rx;     double uy = (y1 - cy1) / ry;     double vx = (-x1 - cx1) / rx;     double vy = (-y1 - cy1) / ry;     double p, n;          n = Math.sqrt((ux * ux) + (uy * uy));     p = ux;      sign = (uy < 0) ? -1d : 1d;     double angleStart = Math.toDegrees(sign * Math.acos(p / n));          n = Math.sqrt((ux * ux + uy * uy) * (vx * vx + vy * vy));     p = ux * vx + uy * vy;     sign = (ux * vy - uy * vx < 0) ? -1d : 1d;     double angleExtent = Math.toDegrees(sign * Math.acos(p / n));     if (!sweepFlag && angleExtent > 0) {       angleExtent -= 360f;     } else if (sweepFlag && angleExtent < 0) {       angleExtent += 360f;     }     angleExtent %= 360f;     angleStart %= 360f;                    Arc2D.Double arc = new Arc2D.Double(         cx - rx, cy - ry,         rx * 2d, ry * 2d,         -angleStart, -angleExtent,         Arc2D.OPEN);          PathIterator i = arc.getPathIterator(         AffineTransform.getRotateInstance(         angle, arc.getCenterX(), arc.getCenterY()));          double[] coords = new double[6];     i.next();      while (!i.isDone()) {       int type = i.currentSegment(coords);       switch (type) {         case PathIterator.SEG_CLOSE:                      break;         case PathIterator.SEG_CUBICTO:           curveTo(coords[0], coords[1], coords[2], coords[3], coords[4], coords[5]);           break;         case PathIterator.SEG_LINETO:           lineTo(coords[0], coords[1]);           break;         case PathIterator.SEG_MOVETO:                      break;         case PathIterator.SEG_QUADTO:           quadTo(coords[0], coords[1], coords[2], coords[3]);           break;       }       i.next();}}", "nl": "Adds an elliptical arc , defined by two radii , an angle from the x - axis , a flag to choose the large arc or not , a flag to indicate if we increase or decrease the angles and the final point of the arc"}
{"code": "public void addAll(Collection<Point2D.Double> points) {     for (Point2D.Double c0 : points) {       add(new Node(0, c0, c0, c0));}}", "nl": "Convenience method for adding multiple control points with a single coordinate C0"}
{"code": "public static ArrayList<Point2D.Double> reduceNoise(java.util.List<Point2D.Double> digitizedPoints, double weight) {     java.util.ArrayList<Point2D.Double> cleaned = new ArrayList<Point2D.Double>();     if (digitizedPoints.size() > 0) {       Point2D.Double prev = digitizedPoints.get(0);       cleaned.add(prev);       double pnWeight = (1d - weight) / 2d;        for (int i = 1, n = digitizedPoints.size() - 1; i < n; i++) {         Point2D.Double cur = digitizedPoints.get(i);         Point2D.Double next = digitizedPoints.get(i + 1);         cleaned.add(new Point2D.Double(             cur.x * weight + pnWeight * prev.x + pnWeight * next.x,             cur.y * weight + pnWeight * prev.y + pnWeight * next.y));         prev = cur;       }       if (digitizedPoints.size() > 1) {         cleaned.add(digitizedPoints.get(digitizedPoints.size() - 1));       }     }     return cleaned;}", "nl": "Reduces noise from the digitized points , by applying an approximation of a gaussian filter to the data"}
{"code": "private static double v2SquaredDistanceBetween2Points(Point2D.Double a, Point2D.Double b) {     double dx = a.x - b.x;     double dy = a.y - b.y;     return (dx * dx) + (dy * dy);}", "nl": "Return the distance between two points"}
{"code": "private static double v2SquaredLength(Point2D.Double a) {     return (a.x * a.x) + (a.y * a.y);}", "nl": "Returns squared length of input vector"}
{"code": "public void next() {     if (! isDone()) {       index++;}}", "nl": "Moves the iterator to the next segment of the path forwards along the primary direction of traversal as long as there are more points in that direction"}
{"code": "public static Polygon2D.Double getConvexHullPath2D(Shape shape) {     List<Point2D.Double> points = new LinkedList<Point2D.Double>();     double[] coords = new double[6];     for (PathIterator i = shape.getPathIterator(null); !i.isDone(); i.next()) {       switch (i.currentSegment(coords)) {         case PathIterator.SEG_CLOSE:           break;         case PathIterator.SEG_MOVETO:         case PathIterator.SEG_LINETO:           points.add(new Point2D.Double(coords[0], coords[1]));           break;         case PathIterator.SEG_QUADTO:           points.add(new Point2D.Double(coords[0], coords[1]));           points.add(new Point2D.Double(coords[2], coords[3]));           break;         case PathIterator.SEG_CUBICTO:           points.add(new Point2D.Double(coords[0], coords[1]));           points.add(new Point2D.Double(coords[2], coords[3]));           points.add(new Point2D.Double(coords[4], coords[5]));           break;       }     }     Polygon2D.Double convexHull = new Polygon2D.Double();     for (Point2D.Double p : getConvexHull2D(points.toArray(new Point2D.Double[points.size()]))) {       convexHull.add(p);     }     return convexHull;}", "nl": "Computes the convex hull from a shape"}
{"code": "private static Drawing createDrawing() {               DefaultDrawing drawing = new DefaultDrawing();     drawing.addInputFormat(new SerializationInputOutputFormat());     drawing.addOutputFormat(new SerializationInputOutputFormat());     return drawing;}", "nl": "Creates a drawing with input and output formats , so that drawing figures can be copied and pasted between drawing views"}
{"code": "public FontChooserMain() {     initComponents();     add(new JFontChooser());}", "nl": "Creates new form FontChooserMain"}
{"code": "public BezierDemo() {     initComponents();     canvas = new Canvas();     canvas.setOpaque(true);     canvas.setBackground(Color.WHITE);     canvas.addMouseListener(handler);     canvas.addMouseMotionListener(handler);     add(canvas, BorderLayout.CENTER);     Point2D.Double[] d = {      };        BezierPath digi = new BezierPath();     digi.addAll(Arrays.asList(d));     Example ex = new Example();     examples.add(ex);     ex.digitized = digi;     ex.error = 2d;}", "nl": "Creates new form BezierDemo"}
{"code": "private void initComponents() {     summaryLabel = new javax.swing.JLabel();     summaryField = new javax.swing.JTextField();     setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));     setFloatable(false);     setOpaque(false);     summaryLabel.setFont(new java.awt.Font(\"Dialog\", 0, 11));     summaryLabel.setText(labels.getString(\"summary\"));      add(summaryLabel);     summaryField.setFont(new java.awt.Font(\"DialogInput\", 0, 11));     add(summaryField);}", "nl": "This method is called from within the constructor to initialize the form"}
{"code": "public void setMaximum(int m) {     progressModel.setMaximum(m);}", "nl": "Specifies the maximum value"}
{"code": "public PropertyDescriptor[] getPropertyDescriptors() {     return getPdescriptor();}", "nl": "Gets the bean ' s PropertyDescriptors"}
{"code": "public void setText(String newText) {     set(TEXT, newText);}", "nl": "Sets the text shown by the text figure"}
{"code": "public QuadTreeCompositeFigure() {     figureHandler = createFigureHandler();}", "nl": "Creates a new instance"}
{"code": "private ODGFigure createEnhancedGeometryEllipseFigure(       Rectangle2D.Double bounds, Map<AttributeKey, Object> a)       throws IOException {     ODGEllipseFigure figure = new ODGEllipseFigure();     figure.setBounds(bounds);     figure.setAttributes(a);     return figure;}", "nl": "Creates a Ellipse figure"}
{"code": "public boolean contains(Point2D.Double p) {     Rectangle2D.Double r = (Rectangle2D.Double) rectangle.clone();     double grow = AttributeKeys.getPerpendicularHitGrowth(this) + 1d;     Geom.grow(r, grow, grow);     return r.contains(p);}", "nl": "Checks if a Point2D . Double is inside the figure"}
{"code": "public void transform(AffineTransform tx) {     Point2D.Double anchor = getStartPoint();     Point2D.Double lead = getEndPoint();     setBounds(         (Point2D.Double) tx.transform(anchor, anchor),         (Point2D.Double) tx.transform(lead, lead));}", "nl": "Transforms the figure"}
{"code": "@Override   public void removeNotify(Drawing drawing) {     if (getStartConnector() != null && getEndConnector() != null) {       handleDisconnect(getStartConnector(), getEndConnector());     }                              super.removeNotify(drawing);}", "nl": "This method is invoked , when the Figure is being removed from a Drawing"}
{"code": "public AbstractDrawingViewAction(DrawingEditor editor) {     setEditor(editor);}", "nl": "Creates a view action which acts on the current view of the editor"}
{"code": "public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {     return new ChopTriangleConnector(this);}", "nl": "Returns a compatible connector"}
{"code": "private void unregisterEventHandler() {     if (editor != null) {       editor.removePropertyChangeListener(eventHandler);     }     if (activeView != null) {       activeView.removeFigureSelectionListener(eventHandler);       activeView.removePropertyChangeListener(eventHandler);       activeView = null;}}", "nl": "Unregisters the event handler from the drawing editor and the active drawing view"}
{"code": "public int getDefaultPropertyIndex() {     return defaultPropertyIndex;}", "nl": "A bean may have a default property that is the property that will mostly commonly be initially chosen for update by human ' s who are customizing the bean"}
{"code": "public SVGImageFigure() {     this(0, 0, 0, 0);}", "nl": "Creates a new instance"}
{"code": "public void setBufferedImage(BufferedImage image) {     willChange();     this.imageData = null;     this.bufferedImage = image;     changed();}", "nl": "Sets the buffered image"}
{"code": "public int getDefaultPropertyIndex() {     return defaultPropertyIndex;}", "nl": "A bean may have a default property that is the property that will mostly commonly be initially chosen for update by human ' s who are customizing the bean"}
{"code": "public void transform(AffineTransform tx) {     invalidateTransformedShape();     if (get(TRANSFORM) != null ||         (tx.getType() & (AffineTransform.TYPE_TRANSLATION)) != tx.getType()) {       if (get(TRANSFORM) == null) {         set(TRANSFORM,  (AffineTransform) tx.clone());       } else {         AffineTransform t = TRANSFORM.getClone(this);         t.preConcatenate(tx);         set(TRANSFORM,  t);       }     } else {       Point2D.Double anchor = getStartPoint();       Point2D.Double lead = getEndPoint();       setBounds(           (Point2D.Double) tx.transform(anchor, anchor),           (Point2D.Double) tx.transform(lead, lead));       if (get(FILL_GRADIENT) != null &&           !get(FILL_GRADIENT).isRelativeToFigureBounds()) {         Gradient g = FILL_GRADIENT.getClone(this);         g.transform(tx);         set(FILL_GRADIENT,  g);       }       if (get(STROKE_GRADIENT) != null &&           !get(STROKE_GRADIENT).isRelativeToFigureBounds()) {         Gradient g = STROKE_GRADIENT.getClone(this);         g.transform(tx);         set(STROKE_GRADIENT,  g);}}}", "nl": "Transforms the figure"}
{"code": "public ArrangeToolBar() {     ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");     setName(labels.getString(getID() + \".toolbar\"));}", "nl": "Creates new instance"}
{"code": "public void setText(String newText) {     set(TEXT, newText);}", "nl": "Sets the text shown by the text figure"}
{"code": "@Override   public Tool getTool(Point2D.Double p) {     if (isEditable() && contains(p)) {       TextEditingTool tool = new TextEditingTool(this);       return tool;     }     return null;}", "nl": "Returns a specialized tool for the given coordinate"}
{"code": "public EditorColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, String name) {     this(editor, key, name, null);}", "nl": "Creates a new instance"}
{"code": "public UndoRedoManager() {     getLabels();     undoAction = new UndoAction();     redoAction = new RedoAction();}", "nl": "Creates new UndoRedoManager - - - - - - - - - - - - - - Redo Action for use in a menu bar"}
{"code": "public CompositeEdit(String presentationName) {     this.presentationName = presentationName;     isSignificant = true;}", "nl": "Creates a new CompositeEdit which uses the specified presentation name"}
{"code": "public static Object invoke(Object obj, String methodName, int newValue)   throws NoSuchMethodException {     try {       Method method =  obj.getClass().getMethod(methodName,  new Class[] { Integer.TYPE} );       return method.invoke(obj, new Object[] { new Integer(newValue)});     } catch (IllegalAccessException e) {       throw new NoSuchMethodException(methodName+\" is not accessible\");     } catch (InvocationTargetException e) {              throw new InternalError(e.getMessage());}}", "nl": "Invokes the specified method if it exists"}
{"code": "public static Object invokeStatic(Class clazz, String methodName, Class[] types, Object[] values)   throws NoSuchMethodException {     try {       Method method =  clazz.getMethod(methodName,  types);       Object result = method.invoke(null, values);       return result;     } catch (IllegalAccessException e) {       throw new NoSuchMethodException(methodName+\" is not accessible\");     } catch (InvocationTargetException e) {              throw new InternalError(e.getMessage());}}", "nl": "Invokes the specified parameterless method if it exists"}
{"code": "public String getString(String key) {     try {       String value = getStringRecursive(key);              return value;     } catch (MissingResourceException e) {              if (isVerbose) {         System.err.println(\"Warning ResourceBundleUtil[\" + baseName + \"] \\\"\" + key + \"\\\" not found.\");                }       return key;}}", "nl": "Get a String from the ResourceBundle"}
{"code": "public String getToolTipTextProperty(String key) {     try {       String value = getStringRecursive(key + \".toolTipText\");       return value;     } catch (MissingResourceException e) {       if (isVerbose) {         System.err.println(\"Warning ResourceBundleUtil[\" + baseName + \"] \\\"\" + key + \".toolTipText\\\" not found.\");                }       return null;}}", "nl": "Get a String for a JavaBeans toolTipText property from the ResourceBundle"}
{"code": "public java.util.List<JToolBar> createToolBars(Application a, View pr) {     ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");     ODGView p = (ODGView) pr;     DrawingEditor editor;     if (p == null) {       editor = getSharedEditor();     } else {       editor = p.getEditor();     }     LinkedList<JToolBar> list = new LinkedList<JToolBar>();     JToolBar tb;     tb = new JToolBar();     addCreationButtonsTo(tb, editor);     tb.setName(labels.getString(\"window.drawToolBar.title\"));     list.add(tb);     tb = new JToolBar();     addAttributesButtonsTo(tb, editor);     tb.setName(labels.getString(\"window.attributesToolBar.title\"));     list.add(tb);     tb = new JToolBar();     ButtonFactory.addAlignmentButtonsTo(tb, editor);     tb.setName(labels.getString(\"window.alignmentToolBar.title\"));     list.add(tb);     return list;}", "nl": "Creates toolbars for the application"}
{"code": "public Pageable createPageable() {     return new DrawingPageable(view.getDrawing());}", "nl": "Creates a Pageable object for printing the view"}
{"code": "public int getDefaultEventIndex() {     return defaultEventIndex;}", "nl": "A bean may have a default event that is the event that will mostly commonly be used by human ' s when using the bean"}
{"code": "@Override   public int getDefaultEventIndex() {     return defaultEventIndex;}", "nl": "A bean may have a default event that is the event that will mostly commonly be used by human ' s when using the bean"}
{"code": "public EventSetDescriptor[] getEventSetDescriptors() {     return getEdescriptor();}", "nl": "Gets the bean ' s EventSetDescriptors"}
{"code": "public FillToolBar() {     ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");     setName(labels.getString(getID() + \".toolbar\"));     setDisclosureStateCount(3);}", "nl": "Creates new instance"}
{"code": "public void addAttribute(String name, int value) {     current.setAttribute(name, Integer.toString(value));}", "nl": "Adds an attribute to current element of the DOM Document"}
{"code": "public void openElement(int index) {     int count = 0;     NodeList list = current.getChildNodes();     int len = list.getLength();     for (int i=0; i < len; i++) {       Node node = list.item(i);       if ((node instanceof Element)) {         if (count++ == index) {           current = node;           return;}}}}", "nl": "Opens the element with the specified index and makes it the current node"}
{"code": "public JavaxDOMOutput(DOMFactory factory) throws IOException {     this.factory = factory;}", "nl": "Creates a new instance"}
{"code": "public void save(OutputStream out) throws IOException {     reset();     try {       if (doctype != null) {         OutputStreamWriter w = new OutputStreamWriter(out, \"UTF8\");         w.write(\"<!DOCTYPE \");         w.write(doctype);         w.write(\">\\n\");         w.flush();       }       Transformer t = TransformerFactory.newInstance().newTransformer();       t.transform(new DOMSource(document), new StreamResult(out));     } catch (TransformerException e) {       IOException error = new IOException(e.getMessage());       error.initCause(e);       throw error;}}", "nl": "Writes the contents of the DOMOutput into the specified output stream"}
{"code": "public int getElementCount(String tagName) {     int count = 0;     ArrayList list = current.getChildren();     for (int i=0; i < list.size(); i++) {       XMLElement node = (XMLElement) list.get(i);       if (node.getName().equals(tagName)) {         count++;       }     }     return count;}", "nl": "Returns the number of child elements with the specified tag name of the current element"}
{"code": "public PertPanel() {     ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");     initComponents();     undoManager = new UndoRedoManager();     editor = new DefaultDrawingEditor();     editor.add(view);          addCreationButtonsTo(creationToolbar, editor);     ButtonFactory.addAttributesButtonsTo(attributesToolbar, editor);          JPopupButton pb = new JPopupButton();     pb.setItemFont(UIManager.getFont(\"MenuItem.font\"));     labels.configureToolBarButton(pb, \"actions\");     pb.add(new DuplicateAction());     pb.addSeparator();     pb.add(new GroupAction(editor));     pb.add(new UngroupAction(editor));     pb.addSeparator();     pb.add(new BringToFrontAction(editor));     pb.add(new SendToBackAction(editor));     pb.addSeparator();     pb.add(new CutAction());     pb.add(new CopyAction());     pb.add(new PasteAction());     pb.add(new SelectAllAction());     pb.add(new SelectSameAction(editor));     pb.addSeparator();     pb.add(undoManager.getUndoAction());     pb.add(undoManager.getRedoAction());                            JMenu m = new JMenu(labels.getString(\"view.zoomFactor.text\"));     JRadioButtonMenuItem rbmi;     ButtonGroup group = new ButtonGroup();     m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.1, null)));     group.add(rbmi);     m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.25, null)));     group.add(rbmi);     m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.5, null)));     group.add(rbmi);     m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 0.75, null)));     group.add(rbmi);     m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 1.0, null)));     rbmi.setSelected(true);     group.add(rbmi);     m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 1.25, null)));     group.add(rbmi);     m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 1.5, null)));     group.add(rbmi);     m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 2, null)));     group.add(rbmi);     m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 3, null)));     group.add(rbmi);     m.add(rbmi = new JRadioButtonMenuItem(new ZoomAction(editor, 4, null)));     group.add(rbmi);     pb.add(m);     pb.setFocusable(false);     creationToolbar.addSeparator();     creationToolbar.add(pb);               DefaultDrawing drawing = new DefaultDrawing();     view.setDrawing(drawing);     drawing.addUndoableEditListener(undoManager);}", "nl": "Creates new instance"}
{"code": "public ClientHttpRequest(String urlString) throws IOException {   this(new URL(urlString));}", "nl": "Creates a new multipart POST HTTP request for a specified URL string to IOException"}
{"code": "@Override public boolean canConnect(Connector start, Connector end) {     if ((start.getOwner() instanceof TaskFigure)     && (end.getOwner() instanceof TaskFigure)) {              TaskFigure sf = (TaskFigure) start.getOwner();       TaskFigure ef = (TaskFigure) end.getOwner();                     if (ef.getPredecessors().contains(sf)) {         return false;       }                     return ! sf.isDependentOf(ef);     }          return false;}", "nl": "Checks if two figures can be connected"}
{"code": "public InputStream post(Object[] parameters) throws IOException {   postCookies();   setParameters(parameters);   return doPost();}", "nl": "posts the requests to the server , with all the cookies and parameters that were added before , and with parameters that are passed in the argument parameters @ return input stream with the server response IOException # setParameters"}
{"code": "private boolean writePolyAttributes(IXMLElement elem, SVGFigure f, Shape shape) {     AffineTransform t = TRANSFORM.getClone(f);     if (t == null) {       t = drawingTransform;     } else {       t.preConcatenate(drawingTransform);     }     StringBuilder buf = new StringBuilder();     float[] coords = new float[6];     Path2D.Double path = new Path2D.Double();     for (PathIterator i = shape.getPathIterator(t, 1.5f);         !i.isDone(); i.next()) {       switch (i.currentSegment(coords)) {         case PathIterator.SEG_MOVETO:           if (buf.length() != 0) {             throw new IllegalArgumentException(\"Illegal shape \" + shape);           }           if (buf.length() != 0) {             buf.append(',');           }           buf.append((int) coords[0]);           buf.append(',');           buf.append((int) coords[1]);           path.moveTo(coords[0], coords[1]);           break;         case PathIterator.SEG_LINETO:           if (buf.length() != 0) {             buf.append(',');           }           buf.append((int) coords[0]);           buf.append(',');           buf.append((int) coords[1]);           path.lineTo(coords[0], coords[1]);           break;         case PathIterator.SEG_CLOSE:           path.closePath();           break;         default:           throw new InternalError(\"Illegal segment type \" + i.currentSegment(coords));       }     }     elem.setAttribute(\"shape\", \"poly\");     elem.setAttribute(\"coords\", buf.toString());     writeHrefAttribute(elem, f);     return path.intersects(new Rectangle2D.Float(bounds.x, bounds.y, bounds.width, bounds.height));}", "nl": "Writes the shape , coords , href , nohref Attribute for the specified figure and shape"}
{"code": "public EventSetDescriptor[] getEventSetDescriptors() {     return getEdescriptor();}", "nl": "Gets the bean ' s EventSetDescriptors"}
{"code": "private void readDrawingPagePropertiesElement(IXMLElement elem, HashMap<AttributeKey, Object> a) throws IOException {     if (DEBUG) {       System.out.println(\"ODGStylesReader unsupported <\" + elem.getName() + \"> element.\");}}", "nl": "Reads a & lt ; style : drawing - page - properties & gt ; element from the specified XML element"}
{"code": "public Matcher(Document document, String findString) {     this(document, findString, true, MatchType.CONTAINS);}", "nl": "Creates a new instance of Matcher which performs a case sensitive search"}
{"code": "private void initComponents() {     scrollPane = new javax.swing.JScrollPane();     view = new org.jhotdraw.draw.DefaultDrawingView();     setLayout(new java.awt.BorderLayout());     scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);     scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);     scrollPane.setViewportView(view);     add(scrollPane, java.awt.BorderLayout.CENTER);}", "nl": "This method is called from within the constructor to initialize the form"}
{"code": "public void setAppendsDotZero(boolean newValue) {     appendsDotZero = newValue;}", "nl": "Specifies whether"}
{"code": "public LFWriter(Writer out) {     super(out);     lineSeparator = (String) System.getProperty(\"line.separator\");}", "nl": "Create a new line - numbering writer"}
{"code": "private void readFontAttributes(IXMLElement elem, Map<AttributeKey, Object> a)       throws IOException {     String value;     double doubleValue;                                                            value = readInheritAttribute(elem, \"font-family\", \"Dialog\");     String[] familyNames = toQuotedAndCommaSeparatedArray(value);     Font font = null;          for (int i = 0; i < familyNames.length; i++) {       try {         font = (Font) fontFormatter.stringToValue(familyNames[i]);         break;       } catch (ParseException e) {       }     }     if (font == null) {              if (familyNames.length > 0) {         fontFormatter.setAllowsUnknownFont(true);         try {           font = (Font) fontFormatter.stringToValue(familyNames[0]);         } catch (ParseException e) {         }         fontFormatter.setAllowsUnknownFont(false);       }     }     if (font == null) {              font = new Font(\"Dialog\", Font.PLAIN, 12);     }     FONT_FACE.put(a, font);                                                       doubleValue = readInheritFontSizeAttribute(elem, \"font-size\", \"medium\");     FONT_SIZE.put(a, doubleValue);                                                  value = readInheritAttribute(elem, \"font-style\", \"normal\");     FONT_ITALIC.put(a, value.equals(\"italic\"));                                                   value = readInheritAttribute(elem, \"font-variant\", \"normal\");                                                                      value = readInheritAttribute(elem, \"font-weight\", \"normal\");     FONT_BOLD.put(a, value.equals(\"bold\") || value.equals(\"bolder\") ||         value.equals(\"400\") || value.equals(\"500\") || value.equals(\"600\") ||         value.equals(\"700\") || value.equals(\"800\") || value.equals(\"900\"));                                                  value = readAttribute(elem, \"text-decoration\", \"none\");     FONT_UNDERLINE.put(a, value.equals(\"underline\"));}", "nl": "Reads font attributes as listed in http : www . w3 . org TR SVGMobile12 feature . html # Font"}
{"code": "private Figure readPolylineElement(IXMLElement elem)       throws IOException {     HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();     readCoreAttributes(elem, a);     readTransformAttribute(elem, a);     readOpacityAttribute(elem, a);     readLineAttributes(elem, a);     Point2D.Double[] points = toPoints(elem, readAttribute(elem, \"points\", \"\"));     Figure figure = factory.createPolyline(points, a);     elementObjects.put(elem, figure);     return figure;}", "nl": "Reads an SVG polyline element"}
{"code": "private Figure readAElement(IXMLElement elem)       throws IOException {     HashMap<AttributeKey, Object> a = new HashMap<AttributeKey, Object>();     readCoreAttributes(elem, a);     CompositeFigure g = factory.createG(a);     String href = readAttribute(elem, \"xlink:href\", null);     if (href == null) {       href = readAttribute(elem, \"href\", null);     }     String target = readAttribute(elem, \"target\", null);     if (DEBUG) {       System.out.println(\"SVGInputFormat.readAElement href=\" + href);     }     for (IXMLElement node : elem.getChildren()) {       if (node instanceof IXMLElement) {         IXMLElement child = (IXMLElement) node;         Figure childFigure = readElement(child);                  if (readAttribute(child, \"visibility\", \"visible\").equals(\"visible\") &&             !readAttribute(child, \"display\", \"inline\").equals(\"none\")) {           if (childFigure != null) {             g.basicAdd(childFigure);           }         }         if (childFigure != null) {           childFigure.set(LINK, href);           childFigure.set(LINK_TARGET, target);         } else {           if (DEBUG) {             System.out.println(\"SVGInputFormat <a> has no child figure\");           }         }       }     }     return (g.getChildCount() == 1) ? g.getChild(0) : g;}", "nl": "Reads an SVG a element"}
{"code": "public void read(InputStream in, Drawing drawing, boolean replace) throws IOException {     long start = System.currentTimeMillis();     this.figures = new LinkedList<Figure>();     IXMLParser parser;     try {       parser = XMLParserFactory.createDefaultXMLParser();     } catch (Exception ex) {       InternalError e = new InternalError(\"Unable to instantiate NanoXML Parser\");       e.initCause(ex);       throw e;     }     System.out.println(\"SVGInputFormat parser created \" + (System.currentTimeMillis() - start));     IXMLReader reader = new StdXMLReader(in);     parser.setReader(reader);     System.out.println(\"SVGInputFormat reader created \" + (System.currentTimeMillis() - start));     try {       document = (IXMLElement) parser.parse();     } catch (XMLException ex) {       IOException e = new IOException(ex.getMessage());       e.initCause(ex);       throw e;     }     System.out.println(\"SVGInputFormat document created \" + (System.currentTimeMillis() - start));               IXMLElement svg = document;     Stack<Iterator<IXMLElement>> stack = new Stack<Iterator<IXMLElement>>();     LinkedList<IXMLElement> ll = new LinkedList<IXMLElement>();     ll.add(document);     stack.push(ll.iterator());     while (!stack.empty() && stack.peek().hasNext()) {       Iterator<IXMLElement> iter = stack.peek();       IXMLElement node = iter.next();       Iterator<IXMLElement> children = (node.getChildren() == null) ? null : node.getChildren().iterator();       if (!iter.hasNext()) {         stack.pop();       }       if (children != null && children.hasNext()) {         stack.push(children);       }       if (node.getName() != null &&           node.getName().equals(\"svg\") &&           (node.getNamespace() == null ||           node.getNamespace().equals(SVG_NAMESPACE))) {         svg = node;         break;       }     }      if (svg.getName() == null ||         !svg.getName().equals(\"svg\") ||         (svg.getNamespace() != null &&         !svg.getNamespace().equals(SVG_NAMESPACE))) {       throw new IOException(\"'svg' element expected: \" + svg.getName());     }               initStorageContext(document);     flattenStyles(svg);          readElement(svg);     long end = System.currentTimeMillis();     if (DEBUG) {       System.out.println(\"SVGInputFormat elapsed:\" + (end - start));     }          if (replace) {       drawing.removeAllChildren();     }     drawing.addAll(figures);      if (replace) {       Viewport viewport = viewportStack.firstElement();       drawing.set(VIEWPORT_FILL, VIEWPORT_FILL.get(viewport.attributes));       drawing.set(VIEWPORT_FILL_OPACITY, VIEWPORT_FILL_OPACITY.get(viewport.attributes));       drawing.set(VIEWPORT_HEIGHT, VIEWPORT_HEIGHT.get(viewport.attributes));       drawing.set(VIEWPORT_WIDTH, VIEWPORT_WIDTH.get(viewport.attributes));     }          document.dispose();     identifiedElements.clear();     elementObjects.clear();     viewportStack.clear();     styleManager.clear();     document = null;     identifiedElements = null;     elementObjects = null;     viewportStack = null;     styleManager = null;}", "nl": "This is the main reading method"}
{"code": "private void readLineAttributes(IXMLElement elem, HashMap<AttributeKey, Object> a)       throws IOException {     Object objectValue;     String value;     double doubleValue;                                                                                                                                                                          objectValue = toPaint(elem, readInheritColorAttribute(elem, \"fill\", \"none\"));     if (objectValue instanceof Color) {       FILL_COLOR.put(a, (Color) objectValue);     } else if (objectValue instanceof Gradient) {       FILL_GRADIENT.putClone(a, (Gradient) objectValue);     } else if (objectValue == null) {       FILL_COLOR.put(a, null);     } else {       FILL_COLOR.put(a, null);       if (DEBUG) {         System.out.println(\"SVGInputFormat not implemented  fill=\" + objectValue);       }     }                                                  objectValue = readInheritAttribute(elem, \"fill-opacity\", \"1\");     FILL_OPACITY.put(a, toDouble(elem, (String) objectValue, 1d, 0d, 1d));                                                  value = readInheritAttribute(elem, \"fill-rule\", \"nonzero\");     WINDING_RULE.put(a, SVG_FILL_RULES.get(value));                                                       objectValue = toPaint(elem, readInheritColorAttribute(elem, \"stroke\", \"black\"));     if (objectValue instanceof Color) {       STROKE_COLOR.put(a, (Color) objectValue);     } else if (objectValue instanceof Gradient) {       STROKE_GRADIENT.putClone(a, (Gradient) objectValue);     } else if (objectValue == null) {       STROKE_COLOR.put(a, null);     } else {       STROKE_COLOR.put(a, null);       if (DEBUG) {         System.out.println(\"SVGInputFormat not implemented  stroke=\" + objectValue);       }     }                                                  value = readInheritAttribute(elem, \"stroke-dasharray\", \"none\");     if (!value.equals(\"none\")) {       String[] values = toWSOrCommaSeparatedArray(value);       double[] dashes = new double[values.length];       for (int i = 0; i < values.length; i++) {         dashes[i] = toNumber(elem, values[i]);       }       STROKE_DASHES.put(a, dashes);     }                                                  doubleValue = toNumber(elem, readInheritAttribute(elem, \"stroke-dashoffset\", \"0\"));     STROKE_DASH_PHASE.put(a, doubleValue);     IS_STROKE_DASH_FACTOR.put(a, false);                                                  value = readInheritAttribute(elem, \"stroke-linecap\", \"butt\");     STROKE_CAP.put(a, SVG_STROKE_LINECAPS.get(value));                                                   value = readInheritAttribute(elem, \"stroke-linejoin\", \"miter\");     STROKE_JOIN.put(a, SVG_STROKE_LINEJOINS.get(value));                                                  doubleValue = toDouble(elem, readInheritAttribute(elem, \"stroke-miterlimit\", \"4\"), 4d, 1d, Double.MAX_VALUE);     STROKE_MITER_LIMIT.put(a, doubleValue);     IS_STROKE_MITER_LIMIT_FACTOR.put(a, false);                                                  objectValue = readInheritAttribute(elem, \"stroke-opacity\", \"1\");     STROKE_OPACITY.put(a, toDouble(elem, (String) objectValue, 1d, 0d, 1d));                                                  doubleValue = toNumber(elem, readInheritAttribute(elem, \"stroke-width\", \"1\"));     STROKE_WIDTH.put(a, doubleValue);}", "nl": "Reads line and polyline attributes"}
{"code": "private Figure readSwitchElement(IXMLElement elem)       throws IOException {     for (IXMLElement node : elem.getChildren()) {       if (node instanceof IXMLElement) {         IXMLElement child = (IXMLElement) node;         String[] requiredFeatures = toWSOrCommaSeparatedArray(readAttribute(child, \"requiredFeatures\", \"\"));         String[] requiredExtensions = toWSOrCommaSeparatedArray(readAttribute(child, \"requiredExtensions\", \"\"));         String[] systemLanguage = toWSOrCommaSeparatedArray(readAttribute(child, \"systemLanguage\", \"\"));         String[] requiredFormats = toWSOrCommaSeparatedArray(readAttribute(child, \"requiredFormats\", \"\"));         String[] requiredFonts = toWSOrCommaSeparatedArray(readAttribute(child, \"requiredFonts\", \"\"));         boolean isMatch;         isMatch = supportedFeatures.containsAll(Arrays.asList(requiredFeatures)) &&             requiredExtensions.length == 0 &&             requiredFormats.length == 0 &&             requiredFonts.length == 0;         if (isMatch && systemLanguage.length > 0) {           isMatch = false;           Locale locale = LocaleUtil.getDefault();           for (String lng : systemLanguage) {             int p = lng.indexOf('-');             if (p == -1) {               if (locale.getLanguage().equals(lng)) {                 isMatch = true;                 break;               }             } else {               if (locale.getLanguage().equals(lng.substring(0, p)) &&                   locale.getCountry().toLowerCase().equals(lng.substring(p + 1))) {                 isMatch = true;                 break;               }             }           }         }         if (isMatch) {           Figure figure = readElement(child);           if (readAttribute(child, \"visibility\", \"visible\").equals(\"visible\") &&               !readAttribute(child, \"display\", \"inline\").equals(\"none\")) {             return figure;           } else {             return null;           }         }       }     }     return null;}", "nl": "Evaluates an SVG switch element"}
{"code": "public static String toPath(BezierPath[] paths) {     StringBuilder buf = new StringBuilder();     for (int j = 0; j < paths.length; j++) {       BezierPath path = paths[j];       if (path.size() == 0) {                } else if (path.size() == 1) {         BezierPath.Node current = path.get(0);         buf.append(\"M \");         buf.append(toNumber(current.x[0]));         buf.append(' ');         buf.append(toNumber(current.y[0]));                  buf.append(toNumber(current.x[0]));         buf.append(' ');         buf.append(toNumber(current.y[0] + 1));       } else {         BezierPath.Node previous;         BezierPath.Node current;         previous = current = path.get(0);         buf.append(\"M \");         buf.append(toNumber(current.x[0]));         buf.append(' ');         buf.append(toNumber(current.y[0]));         char nextCommand = 'L';         for (int i = 1, n = path.size(); i < n; i++) {           previous = current;           current = path.get(i);           if ((previous.mask & BezierPath.C2_MASK) == 0) {             if ((current.mask & BezierPath.C1_MASK) == 0) {               if (nextCommand != 'L') {                 buf.append(\" L \");                 nextCommand = 'L';               } else {                 buf.append(' ');               }               buf.append(toNumber(current.x[0]));               buf.append(' ');               buf.append(toNumber(current.y[0]));             } else {               if (nextCommand != 'Q') {                 buf.append(\" Q \");                 nextCommand = 'Q';               } else {                 buf.append(' ');               }               buf.append(toNumber(current.x[1]));               buf.append(' ');               buf.append(toNumber(current.y[1]));               buf.append(' ');               buf.append(toNumber(current.x[0]));               buf.append(' ');               buf.append(toNumber(current.y[0]));             }           } else {             if ((current.mask & BezierPath.C1_MASK) == 0) {               if (nextCommand != 'Q') {                 buf.append(\" Q \");                 nextCommand = 'Q';               } else {                 buf.append(' ');               }               buf.append(toNumber(previous.x[2]));               buf.append(' ');               buf.append(toNumber(previous.y[2]));               buf.append(' ');               buf.append(toNumber(current.x[0]));               buf.append(' ');               buf.append(toNumber(current.y[0]));             } else {               if (nextCommand != 'C') {                 buf.append(\" C \");                 nextCommand = 'C';               } else {                 buf.append(' ');               }               buf.append(toNumber(previous.x[2]));               buf.append(' ');               buf.append(toNumber(previous.y[2]));               buf.append(' ');               buf.append(toNumber(current.x[1]));               buf.append(' ');               buf.append(toNumber(current.y[1]));               buf.append(' ');               buf.append(toNumber(current.x[0]));               buf.append(' ');               buf.append(toNumber(current.y[0]));             }           }         }         if (path.isClosed()) {           if (path.size() > 1) {             previous = path.get(path.size() - 1);             current = path.get(0);             if ((previous.mask & BezierPath.C2_MASK) == 0) {               if ((current.mask & BezierPath.C1_MASK) == 0) {                 if (nextCommand != 'L') {                   buf.append(\" L \");                   nextCommand = 'L';                 } else {                   buf.append(' ');                 }                 buf.append(toNumber(current.x[0]));                 buf.append(' ');                 buf.append(toNumber(current.y[0]));               } else {                 if (nextCommand != 'Q') {                   buf.append(\" Q \");                   nextCommand = 'Q';                 } else {                   buf.append(' ');                 }                 buf.append(toNumber(current.x[1]));                 buf.append(' ');                 buf.append(toNumber(current.y[1]));                 buf.append(' ');                 buf.append(toNumber(current.x[0]));                 buf.append(' ');                 buf.append(toNumber(current.y[0]));               }             } else {               if ((current.mask & BezierPath.C1_MASK) == 0) {                 if (nextCommand != 'Q') {                   buf.append(\" Q \");                   nextCommand = 'Q';                 } else {                   buf.append(' ');                 }                 buf.append(toNumber(previous.x[2]));                 buf.append(' ');                 buf.append(toNumber(previous.y[2]));                 buf.append(' ');                 buf.append(toNumber(current.x[0]));                 buf.append(' ');                 buf.append(toNumber(current.y[0]));               } else {                 if (nextCommand != 'C') {                   buf.append(\" C \");                   nextCommand = 'C';                 } else {                   buf.append(' ');                 }                 buf.append(toNumber(previous.x[2]));                 buf.append(' ');                 buf.append(toNumber(previous.y[2]));                 buf.append(' ');                 buf.append(toNumber(current.x[1]));                 buf.append(' ');                 buf.append(toNumber(current.y[1]));                 buf.append(' ');                 buf.append(toNumber(current.x[0]));                 buf.append(' ');                 buf.append(toNumber(current.y[0]));               }             }           }           buf.append(\" Z\");           nextCommand = '\\0';         }       }     }     return buf.toString();}", "nl": "Returns a value as a SVG Path attribute"}
{"code": "private void setDrawing(Drawing d) {     drawingComponent.setDrawing(d);}", "nl": "Sets the drawing on the drawing panel"}
{"code": "@Override   public List<JToolBar> createToolBars(Application app, View p) {     LinkedList<JToolBar> list = new LinkedList<JToolBar>();     return list;}", "nl": "Overriden to create no toolbars"}
{"code": "public BeanDescriptor getBeanDescriptor() {     return getBdescriptor();}", "nl": "Gets the bean ' s BeanDescriptors"}
{"code": "public Pageable createPageable() {     return new DrawingPageable(svgPanel.getDrawing());}", "nl": "Creates a Pageable object for printing the View"}
{"code": "public static JFreeChart createVerticalBarChart(String title, String categoryAxisLabel,                           String valueAxisLabel, CategoryDataset data,                           boolean legend) {      JFreeChart chart = null;      try {       Axis categoryAxis = new HorizontalCategoryAxis(categoryAxisLabel);       Axis valueAxis = new VerticalNumberAxis(valueAxisLabel);       Plot plot = new VerticalBarPlot(categoryAxis, valueAxis);       chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);     }   catch (AxisNotCompatibleException e) {            System.err.println(\"ChartFactory.createVerticalBarChart(...) : axis not compatible.\");     }   catch (PlotNotCompatibleException e) {            System.err.println(\"ChartFactory.createVerticalBarChart(...) : plot not compatible.\");     }      return chart;}", "nl": "Creates a vertical bar chart with default settings"}
{"code": "public void setTrailGapPercent(double percent) {   if (this.trailGapPercent!=percent) {       trailGapPercent = Math.min(percent, MAX_TRAIL_GAP_PERCENT);     notifyListeners(new PlotChangeEvent(this));}}", "nl": "Sets the gap after the last bar on the chart , and notifies registered listeners that the plot has been modified"}
{"code": "public double getTrailGapPercent() {   return trailGapPercent;}", "nl": "Returns the gap following the last bar on the chart , as a percentage of the available drawing space"}
{"code": "public boolean isTickLabelsVisible() {   return tickLabelsVisible;}", "nl": "Returns a flag indicating whether or not the tick labels are visible"}
{"code": "public void removeChangeListener(AxisChangeListener listener) {   listeners.remove(listener);}", "nl": "Deregisters an object for notification of changes to the axis"}
{"code": "public Font getTickLabelFont() {   return tickLabelFont;}", "nl": "Returns the font used for the tick labels"}
{"code": "public Date getMaximumDate() {   return this.maximumDate;}", "nl": "Returns the latest date visible on the axis"}
{"code": "public Date calculateHighestVisibleTickValue(DateUnit unit) {   return this.previousStandardDate(maximumDate, unit.getField(), unit.getCount());}", "nl": "Calculates and returns the value of the highest visible tick on the axis"}
{"code": "public void setHorizontalAlignment(int alignment) {     if (this.horizontalAlignment!=alignment) {       this.horizontalAlignment = alignment;       notifyListeners(new TitleChangeEvent(this));}}", "nl": "Sets the horizontal alignment for the title , and notifies any registered listeners of the change"}
{"code": "public void draw(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {      if (this.label!=null) {     g2.setFont(labelFont);     g2.setPaint(labelPaint);     Rectangle2D labelBounds = labelFont.getStringBounds(label, g2.getFontRenderContext());     if (labelDrawnVertical) {     double xx = drawArea.getX()+labelInsets.left+labelBounds.getHeight();     double yy = plotArea.getY()+plotArea.getHeight()/2+(labelBounds.getWidth()/2);     drawVerticalString(label, g2, (float)xx, (float)yy);     }     else {     double xx = drawArea.getX()+labelInsets.left;     double yy = drawArea.getY()+drawArea.getHeight()/2-labelBounds.getHeight()/2;     g2.drawString(label, (float)xx, (float)yy);     }   }      this.refreshTicks(g2, drawArea, plotArea);   double xx = plotArea.getX();   g2.setFont(tickLabelFont);   Iterator iterator = ticks.iterator();   while (iterator.hasNext()) {     Tick tick = (Tick)iterator.next();     float yy = (float)this.translatedValue(tick.getNumericalValue(), plotArea);     if (tickLabelsVisible) {     g2.setPaint(this.tickLabelPaint);     g2.drawString(tick.getText(), tick.getX(), tick.getY());     }     if (tickMarksVisible) {     g2.setStroke(this.getTickMarkStroke());     Line2D mark = new Line2D.Double(plotArea.getX()-2, yy,             plotArea.getX()+2, yy);     g2.draw(mark);     }     if (showGridLines) {     g2.setStroke(gridStroke);     g2.setPaint(gridPaint);     Line2D gridline = new Line2D.Double(xx, yy,               plotArea.getMaxX(), yy);     g2.draw(gridline);}}}", "nl": "Draws the plot on a Java 2D graphics device"}
{"code": "public Rectangle2D reserveAxisArea(Graphics2D g2, Plot plot, Rectangle2D drawArea,              double reservedHeight) {      double labelWidth = 0.0;   if (label!=null) {     Rectangle2D labelBounds = labelFont.getStringBounds(label, g2.getFontRenderContext());     labelWidth = labelInsets.left+labelInsets.right;     if (this.labelDrawnVertical) {     labelWidth = labelWidth + labelBounds.getHeight();       }     else {     labelWidth = labelWidth + labelBounds.getWidth();     }   }      double tickLabelWidth = tickLabelInsets.left+tickLabelInsets.right;   if (tickLabelsVisible) {     Rectangle2D approximatePlotArea = new Rectangle2D.Double(drawArea.getX(), drawArea.getY(),                    drawArea.getWidth(),                    drawArea.getHeight()-reservedHeight);     this.refreshTicks(g2, drawArea, approximatePlotArea);     tickLabelWidth = tickLabelWidth+getMaxTickLabelWidth(g2, approximatePlotArea);   }   return new Rectangle2D.Double(drawArea.getX(), drawArea.getY(), labelWidth+tickLabelWidth,             drawArea.getHeight()-reservedHeight);}", "nl": "Returns area in which the axis will be displayed"}
{"code": "public void draw(Graphics2D g2, Rectangle2D drawArea) {          if (insets!=null) {       drawArea = new Rectangle2D.Double(drawArea.getX()+insets.left,                         drawArea.getY()+insets.top,                         drawArea.getWidth()-insets.left-insets.right,                         drawArea.getHeight()-insets.top-insets.bottom);     }          HorizontalAxis ha = getHorizontalAxis();     VerticalAxis va = getVerticalAxis();     double hAxisAreaHeight = ha.reserveHeight(g2, this, drawArea);     Rectangle2D vAxisArea = va.reserveAxisArea(g2, this, drawArea, hAxisAreaHeight);     Rectangle2D plotArea = new Rectangle2D.Double(drawArea.getX()+vAxisArea.getWidth(),                             drawArea.getY(),                             drawArea.getWidth()-vAxisArea.getWidth(),                             drawArea.getHeight()-hAxisAreaHeight);          drawOutlineAndBackground(g2, plotArea);     getDomainAxis().draw(g2, drawArea, plotArea);     getRangeAxis().draw(g2, drawArea, plotArea);          IntervalXYDataset data = (IntervalXYDataset)chart.getDataset();     if (data!=null) {       Shape savedClip = g2.getClip();       g2.clip(plotArea);       double translatedVerticalZero = getRangeAxis().translatedValue(Plot.ZERO, plotArea);       int seriesCount = data.getSeriesCount();       for (int series = 0; series<seriesCount; series++) {         int itemCount = data.getItemCount(series);         for (int item = 0; item<itemCount; item++) {           drawBar(g2, plotArea, data, series, item, getDomainAxis(), getRangeAxis(),               translatedVerticalZero);         }       }       g2.setClip(savedClip);}}", "nl": "Draws the plot on a Java 2D graphics device"}
{"code": "public double reserveWidth(Graphics2D g2, Plot plot, Rectangle2D drawArea) {      Rectangle2D labelBounds = labelFont.getStringBounds(label, g2.getFontRenderContext());   double labelWidth = this.labelInsets.left+labelInsets.right;   if (this.verticalLabel) {     labelWidth = labelWidth + labelBounds.getHeight();     }   else {     labelWidth = labelWidth + labelBounds.getWidth();   }      double tickLabelWidth = tickLabelInsets.left+tickLabelInsets.right;   if (tickLabelsVisible) {     this.refreshTicks(g2, drawArea, drawArea);     tickLabelWidth = tickLabelWidth+getMaxTickLabelWidth(g2, drawArea);   }   return labelWidth+tickLabelWidth;}", "nl": "Estimates the height required for the axis , given a specific drawing area , without any information about the width of the vertical axis"}
{"code": "public boolean isCompatibleVerticalAxis(Axis axis) {   if (axis instanceof VerticalNumberAxis) {     return true;   }   else return false;}", "nl": "Checks the compatibility of a vertical axis , returning true if the axis is compatible with the plot , and false otherwise"}
{"code": "public String getPlotType() {   return \"XY Plot\";}", "nl": "Returns the plot type as a string"}
{"code": "public boolean isCompatibleHorizontalAxis(Axis axis) {   if (axis instanceof CategoryAxis) {     return true;   }   else return false;}", "nl": "Checks the compatibility of a horizontal axis , returning true if the axis is compatible with the plot , and false otherwise"}
{"code": "public ValueAxis getVerticalValueAxis() {   return (ValueAxis)verticalAxis;}", "nl": "A convenience method that returns a reference to the vertical axis cast as a ValueAxis"}
{"code": "public Paint getGridPaint() {   return gridPaint;}", "nl": "Returns the Paint used to color the grid lines"}
{"code": "public VerticalNumberAxis3D(String label, Font labelFont,           Number minimumAxisValue, Number maximumAxisValue) {   this(label, labelFont, Color.black, new Insets(4, 4, 4, 4), true,      true, new Font(\"Arial\", Font.PLAIN, 10), Color.black, new Insets(2, 1, 2, 1),      true, new BasicStroke(1), false, true, new Double(0.00001),      minimumAxisValue, maximumAxisValue,      true, NumberAxis.DEFAULT_TICK_UNIT,              false, new BasicStroke(1), Color.lightGray, DEFAULT_EFFECT_3D);}", "nl": "Standard constructor : returns a VerticalValueAxis with some default attributes"}
{"code": "public String getTitle() {   return this.title;}", "nl": "Returns the title text"}
{"code": "public Font getFont() {     return this.font;}", "nl": "Returns the current title font"}
{"code": "public TextTitle(String text, Font font, Paint paint) {     this(text, font, paint, TOP, CENTER, MIDDLE, new Insets(2, 2, 2, 2));}", "nl": "Default constructor - builds a TextTitle with some default attributes"}
{"code": "public StandardXYItemRenderer(int type) {     if (type==SHAPES) this.plotShapes=true;     if (type==LINES) this.plotLines=true;     if (type==SHAPES_AND_LINES) {       this.plotShapes = true;       this.plotLines = true;}}", "nl": "Standard constructor"}
{"code": "public Number getXValue(int series, int item) {     return new Double(-10.0+translate+(item*0.2));}", "nl": "Returns the x - value for the specified series and item"}
{"code": "public HorizontalDateAxis(String label) {   super(label);   this.verticalTickLabels = false;}", "nl": "incoherencetype"}
{"code": "public double translatedValue(Number dataValue, Rectangle2D plotArea) {   double value = dataValue.doubleValue();   double axisMin = (double)minimumDate.getTime();   double axisMax = (double)maximumDate.getTime();   double plotX = plotArea.getX();   double plotMaxX = plotArea.getMaxX();   return plotX + ((value - axisMin)/(axisMax - axisMin)) * (plotMaxX - plotX);}", "nl": "Translates the data value to the display coordinates of the chart"}
{"code": "public ValueAxis getVerticalValueAxis() {   return (ValueAxis)verticalAxis;}", "nl": "A convenience method that returns a reference to the vertical axis cast as a VerticalNumberAxis"}
{"code": "public java.util.List getCategories() {   return getDataset().getCategories();}", "nl": "A convenience method that returns a list of the categories in the data source"}
{"code": "public void setTickSize(double newSize) {   tickSize = newSize;}", "nl": "Sets the width of the open close tick"}
{"code": "public DateUnit(int field, int count) {   this.field = field;   this.count = count;}", "nl": "Builds a DateUnit"}
{"code": "public void draw(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {       g2.setFont(labelFont);   g2.setPaint(labelPaint);   FontRenderContext frc = g2.getFontRenderContext();   Rectangle2D labelBounds = labelFont.getStringBounds(label, frc);   LineMetrics lm = labelFont.getLineMetrics(label, frc);   float labelx = (float)(plotArea.getX()+plotArea.getWidth()/2-labelBounds.getWidth()/2);   float labely = (float)(drawArea.getMaxY()-labelInsets.bottom-lm.getDescent()-lm.getLeading());   g2.drawString(label, labelx, labely);       this.refreshTicks(g2, drawArea, plotArea);    float maxY = (float)plotArea.getMaxY();   g2.setFont(getTickLabelFont());    Iterator iterator = ticks.iterator();   while (iterator.hasNext()) {     Tick tick = (Tick)iterator.next();     float xx = (float)this.translatedValue(tick.getNumericalValue(), plotArea);     if (tickLabelsVisible) {     g2.setPaint(this.tickLabelPaint);     if (this.verticalTickLabels) {       drawVerticalString(tick.getText(), g2, tick.getX(), tick.getY());     }     else {       g2.drawString(tick.getText(), tick.getX(), tick.getY());     }     }     if (tickMarksVisible) {     g2.setStroke(this.getTickMarkStroke());     Line2D mark = new Line2D.Float(xx, maxY-2, xx, maxY+2);     g2.draw(mark);     }     if (showGridLines) {     g2.setStroke(gridStroke);     g2.setPaint(gridPaint);     Line2D gridline = new Line2D.Float(xx, (float)plotArea.getMaxY(), xx,                (float)plotArea.getMinY());     g2.draw(gridline);}}}", "nl": "Draws the plot on a Java 2D graphics device"}
{"code": "public boolean getVerticalCategoryLabels() {   return this.verticalCategoryLabels;}", "nl": "Returns a flag indicating whether the category labels are drawn ' vertically '"}
{"code": "private void displayLineChart() {      if (lineChartFrame==null) {               String title = \"Line Chart\";       String categoryAxisLabel = \"Categories\";       String valueAxisLabel = \"Values\";       CategoryDataset data = createCategoryDataset();       JFreeChart chart = ChartFactory.createLineChart(title, categoryAxisLabel, valueAxisLabel,                             data, true);               chart.setChartBackgroundPaint(new GradientPaint(0, 0, Color.white,0, 1000, Color.yellow));               lineChartFrame = new JFreeChartFrame(\"Line Chart\", chart);       lineChartFrame.pack();       SwingRefinery.positionFrameRandomly(lineChartFrame);       lineChartFrame.show();      }     else {       lineChartFrame.show();       lineChartFrame.requestFocus();}}", "nl": "Displays a line chart in its own frame"}
{"code": "private void displayDynamicXYChart() {      if (dynamicXYChartFrame==null) {        SampleXYDataset data = new SampleXYDataset();       JFreeChart chart = ChartFactory.createXYChart(\"Dynamic XY Chart\", \"X\", \"Y\", data, true);       SampleXYDatasetThread update = new SampleXYDatasetThread(data);       dynamicXYChartFrame = new JFreeChartFrame(\"Dynamic Chart\", chart);       dynamicXYChartFrame.pack();       SwingRefinery.positionFrameRandomly(dynamicXYChartFrame);       dynamicXYChartFrame.show();       Thread thread = new Thread(update);       thread.start();}}", "nl": "Displays an XY chart that is periodically updated by a background thread"}
{"code": "private void displayXYPlot() {      if (xyPlotFrame==null) {               String title = \"XY Plot\";       String xAxisLabel = \"X Axis\";       String yAxisLabel = \"Y Axis\";       XYDataset data = new SampleXYDataset();       JFreeChart chart = ChartFactory.createXYChart(title, xAxisLabel, yAxisLabel, data, true);               chart.setChartBackgroundPaint(new GradientPaint(0, 0, Color.white,0, 1000, Color.green));               xyPlotFrame = new JFreeChartFrame(\"XYPlot\", chart);       xyPlotFrame.pack();       SwingRefinery.positionFrameRandomly(xyPlotFrame);       xyPlotFrame.show();      }     else {       xyPlotFrame.show();       xyPlotFrame.requestFocus();}}", "nl": "Displays an XYPlot in its own frame"}
{"code": "private void displayHorizontalStackedBarChart() {      if (horizontalStackedBarChartFrame==null) {               String title = \"Horizontal Stacked Bar Chart\";       String categoryAxisLabel = \"Categories\";       String valueAxisLabel = \"Values\";       CategoryDataset categoryData = createCategoryDataset();       JFreeChart chart = ChartFactory.createStackedHorizontalBarChart(title, categoryAxisLabel,                                  valueAxisLabel, categoryData, true);               chart.setChartBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.blue));       Plot plot = chart.getPlot();       HorizontalNumberAxis valueAxis = (HorizontalNumberAxis)plot.getAxis(Plot.HORIZONTAL_AXIS);       valueAxis.setMinimumAxisValue(new Double(-32.0));       valueAxis.setMaximumAxisValue(new Double(85.0));               horizontalStackedBarChartFrame = new JFreeChartFrame(\"Horizontal Bar Chart\", chart);       horizontalStackedBarChartFrame.pack();       SwingRefinery.positionFrameRandomly(horizontalStackedBarChartFrame);       horizontalStackedBarChartFrame.show();      }     else {       horizontalStackedBarChartFrame.show();       horizontalStackedBarChartFrame.requestFocus();}}", "nl": "Displays a horizontal bar chart in its own frame"}
{"code": "public String getSeriesName(int series) {     return \"Sample \"+series;}", "nl": "Returns the name of the series"}
{"code": "public String getSeriesName(int series) {     if (series==0) {       return \"IBM\";     }     else return \"Error\";}", "nl": "Returns the name of the series"}
{"code": "public Font getLabelFont() {     return labelFont;}", "nl": "Returns the current label font"}
{"code": "public boolean isTickMarksVisible() {     return showTickMarksCheckBox.isSelected();}", "nl": "Returns the current value of the flag that determines whether or not tick marks are visible"}
{"code": "public Number getMinimumValue() {     return minimumValue;}", "nl": "Returns the current setting of the minimum value in the axis range"}
{"code": "public void actionPerformed(ActionEvent event) {     String command = event.getActionCommand();     if (command.equals(\"OutlineStroke\")) {       attemptModifyOutlineStroke();     }     else if (command.equals(\"OutlinePaint\")) {       attemptModifyOutlinePaint();     }     else if (command.equals(\"BackgroundPaint\")) {       attemptModifyBackgroundPaint();     }     else if (command.equals(\"SeriesFont\")) {       attemptModifySeriesFont();     }     else if (command.equals(\"SeriesPaint\")) {       attemptModifySeriesPaint();}}", "nl": "Handles user interactions with the panel"}
{"code": "public AxisPropertyEditPanel getHorizontalAxisPropertyEditPanel() {     return horizontalAxisPropertyPanel;}", "nl": "Returns a reference to the panel for editing the properties of the horizontal axis"}
{"code": "public boolean getAntiAlias() {     return antialias.isSelected();}", "nl": "Returns the current setting of the anti - alias flag"}
{"code": "public void setTitleProperties(Title title) {     if (title instanceof StandardTitle) {         StandardTitle standard = (StandardTitle)title;       standard.setTitle(this.getTitle());       standard.setTitleFont(this.getTitleFont());       standard.setTitlePaint(this.getTitlePaint());}}", "nl": "Sets the properties of the specified title to match the properties defined on this panel"}
{"code": "public void setTickSize(double newSize) {    tickSize = newSize;}", "nl": "Sets the width of the open close tick"}
{"code": "protected AbstractTitle() {      this(AbstractTitle.DEFAULT_POSITION,         AbstractTitle.DEFAULT_HORIZONTAL_ALIGNMENT,         AbstractTitle.DEFAULT_VERTICAL_ALIGNMENT);}", "nl": "Default constructor - builds an AbstractTitle positioned at the top of the page , centered horizontally and vertically within its space"}
{"code": "public CategoryDataset getDataset() {    return (CategoryDataset)chart.getDataset();}", "nl": "A convenience method that returns the dataset for the plot , cast as a CategoryDataset"}
{"code": "protected void notifyListeners(TitleChangeEvent event) {      if (this.notify) {        java.util.Iterator iterator = listeners.iterator();        while (iterator.hasNext()) {          TitleChangeListener listener = (TitleChangeListener)iterator.next();          listener.titleChanged(event);}}}", "nl": "Notifies all registered listeners that the chart title has changed in some way"}
{"code": "public ValueAxis getRangeAxis() {    return (ValueAxis)horizontalAxis;}", "nl": "Returns the range axis for the plot"}
{"code": "public static JFreeChart createLineChart(String title, String categoryAxisLabel,                           String valueAxisLabel, CategoryDataset data,                           boolean legend) {      Axis categoryAxis = new HorizontalCategoryAxis(categoryAxisLabel);      Axis valueAxis = new VerticalNumberAxis(valueAxisLabel);      Plot plot = new LinePlot(categoryAxis, valueAxis);      JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);      return chart;}", "nl": "Creates a line chart with default settings"}
{"code": "public void setMinimumDate(Date minimumDate) {    this.minimumDate = minimumDate;      double millis = (double)minimumDate.getTime();      this.setMinimumAxisValue(millis);}", "nl": "Sets the minimum date visible on the axis"}
{"code": "public static JFreeChart createPieChart(String title, PieDataset data, boolean legend) {      Plot plot = new PiePlot();      JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);      return chart;}", "nl": "Creates a pie chart with default settings"}
{"code": "public Bar(double x, double y, double width, double height) {    this(x, y, width, height, new BasicStroke(), Color.gray, Color.green);}", "nl": "Standard constructor : returns a new Bar object , with some default attributes"}
{"code": "protected CategoryAxis(String label) {    this(label,         Axis.DEFAULT_AXIS_LABEL_FONT,         Axis.DEFAULT_AXIS_LABEL_PAINT,         Axis.DEFAULT_AXIS_LABEL_INSETS,         true,          Axis.DEFAULT_TICK_LABEL_FONT,         Axis.DEFAULT_TICK_LABEL_PAINT,         Axis.DEFAULT_TICK_LABEL_INSETS,         false,          Axis.DEFAULT_TICK_STROKE);}", "nl": "Constructs a category axis , using default values where necessary"}
{"code": "protected void notifyListeners(AxisChangeEvent event) {    java.util.Iterator iterator = listeners.iterator();    while (iterator.hasNext()) {      AxisChangeListener listener = (AxisChangeListener)iterator.next();      listener.axisChanged(event);}}", "nl": "Notifies all registered listeners that the axis has changed"}
{"code": "protected Axis(String label,             Font labelFont, Paint labelPaint, Insets labelInsets,         boolean tickLabelsVisible,             Font tickLabelFont, Paint tickLabelPaint, Insets tickLabelInsets,         boolean tickMarkVisible, Stroke tickMarkStroke) {    this.label = label;    this.labelFont = labelFont;    this.labelPaint = labelPaint;    this.labelInsets = labelInsets;    this.tickLabelsVisible = tickLabelsVisible;    this.tickLabelFont = tickLabelFont;    this.tickLabelPaint = tickLabelPaint;    this.tickLabelInsets = tickLabelInsets;    this.tickMarksVisible = tickMarksVisible;    this.tickMarkStroke = tickMarkStroke;    this.ticks = new java.util.ArrayList();    this.listeners = new java.util.ArrayList();}", "nl": "Constructs an axis"}
{"code": "public void removeChangeListener(AxisChangeListener listener) {    listeners.remove(listener);}", "nl": "Deregisters an object for notification of changes to the axis"}
{"code": "public void setVerticalAxis(Axis axis) {    super.setVerticalAxis(axis);}", "nl": "Sets the vertical axis for the plot"}
{"code": "public boolean isCompatibleVerticalAxis(Axis axis)    {    if (axis instanceof VerticalNumberAxis)      return true;    else      return false;}", "nl": "Checks the compatibility of a vertical axis , returning true if the axis is compatible with the plot , and false otherwise"}
{"code": "public LinePlot(Axis horizontalAxis, Axis verticalAxis) {    super(horizontalAxis, verticalAxis);      this.renderer = new LineAndShapeRenderer(LineAndShapeRenderer.SHAPES_AND_LINES);      this.introGapPercent = DEFAULT_INTRO_GAP;      this.trailGapPercent = DEFAULT_TRAIL_GAP;}", "nl": "incoherencetype"}
{"code": "public boolean isCompatibleHorizontalAxis(Axis axis) {    if (axis instanceof CategoryAxis) {      return true;    }    else return false;}", "nl": "Checks the compatibility of a horizontal axis , returning true if the axis is compatible with the plot , and false otherwise"}
{"code": "public double calculateLowestVisibleTickValue() {        double unit = getTickUnit().getValue().doubleValue();    double index = Math.ceil(minimumAxisValue/unit);    return index*unit;}", "nl": "Calculates the value of the lowest visible tick on the axis"}
{"code": "public void setAutoRangeMinimumSize(Number size) {            if (size==null) {        throw new IllegalArgumentException(\"NumberAxis.setAutoRangeMinimumSize(Number): \"                           +\"null not permitted.\");      }          if (autoRangeMinimumSize.doubleValue()!=size.doubleValue()) {      this.autoRangeMinimumSize = size;      notifyListeners(new AxisChangeEvent(this));}}", "nl": "incoherencetype"}
{"code": "public void drawCategoryItem(Graphics2D g2, Rectangle2D dataArea,                   CategoryPlot plot, ValueAxis axis,                   CategoryDataset data, int series, Object category,                   int categoryIndex, Object previousCategory) {            Number value = data.getValue(series, category);      if (value!=null) {                double x1 = plot.getCategoryCoordinate(categoryIndex, dataArea);                double y1 = axis.translateValueToJava2D(value.doubleValue(), dataArea);        g2.setPaint(((Plot)plot).getSeriesPaint(series));        g2.setStroke(((Plot)plot).getSeriesStroke(series));        if (this.plotShapes) {          Shape shape = ((Plot)plot).getShape(series, category, x1, y1, shapeScale);          g2.fill(shape);                  }        if (this.plotLines) {          if (previousCategory!=null) {            Number previousValue = data.getValue(series, previousCategory);            if (previousValue!=null) {                            double x0 = plot.getCategoryCoordinate(categoryIndex-1, dataArea);              double y0 = axis.translateValueToJava2D(previousValue.doubleValue(), dataArea);              g2.setPaint(((Plot)plot).getSeriesPaint(series));              g2.setStroke(((Plot)plot).getSeriesStroke(series));              Line2D line = new Line2D.Double(x0, y0, x1, y1);              g2.draw(line);}}}}}", "nl": "Draw a single data item"}
{"code": "public PieDataset getDataset() {    return (PieDataset)chart.getDataset();}", "nl": "Returns the dataset for the plot , cast as a PieDataset"}
{"code": "public void draw(Graphics2D g2, Rectangle2D plotArea, DrawInfo info) {      ToolTipsCollection tooltips = null;      if (info!=null) {        info.setPlotArea(plotArea);        tooltips = info.getToolTipsCollection();      }        if (insets!=null) {      plotArea.setRect(plotArea.getX()+insets.left,                 plotArea.getY()+insets.top,           plotArea.getWidth()-insets.left-insets.right,           plotArea.getHeight()-insets.top-insets.bottom);    }        drawOutlineAndBackground(g2, plotArea);          double gapHorizontal = plotArea.getWidth()*this.interiorGapPercent;      double gapVertical = plotArea.getHeight()*this.interiorGapPercent;    double pieX = plotArea.getX()+gapHorizontal/2;    double pieY = plotArea.getY()+gapVertical/2;      double pieW = plotArea.getWidth()-gapHorizontal;      double pieH = plotArea.getHeight()-gapVertical;        if (circular) {      double min = Math.min(pieW, pieH)/2;        pieX = (pieX+pieX+pieW)/2 - min;        pieY = (pieY+pieY+pieH)/2 - min;        pieW = 2*min;        pieH = 2*min;    }      Rectangle2D explodedPieArea = new Rectangle2D.Double(pieX, pieY, pieW, pieH);      double explodeHorizontal = (1-radiusPercent)*pieW;      double explodeVertical = (1-radiusPercent)*pieH;    Rectangle2D pieArea = new Rectangle2D.Double(pieX+explodeHorizontal/2,                             pieY+explodeVertical/2,                             pieW-explodeHorizontal,                             pieH-explodeVertical);        PieDataset data = (PieDataset)chart.getDataset();    if (data != null) {                Set categories = data.getCategories();        SortedSet ss = new TreeSet(categories);                double totalValue = 0;        Iterator iterator = ss.iterator();        while (iterator.hasNext()) {          Object current = iterator.next();          if (current!=null) {            Number value = data.getValue(current);            double v = value.doubleValue();            if (v>0) {              totalValue = totalValue + v;            }          }        }                double sumTotal = 0;        int section = 0;        iterator = ss.iterator();        while (iterator.hasNext()) {          Object current = iterator.next();          Number dataValue = data.getValue(current);          if (dataValue!=null) {            double value = dataValue.doubleValue();            if (value>0) {                            double startAngle = sumTotal * 360 / totalValue;              double extent = (sumTotal+value) * 360 / totalValue - startAngle;              Rectangle2D arcBounds = getArcBounds(pieArea, explodedPieArea,                                 startAngle, extent,                                 this.getExplodePercent(section));              Arc2D.Double arc = new Arc2D.Double(arcBounds, startAngle, extent,                                Arc2D.PIE);              sumTotal += value;              Paint paint = this.getSeriesPaint(section);              Paint outlinePaint = this.getSeriesOutlinePaint(section);              g2.setPaint(paint);              g2.fill(arc);              g2.setStroke(new BasicStroke());              g2.setPaint(outlinePaint);              g2.draw(arc);                            if (tooltips!=null) {                if (this.toolTipGenerator==null) {                  toolTipGenerator = new StandardPieToolTipGenerator();                }                String tip = this.toolTipGenerator.generateToolTip(data, current);                if (arc!=null) {                  tooltips.addToolTip(tip, arc);                }              }                            if (this.sectionLabelType!=NO_LABELS) {                this.drawLabel(g2, pieArea, explodedPieArea, data, section, startAngle,                         extent);              }            }          }          section = section + 1;}}}", "nl": "Draws the plot on a Java 2D graphics device"}
{"code": "public VerticalAxis getVerticalAxis() {    return (VerticalAxis)verticalAxis;}", "nl": "Returns a reference to the vertical axis"}
{"code": "public VerticalXYBarPlot(Axis horizontalAxis, Axis verticalAxis) {       this(horizontalAxis,        verticalAxis,        Plot.DEFAULT_INSETS,        Plot.DEFAULT_BACKGROUND_COLOR,        Plot.DEFAULT_OUTLINE_STROKE,        Plot.DEFAULT_OUTLINE_COLOR);}", "nl": "Constructs a new vertical XY bar plot"}
{"code": "public Stroke getSeriesStroke(int index) {    return seriesStroke[index % seriesStroke.length];}", "nl": "Returns the Stroke used to draw any shapes for the specified series"}
{"code": "public Stroke getSeriesOutlineStroke(int index) {    return seriesOutlineStroke[index % seriesOutlinePaint.length];}", "nl": "Returns the Stroke used to outline any shapes for the specified series"}
{"code": "public Insets getInsets() {    return this.insets;}", "nl": "Returns the insets for the plot area"}
{"code": "public XYPlot(ValueAxis horizontalAxis, ValueAxis verticalAxis) {    this(horizontalAxis, verticalAxis,         Plot.DEFAULT_INSETS,         Plot.DEFAULT_BACKGROUND_COLOR,         Plot.DEFAULT_OUTLINE_STROKE,         Plot.DEFAULT_OUTLINE_COLOR);}", "nl": "Constructs an XYPlot with the specified axes"}
{"code": "public void draw(Graphics2D g2, Rectangle2D plotArea, DrawInfo info) {            ToolTipsCollection tooltips = null;      if (info!=null) {        info.setPlotArea(plotArea);        tooltips = info.getToolTipsCollection();      }          if (insets!=null) {      plotArea.setRect(plotArea.getX()+insets.left,                 plotArea.getY()+insets.top,                 plotArea.getWidth()-insets.left-insets.right,                 plotArea.getHeight()-insets.top-insets.bottom);    }        HorizontalAxis hAxis = getHorizontalAxis();    VerticalAxis vAxis = getVerticalAxis();    double hAxisAreaHeight = hAxis.reserveHeight(g2, this, plotArea);    Rectangle2D vAxisArea = vAxis.reserveAxisArea(g2, this, plotArea, hAxisAreaHeight);          Rectangle2D dataArea = new Rectangle2D.Double(plotArea.getX()+vAxisArea.getWidth(),                              plotArea.getY(),                              plotArea.getWidth()-vAxisArea.getWidth(),                              plotArea.getHeight()-hAxisAreaHeight);      if (info!=null) {        info.setDataArea(dataArea);      }      CrosshairInfo crosshairInfo = new CrosshairInfo();      crosshairInfo.setCrosshairDistance(Double.POSITIVE_INFINITY);      crosshairInfo.setAnchorX(this.getDomainAxis().getAnchorValue());      crosshairInfo.setAnchorY(this.getRangeAxis().getAnchorValue());          drawOutlineAndBackground(g2, dataArea);    this.horizontalAxis.draw(g2, plotArea, dataArea);    this.verticalAxis.draw(g2, plotArea, dataArea);                  XYDataset data = this.getDataset();      if (data!=null) {      Shape originalClip = g2.getClip();      g2.clip(dataArea);        drawVerticalLines(g2, dataArea);        drawHorizontalLines(g2, dataArea);        double transRangeZero = this.getRangeAxis().translateValueToJava2D(0.0, dataArea);        int seriesCount = data.getSeriesCount();        for (int series=0; series<seriesCount; series++) {          int itemCount = data.getItemCount(series);          for (int item=0; item<itemCount; item++) {            Shape tooltipArea = renderer.drawItem(g2, dataArea, info, this,                                (ValueAxis)horizontalAxis,                                (ValueAxis)verticalAxis,                                data, series, item,                                transRangeZero, crosshairInfo);                        if (tooltips!=null) {              if (this.toolTipGenerator==null) {                toolTipGenerator = new StandardXYToolTipGenerator();              }              String tip = this.toolTipGenerator.generateToolTip(data, series, item);              if (tooltipArea!=null) {                tooltips.addToolTip(tip, tooltipArea);              }            }          }        }                ValueAxis hva = (ValueAxis)this.horizontalAxis;        hva.setCrosshairValue(crosshairInfo.getCrosshairX());        if (hva.isCrosshairVisible()) {          this.drawVerticalLine(g2, dataArea, hva.getCrosshairValue(),                      hva.getCrosshairStroke(),                      hva.getCrosshairPaint());        }                ValueAxis vva = (ValueAxis)this.verticalAxis;        vva.setCrosshairValue(crosshairInfo.getCrosshairY());        if (vva.isCrosshairVisible()) {          this.drawHorizontalLine(g2, dataArea, vva.getCrosshairValue(),                      vva.getCrosshairStroke(),                      vva.getCrosshairPaint());        }        g2.setClip(originalClip);}}", "nl": "incoherencetype"}
{"code": "public VerticalNumberAxis3D(String label) {    this(label,         Axis.DEFAULT_AXIS_LABEL_FONT,         ValueAxis.DEFAULT_MINIMUM_AXIS_VALUE,         ValueAxis.DEFAULT_MAXIMUM_AXIS_VALUE);}", "nl": "Constructs a VerticalNumberAxis3D , with the specified label and default attributes"}
{"code": "public CombinedChart(Dataset data, Plot plot) {      super(data, plot, null, null, false);}", "nl": "Standard constructor : returns a CombinedCart for displaying a dataset and a plot"}
{"code": "public VerticalNumberAxis(String label) {    this(label,         Axis.DEFAULT_AXIS_LABEL_FONT,         ValueAxis.DEFAULT_MINIMUM_AXIS_VALUE,         ValueAxis.DEFAULT_MAXIMUM_AXIS_VALUE);      this.autoRange = true;}", "nl": "Constructs a vertical number axis , using default values where necessary"}
{"code": "public String getPlotType() {    return \"Bar Plot\";}", "nl": "Returns a short string describing the type of plot"}
{"code": "public void handleClick(int x, int y, DrawInfo info) {            ValueAxis vva = this.getRangeAxis();      double vvalue = vva.translateJava2DtoValue((float)y, info.getDataArea());      vva.setAnchorValue(vvalue);      vva.setCrosshairValue(vvalue);}", "nl": "Handles a ' click ' on the plot by updating the anchor values"}
{"code": "public void setAnchorValue(double value) {      this.anchorValue = value;      notifyListeners(new AxisChangeEvent(this));}", "nl": "Sets the anchor value for this axis"}
{"code": "public boolean isAutoTickUnitSelection() {    return autoTickUnitSelection;}", "nl": "Returns a flag indicating whether or not the tick unit is automatically selected from a range of standard tick units"}
{"code": "public double getAnchorValue() {      return anchorValue;}", "nl": "Returns the anchor value for this axis"}
{"code": "public void draw(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {        if (label!=null) {        g2.setFont(labelFont);      g2.setPaint(labelPaint);      FontRenderContext frc = g2.getFontRenderContext();      LineMetrics metrics = labelFont.getLineMetrics(label, frc);      Rectangle2D labelBounds = labelFont.getStringBounds(label, frc);      if (verticalLabel) {        double xx = drawArea.getX()+labelInsets.left                         +metrics.getHeight()                         -metrics.getDescent()                     -metrics.getLeading();        double yy = plotArea.getY()+plotArea.getHeight()/2                         +(labelBounds.getWidth()/2);        drawVerticalString(label, g2, (float)xx, (float)yy);      }      else {        double xx = drawArea.getX()+labelInsets.left;        double yy = drawArea.getY()+drawArea.getHeight()/2-labelBounds.getHeight()/2;        g2.drawString(label, (float)xx, (float)yy);      }      }        if (this.tickLabelsVisible) {      g2.setFont(tickLabelFont);      g2.setPaint(tickLabelPaint);      this.refreshTicks(g2, drawArea, plotArea);      Iterator iterator = ticks.iterator();      while (iterator.hasNext()) {      Tick tick = (Tick)iterator.next();      g2.drawString(tick.getText(), tick.getX(), tick.getY());}}}", "nl": "Draws the CategoryAxis on a Java 2D graphics device"}
{"code": "public VerticalBarPlot3D(CategoryAxis horizontalAxis, ValueAxis verticalAxis,                 Insets insets,           double introGap, double trailGap,                 double categoryGap, double seriesGap,                 CategoryToolTipGenerator toolTipGenerator) {    super(horizontalAxis, verticalAxis,          insets,        introGap, trailGap, categoryGap, seriesGap,          toolTipGenerator);}", "nl": "Constructs a vertical bar plot with 3D effect"}
{"code": "public ChartChangeEvent(Object source, JFreeChart chart, int type) {      super(source);      this.chart = chart;      this.type = type;}", "nl": "Full constructor : returns a new ChartChangeEvent object with the specified type"}
{"code": "public double reserveHeight(Graphics2D g2, Plot plot, Rectangle2D drawArea) {      if (!visible) {        return 0;      }      else if (reserveHeight > 0) {        return reserveHeight;      }      else {        return axis.reserveHeight(g2, plot, drawArea);}}", "nl": "Returns the height required to draw the axis in the specified draw area"}
{"code": "public AxisRange getRange() {      autoAdjustRange();      return (new NumberAxisRange(new Double(getMinimumAxisValue()),          new Double(getMaximumAxisValue())));}", "nl": "Returns the AxisRange of our Axis"}
{"code": "public double getObjectAsPrimitive() {      return object.doubleValue();}", "nl": "Returns a double value generated from the Object - should be similar to previous method , but is not !"}
{"code": "public CombinedPlot(Axis horizontal, Axis vertical) {      super(horizontal, vertical);      type = OVERLAID;      setInsets(new Insets(0, 0, 0, 0));}", "nl": "Creates an OVERLAID CombinedPlot"}
{"code": "protected void adjustPlotsAxis() {      if (!isAdjusted) {        adjustPlotsAxis(true, true);}}", "nl": "Adjusts the internal charts to allow automatic rendering of their conponents"}
{"code": "private void adjustSeriesPaintAndStroke(Plot masterPlot, Dataset masterData) {      Iterator iter = charts.iterator();      while (iter.hasNext()) {        ChartInfo chartInfo = (ChartInfo)iter.next();        Plot plot = chartInfo.plot;        Dataset data = chartInfo.chart.getDataset();        if (data instanceof CombinationDataset) {          CombinationDataset childData = (CombinationDataset)data;          if (childData.getParent() == masterData) {            int[] map = childData.getMap();            Stroke[] childStroke = new Stroke[map.length];            Paint[] childPaint = new Paint[map.length];            for (int j=0; j<map.length; j++) {              childStroke[j] = masterPlot.getSeriesStroke(map[j]);              childPaint[j] = masterPlot.getSeriesPaint(map[j]);            }            plot.setSeriesStroke(childStroke);            plot.setSeriesPaint(childPaint);          }        }                if (plot instanceof CombinedPlot) {          ((CombinedPlot)plot).adjustSeriesPaintAndStroke(masterPlot, masterData);}}}", "nl": "Adjusts the Stroke and Paint objects associated with each Plot ' s Series that use the CombinedDataset so that each series is always drawn using the same rendering objects , no matter on what plot it appears"}
{"code": "protected void setVerticalAxisWidth(double width) {      Iterator iter = charts.iterator();      while (iter.hasNext()) {        ChartInfo chartInfo = (ChartInfo)iter.next();        Plot plot = chartInfo.plot;        CombinableAxis axis = (CombinableAxis)plot.getVerticalAxis();        axis.setReserveDimension(width);        if (plot instanceof CombinedPlot) {          ((CombinedPlot)plot).setVerticalAxisWidth(width);}}}", "nl": "Sets the width of the vertical axis of all combined sub - charts"}
{"code": "public AxisRange getRange() {      autoAdjustRange();      return (new NumberAxisRange(new Double(getMinimumAxisValue()),                    new Double(getMaximumAxisValue())));}", "nl": "Returns the AxisRange of our Axis"}
{"code": "public void draw(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {      if (visible) {        axis.draw(g2, drawArea, plotArea);      }      else {        if (gridLinesVisible) {          refreshTicks(g2, drawArea, plotArea);          Iterator iterator = ticks.iterator();          while (iterator.hasNext()) {            Tick tick = (Tick)iterator.next();            float xx = (float)translateValueToJava2D(tick.getNumericalValue(), plotArea);            g2.setStroke(gridStroke);            g2.setPaint(gridPaint);            Line2D gridline = new Line2D.Float(xx, (float)plotArea.getMaxY(), xx,                                 (float)plotArea.getMinY());            g2.draw(gridline);}}}}", "nl": "If the axis is not visible , just draws grid lines if needed , but no horizontal axis labels"}
{"code": "public double reserveHeight(Graphics2D g2, Plot plot, Rectangle2D drawArea) {      Iterator iter = axes.iterator();      while (iter.hasNext()) {        HorizontalAxis axis = (HorizontalAxis)iter.next();        double height = axis.reserveHeight(g2, plot, drawArea);        if (height != 0) {          return height;        }      }      return 0;}", "nl": "Returns the height required to draw the axis in the specified draw area"}
{"code": "public Number getYValue(int series, int item) {      return yValues[series][item];}", "nl": "Returns the y - value for the specified series and item"}
{"code": "public TitlePropertyEditPanel getTitlePropertyEditPanel() {      return titlePropertiesPanel;}", "nl": "Returns a reference to the title property sub - panel"}
{"code": "public boolean isTickMarksVisible() {      return showTickMarksCheckBox.isSelected();}", "nl": "Returns the current value of the flag that determines whether or not tick marks are visible"}
{"code": "public AxisPropertyEditPanel(Axis axis) {      labelFont = axis.getLabelFont();      labelPaintSample = new PaintSample(axis.getLabelPaint());      tickLabelFont = axis.getTickLabelFont();      tickLabelPaintSample = new PaintSample(axis.getTickLabelPaint());            _tickLabelInsets = axis.getTickLabelInsets();      _labelInsets = axis.getLabelInsets();      setLayout(new BorderLayout());      JPanel general = new JPanel(new BorderLayout());      general.setBorder(BorderFactory.createTitledBorder(                BorderFactory.createEtchedBorder(), \"General:\"));      JPanel interior = new JPanel(new LCBLayout(5));      interior.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));      interior.add(new JLabel(\"Label:\"));      label = new JTextField(axis.getLabel());      interior.add(label);      interior.add(new JPanel());      interior.add(new JLabel(\"Font:\"));      labelFontField = new FontDisplayField(labelFont);      interior.add(labelFontField);      JButton b = new JButton(\"Select...\");      b.setActionCommand(\"SelectLabelFont\");      b.addActionListener(this);      interior.add(b);      interior.add(new JLabel(\"Paint:\"));      interior.add(labelPaintSample);      b = new JButton(\"Select...\");      b.setActionCommand(\"SelectLabelPaint\");      b.addActionListener(this);      interior.add(b);      interior.add(new JLabel(\"Label Insets:\"));      b = new JButton(\"Edit...\");      b.setActionCommand(\"LabelInsets\");      b.addActionListener(this);      labelInsetsTextField = new InsetsTextField(_labelInsets);      interior.add(labelInsetsTextField);      interior.add(b);      interior.add(new JLabel(\"Tick Label Insets:\"));      b = new JButton(\"Edit...\");      b.setActionCommand(\"TickLabelInsets\");      b.addActionListener(this);      tickLabelInsetsTextField = new InsetsTextField(_tickLabelInsets);      interior.add(tickLabelInsetsTextField);      interior.add(b);      general.add(interior);      add(general, BorderLayout.NORTH);      slot1 = new JPanel(new BorderLayout());      JPanel other = new JPanel(new BorderLayout());      other.setBorder(BorderFactory.createTitledBorder(                 BorderFactory.createEtchedBorder(), \"Other:\"));      otherTabs = new JTabbedPane();      otherTabs.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));      JPanel ticks = new JPanel(new LCBLayout(3));      ticks.setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4));      showTickLabelsCheckBox = new JCheckBox(\"Show tick labels\", axis.isTickLabelsVisible());      ticks.add(showTickLabelsCheckBox);      ticks.add(new JPanel());      ticks.add(new JPanel());      ticks.add(new JLabel(\"Tick label font:\"));      tickLabelFontField = new FontDisplayField(tickLabelFont);      ticks.add(tickLabelFontField);      b = new JButton(\"Select...\");      b.setActionCommand(\"SelectTickLabelFont\");      b.addActionListener(this);      ticks.add(b);      showTickMarksCheckBox = new JCheckBox(\"Show tick marks\", axis.isTickMarksVisible());      ticks.add(showTickMarksCheckBox);      ticks.add(new JPanel());      ticks.add(new JPanel());      otherTabs.add(\"Ticks\", ticks);      other.add(otherTabs);      slot1.add(other);      slot2 = new JPanel(new BorderLayout());      slot2.add(slot1, BorderLayout.NORTH);      add(slot2);}", "nl": "Standard constructor : builds a panel for displaying editing the properties of the specified axis"}
{"code": "public Insets getPlotInsets() {      if (_insets == null)        _insets = new Insets(0,0,0,0);      return _insets;}", "nl": "Returns the current plot insets"}
{"code": "public double getMaximumValue() {      return maximumValue;}", "nl": "Returns the current setting of the maximum value in the axis range"}
{"code": "public Paint getOutlinePaint() {      return outlinePaint.getPaint();}", "nl": "Returns the current outline paint"}
{"code": "public void attemptFontSelection() {      FontChooserPanel panel = new FontChooserPanel(titleFont);      int result = JOptionPane.showConfirmDialog(this, panel, \"Font Selection\",        JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);      if (result==JOptionPane.OK_OPTION) {        titleFont = panel.getSelectedFont();        fontfield.setText(titleFont.getFontName()+\" \"+titleFont.getSize());}}", "nl": "Presents a font selection dialog to the user"}
