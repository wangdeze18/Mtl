{"code": "class EmptyClass {\n\n\n    private boolean isInContent(float x, float y, Sticker currentSticker) {\n\n\n\n        float[] pointsDst = currentSticker.getMapPointsDst();\n        if (x > pointsDst[0] && x < pointsDst[2] && y > pointsDst[3] && y < pointsDst[5])\n            return true;\n        return false;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public boolean isSourceEncodingSupported(AudioFormat.Encoding sourceEncoding){\n\n        AudioFormat.Encoding sourceEncodings[] = getSourceEncodings();\n\n        for(int i=0; i<sourceEncodings.length; i++) {\n            if( sourceEncoding.equals( sourceEncodings[i]) ) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void paintIcon(Component c, Graphics g, int x, int y) {\n            AbstractButton b = (AbstractButton) c;\n            ButtonModel model = b.getModel();\n\n            int w = getIconWidth();\n            int h = getIconHeight();\n\n            boolean isPressed = model.isPressed();\n            boolean isArmed = model.isArmed();\n            boolean isEnabled = model.isEnabled();\n            boolean isSelected = model.isSelected();\n\n            boolean checkIn = ((isPressed &&\n                                !isArmed   &&\n                                isSelected) ||\n                               (isPressed &&\n                                isArmed   &&\n                                !isSelected)\n                               ||\n                               (!isPressed  &&\n                                isArmed    &&\n                                isSelected  ||\n                                (!isPressed &&\n                                 !isArmed  &&\n                                 isSelected)));\n\n            if (checkIn){\n                g.setColor(shadow);\n                g.drawLine(x+5,y+0,x+8,y+0);\n                g.drawLine(x+3,y+1,x+4,y+1);\n                g.drawLine(x+9,y+1,x+9,y+1);\n                g.drawLine(x+2,y+2,x+2,y+2);\n                g.drawLine(x+1,y+3,x+1,y+3);\n                g.drawLine(x,y+4,x,y+9);\n                g.drawLine(x+1,y+10,x+1,y+10);\n                g.drawLine(x+2,y+11,x+2,y+11);\n                g.setColor(highlight);\n                g.drawLine(x+3,y+12,x+4,y+12);\n                g.drawLine(x+5,y+13,x+8,y+13);\n                g.drawLine(x+9,y+12,x+10,y+12);\n                g.drawLine(x+11,y+11,x+11,y+11);\n                g.drawLine(x+12,y+10,x+12,y+10);\n                g.drawLine(x+13,y+9,x+13,y+4);\n                g.drawLine(x+12,y+3,x+12,y+3);\n                g.drawLine(x+11,y+2,x+11,y+2);\n                g.drawLine(x+10,y+1,x+10,y+1);\n                g.setColor(dot);\n                g.fillRect(x+4,y+5,6,4);\n                g.drawLine(x+5,y+4,x+8,y+4);\n                g.drawLine(x+5,y+9,x+8,y+9);\n            }\n            else {\n                g.setColor(highlight);\n                g.drawLine(x+5,y+0,x+8,y+0);\n                g.drawLine(x+3,y+1,x+4,y+1);\n                g.drawLine(x+9,y+1,x+9,y+1);\n                g.drawLine(x+2,y+2,x+2,y+2);\n                g.drawLine(x+1,y+3,x+1,y+3);\n                g.drawLine(x,y+4,x,y+9);\n                g.drawLine(x+1,y+10,x+1,y+10);\n                g.drawLine(x+2,y+11,x+2,y+11);\n\n                g.setColor(shadow);\n                g.drawLine(x+3,y+12,x+4,y+12);\n                g.drawLine(x+5,y+13,x+8,y+13);\n                g.drawLine(x+9,y+12,x+10,y+12);\n                g.drawLine(x+11,y+11,x+11,y+11);\n                g.drawLine(x+12,y+10,x+12,y+10);\n                g.drawLine(x+13,y+9,x+13,y+4);\n                g.drawLine(x+12,y+3,x+12,y+3);\n                g.drawLine(x+11,y+2,x+11,y+2);\n                g.drawLine(x+10,y+1,x+10,y+1);\n\n            }\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void main(String[] args) {\n        Looper.prepare();\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (sPower) {\n                    String cmd = String.format(\"am startservice%s-n com.aigestudio.daemon/\" +\n                                    \"com.aigestudio.daemon.services.DaemonService\",\n                            SysUtil.isAfter17() ? \" --user 0 \" : \" \");\n                    LogUtil.i(\"CMD exec \" + cmd);\n                    try {\n                        Runtime.getRuntime().exec(cmd);\n                    } catch (IOException e) {\n                    }\n                    try {\n                        Thread.sleep(1500);\n                    } catch (InterruptedException e) {\n                        LogUtil.w(\"Thread sleep failed:\" + e.toString());\n                    }\n                }\n            }\n        }).start();\n        Looper.loop();\n        LogUtil.i(\"====================Daemon exit with error====================\");\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@BeforeClass\n    public static void setUp(){\n    \tfinal Properties props = new Properties();\n    \ttry {\n    \tprops.load(new FileInputStream(PATH_TO_TEST_PROPERTIES));\n    \t} catch (Exception e) {\n    \t\tlog.error(\"Error occured while reading mule.test.properties\", e);\n    \t}    \t\n\t\tSystem.setProperty(\"https.protocols\", \"TLSv1.1,TLSv1.2\");\n\t\tSystem.setProperty(\"sfdc.key\", props.getProperty(\"sfdc.key\"));\n    \tSystem.setProperty(\"sfdc.secret\", props.getProperty(\"sfdc.secret\"));\n    \tUSERNAME = props.getProperty(\"sfdc.user\");\n    \tPASSWORD = props.getProperty(\"sfdc.password\");\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void addShaped(RecipeDifficulty difficulty, ItemStack result, Object... recipe) {\n        if (difficulty != ALL && RecipeDifficulty.getDifficulty() != difficulty) {\n            return;\n        }\n\n        boolean isOre = false;\n\n        if (!isEnabled(result)) {\n            return;\n        }\n\n        for (int i = 3; i < recipe.length; i++) {\n            if (recipe[i] instanceof String) {\n                isOre = true;\n            }\n\n            if (!isEnabled(recipe[i])) {\n                return;\n            }\n        }\n\n        if (isOre) {\n            IRecipe iRecipe = new ShapedOreRecipe(result, recipe);\n            activeCrafting.add(iRecipe);\n            GameRegistry.addRecipe(iRecipe);\n        }\n        else {\n            activeCrafting.add(GameRegistry.addShapedRecipe(result, recipe));\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static void main(String[] args) throws Exception {\n        \n        \n        AdbServer.server().listenUSB();\n        \n        AdbServer.server().listenADB();\n\n\n        AndroidControlServer server = new AndroidControlServer();\n        server.listen(6655);\n        \n        try {\n            Config config = new Config(args);\n\n            if (config.isClient) {\n                new RemoteClient(config.ip, config.port, config.key, config.serialNumber);\n            } else {\n                if (config.isLocal) {\n                    new LocalServer(config.port).start();\n                } else {                 \n                    new RemoteServer(config.port).start();\n                }\n            }\n        } catch (InvalidParameterException ex) {\n            System.out.println(\"localserver <port>: \u935a\ue21a\u59e9\u93c8\ue100\u6e74\u93c8\u5d85\u59df\u9363(p2p)\\n remoteserver <port> \u935a\ue21a\u59e9\u93c8\u5d85\u59df\u9363 \\nremoteclient <ip> <port> <key> [serialNumber] \u935a\ue21a\u59e9\u7039\u3221\u57db\u7ed4\");\n            System.exit(0);\n        } catch (WebSocketException |InterruptedException e) {\n            System.out.println(\"\u935a\ue21a\u59e9\u93c8\u5d85\u59df\u9363\u3125\u3051\u7490: \" + e.getMessage());\n            System.exit(0);\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(0);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate Component buildHeader() {\n        HorizontalLayout header = new HorizontalLayout();\n        header.addStyleName(\"viewheader\");\n        header.setSpacing(true);\n\n        titleLabel = new Label(\"Dashboard\");\n        titleLabel.setId(TITLE_ID);\n        titleLabel.setSizeUndefined();\n        titleLabel.addStyleName(ValoTheme.LABEL_H1);\n        titleLabel.addStyleName(ValoTheme.LABEL_NO_MARGIN);\n        header.addComponent(titleLabel);\n\n        notificationsButton = buildNotificationsButton();\n        Component edit = buildEditButton();\n        HorizontalLayout tools = new HorizontalLayout(notificationsButton, edit);\n        tools.setSpacing(true);\n        tools.addStyleName(\"toolbar\");\n        header.addComponent(tools);\n\n        return header;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        \n        byte[] byteArray = new byte[bytes.size()]; \n        bytes.getBytes(byteArray, 0);\n        return Utf8Utils.utf8BytesToString(byteArray);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void updateHighOrderDerivativesPhase2(final double[] start,\n                                                 final double[] end,\n                                                 final Array2DRowRealMatrix highOrder) {\n        final double[][] data = highOrder.getDataRef();\n        for (int i = 0; i < data.length; ++i) {\n            final double[] dataI = data[i];\n            final double c1I = c1[i];\n            for (int j = 0; j < dataI.length; ++j) {\n                dataI[j] += c1I * (start[j] - end[j]);\n            }\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate double readDecimalLiteral(int c, boolean resetBuffer) {\n        assert c == '.' || isDecimalDigit(c);\n        boolean isInteger = true;\n        TokenStreamInput input = this.input;\n        StrBuffer buffer = resetBuffer ? this.buffer() : this.buffer;\n        if (c != '.' && c != '0') {\n            buffer.append(c);\n            while (isDecimalDigit(c = input.get())) {\n                buffer.append(c);\n            }\n        } else if (c == '0') {\n            buffer.append(c);\n            c = input.get();\n        }\n        if (c == '.') {\n            isInteger = false;\n            buffer.append(c);\n            while (isDecimalDigit(c = input.get())) {\n                buffer.append(c);\n            }\n        }\n        if (c == 'e' || c == 'E') {\n            isInteger = false;\n            buffer.append(c);\n            c = input.get();\n            if (c == '+' || c == '-') {\n                buffer.append(c);\n                c = input.get();\n            }\n            if (!isDecimalDigit(c)) {\n                throw error(Messages.Key.InvalidNumberLiteral);\n            }\n            buffer.append(c);\n            while (isDecimalDigit(c = input.get())) {\n                buffer.append(c);\n            }\n        }\n        if (isDecimalDigitOrIdentifierStart(c)) {\n            throw error(Messages.Key.InvalidNumberLiteral);\n        }\n        input.unget(c);\n        if (isInteger) {\n            return parseInteger(buffer.array(), buffer.length());\n        }\n        return parseDecimal(buffer.array(), buffer.length());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n        if (headerWrite.compareAndSet(false, true)) {\n            NetworkUtil.releaseMsgCompletely(initBuf);\n        }\n        if (!decodeFinished) {\n            String msg = \"Server channel inactive while decoding response body\";\n            LOGGER.info(msg);\n            listener.onThrowable(msg, ServerChannelInactiveException.INSTANCE);\n        }\n        super.channelInactive(ctx);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public List<SearchColumnStringField> getSerialNumbers() {\n        if (serialNumbers == null) {\n            serialNumbers = new ArrayList<SearchColumnStringField>();\n        }\n        return this.serialNumbers;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void process(JCas cas) throws AnalysisEngineProcessException {\n      if (this.isTraining()) {\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_Three LCWord_three CapitalType_INITIAL_UPPERCASE L0OOB1 L1OOB2 R0_sequence R0_TypePath_Pos_NN R0_TypePath_Stem_sequenc R1_elements R1_TypePath_Pos_NNS R1_TypePath_Stem_element TypePath_Pos_CD TypePath_Stem_Three PrevNEMTokenLabel_L0OOB1 PrevNEMTokenLabel_L1OOB2\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_sequence LCWord_sequence CapitalType_ALL_LOWERCASE Prefix3_seq Suffix3_nce Suffix4_ence Suffix5_uence L0_Three L0_TypePath_Pos_CD L0_TypePath_Stem_Three L1OOB1 R0_elements R0_TypePath_Pos_NNS R0_TypePath_Stem_element R1_are R1_TypePath_Pos_VBP R1_TypePath_Stem_are TypePath_Pos_NN TypePath_Stem_sequenc PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1OOB1\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_elements LCWord_elements CapitalType_ALL_LOWERCASE Prefix3_ele Suffix3_nts Suffix4_ents Suffix5_ments L0_sequence L0_TypePath_Pos_NN L0_TypePath_Stem_sequenc L1_Three L1_TypePath_Pos_CD L1_TypePath_Stem_Three R0_are R0_TypePath_Pos_VBP R0_TypePath_Stem_are R1_shown R1_TypePath_Pos_VBN R1_TypePath_Stem_shown TypePath_Pos_NNS TypePath_Stem_element PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_are LCWord_are CapitalType_ALL_LOWERCASE L0_elements L0_TypePath_Pos_NNS L0_TypePath_Stem_element L1_sequence L1_TypePath_Pos_NN L1_TypePath_Stem_sequenc R0_shown R0_TypePath_Pos_VBN R0_TypePath_Stem_shown R1_to R1_TypePath_Pos_TO R1_TypePath_Stem_to TypePath_Pos_VBP TypePath_Stem_are PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_shown LCWord_shown CapitalType_ALL_LOWERCASE L0_are L0_TypePath_Pos_VBP L0_TypePath_Stem_are L1_elements L1_TypePath_Pos_NNS L1_TypePath_Stem_element R0_to R0_TypePath_Pos_TO R0_TypePath_Stem_to R1_be R1_TypePath_Pos_VB R1_TypePath_Stem_be TypePath_Pos_VBN TypePath_Stem_shown PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_to LCWord_to CapitalType_ALL_LOWERCASE L0_shown L0_TypePath_Pos_VBN L0_TypePath_Stem_shown L1_are L1_TypePath_Pos_VBP L1_TypePath_Stem_are R0_be R0_TypePath_Pos_VB R0_TypePath_Stem_be R1_required R1_TypePath_Pos_VBN R1_TypePath_Stem_requir TypePath_Pos_TO TypePath_Stem_to PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_be LCWord_be CapitalType_ALL_LOWERCASE L0_to L0_TypePath_Pos_TO L0_TypePath_Stem_to L1_shown L1_TypePath_Pos_VBN L1_TypePath_Stem_shown R0_required R0_TypePath_Pos_VBN R0_TypePath_Stem_requir R1_for R1_TypePath_Pos_IN R1_TypePath_Stem_for TypePath_Pos_VB TypePath_Stem_be PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_required LCWord_required CapitalType_ALL_LOWERCASE Prefix3_req Suffix3_red Suffix4_ired Suffix5_uired L0_be L0_TypePath_Pos_VB L0_TypePath_Stem_be L1_to L1_TypePath_Pos_TO L1_TypePath_Stem_to R0_for R0_TypePath_Pos_IN R0_TypePath_Stem_for R1_accurate R1_TypePath_Pos_JJ R1_TypePath_Stem_accur TypePath_Pos_VBN TypePath_Stem_requir PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_for LCWord_for CapitalType_ALL_LOWERCASE L0_required L0_TypePath_Pos_VBN L0_TypePath_Stem_requir L1_be L1_TypePath_Pos_VB L1_TypePath_Stem_be R0_accurate R0_TypePath_Pos_JJ R0_TypePath_Stem_accur R1_and R1_TypePath_Pos_CC R1_TypePath_Stem_and TypePath_Pos_IN TypePath_Stem_for PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_accurate LCWord_accurate CapitalType_ALL_LOWERCASE Prefix3_acc Suffix3_ate Suffix4_rate Suffix5_urate L0_for L0_TypePath_Pos_IN L0_TypePath_Stem_for L1_required L1_TypePath_Pos_VBN L1_TypePath_Stem_requir R0_and R0_TypePath_Pos_CC R0_TypePath_Stem_and R1_efficient R1_TypePath_Pos_JJ R1_TypePath_Stem_effici TypePath_Pos_JJ TypePath_Stem_accur PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_and LCWord_and CapitalType_ALL_LOWERCASE L0_accurate L0_TypePath_Pos_JJ L0_TypePath_Stem_accur L1_for L1_TypePath_Pos_IN L1_TypePath_Stem_for R0_efficient R0_TypePath_Pos_JJ R0_TypePath_Stem_effici R1_transcription R1_TypePath_Pos_NN R1_TypePath_Stem_transcript TypePath_Pos_CC TypePath_Stem_and PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_efficient LCWord_efficient CapitalType_ALL_LOWERCASE Prefix3_eff Suffix3_ent Suffix4_ient Suffix5_cient L0_and L0_TypePath_Pos_CC L0_TypePath_Stem_and L1_accurate L1_TypePath_Pos_JJ L1_TypePath_Stem_accur R0_transcription R0_TypePath_Pos_NN R0_TypePath_Stem_transcript R1_termination R1_TypePath_Pos_NN R1_TypePath_Stem_termin TypePath_Pos_JJ TypePath_Stem_effici PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_transcription LCWord_transcription CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ption L0_efficient L0_TypePath_Pos_JJ L0_TypePath_Stem_effici L1_and L1_TypePath_Pos_CC L1_TypePath_Stem_and R0_termination R0_TypePath_Pos_NN R0_TypePath_Stem_termin R1_by R1_TypePath_Pos_IN R1_TypePath_Stem_by TypePath_Pos_NN TypePath_Stem_transcript PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_termination LCWord_termination CapitalType_ALL_LOWERCASE Prefix3_ter Suffix3_ion Suffix4_tion Suffix5_ation L0_transcription L0_TypePath_Pos_NN L0_TypePath_Stem_transcript L1_efficient L1_TypePath_Pos_JJ L1_TypePath_Stem_effici R0_by R0_TypePath_Pos_IN R0_TypePath_Stem_by R1_RNA R1_TypePath_Pos_NNP R1_TypePath_Stem_RNA TypePath_Pos_NN TypePath_Stem_termin PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_by LCWord_by CapitalType_ALL_LOWERCASE L0_termination L0_TypePath_Pos_NN L0_TypePath_Stem_termin L1_transcription L1_TypePath_Pos_NN L1_TypePath_Stem_transcript R0_RNA R0_TypePath_Pos_NNP R0_TypePath_Stem_RNA R1_polymerase R1_TypePath_Pos_NN R1_TypePath_Stem_polymeras TypePath_Pos_IN TypePath_Stem_by PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"B-GENE\",\n            \"Word_RNA LCWord_rna CapitalType_ALL_UPPERCASE L0_by L0_TypePath_Pos_IN L0_TypePath_Stem_by L1_termination L1_TypePath_Pos_NN L1_TypePath_Stem_termin R0_polymerase R0_TypePath_Pos_NN R0_TypePath_Stem_polymeras R1_I R1_TypePath_Pos_PRP R1_TypePath_Stem_I TypePath_Pos_NNP TypePath_Stem_RNA PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"I-GENE\",\n            \"Word_polymerase LCWord_polymerase CapitalType_ALL_LOWERCASE Prefix3_pol Suffix3_ase Suffix4_rase Suffix5_erase L0_RNA L0_TypePath_Pos_NNP L0_TypePath_Stem_RNA L1_by L1_TypePath_Pos_IN L1_TypePath_Stem_by R0_I R0_TypePath_Pos_PRP R0_TypePath_Stem_I R1_( R1_TypePath_Pos_-LRB- R1_TypePath_Stem_( TypePath_Pos_NN TypePath_Stem_polymeras PrevNEMTokenLabel_L0_B-GENE PrevNEMTokenLabel_L1_O Gazetteer_entrez_genes.txt Gazetteer_entrez_genes.txt\"));\n        this.dataWriter.write(createInstance(\n            \"I-GENE\",\n            \"Word_I LCWord_i CapitalType_ALL_UPPERCASE NumericType_ROMAN_NUMERAL L0_polymerase L0_TypePath_Pos_NN L0_TypePath_Stem_polymeras L1_RNA L1_TypePath_Pos_NNP L1_TypePath_Stem_RNA R0_( R0_TypePath_Pos_-LRB- R0_TypePath_Stem_( R1_pol R1_TypePath_Pos_NN R1_TypePath_Stem_pol TypePath_Pos_PRP TypePath_Stem_I PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_B-GENE\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_( LCWord_( L0_I L0_TypePath_Pos_PRP L0_TypePath_Stem_I L1_polymerase L1_TypePath_Pos_NN L1_TypePath_Stem_polymeras R0_pol R0_TypePath_Pos_NN R0_TypePath_Stem_pol R1_I R1_TypePath_Pos_PRP R1_TypePath_Stem_I TypePath_Pos_-LRB- TypePath_Stem_( PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_I-GENE\"));\n        this.dataWriter.write(createInstance(\n            \"B-GENE\",\n            \"Word_pol LCWord_pol CapitalType_ALL_LOWERCASE L0_( L0_TypePath_Pos_-LRB- L0_TypePath_Stem_( L1_I L1_TypePath_Pos_PRP L1_TypePath_Stem_I R0_I R0_TypePath_Pos_PRP R0_TypePath_Stem_I R1_) R1_TypePath_Pos_-RRB- R1_TypePath_Stem_) TypePath_Pos_NN TypePath_Stem_pol PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_I-GENE Gazetteer_entrez_genes.txt\"));\n        this.dataWriter.write(createInstance(\n            \"I-GENE\",\n            \"Word_I LCWord_i CapitalType_ALL_UPPERCASE NumericType_ROMAN_NUMERAL L0_pol L0_TypePath_Pos_NN L0_TypePath_Stem_pol L1_( L1_TypePath_Pos_-LRB- L1_TypePath_Stem_( R0_) R0_TypePath_Pos_-RRB- R0_TypePath_Stem_) R1_assayed R1_TypePath_Pos_VBD R1_TypePath_Stem_assay TypePath_Pos_PRP TypePath_Stem_I PrevNEMTokenLabel_L0_B-GENE PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_) LCWord_) L0_I L0_TypePath_Pos_PRP L0_TypePath_Stem_I L1_pol L1_TypePath_Pos_NN L1_TypePath_Stem_pol R0_assayed R0_TypePath_Pos_VBD R0_TypePath_Stem_assay R1_both R1_TypePath_Pos_DT R1_TypePath_Stem_both TypePath_Pos_-RRB- TypePath_Stem_) PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_B-GENE\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_assayed LCWord_assayed CapitalType_ALL_LOWERCASE Prefix3_ass Suffix3_yed Suffix4_ayed L0_) L0_TypePath_Pos_-RRB- L0_TypePath_Stem_) L1_I L1_TypePath_Pos_PRP L1_TypePath_Stem_I R0_both R0_TypePath_Pos_DT R0_TypePath_Stem_both R1_in R1_TypePath_Pos_IN R1_TypePath_Stem_in TypePath_Pos_VBD TypePath_Stem_assay PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_I-GENE\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_both LCWord_both CapitalType_ALL_LOWERCASE L0_assayed L0_TypePath_Pos_VBD L0_TypePath_Stem_assay L1_) L1_TypePath_Pos_-RRB- L1_TypePath_Stem_) R0_in R0_TypePath_Pos_IN R0_TypePath_Stem_in R1_a R1_TypePath_Pos_DT R1_TypePath_Stem_a TypePath_Pos_DT TypePath_Stem_both PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_in LCWord_in CapitalType_ALL_LOWERCASE L0_both L0_TypePath_Pos_DT L0_TypePath_Stem_both L1_assayed L1_TypePath_Pos_VBD L1_TypePath_Stem_assay R0_a R0_TypePath_Pos_DT R0_TypePath_Stem_a R1_cell-free R1_TypePath_Pos_JJ R1_TypePath_Stem_cell-fre TypePath_Pos_IN TypePath_Stem_in PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_a LCWord_a CapitalType_ALL_LOWERCASE L0_in L0_TypePath_Pos_IN L0_TypePath_Stem_in L1_both L1_TypePath_Pos_DT L1_TypePath_Stem_both R0_cell-free R0_TypePath_Pos_JJ R0_TypePath_Stem_cell-fre R1_transcription R1_TypePath_Pos_NN R1_TypePath_Stem_transcript TypePath_Pos_DT TypePath_Stem_a PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_cell-free LCWord_cell-free CapitalType_ALL_LOWERCASE ContainsHyphen_CONTAINS_HYPHEN Prefix3_cel Suffix3_ree Suffix4_free Suffix5_-free L0_a L0_TypePath_Pos_DT L0_TypePath_Stem_a L1_in L1_TypePath_Pos_IN L1_TypePath_Stem_in R0_transcription R0_TypePath_Pos_NN R0_TypePath_Stem_transcript R1_system R1_TypePath_Pos_NN R1_TypePath_Stem_system TypePath_Pos_JJ TypePath_Stem_cell-fre PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_transcription LCWord_transcription CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ption L0_cell-free L0_TypePath_Pos_JJ L0_TypePath_Stem_cell-fre L1_a L1_TypePath_Pos_DT L1_TypePath_Stem_a R0_system R0_TypePath_Pos_NN R0_TypePath_Stem_system R1_and R1_TypePath_Pos_CC R1_TypePath_Stem_and TypePath_Pos_NN TypePath_Stem_transcript PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_system LCWord_system CapitalType_ALL_LOWERCASE Prefix3_sys Suffix3_tem L0_transcription L0_TypePath_Pos_NN L0_TypePath_Stem_transcript L1_cell-free L1_TypePath_Pos_JJ L1_TypePath_Stem_cell-fre R0_and R0_TypePath_Pos_CC R0_TypePath_Stem_and R1_in R1_TypePath_Pos_IN R1_TypePath_Stem_in TypePath_Pos_NN TypePath_Stem_system PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_and LCWord_and CapitalType_ALL_LOWERCASE L0_system L0_TypePath_Pos_NN L0_TypePath_Stem_system L1_transcription L1_TypePath_Pos_NN L1_TypePath_Stem_transcript R0_in R0_TypePath_Pos_IN R0_TypePath_Stem_in R1_vivo R1_TypePath_Pos_RB R1_TypePath_Stem_vivo TypePath_Pos_CC TypePath_Stem_and PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_in LCWord_in CapitalType_ALL_LOWERCASE L0_and L0_TypePath_Pos_CC L0_TypePath_Stem_and L1_system L1_TypePath_Pos_NN L1_TypePath_Stem_system R0_vivo R0_TypePath_Pos_RB R0_TypePath_Stem_vivo R1_after R1_TypePath_Pos_IN R1_TypePath_Stem_after TypePath_Pos_IN TypePath_Stem_in PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_vivo LCWord_vivo CapitalType_ALL_LOWERCASE L0_in L0_TypePath_Pos_IN L0_TypePath_Stem_in L1_and L1_TypePath_Pos_CC L1_TypePath_Stem_and R0_after R0_TypePath_Pos_IN R0_TypePath_Stem_after R1_transfection R1_TypePath_Pos_NN R1_TypePath_Stem_transfect TypePath_Pos_RB TypePath_Stem_vivo PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_after LCWord_after CapitalType_ALL_LOWERCASE L0_vivo L0_TypePath_Pos_RB L0_TypePath_Stem_vivo L1_in L1_TypePath_Pos_IN L1_TypePath_Stem_in R0_transfection R0_TypePath_Pos_NN R0_TypePath_Stem_transfect R1_of R1_TypePath_Pos_IN R1_TypePath_Stem_of TypePath_Pos_IN TypePath_Stem_after PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_transfection LCWord_transfection CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ction L0_after L0_TypePath_Pos_IN L0_TypePath_Stem_after L1_vivo L1_TypePath_Pos_RB L1_TypePath_Stem_vivo R0_of R0_TypePath_Pos_IN R0_TypePath_Stem_of R1_rDNA R1_TypePath_Pos_NNP R1_TypePath_Stem_rDNA TypePath_Pos_NN TypePath_Stem_transfect PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_of LCWord_of CapitalType_ALL_LOWERCASE L0_transfection L0_TypePath_Pos_NN L0_TypePath_Stem_transfect L1_after L1_TypePath_Pos_IN L1_TypePath_Stem_after R0_rDNA R0_TypePath_Pos_NNP R0_TypePath_Stem_rDNA R1_minigene R1_TypePath_Pos_NN R1_TypePath_Stem_minigen TypePath_Pos_IN TypePath_Stem_of PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_rDNA LCWord_rdna CapitalType_MIXED_CASE L0_of L0_TypePath_Pos_IN L0_TypePath_Stem_of L1_transfection L1_TypePath_Pos_NN L1_TypePath_Stem_transfect R0_minigene R0_TypePath_Pos_NN R0_TypePath_Stem_minigen R1_constructs R1_TypePath_Pos_NNS R1_TypePath_Stem_construct TypePath_Pos_NNP TypePath_Stem_rDNA PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_minigene LCWord_minigene CapitalType_ALL_LOWERCASE Prefix3_min Suffix3_ene Suffix4_gene Suffix5_igene L0_rDNA L0_TypePath_Pos_NNP L0_TypePath_Stem_rDNA L1_of L1_TypePath_Pos_IN L1_TypePath_Stem_of R0_constructs R0_TypePath_Pos_NNS R0_TypePath_Stem_construct R1_into R1_TypePath_Pos_IN R1_TypePath_Stem_into TypePath_Pos_NN TypePath_Stem_minigen PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_constructs LCWord_constructs CapitalType_ALL_LOWERCASE Prefix3_con Suffix3_cts Suffix4_ucts Suffix5_ructs L0_minigene L0_TypePath_Pos_NN L0_TypePath_Stem_minigen L1_rDNA L1_TypePath_Pos_NNP L1_TypePath_Stem_rDNA R0_into R0_TypePath_Pos_IN R0_TypePath_Stem_into R1_3T6 R1_TypePath_Pos_CD R1_TypePath_Stem_3T6 TypePath_Pos_NNS TypePath_Stem_construct PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_into LCWord_into CapitalType_ALL_LOWERCASE L0_constructs L0_TypePath_Pos_NNS L0_TypePath_Stem_construct L1_minigene L1_TypePath_Pos_NN L1_TypePath_Stem_minigen R0_3T6 R0_TypePath_Pos_CD R0_TypePath_Stem_3T6 R1_cells R1_TypePath_Pos_NNS R1_TypePath_Stem_cell TypePath_Pos_IN TypePath_Stem_into PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_3T6 LCWord_3t6 CapitalType_ALL_UPPERCASE NumericType_ALPHANUMERIC L0_into L0_TypePath_Pos_IN L0_TypePath_Stem_into L1_constructs L1_TypePath_Pos_NNS L1_TypePath_Stem_construct R0_cells R0_TypePath_Pos_NNS R0_TypePath_Stem_cell R1_. R1_TypePath_Pos_. R1_TypePath_Stem_. TypePath_Pos_CD TypePath_Stem_3T6 PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_cells LCWord_cells CapitalType_ALL_LOWERCASE L0_3T6 L0_TypePath_Pos_CD L0_TypePath_Stem_3T6 L1_into L1_TypePath_Pos_IN L1_TypePath_Stem_into R0_. R0_TypePath_Pos_. R0_TypePath_Stem_. R1OOB1 TypePath_Pos_NNS TypePath_Stem_cell PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_. LCWord_. L0_cells L0_TypePath_Pos_NNS L0_TypePath_Stem_cell L1_3T6 L1_TypePath_Pos_CD L1_TypePath_Stem_3T6 R0OOB1 R1OOB2 TypePath_Pos_. TypePath_Stem_. PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n      } else {\n        Instance<String> instance = createInstance(\n            \"B-GENE\",\n            \"Word_pol LCWord_pol CapitalType_ALL_LOWERCASE L0_( L0_TypePath_Pos_-LRB- L0_TypePath_Stem_( L1_I L1_TypePath_Pos_PRP L1_TypePath_Stem_I R0_I R0_TypePath_Pos_PRP R0_TypePath_Stem_I R1_) R1_TypePath_Pos_-RRB- R1_TypePath_Stem_) TypePath_Pos_NN TypePath_Stem_pol PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_I-GENE Gazetteer_entrez_genes.txt\");\n        String outcome = this.classifier.classify(instance.getFeatures());\n        assertEquals(\"B-GENE\", outcome);\n\n        instance = createInstance(\n            \"O\",\n            \"Word_cells LCWord_cells CapitalType_ALL_LOWERCASE L0_3T6 L0_TypePath_Pos_CD L0_TypePath_Stem_3T6 L1_into L1_TypePath_Pos_IN L1_TypePath_Stem_into R0_. R0_TypePath_Pos_. R0_TypePath_Stem_. R1OOB1 TypePath_Pos_NNS TypePath_Stem_cell PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\");\n        outcome = this.classifier.classify(instance.getFeatures());\n        assertEquals(\"O\", outcome);\n      }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testNotEquals() {\n        Version builtVersion1 = new Version.Builder().major(MAJOR).minor(MINOR).build(BUILD);\n        Version builtVersion2 = new Version.Builder().major(BUILD).minor(MAJOR).build(MINOR);\n\n        Assert.assertFalse(builtVersion1.equals(builtVersion2));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic Result(String name,\n\t               Map<String, List<String>> tags,\n\t               List<DataPoint> dataPoints,\n\t               List<GroupResult> groupResults)\n\t{\n\t\tthis.name = name;\n\t\tthis.tags = tags;\n\t\tthis.groupResults = groupResults;\n\t\tthis.dataPoints = dataPoints;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n  public void testSum() throws Exception {\n    Double act = Aggregations.sum(Arrays.asList(1, 2, 3.8));  // check with mixed Number\n    Double exp = 1 + 2 + 3.8;\n    assertEquals(exp, act, 0.01);\n\n    act = Aggregations.sum(Arrays.asList());\n    exp = 0.0;\n    assertEquals(exp, act, 0.01);\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public boolean equals(Object o)\n        {\n            if (this == o)\n            {\n                return true;\n            }\n\n            if (!(o instanceof TransportAddress))\n            {\n                return false;\n            }\n\n            TransportAddress other = (TransportAddress) o;\n\n            if (address != null ? !address.equals(other.address) : other.address != null)\n            {\n                return false;\n            }\n\n            return port.equals(other.port);\n\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nvoid createCurve(PointF[] originPoint,Path path){\n        int originCount = originPoint.length;\n        float scale = 0.6f;\n        PointF midpoints[] = new PointF[originCount];\n        for(int i = 0 ;i < originCount ; i++){\n            int nexti = (i + 1) % originCount;\n            midpoints[i] = new PointF();\n            midpoints[i].x = (originPoint[i].x + originPoint[nexti].x)/2.0f;\n            midpoints[i].y = (originPoint[i].y + originPoint[nexti].y)/2.0f;\n        }\n\n        PointF extrapoints[] = new PointF[2 * originCount];\n        for(int i = 0 ;i < originCount ; i++){\n            int nexti = (i + 1) % originCount;\n            int backi = (i + originCount - 1) % originCount;\n            if(i==0) backi=0;\n            PointF midinmid = new PointF();\n            midinmid.x = (midpoints[i].x + midpoints[backi].x)/2.0f;\n            midinmid.y = (midpoints[i].y + midpoints[backi].y)/2.0f;\n            float offsetx = originPoint[i].x - midinmid.x;\n            float offsety = originPoint[i].y - midinmid.y;\n            int extraindex = 2 * i;\n            extrapoints[extraindex] = new PointF();\n            extrapoints[extraindex].x = midpoints[backi].x + offsetx;\n            extrapoints[extraindex].y = midpoints[backi].y + offsety;\n            float addx = (extrapoints[extraindex].x - originPoint[i].x) * scale;\n            float addy = (extrapoints[extraindex].y - originPoint[i].y) * scale;\n            extrapoints[extraindex].x = originPoint[i].x + addx;\n            extrapoints[extraindex].y = originPoint[i].y + addy;\n\n            int extranexti = (extraindex + 1)%(2 * originCount);\n            extrapoints[extranexti] = new PointF();\n            extrapoints[extranexti].x = midpoints[i].x + offsetx;\n            extrapoints[extranexti].y = midpoints[i].y + offsety;\n            addx = (extrapoints[extranexti].x - originPoint[i].x) * scale;\n            addy = (extrapoints[extranexti].y - originPoint[i].y) * scale;\n            extrapoints[extranexti].x = originPoint[i].x + addx;\n            extrapoints[extranexti].y = originPoint[i].y + addy;\n        }\n\n        PointF controlPoint[] = new PointF[4];\n        boolean first = true;\n        for(int i = 0 ;i < originCount ; i++){\n            controlPoint[0] = originPoint[i];\n            int extraindex = 2 * i;\n            controlPoint[1] = extrapoints[extraindex + 1];\n            if(controlPoint[1].x < originPoint[i].x) controlPoint[1] = originPoint[i];\n\n            int extranexti = (extraindex + 2) % (2 * originCount);\n            controlPoint[2] = extrapoints[extranexti];\n            if(controlPoint[2].x < originPoint[i].x) controlPoint[2] = originPoint[i];\n\n            int nexti = (i + 1) % originCount;\n            controlPoint[3] = originPoint[nexti];\n            if(controlPoint[3].x < originPoint[i].x) controlPoint[3] = originPoint[i];\n            float u = 1;\n            while(u >= 0){\n                float px = bezier3funcX(u,controlPoint);\n                float py = bezier3funcY(u,controlPoint);\n                u -= 0.005;\n                if(first){\n                    path.moveTo(px, py);\n                    first = false;\n                }\n                else path.lineTo(px, py);\n            }\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static boolean isEmptyOrWhitespace(String str) {\n\t\tif (TextUtils.isEmpty(str)) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (int i = 0; i < str.length(); i++) {\n\t\t\tif (!Character.isWhitespace(str.charAt(i))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public Value<Integer> run(String userEmail) {\n      PromisedValue<Integer> x = newPromise();\n      PromisedValue<Integer> y = newPromise();\n      PromisedValue<Integer> z = newPromise();\n      FutureValue<Integer> intermediate = futureCall(new ComplexJob(), x, y, z);\n\n      getIntFromUser(\"Please give 1st int\", userEmail, x.getHandle());\n      getIntFromUser(\"Please give 2nd int\", userEmail, y.getHandle());\n      getIntFromUser(\"Please give 3rd int\", userEmail, z.getHandle());\n\n      FutureValue<Integer> oneMoreInt =\n        futureCall(new PromptJob(), intermediate, immediate(userEmail));\n\n      return futureCall(new MultJob(), intermediate, oneMoreInt);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void quadrantRotate(int numquadrants) {\n        switch (numquadrants & 3) {\n        case 0:\n            break;\n        case 1:\n            rotate90();\n            break;\n        case 2:\n            rotate180();\n            break;\n        case 3:\n            rotate270();\n            break;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public boolean transformOne(GlyphLine line) {\n        if (line.idx >= line.end) {\n            return false;\n        }\n        Glyph g = line.get(line.idx);\n        boolean changed = false;\n        if (!openReader.isSkip(g.getCode(), lookupFlag)) {\n            int[] substSequence = substMap.get(g.getCode());\n            if (substSequence != null) {\n                if (substSequence.length > 0) {\n                    line.substituteOneToMany(openReader, substSequence);\n                    changed = true;\n                }\n            }\n        }\n        line.idx++;\n        return changed;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic Params(@NotNull String path,\n                  @NotNull int[] rev,\n                  boolean wantProps,\n                  boolean wantContents,\n                  \n                  @SuppressWarnings(\"UnusedParameters\")\n                  @NotNull String[] fields,\n                  boolean wantIProps) {\n      this.path = path;\n      this.rev = rev;\n      this.wantProps = wantProps;\n      this.wantContents = wantContents;\n      this.wantIProps = wantIProps;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static List<Integer> topologicalSort(List<Integer>[] graph) {\n\t\tint n = graph.length;\n\t\tboolean[] used = new boolean[n];\n\t\tLinkedList<Integer> res = new LinkedList<>();\n\t\tused = new boolean[n];\n\t\tfor (int i = 0; i < n; i++){\n\t\t\tif (!used[i])\n\t\t\t\tdfs(graph, used, res, i);\n\t\t}\n\t\t\t\t\n\t\tCollections.reverse(res);\n\t\treturn res;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testBlock() throws HyperLedgerException, IOException {\n        Block b1 =\n                Block.fromWireDump(\"01000000030a829633bc7bf1a7da1f62a5e07249dccb23d2a49f546ba100000000000000bc136fbaa332f13c46a89ae811aa622f3093608cf7d015276c3e64f9cf060c53801aab4e4b6d0b1a734bf22a1b01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff3807456c696769757302861b2c4d4d3d3d3da55adedb4c5856f7307e68d96f06f9f3849315ad0af015c15cf5f71d00d2340100000000000000ffffffff3501000000000000004341045976c2b7974f5b7b0dfa5a0b5f4b0828f78f88d4d6518dc0645253d6707355596364430b9647fbd15b9e264ad4c0939107fb8501ea89f91bd0857628dc16ce4bacc1585804000000001976a914cbf559b9d1f02508a448e28891395d8a143f26fb88acb2a75504000000001976a914996e7360841075378817a79a782d72c809484f5a88ac8e1c0204000000001976a9146df4d16e43f3f727f1968c3c09f1bfbba46fc5d288ac75b11e04000000001976a9148597d5d833a11186977e29001f651bbd4d63d0ee88ac0c7fd017000000001976a914b2606ae3ce0782268e916dc9e08eb13ba285e3b188ac89e50c04000000001976a914af47a490cd47b3fb1ae1800cc7fd1f2f1860903f88acf0e6a604000000001976a9148d5567ede2794f8b5e85c89ccca6cc2e3ae72a8888ac9da38d05000000001976a914a975dcbdef5c9360d831963bb3923411a495c0d788acf9452304000000001976a91439eb449e3cdf858e054533de91c543fff76d2ae088ac6c302f04000000001976a914af652c623045da48c22e117616d8305d05982b0088ac95caca05000000001976a914c5bc8e52b65d8031b8e3a77920fcd76cc0ebd69288acf09fc804000000001976a9149e10b49ac12dbb2ec969b78442c61e9043746adc88ac2dd7a104000000001976a914c2f21f1ef1bbb2c97080244895ba8a32546cf01d88ac031ec906000000001976a914776c25e07fa49e549944d24acef7a3a3d94818ca88ac6bd11504000000001976a9146f67318de52ca1d2082b9bf094d08b06492c435f88acfd37e804000000001976a914c4423f143d23b6c1a26b8f5aaeac3ccb197689e588ac4d813004000000001976a914cd5813b9e4b38eae5c99eeabd76d09d346bd9c2688ac67390805000000001976a91487d659973a1c75b11e338477d44c4501b66570a788ac3dfac304000000001976a914418e4d605cce8e34289830a21614d66145b4a1da88ac5a325f04000000001976a914180cbd0a36c0991a1d400be72d31d6f6e656957388acae4e0e04000000001976a9147de940f91c3b526d77d8f7589f11172ef47286a488ac9adfeb04000000001976a91404fc38108f998d1559bc80551d84c6630318698488ac8c546704000000001976a914dada56f3d1eacb8ef36d00d4eb5bd06449759ac988ac45aea004000000001976a9142a8c470a2382d80fb56cdf60782590ff4787becd88ac8770d004000000001976a9147be05c03fe69f8da79ef8c3bab21fd4c3819523988acbb450304000000001976a914d744e9daaf32b7f76f4d44c94fa4d6ff428fe89c88ac767e3904000000001976a91461acdc99dc928d31099f1adc76db005f6d9a5d7788ac9146fb10000000001976a914341d91c5a7615b335afbf7d43e9aae2cb12a2a1088ac7318dd04000000001976a9141305cfca4cff38ed9e061c25290c75caffa272a588ac4b016204000000001976a914dd4c51b0788e0bc6be6ea9fe23ab117d87d76c9a88acf3ea6404000000001976a914908ebe2f857c5ceab1050ff96e52f0da5232980088ac94f12c05000000001976a914e6e55e2991742ece883b5dc084efc46552e9378588ac0d225404000000001976a914dad596aa198f76150caf3c43ae0c922bf76e011788acebae7504000000001976a914c8e9eac50f100e2782ed0ca2315c061acd229e1888acc6e8b804000000001976a914ad9d837dd996b6f09408c48fb021f47113893e1288acbcc31e04000000001976a91400f7f42c37f55dc4f75e5145afae80665c62e6a588ace4901f04000000001976a9142dbd943fa4480987fba00463944234550a6d94d188ac0fac8405000000001976a91444e9b068c16db122aed770108345e4a60924298d88ac3bba900b000000001976a9140d37f0f7edeae22e7ab7524db57b3885c0a1844f88ac90187604000000001976a914acd9ff6e5bb5ad0e31ba93a691332fcd5aea183a88ac9ccd1904000000001976a914b5a55074e8618f9d4f9e9c86083eff096f5011cf88ac23e94f04000000001976a914e02e3b7e136d12b23bd07a0954897a8c686edae588ac3a962704000000001976a9144b8dd99194ae1887826edce17d0998875c89c81b88ac3642af04000000001976a914e2daa0e1e810d90afdc4f67feb22b42b6911fcc988ac84209b04000000001976a9141d71a68b2bfc1af6842744794a460a532e9112ed88ac66050b04000000001976a9141f055a6a3c9dbf8857c366a6cd43a34c1f46ab7e88acf9dd2704000000001976a914d5f6ed687203993d4ac05401add7fdece18b8d8488ace74c2c1a000000001976a9142aa969bf3fdbe587bf6c14e606c4d2b14665c93d88ac24db4b04000000001976a91449e45c4f2ff522d6e026a6d8337de6cb87cd960888ac66ee1804000000001976a9145318d3a7bd7d5be0650a8e7d16db458a6b0fd1ae88ac96e10405000000001976a914647484ab81427b30333eeaae714ba08a0980a83288aca2b2ad05000000001976a9143213e4e884d1dfad34a563271894ed76667abcea88ac0000000001000000031091bb34c19754b689685bd5f84078b437653d08377d2d03d256b34f80eb219e010000008a4730440220476c26cdcecccf46fdd96fb87814661cb1044e103d1bcd5be339b9cbaceca47902201b2caafe5b36913ef475d4d33b9d62aa3316ece6f1ac3371a506906e61afd4510141048c632401521a105db6b62db0a2c393181b5538f2c56d461057611252baebc9c7794378c252c45b7393fc93ea3b8bc6d6db1c9b5506744d51d1ddd7a9acd27d81ffffffffcc72f7a8acf77c1b1313d4ba229bff7db4f40e0a1b525a9b8a4dbc8ecc80b070000000008b483045022100997b74ef85d3be61a96a4d8ecebfeb588979364276f54fa77571ff8fb7906e4202204390f9935695194362fbc221b00436b4811d01f645715105f9d081ad65977e2b014104fd579aa4983cece29365038ddbaf479af86bdf25afdcae67bbe8b30c268aecdac6cd8f923ef3f23ab694783f9243522f67886a46a43499e3fb3ed49623869d6fffffffff8ecdae566b8e8d709a32054175ce61fc2a9323e60023f62b23c342a7186beeea000000008b48304502200f95d4cd51bb5b867563700979ea23bf69921b1a0262ff5de3d7330bb992a713022100de58fa5822e7e62c8e6e4edbdece7913cb21f5a7b5a39d85fa9291874ce81a710141045f7f6eed56863bf527b8fd30cbe78038db311370da6c7054beced527d60f47a65d6f1ce62278ba496f5da4a3d738eac0e2cb0f4ac38b113cbeabef59b685b16cffffffff0280c51b11010000000576a90088ac4cbdd397a90000001976a914d1121a58483d135c953e0f4e2cc6d126b5c6b06388ac00000000010000000379c1e9a1351b8c48fca27acff391512cb175978c8168adb40bfcf53c05dcb294000000008b483045022006a45b800a55ed2049c5d4ab7a56c2ff5855b665e9ae317d630fcc7e6fc8fe290221008952ed27b36591f55fcf42f486d1f9c958946c30721c1c0cb74972e681bd044e0141041f2f2a1e0b07aea8121b0af50fda58aa5893c5484c3d7389b2be08d02e986b07673c1207bb44e4c8f53ed51068ddec008105f1aa1c93c182875174561c08bd28ffffffff95a53b939c4bb466d77eec9bdb5a2ceed11682150e57b70a523d6f0c875998ff010000008a473044022005ea3540a376e1e912a86ffaff77fca577b790bf9e6c01f1ddca0ee1f592f03b02202ac4b54ab374df394c339c9a56e3730511b2c9a8c43213cfa66e46540e1d06ab0141045a46b12291ce91177728fe72e2b5fcf889ec9af92e5b6c5e2d018fec3be33b9cfefa818ec5f054086d88529dd6d70545b0aaa2a189b2657ae95e7f14397529bfffffffff001372c7988ea3117066373bf6fe4e065eeddab23113017852deee196e83d990000000008b4830450221008107b6c0d39012ed287546e170bac03ca5b523f768a6caddcdd42a05b762f4e802206156dcae129cf29306644dc06a7cfb361ec4261b27c3b0dd05e11be8b1ce643a0141047c0e1c51568226267607fbecddaf8418ab9c5945f59c15101c513338e481f838e4d3aea166fd0c2577b6324e623524562f0b7f00861e25cc4eba4012f3b7dd08ffffffff0200e40b54020000000576a90088ac2af12b94010000001976a914c494dc55663b229dfff5cfa4494422da1cfb733f88ac000000000100000002cebb018b42ff01857999f937a0a9f806c5140c99ebf4350b3f063de54f242d67000000008c493046022100bd4495bc8894b6dc69b61e4490ce6fb037d901180ceb77c52a1cade1e39b6b4b022100db71fb5e4ac1b0ce41d640017a86f25b5a0c55373076851b249e1742afc6d8850141049ff3c0a24258c2ea592bd7470ec90808e5b2276c87e42d2dc634a50b92af6deaa759df2a69e887549f1e29f3ee13767e000e9631fc50935b091fbfede3155770ffffffff2e807ac0a79be9f4fa4424413b489361a2b3854915f74fcb9891489455df8e7a000000008c493046022100b35ada65dbcfad525f2ef72b8d184920d259a820e52ab42107d85e452830f6da02210098a6cf88216650ea1ca782b3be407cd7a41d9cce31b62b4d25b413cee75675820141040c3e3629999aa48634ed51d1b67567b0275579eb70cb308de99d7a4842903fd4240c269835c0a7cd6ed6d4d0fa563536727360a5b1b58884f8123221bd747e04ffffffff0200222048020000000576a90088ac95b46b8e140000001976a914ad42ec3fb939e7fb32e4181c627b31f4ca51935088ac000000000100000003f9b0aefb747977759cb38eaf49070941bb50725c58131a51dd2ea382856bd493010000008a47304402201bb7594d0dbcd3c3d0dda3b62056000ca8d4bfc888e3b2ccfed63267ee313e8c0220728e003c152e743525ee46421cb84ed03734536c6ddfb6edf22605ba937f2a1b0141049437dc89b2f312d6bf45c4a8f724a03f38f005ef797ab109c590ae8f2b741bfaf335198813e3ac20f41aa61a44aaa41c2d6d1351166192a93e9a2517e300cd11ffffffff907e6fb71e188950c217ecc1354e60978485466616e4f2fc0b54066dd6f74a7f010000008b483045022100f2bd60edde0336efb4469648a929483f189324838d12e03302974c0f9f3a38550220236ac00c39c3a5d3953374880fc761bc5e5887d092e6a57cb4c52cfcbf531eca014104984a410b276249519104c78fbf3c254a5d2ef54e4d5f50ee4e97e8bd921864632b6bb0aba8b15e574e9bef31452fc5d2ef86754f02e9f652e70411707cd89e39fffffffff6c7455d978b99e8545ef6cd9e2810cb254c8b044da43839e44f1af25c0abd89000000008b483045022011800e7110565b4ef1ad74b681c290197fda98d64f92d5dde87a806e3a9b9089022100e1d97e5b2a7849197c5d6b88e57b58a619965cdd66f2a9945775b445b474c17601410434eb3054af434d2b516f3bf7a29a765ee4a22911c4708f829d766ee635e62c6f4d77150c83d3f0251cfbe6a4b8c2b507c3b0a3dcaef1daea571728b1a3bd0c8dffffffff02a07be810000000001976a9144640c0f3b01655377f10a4ec6c71bc4f9acb037388ac00c817a8040000000576a90088ac0000000001000000029c2939ce49092ebe03663784ff1159ea60a51cd00e140cfb30a6ba10d48b10e1000000008b483045022100b0a0013746586915dbfcd81160433c50abb23ea5f14843ded879de314268de480220363d30a18ddf66fe4922384c3b03c591d26585ef6b886c530ce5d6caa0b2a40701410469cd4c69f639e978dcc3798fecfaff76a00ef713d4855646b2b358bdb5a6cdd1292e684917fa1c3deba06d35c3d64723b656ec4df914121e7a3e3b89b7c720c7ffffffff0b524c36b7a69737820ab2b8baeb26a98920d8e0a5fcabb3db9a61eacfb6efb0000000008a473044022049b3a8e3daa04e634605bcdd4a5e159ca06250e33872455b902e319a2fbdedf4022011c7be9f3673b72fd5181dba3e7808b48051d2ff0fc46c70344d55631aa21454014104dc93841231106c4a749644408d55b0c7e0f886da3a854308dfd4ad626847785175fb19b31d9c220b2541767e792bb7f7e3d0608b0660649452636ff25d9e9584ffffffff025b5d004b060000001976a91416f50e5bd3609b11b4b29c945d02d68b307fd2c288ac00e40b54020000000576a90088ac00000000010000000219efe8e1194227624d2bb6f318c6ec8de8b7bbba0c81ae80c17edcdfc267471f000000008b483045022100ef15d2067b6a1a649afe62b966c7b0b52eccd25bff6092c6f6855653fbfc8d6f0220329b7e39b7081318ef7d6b1a48735a3d00f69ddbaa6b220158138da139eb74e501410490cb3e0cf1e82fd74da06588c2b8a227ce6cf3ffb586cb223a15466ce993ec9a831c05d428768859f7fed3f07ea99f57bcc6b7273e353d34062a61f44ed749c1ffffffff95d6e74b2c05ecefd10db5a9ae889cc7cfbc614d1fdc27dd2a5bcd8a6447c25b000000008b483045022100958f9940845b4c149fbf00942634eef1767f2cf6d786ab71394c6e563db5e64502206f4cfffb10513b59b02ee77f62f6e1481b70d78ccfd5ffe95ee97fa5ba93b2bd0141047826de0d9803045401b9eacdec3dd12ccc24db786d613997ab33c3e0cad2952c736b7360684cd8c5ca3698531108f9c1d121be690567b369d49a1c3400d96614ffffffff026043a97e0d0000001976a9143c6eddbc7b4dfba3870364c5f72b5adfec96a1d688ac00d159920b0000000576a90088ac000000000100000004b97076000b63b0af66b597376ba2f647ba15a03be001c5f84b60d804b9675416000000008a47304402207d2ab9d5febcac0c6863e57a97b363a51c21c836a5ade2efcbd88884da697784022075838f05471489b9b83d6349a91f259c8de85168412d267b5ab37484fe4b689c0141044428c31cb917b10df68b9228eec86d9236a700b30bd6db34d7c3a227bb403f0cdd02418a99936da84c6e111c054ca8f556ba149d2f3c78a539a8bdeb04214e62ffffffffd3162e2acc1e161e6bea079d45f38e71e91c0cf87858c4dc3d4001133733ebc4010000008a47304402205ced90985ef2db226e9e6cc10806334fe50dc6b9f3f759e6079600900968d7c302201ea8635b24cc7e7226ae3891d3968792753d346bbe29e68632b99b9acdf7382e014104db1c689aaee39d3294eeace8ecb58a1af09401b2e5732beb8c0e52cdcd82f38e22d404a521dd1f7bd238350aa2e2f7365619eae49d8f8411e323720f1db9984fffffffff50d2d9c5c95bf7aed197884e60d33847ce9d34c69f1fa4a28fe3fd5356cdbf14000000008b483045022100b68835fa1177de4aa514e55232c34a88ad9081acdaf30797565fbbf49f722dba02206ed2ed427afcea05c37fcc6e1f11e676a820215fa65fce16a5481316fbbcf577014104df16cb9d9c33e0783b2f6256727edb62451279f6067cc4f7d7d6017f23982152fab4bdc9efd830e995df472e05fc45f3bab3568c2bd8f5165d46be2d372eb313ffffffffe379d34887eba5e646ba43709ee78f480ed714a3b2a1fd072aaba6b1756858a7000000008c493046022100b430fe5fadcbd57a16ca8068a94f888a8fa4ac5bd8fcc30e3708dc15dab703f4022100b3ed2ef9bc04e068d8404b7fd8ff3284e88082da8436b543acec9404a75786a001410498cd5baf356c719a385b5437a569d17cb5f9705d1972d9657208f174b07eb7dd34bde6917d00a73e9e21b2667862cd2e0f6c3efe7bbb7cb1535aa702c2c56335ffffffff027a404c79020000001976a91400929f558848fdc75f28c8d54a60168f1f58e95288ac00e40b54020000000576a90088ac0000000001000000045286ba6b751fd73b489ff568c4703a218c1b84cb4f050c6868647281c8a0bb5a010000008b483045022100d9c62fa2400947bbef0cf3a12fb624cf7077cc7012c8779d60caab5e729c592a02203549b760feb804ff75b7debee0f488877267b1898f328e5ed0f41b359c8e4bfb014104406db037ac5abf7706be70bfcb8bfc96a06f4d2e9ff32d558626326c4292bd7fe009ab11b78fb77e954ff1f1d9e75e0b813b9294c935ec346f878ebf63f6e648ffffffffd979bac67c4770b7d426fa9e86e7f28e9b2fb122c54aa3dc1c1a5efbcebbe71c000000008b483045022100df404dee5c82f8a5f427f265b2a8bf8281287bb0a903ef7c9a420ad19b6240d702204ef82b8b1fb6d96af1b77eef45cfb41f30f8b972874e476b5babb1ee849aedd3014104dbdb7215d1d188a1d4b0cc753893ead675ff357d12a651bff4f5a085bc25ca3841f6685621be85fc5bffbb96d0ac7b22d7faa3b0a2e0dac791228fc21168986affffffffaf0f08cf052709bfc240a5c9797316cd992e029fbffafe8d12583ba7b5031f15000000008a47304402205e2b963834ab670a0ed1ef54dbe97bd059968a9a7000dd74c80e32da05c273560220498567c78d4257adb126b1c86c6f296f0ffbaeb45f9234c5fe0611570001b2d00141048b354f8985192f0cbc2240807f74696da5e1b26e3d4175a9c5ce29f476462337db3cd259926d106a77d89f806342ee14bee8dbda497992e0584cf71dacef881affffffff5033093d8fe628a954d4a349ba553d8aa423de6de279327a5d9d5cb43c3758ca000000008a47304402206c428dbf810e0fb77747f7ff9d60bf6657e7e3edb290b9a8de8c12982ecb08ce02207ad61ae4d2470b3d8759d99bb4bd116a90e771ab76fbfdc791be0f7a5cf5f328014104552b2eb41559e7ce64c513f8a606fcbd8e39b0f8320ea93b92d2d483c86d8e5f860bf652bee62e744b10671dbcc89acfe8df3f7b368162cf8c77a42e25f8b7a1ffffffff0200e40b54020000000576a90088ac27edda06030000001976a9140ad47afb47219ba4efadb4d33db6e49a71f724af88ac000000000100000002640bc279dc41264c678e24416062291991d247cb593c21193da12ac7e9ab0e00010000008a47304402204c00e5109dbe1644413d92ac8408e0c02d888850e97c1bd74aa80f88c609bdb6022047d3f208244a3111c612e6af13052efd4b543c4d112429d2f838d35ce859dcc2014104c99034ab76c908b87a22f89b8e260447a066349c754a4eaa4e2b4d663e4a92f6a1e6540a82c49fcdc03aff1f9937ffa6d4aaa97802276438bd9703f3eb732ce1fffffffffd269441066b1683fe398de40356c4958d3474d817d036581302dcd0412c4174000000008a47304402201f7a187130a083a4d941561e0c39d61287fe1580d874874d7a62aaa62a85f98202203a14a99b2ba48c870073234c56a3b055506116ca5b8d0af9a1dd7997b55bce010141048548bb73eb0ea484f7f55236522f4a681cbf75b91848eab975aad8af35791629bdd706fa26e57296c5accd02c91b1b051acc850bc1e7c037268b128a52bc4b5fffffffff0280f243d5000000000576a90088ac0488242d020000001976a9144914281232f335f5ca684da9145aff9fed2b1bd388ac000000000100000004a70a2acec4564cbf68ba54de025943cd34db518ef7ccaa1adb9f079166d1d838010000008b483045022100a2b5c5f76c8565f2dd24e13af4c56578dc1755b74bcc2fad27a61d5e9a76e9c102203c7e279e07d10b3c3b0c9c87d29faa0304bedf3e9444b23e58ce445f15a052db014104660cce1ed3c99e1e6c2af088be0fb107c5dabcecd4eedf45f076dbe7ab5c0aa01506fdee2c2a6520f193d40a7c53d680f36ed17629bdd408bbc0be793a9026b8ffffffff50fabcb9f2a42335ceae67d9a97e852f1ffe19356b086fb1a1ee9873edd50eac000000008c493046022100d1dfe92b9f122cb5163b35f4a80895b106751d3600e330d3612c5b78ffa84a39022100939d0af24b057f08958030a13d46e2d56842b8e147dc7ffa7c0cc19e3d3527c601410465b84f162d2be2a7fcaf467c610594e7209f96bb3e2fac8e57bdd9f02f8c4b5f3434e656f8cd0d7876cf671690e939e31bf3d5b4ce70590862dedd35eb0db903ffffffffca944f07a8fbbdf81b4c575129e97485a3d3c160f271d07a426728f3c4da08e6010000008a47304402206c0022db38159e32f48bbfef5c781077cd147d9885d7f20a1af73297309a22b60220417b89f11ddbedf407e4c2ec745f0ee99bdac213c752fe77099b37ac5651e675014104016719c960c4312afd82d81818599a79c8e52c96bd631ae12ed7fd474f656696e4365bf60f5433691944f2456f49750e9fc42b067a4fa31c109f2171072af728ffffffff4adeb8301ef9093c4325e15c6c822bd34288ab8b8909754673af9d4b67bdc234000000008a47304402200515281ee114adcb28c3c5e6dc0d15d6ce0a69dcbb1457308f69ca109cf64e9c02200d48b04f2a44202ce0843e6b80a4e3c78eaa2a7f300259a1116c86d0550c887a014104cfa10d3f5636b42042d44d10193e9c56ad5b37adb4af47844f8b361e42748f33cc8540ac015696ecf4d687f86ae17260a393d40a5c4ed2f343d6af87a9c71b08ffffffff0200e40b54020000000576a90088aca04ad999000000001976a91415c2f66d85282d3136f044874899df12c6af401688ac00000000010000000548bbc19f5dc889b303a5097032b6235d0f293c3517437a22ab868fc5b030ccbc000000008c49304602210083cfebea9add1b691c17bbaec289ca4ee4b0e5052b95b85321350d8eaf17e7ff022100daa02af66c312540cde6f0d78d7156fbec17cdd0b1fc9f737319eded387197aa014104a9efbbc65f1fc99a89b899a2ca0f6ea7a709dfe1386aa1ee22ddef0fcff32cfd776d79fc67f937604cfcf39505de4b79ba753205f5d17537bae4b54e26248d0fffffffff0b050a9a612d4007e369d02370faf7dd9c99f4025136f9ba3e3c05f3026b6155010000008b483045022100df6607bb6285833a13aa20e96c05693b3078b7371956b8239aed1ce15af1ba8502204c2384dcda08bb68e5dcf0d65fea4aa2933fc1b7fb827541648cc03e4886248d014104debd5fe6e6bc796ac51e8d8e6853f6bce567f2d56e4c6086e14f7d7cedcd7999302980e775b5334deb21f29a2794e54979db14dc239f9237b217619297c1152bffffffffcd34d66eabddd3067fb4a2aefbd097e6c2a636d50fecf59f2676e58ecbb5f092000000008b4830450220784a6af74465584014dd815c3075918137b96f30edfa84d05accab644b61238a0221008f3bd6860303a3ade81cf66823c933083e18d38573da4f28a11f9bec2e3f6c560141044ccbe1d2a628b313340ff0418e8568f904cdc4eb6d4893ad8da70c4165dcb838122061aa47e2ab852cd782fbb42d21bcb8ba243e78ff4344f8bd4faee092054affffffff42d957671ff25e06200376ecf7e764b75305405a397235d85663bcb187390fc7000000008a47304402205363f75cb7c1a01bfe10e70467c7438a266793ec10d1347aa5a54fd60e82966102206b7fbb1b974dc3d99c74b7496627746562e609cefda4b646c654eb4dd34eef4c014104eaf728ca0222ed95104b3bb7497011e275b83b76a01c3dbb20dd6fcc12b3ead2722c3a19a02bb3f113433477c4cc6756fc126c8382e85666d8574af34e0275abffffffff6c3fad717b65f66f35f7b6f37f37d1b5e5487594a5c26ec2c15a4958aa266920000000008b4830450221009abbc460d10aeefc526c5f1b2a03e9d30522918bb870b5aa2d52614109b7ef910220439a27b134bd6dd967ea8e6afca46f8f7b7344120b66fc20c7fbb6ddbf561530014104b187b9770f4be1aa8e7ffede833b4e9cd3955ec8ec435ed53ab5c0b047df419913c6d7ece8586222ba4fd4f3c19a582214c3412dd3f31b1479d806548242e285ffffffff0267ed0290080000000576a90088acd8ec1115000000001976a9145c6c7f33ff387aa5e76a909ee1eae77a982f8fce88ac0000000001000000020d7dc1fbab67fdc7ad07a32dc264a6a89e1b4f90bd2a68e250d50f6f56422a4a010000008b4830450220109fa1e9015ca11ffb48c1c3396c16aabdcfa45f5161c45dd01be0d00296989102210087e4591ec96b49ce0aab06e59034b066e7dcfcdfddef978860ef55a6fd305465014104e22055ed36a6825cb9ef98896e21c697b9a1d0c233220ce5ff1e79a5dc8231e84fa8e3e18ad0a999fc30121a3effa6576ca5bf8f542f2dbe8d6b1271e103050dffffffff1e9bd8d6617a678a73e3e1ef1649f75bebf09cc1a25855ddeaf7b7e332e5245b000000008b4830450221009017d6a5c2e3d07d84e1c30b36cc5288cde374a7ebf5ff00851120e591e7dbd1022058c673a7ccecb1b93f837ccdac83246d949ad65cb7774b32372923b49a66b5be014104c0838f5fa82a5eddd38ba77f3025f0c5b1d7fe044254052ef2fb2d5ddb590d0e706d336b3c4c7564747412023f146dc1084583e7f0d20f09ce2f0522705b6976ffffffff02c507156a000000001976a914b4ddb8b532ac4bf8eb049f17e3b0439f0bb6cda688ac80ba0a58030000000576a90088ac000000000100000002023f9e8ec6ba2557aa132a321fb59a7431446be1f1ac47459f9cf5f3c0ec839f000000008a47304402207af3e5fa4af66df9d65c1d9990e1840ed7d93aeeb52aec715bc96834ce59413902207ef98c22214ccb4672959c5388764520bf79d64b70efd86a52c313dddb3017c60141042501bf738c99668d59e2eac327c5fa1d2df878b70c632e07b4870c56675db8f70474476069d6c0870ec6656507ced71ecbc4cdfb0c54e14d645de2cb20fb967cffffffff328d45c8c2db1e93b80f72583b64d1afa2cba961f3fe0e681ae3a1d1ea817842000000008a47304402207ef22192d74963e4b18a14fecfde3dcae0bdb98405711f92a3f07a4e71bf3d0902202ffa231600f2de0370d89dd12a00d864362efdbb7d662b5a6df3caf053fccf8b014104aec30ec70029b07ac2c520e5aca16bbe177cafa876bfa59f4a28dcb5741e6207add42b73d528c53c599ad54827106077e018d52a70e38432cc29d0425edbfccaffffffff022124df22010000001976a914c36eb340bede7392d20a1ead0e22223c3614e51288ac00e40b54020000000576a90088ac000000000100000002b3433bd439ad4de84486497ae0f8792d2af6c93a6beaf3498c449c34d30b06a5010000008b48304502207ef51939f938e73ea87281f8e2ca4d9dee529750e187602eb585fcd7f7e804b30221009ad3b8519fe91b45bbe509c9a45a709fb90bd61c0d4fff1a49d1be8459bbe32001410465000d8f80f2a2de2e670e1a895ba12d64508504e2fe0fcb3c81c107a376810e8296353fa345d5f923fe03ed27b493c853fff931e878adec54d861f8fe211673ffffffffb78ba1f379ce69c3425514260cbac8d58abc324af57190da0151552f3e0e06a9000000008a47304402201bf73c5f8cca86bb008adebd69ca0c3954682f7fccf4a42a5bb74a88ae11e3910220312301f26a99f25f42896fb7e69c8e05ce0095bdc3d9cfa5ecfd5b3c7e9bfcc6014104476cf62f4d084e142dd386dbf58c5cf7ede50381fe9dc204082efb91e139f38502838a6d7816e83d9f1b9f42e940fbd6d10a0f64d53a143e54a610b080de7d89ffffffff0205b61ea1000000001976a914db9d4a800a4ffd2da65b38eca5d86c6d7d08127f88ac00e40b54020000000576a90088ac000000000100000002b6c4ed0ad8af3df9657a86620091f77168ad971dc9cb5b450f4f9ea674111a5b010000008c493046022100852a86d2f99db69939c1c9ce1508ae815eddedb72d8b718e51e31700021da8b6022100dfa8089991e932c7f4e50b3f4ba758f5fca45fb0e325a13441b5479d578f37ae0141044288c93686409888ab458da8a13bcc3ac42fbc7d705037330737481ad4e1138d2282d72bdd005cfc73e0e4dfcf9e34f9bfe015fecd47eeef438341c91a3ad7e1ffffffff0395cca9da44033256732afefff0baf8b18e4773b9d9175e49a7f5ce046f60b8000000008b4830450220577bf83dd84dfe9367586050f6b8e58410e0184d1d5e0978ab84bbb5cc1e669e022100a4d57e20a0523b8841bcda6d80f239469e1ead73ddd0075e500ecbbf10a9c4b1014104ea85268a10b2e98808318e492fb8c8dd8ce71bc76bdbf224673116d17cd272b0cd1f501e9f6cfafecce6d577156bac4ff2ed1b61e060162f1df2574f83044fd9ffffffff02511ff15c010000001976a91481dcf5d6b068f73a950abcedd85ef3f6a08f644e88ac000d4ad5000000000576a90088ac000000000100000002365db58511ead0a21395a5ace6b6807879aced9d4af329a635c4539ff5c0a59a010000008b483045022100f9dbed75fe4383887f705ff21f2e4c1387f05146390866310de1a93dd5fe29bc02204fe61799e2c45758645498f35853f19e09370af67301ff5013390ea4ff5062bc014104b757f915135e703fb46090f0b43b561a9ad03e58709d740854fcf57a0926a9d8a88fe650ff62333ba22a6ddb6c47ded04576f0bc95240693ea14eb2336bb23fcffffffff71637c58482f5d9752a1e6d4fb641e29406d27e0603c1d90a5b233d4a423adf0000000008c493046022100b5a80c6c27fcc0ff871d8afb7ef69b0b9a12b2af1933e26860adeac18a15c4f1022100f76f91213af3f81824e7272f8e13c2d2af80e8ab6e3627cc8e61e7c94eae13cb014104ccd734cb966202957feb2d99665fde8dc10058c846eee9600c472f04de62f8c43e29675b49cab939964893b5561d4ce3a7b843724f824eaef371f8106b971648ffffffff02227dd4bf000000001976a914941cd547e06648a37b65113b2c964f7614013d7c88ac00752b7d000000000576a90088ac000000000100000002820f995cc5610abc2bb46cde44e09d3999c040e7c55c018d51d6101d97e3c7fc000000008b483045022100ed90c5758af1016b55c7edf5c6d5ed51ee58240bec20b37426484ce6861b25a502204243b29c1844b2d7d7be7e86baf66b6190ad82157dd6e255a158e3306f694b4d0141040dfdd0d4f52b0d06d8456382fafc5e9cfecc9d8b22ccba8f81ac547b07bcf9b0b325354403ec29676958179ee88238c69148e604ecfc1a3a1db988034bed9d8cffffffff5c72c48dc9a96256b89bba1faeccfba2299c84541ddc9993d8629170186473a5000000008b483045022100906a575cb19b671a37ceb99bab48ab9ad16f41e6acd457bc815d87009aeefcc302207119d2eb966c182ca89b2e2f7758eceee643cfecc7957ae66b99abc22b9fb4a5014104b36bf897bc8e3ddaf994d35fb9318b96ea39c83d79fa321e734d9e0ccf098acfe084a85da72b21acc06fbd3fd8c0d1135200de59435a9513e7a070d4e437c4aaffffffff0288d71375000000001976a914956ec1b15bf7bbf51579322acfa2de0181a92b4888ac00e40b54020000000576a90088ac000000000100000002e3dcb3745b2268694e09dfef8322e760148bc20a572b4ba05114154937db3e7a000000008a47304402200732e1793ef171cfa80e6e1e31162667544bead7b41c5f07a1efeb202e7d6d4a022064077c7255c3d7e6f486b98cf73385d1be479a7249cbe7a9064c0a5765f02d9b014104eb6b057a58e583a1102674fbd261c6e5d12e38c0614ef09d075ced6758250cecfb650be3f72cc372db7fa3b1687ed3d2cd3031a3d9b5eaa277237aa399084d7effffffff77bc71b71f63a44f4a6237f4465ba1c5047fc6eea03d6dfd2ca99839c97b1904000000008b483045022006dd69e583d3e6375328acc7008ca8cb524a627b642f167893f38e84ae778d670221009e042c8c7c5a87a99b1d9666bbc9bcb533bf2dab193fff812cd30daeb3bc091d014104af4ff96561c45324bb0e5acbc9969bae759c06805df2b4f158198c80f550799bf82e00469a597d85cad4bda76f96aa75db681153e70968270df4f6530845963affffffff0200216e83010000000576a90088acf605e870010000001976a9149fa92478eb2a698b1c43b93d1cac579e5867f33488ac0000000001000000026d2b9285ee9e842b9bd7679c968fba4f50d4f4e4f3fc3ab09b67c9a33181b356000000008b48304502201fcfefc85852e5d62d84d7b291e06d610f6e7a8cee2cccf45fcb6ac45da7bed50221009522abef511ff6e55bef3fe4d42a0392fb1158e4ee11d199e96df7fb092e5b0f01410439c7e7dfa93f1f2df27c6477da515959d20e5adeb97bbad791c319b798f8471a51e3ba6e9ecd655d052600f74acd2dd4e4c550e112f3390cff7ac5f9b9e7d28bffffffffd715f45860232b410559a3637666e15b8e0a5d638b8e3bce62e2a85867a1c80b000000008b483045022100e4f93784ed21edcf992b10800562e889c232b9c91b6be7477a0f5d8096a24f7002207f73f01e85f2dfefe42e7eec5b367d8f1e3f6770c473e6ec4aecf419b969ef4d01410432b78bcf0094b1d85ef4e0432615cda857e2db16f36b6d36bebb3b4af694eafeaadf44cf5f366c2e280e3976121867fbbde9bd52433db6ad90e1badda28d7ca9ffffffff02403d49ed000000000576a90088ac49a00b05020000001976a91419addef47d03493eec8498478a12816bf60b0b3388ac00000000010000000272ab6897ceb3ed03b6a2b1ef780132eefd30b868a2675645f9e000190cc97847000000008a473044022005c02efb73f739e86129b4f83c1d1328dfd699d004a3d751d9ae4727649e008402205d6895bdec555fe2e873b141c2231a03a005a4e77acb54f53508ff64349308d80141045104b3ab84e7ef4fbe927a80fce88238d959b55fdb24060d186b7d8236d4622d91c3f1637fb72180997a66490b2b3619cbe66a1ac8b29d4b424bd428c5027d19ffffffff7eda41fd44dad3cf3b348a77551d1def84453c7d9ed6b5891a8478e4df4d95e5000000008b4830450220699bb2298c200c827a427a0b93367db0b709a1b0015661911f84d4f6a4c8fe40022100b8c145a4bef4e6e634e9e812bfbbac0dd6ff40f68feaf2459908d44fc7852c1201410445a0247f0ebf30cc032863169a20c1769be5059c5b2c1f396b0e20885700f06b9d4f57da5560531506b78e687f48185cab7481e0347762a4934929b1fe294734ffffffff02d864fd4a020000000576a90088acb762a15d000000001976a91467cd6ae9649e5d80c4e3892d31e1bf3cc241e88d88ac0000000001000000029e2d25174c440290f96c5c85f75a286926b28d724dadcc09389b520ae229d0d5000000008b483045022008fd31a7c955a1aa1d39849ff0ea7c2d286f6557184bb1b6d1bb91a4e0f742e4022100942e632ad357efbc63b24e761c3ee14dce98cb21c4acf5fdcbbb7dc95919053a0141049cced48977ff3e8886e9de9f148871f0338d3393eecfa003bc383a3eda1bf0bcc284205bfb9aeac58426370e4f2027d3bb7284d09b79539b1e2242cdca33ee1effffffff2c92c1722d2ed167e523943d601d1bbaf946da44cd4bdfdcdf9f3ff71a216a29000000008c493046022100a68ea7160f424662aa0e2e10d664250b890bd77d3425220df0677ed354e7bd7c022100814abf85fe352b6962f65046c43458a58060ce823bec18bd73ffeae9b859300b014104338e8d5b7c053dfbec2d081ce4149100b625a11eada6875973bcbb9a0e4a6cbd8b3b3aa2483cbd5fb1c0106c223f391f0872b1a9e87ef514e60cab51b0e3f112ffffffff02008589dc000000000576a90088acef220c91000000001976a914a37e0e3bdf5b14dd31656a4d10dc03ed7ac2387a88ac0000000001000000053ed213109224b1dd1670c7c0ab58d4e9624bc35e3e5387c6cfbdc865727f6ed5010000008b483045022100fc69d035bee079389ac6fdb384d9a849fc219ae7ac9af27a0aab505e9c52780c022050801b3971a363716e10182e43f56d9a8cc796b41764e2d78c5cd291cb84783e014104bc602e6f995fa1665aecc6a47a37a4cc709db7b2a74ef5dc77af12fc2e630265741f3ea1900b1263978eeeddc77f07c849b617715a39d28295b00bab728eb0acffffffffa07db90df20868c32368fe93c94f8728dd4c067336e4ed1cb17ae25d909715f1010000008a473044022038edeaec1ef24a2221656e80b4b91437f9e15fc1a33c1d53c7c08843a486761a022075571c3fbc99321f7427d3e38adc2e6a6eb9693edbcbbe8d3722ca876d271543014104cc25f901c5393e5e1bc31e65867dce8530da7f7447b291a15856fd00bb97e7425303c9d6141fdea77bd3e714c4e14fc4881f8f929d9d1f3b69ef2589580c7048ffffffff6a3c51fc1627448a20147eecca0cdc3eacab2d9553bceec440c589ce7559a560010000008c4930460221009e25da2150990195aa4c82f4be3975e4dfb1807fb61b3ce38b985bc0aa962cc00221008072b935899ba5221e8953a4f6f5d000bc073fa39a5268a37ceb74b57c41632e014104889e87dc69456de7341b3f4b7be13cfd0f12a25293dd5bc5f277898b4302247df8a3d6d62b4eda4dd85006d05c1e4333632bdb9885156ff5cbb0950be1d7efd3ffffffff118296ff18757293b834b527d9079c7cc910758b95179e17dd1072520b9903db000000008c493046022100880937c0eb29bb02001180bb9acd4a63a09df77a8cfaa202d9fe4ed8e45ddc21022100aadfe80a5268be7e151a3aa8215fb2cfe6e2cce903a014909dbd1141cbe05d9b0141049cced48977ff3e8886e9de9f148871f0338d3393eecfa003bc383a3eda1bf0bcc284205bfb9aeac58426370e4f2027d3bb7284d09b79539b1e2242cdca33ee1effffffff8ef7419e33621c8dac43f74ec5dec2463c8893cf449afc740ebb19bdba0deb75000000008b483045022055f534b8ecb4dbf832aeb566aa4e95dd0371c76a2eeed2edde441bcec5862402022100b243282a2003028f988267c75228306fd6dcb68ad1db4c0e7bd04acb3891743c014104dd2f0f609d31439fdcfe64f20c133e95156527aaee35ad7e2ec7d148256e41ab00eabe612e40419fa7552601e68cae3d7b6f8d519bd7444175fcac8cbb6d807fffffffff02935c2815010000001976a914f2e63314c350094550c703fcdcd4850ad37d831088ac00e40b54020000000576a90088ac0000000001000000028f1c4c3b555ad15599cbdfc217ca83b25ebc63a7a47583eecc9e849cdb292b74000000008c49304602210098a473ff7b98d7acc3ce3acda19f4e45f330e04ca4d31a02b51ae69adc7b2b000221009c46c53ed0fc1b8a257328f9b6d8f6e02ed6c44a94b2a0a4c4728027558d6c8301410440008f0ad075c74dec817f2e4bebeacf89f0666b3c5c35bba197a7cce335da684ee2a9087d66b0501934cc3a92dc5f68660af35367dac4e5aac1aaa1f840eabdffffffffc4c286341e5608e2ded8cabe7f29b02a8ccc427c87e51f2288dfa291783be2cb000000008b4830450221009139501c766c7d74d0d8a1f34efedca971f53358bd79263204a2eee841578a8502201a105f464759a52ae65e2ac3bccb563bb3cbc093ae13e328b1411e87edb63596014104b19a8b0dbe177f7e019e0cb95f12ad3ea6923805a8daba88ec5f28d777ab2eb7376d7e00a726d3b5056dbe301a5c3e01748a83210a458421daaeb77c9975c5a4ffffffff0221dc0124000000001976a914f74c13d007a14fbd5b9ec91dfd1cfb963d0881f088acc01de690000000000576a90088ac0000000001000000014d0da1a301f0497839db0288f1c5a6fb7e4f00ee030775840d3d8dccd752eaab010000008b4830450221009eaf4aed229e80d11a1f3a82ea27657639493c980e591fa770b8af36829bac910220777ab5514c6645d885a74fdfd5daaeddb674c5f2f807474fdd552d8fc556e717014104d60963c00623ebfded78e022bb40b870c4a9d2382d69881c1db327fc2d39baa56fe0c6ce07a18da6ce9b8d6ad4f0e48ef07582fcc7c7cbd0816804e6d9fd1155ffffffff02e0930400000000001976a914fbe5e214b23fc7a0bc3e764b043dca89c20b1f3c88ac60c20523000000001976a9141537e5e949dd0f552bd7e9f4ee3cf7b223851d6d88ac00000000010000000166c7d23b44e7833216150ebac52063af59a9edd978336a6119f71ad8e404ab10000000008b4830450221008c284af16d3ee85470b726c1e0632b12a3bd9b0af51cbbdcae6ae52b34a8aa3f022030dc762c7b2c68e41d5facf79b059259eb257b5d2b01ff7c0c66e125c9ef6e980141048e114fd19de8b537b82712930b1bd64c796d0abcba48c92053481a824361570b4b2fa5039adaed27aee785f6f68699803a4d1b04a63372d415a91c63303e2388ffffffff02fffe2b06000000001976a9147fc4dab271d443d3aa399a5f96707b54ea0aabbf88ac18170000000000001976a914c4c69a79f4e56bf6e17308f6e5e7ff4dc046ac0f88ac0000000001000000014c380ce44c37cb3d99d65e9cdcf0519a32f3e693c7e7b22ad97cf2dbec6aaed1000000008b483045022063a331ff7aeebbd06912e5ec4cdec6e89bb376b1a55523a9eb73eff9ff8bd91f022100a3a6c92593832057772d8b890fb7e6c0f3f21851ba8c3cdf2b8b30e1ebda97f3014104dad007c26b13ffa69e44ea32e7dce7781f95552e636cdd04024a55e5d0a9fed07f6b2fc2b9f8e689afb2d0aed790944bc390d38560bfb7178c16a73ff396f2adffffffff029d18a500000000001976a914b75a4b00d4df1e8358cc79f3d8d000d4806f46ee88ac9fc70600000000001976a914a31cc35833040aa1f8b09d69dcf0ae7359d6f4b788ac00000000\", formatter, BitcoinHeader.class);\n        assertTrue(b1.getID().equals(new BID(\"0000000000000449ee5b94ba7a051caffff5c23d6a03335f6e20e3985b5ffa61\")));\n        Block b2 = Block.fromWireDump(b1.toWireDump(), formatter, BitcoinHeader.class);\n        assertTrue(b1.getID().equals(b2.getID()));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static List<Integer> topologicalSort(List<Integer>[] graph) {\n\t\tint n = graph.length;\n\t\tboolean[] used = new boolean[n];\n\t\tLinkedList<Integer> res = new LinkedList<>();\n\t\tused = new boolean[n];\n\t\tfor (int i = 0; i < n; i++){\n\t\t\tif (!used[i])\n\t\t\t\tdfs(graph, used, res, i);\n\t\t}\n\t\t\t\t\n\t\tCollections.reverse(res);\n\t\treturn res;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic void registerResources() {\n        if (sInitialized) {\n            return;\n        }\n\n        org.chromium.content.R.attr.select_dialog_multichoice =\n                R.attr.select_dialog_multichoice;\n        org.chromium.content.R.attr.select_dialog_singlechoice =\n                R.attr.select_dialog_singlechoice;\n        org.chromium.ui.R.color.dropdown_dark_divider_color =\n                R.color.dropdown_dark_divider_color;\n        org.chromium.ui.R.color.dropdown_divider_color =\n                R.color.dropdown_divider_color;\n        org.chromium.ui.R.color.color_picker_border_color =\n                R.color.color_picker_border_color;\n        org.chromium.content.R.dimen.link_preview_overlay_radius =\n                R.dimen.link_preview_overlay_radius;\n        org.chromium.ui.R.dimen.dropdown_item_height =\n                R.dimen.dropdown_item_height;\n        org.chromium.ui.R.dimen.dropdown_item_divider_height =\n                R.dimen.dropdown_item_divider_height;\n        org.chromium.ui.R.dimen.color_button_height =\n                R.dimen.color_button_height;\n        org.chromium.ui.R.dimen.config_min_scaling_span =\n                R.dimen.config_min_scaling_span;\n        org.chromium.ui.R.dimen.config_min_scaling_touch_major =\n                R.dimen.config_min_scaling_touch_major;\n        org.chromium.content.R.drawable.ondemand_overlay =\n                R.drawable.ondemand_overlay;\n        org.chromium.ui.R.drawable.color_button_background =\n                R.drawable.color_button_background;\n        org.chromium.ui.R.drawable.color_picker_advanced_select_handle =\n                R.drawable.color_picker_advanced_select_handle;\n        org.chromium.content.R.id.ampm = R.id.ampm;\n        org.chromium.content.R.id.date_picker =\n                R.id.date_picker;\n        org.chromium.content.R.id.date_time_suggestion_value =\n                R.id.date_time_suggestion_value;\n        org.chromium.content.R.id.date_time_suggestion_label =\n                R.id.date_time_suggestion_label;\n        org.chromium.content.R.id.hour = R.id.hour;\n        org.chromium.content.R.id.milli = R.id.milli;\n        org.chromium.content.R.id.minute = R.id.minute;\n        org.chromium.content.R.id.pickers = R.id.pickers;\n        org.chromium.content.R.id.position_in_year =\n                R.id.position_in_year;\n        org.chromium.content.R.id.second = R.id.second;\n        org.chromium.content.R.id.second_colon =\n                R.id.second_colon;\n        org.chromium.content.R.id.second_dot =\n                R.id.second_dot;\n        org.chromium.content.R.id.select_action_menu_select_all =\n                R.id.select_action_menu_select_all;\n        org.chromium.content.R.id.select_action_menu_cut =\n                R.id.select_action_menu_cut;\n        org.chromium.content.R.id.select_action_menu_copy =\n                R.id.select_action_menu_copy;\n        org.chromium.content.R.id.select_action_menu_paste =\n                R.id.select_action_menu_paste;\n        org.chromium.content.R.id.select_action_menu_share =\n                R.id.select_action_menu_share;\n        org.chromium.content.R.id.select_action_menu_web_search =\n                R.id.select_action_menu_web_search;\n        org.chromium.content.R.id.time_picker =\n                R.id.time_picker;\n        org.chromium.content.R.id.year = R.id.year;\n        org.chromium.content.R.id.main_text =\n                R.id.main_text;\n        org.chromium.content.R.id.sub_text =\n                R.id.sub_text;\n        org.chromium.content.R.id.arrow_image =\n                R.id.arrow_image;\n        org.chromium.ui.R.id.selected_color_view =\n                R.id.selected_color_view;\n        org.chromium.ui.R.id.title =\n                R.id.title;\n        org.chromium.ui.R.id.more_colors_button =\n                R.id.more_colors_button;\n        org.chromium.ui.R.id.color_picker_advanced =\n                R.id.color_picker_advanced;\n        org.chromium.ui.R.id.color_picker_simple =\n                R.id.color_picker_simple;\n        org.chromium.ui.R.id.color_button_swatch =\n                R.id.color_button_swatch;\n        org.chromium.ui.R.id.more_colors_button_border =\n                R.id.more_colors_button_border;\n        org.chromium.ui.R.id.gradient =\n                R.id.gradient;\n        org.chromium.ui.R.id.text =\n                R.id.text;\n        org.chromium.ui.R.id.seek_bar =\n                R.id.seek_bar;\n        org.chromium.ui.R.id.dropdown_label =\n                R.id.dropdown_label;\n        org.chromium.ui.R.id.dropdown_popup_window =\n                R.id.dropdown_popup_window;\n        org.chromium.ui.R.id.dropdown_sublabel =\n                R.id.dropdown_sublabel;\n        org.chromium.content.R.layout.date_time_picker_dialog =\n                R.layout.date_time_picker_dialog;\n        org.chromium.content.R.layout.date_time_suggestion =\n                R.layout.date_time_suggestion;\n        org.chromium.content.R.layout.two_field_date_picker =\n                R.layout.two_field_date_picker;\n        org.chromium.content.R.layout.multi_field_time_picker_dialog =\n                R.layout.multi_field_time_picker_dialog;\n        org.chromium.content.R.layout.validation_message_bubble =\n                R.layout.validation_message_bubble;\n        org.chromium.ui.R.layout.color_picker_dialog_title =\n                R.layout.color_picker_dialog_title;\n        org.chromium.ui.R.layout.color_picker_dialog_content =\n                R.layout.color_picker_dialog_content;\n        org.chromium.ui.R.layout.color_picker_advanced_component =\n                R.layout.color_picker_advanced_component;\n        org.chromium.ui.R.layout.dropdown_item =\n                R.layout.dropdown_item;\n        org.chromium.content.R.menu.select_action_menu =\n                R.menu.select_action_menu;\n        org.chromium.content.R.string.accessibility_content_view =\n                R.string.accessibility_content_view;\n        org.chromium.content.R.string.accessibility_date_picker_month =\n                R.string.accessibility_date_picker_month;\n        org.chromium.content.R.string.accessibility_date_picker_week =\n                R.string.accessibility_date_picker_week;\n        org.chromium.content.R.string.accessibility_date_picker_year =\n                R.string.accessibility_date_picker_year;\n        org.chromium.content.R.string.accessibility_datetime_picker_date =\n                R.string.accessibility_datetime_picker_date;\n        org.chromium.content.R.string.accessibility_datetime_picker_time =\n                R.string.accessibility_datetime_picker_time;\n        org.chromium.content.R.string.actionbar_share =\n                R.string.actionbar_share;\n        org.chromium.content.R.string.actionbar_web_search =\n                R.string.actionbar_web_search;\n        org.chromium.content.R.string.date_picker_dialog_clear =\n                R.string.date_picker_dialog_clear;\n        org.chromium.content.R.string.date_picker_dialog_set =\n                R.string.date_picker_dialog_set;\n        org.chromium.content.R.string.date_picker_dialog_title =\n                R.string.date_picker_dialog_title;\n        org.chromium.content.R.string.date_picker_dialog_other_button_label =\n                R.string.date_picker_dialog_other_button_label;\n        org.chromium.content.R.string.date_time_picker_dialog_title =\n                R.string.date_time_picker_dialog_title;\n        org.chromium.content.R.string.media_player_error_button =\n                R.string.media_player_error_button;\n        org.chromium.content.R.string.media_player_error_text_invalid_progressive_playback =\n                R.string.media_player_error_text_invalid_progressive_playback;\n        org.chromium.content.R.string.media_player_error_text_unknown =\n                R.string.media_player_error_text_unknown;\n        org.chromium.content.R.string.media_player_error_title =\n                R.string.media_player_error_title;\n        org.chromium.content.R.string.media_player_loading_video =\n                R.string.media_player_loading_video;\n        org.chromium.content.R.string.month_picker_dialog_title =\n                R.string.month_picker_dialog_title;\n        org.chromium.content.R.string.profiler_error_toast =\n                R.string.profiler_error_toast;\n        org.chromium.content.R.string.profiler_no_storage_toast =\n                R.string.profiler_no_storage_toast;\n        org.chromium.content.R.string.profiler_started_toast =\n                R.string.profiler_started_toast;\n        org.chromium.content.R.string.profiler_stopped_toast =\n                R.string.profiler_stopped_toast;\n        org.chromium.content.R.string.time_picker_dialog_am =\n                R.string.time_picker_dialog_am;\n        org.chromium.content.R.string.time_picker_dialog_pm =\n                R.string.time_picker_dialog_pm;\n        org.chromium.content.R.string.time_picker_dialog_hour_minute_separator =\n                R.string.time_picker_dialog_hour_minute_separator;\n        org.chromium.content.R.string.time_picker_dialog_hour_minute_separator =\n                R.string.time_picker_dialog_hour_minute_separator;\n        org.chromium.content.R.string.time_picker_dialog_minute_second_separator =\n                R.string.time_picker_dialog_minute_second_separator;\n        org.chromium.content.R.string.time_picker_dialog_second_subsecond_separator =\n                R.string.time_picker_dialog_second_subsecond_separator;\n        org.chromium.content.R.string.time_picker_dialog_title =\n                R.string.time_picker_dialog_title;\n        org.chromium.content.R.string.week_picker_dialog_title =\n                R.string.week_picker_dialog_title;\n        org.chromium.ui.R.string.copy_to_clipboard_failure_message =\n                R.string.copy_to_clipboard_failure_message;\n        org.chromium.ui.R.string.low_memory_error =\n                R.string.low_memory_error;\n        org.chromium.ui.R.string.opening_file_error =\n                R.string.opening_file_error;\n        org.chromium.ui.R.string.color_picker_button_more =\n                R.string.color_picker_button_more;\n        org.chromium.ui.R.string.color_picker_hue =\n                R.string.color_picker_hue;\n        org.chromium.ui.R.string.color_picker_saturation =\n                R.string.color_picker_saturation;\n        org.chromium.ui.R.string.color_picker_value =\n                R.string.color_picker_value;\n        org.chromium.ui.R.string.color_picker_button_set =\n                R.string.color_picker_button_set;\n        org.chromium.ui.R.string.color_picker_button_cancel =\n                R.string.color_picker_button_cancel;\n        org.chromium.ui.R.string.color_picker_dialog_title =\n                R.string.color_picker_dialog_title;\n        org.chromium.ui.R.string.color_picker_button_red =\n                R.string.color_picker_button_red;\n        org.chromium.ui.R.string.color_picker_button_cyan =\n                R.string.color_picker_button_cyan;\n        org.chromium.ui.R.string.color_picker_button_blue =\n                R.string.color_picker_button_blue;\n        org.chromium.ui.R.string.color_picker_button_green =\n                R.string.color_picker_button_green;\n        org.chromium.ui.R.string.color_picker_button_magenta =\n                R.string.color_picker_button_magenta;\n        org.chromium.ui.R.string.color_picker_button_yellow =\n                R.string.color_picker_button_yellow;\n        org.chromium.ui.R.string.color_picker_button_black =\n                R.string.color_picker_button_black;\n        org.chromium.ui.R.string.color_picker_button_white =\n                R.string.color_picker_button_white;\n        org.chromium.content.R.style.SelectPopupDialog =\n                R.style.SelectPopupDialog;\n        org.chromium.ui.R.style.DropdownPopupWindow =\n                R.style.DropdownPopupWindow;\n\n\n        if (false) {\n            verifyFields(org.chromium.content.R.class);\n            verifyFields(org.chromium.ui.R.class);\n        }\n\n\n        \n\n        sInitialized = true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic int findCountBySql(String hql,String function) {\n\t\tfinal String sql = \"select \"+function+\" \" + hql;\n\t\tHibernateCallback cb = new HibernateCallback() {\n\t\t\tpublic Object doInHibernate(Session session)\n\t\t\t\t\tthrows HibernateException {\n\t\t\t\tList list=session.createQuery(sql).list();\n\t\t\t\tif(list.get(0)!=null){\n\t\t\t\t\treturn Integer.parseInt(list.get(0).toString());\n\t\t\t\t}else{\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t} // end function\n\t\t};// end callback\n\t\treturn (Integer) this.getHibernateTemplate().execute(cb);\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprotected void printMethods (       IndentingWriter writer,\n                                        boolean useQualifiedNames,\n                                        boolean useIDLNames,\n                                        boolean globalIDLNames) throws IOException {\n\n        CompoundType.Method[] methods = getMethods();\n\n        for (int m = 0; m < methods.length; m++) {\n            CompoundType.Method theMethod = methods[m];\n            printMethod(theMethod,writer,useQualifiedNames,useIDLNames,globalIDLNames);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean performAction(ActionParameters actionParameters, MainFrame mainFrame) {\n        MuAction action = getActionInstance(actionParameters, mainFrame);\n\n        if (action == null) {\n            return false;\n        }\n\n        action.performAction();\n\n        return true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        \n        byte[] byteArray = new byte[bytes.size()]; \n        bytes.getBytes(byteArray, 0);\n        return Utf8Utils.utf8BytesToString(byteArray);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n  @SuppressWarnings(\"unchecked\")\n  public int compareValues(T first, T second) {\n    if (first == null) {\n      if (second == null) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (second == null) {\n      return 1;\n    } else {\n      return ((Comparable<T>) first).compareTo(second);\n    }\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        return CharacterData.of(codePoint).isIdentifierIgnorable(codePoint);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic IssuerEntry(final int id, final X509Certificate cert)\n            throws CertificateEncodingException {\n        this.id = id;\n        this.cert = ParamUtil.requireNonNull(\"cert\", cert);\n        this.notBefore = cert.getNotBefore();\n        this.issuerHashMap = getIssuerHashAndKeys(cert.getEncoded());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n  \n\tprivate void sendCrashLog2PM(String fileName){  \n\t\tif(!new File(fileName).exists()){  \n\t\t\treturn;  \n\t\t}  \n\t\tFileInputStream fis = null;  \n\t\tBufferedReader reader = null;  \n\t\tString s = null;  \n\t\ttry {  \n\t\t\tfis = new FileInputStream(fileName);  \n\t\t\treader = new BufferedReader(new InputStreamReader(fis, \"GBK\"));  \n\t\t\twhile(true){  \n\t\t\t\ts = reader.readLine();  \n\t\t\t\tif(s == null) break;  \n\t\t\t\tLog.i(\"info\", s.toString());  \n\t\t\t}  \n\t\t} catch (FileNotFoundException e) {  \n\t\t\te.printStackTrace();  \n\t\t} catch (IOException e) {  \n\t\t\te.printStackTrace();  \n\t\t}finally{   \n\t\t\ttry {  \n\t\t\t\treader.close();  \n\t\t\t\tfis.close();  \n\t\t\t} catch (IOException e) {  \n\t\t\t\te.printStackTrace();  \n\t\t\t}  \n\t\t}  \n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public CharSequence logestCommonSubsequence(final CharSequence left, final CharSequence right) {\n        if (left == null || right == null) {\n            throw new IllegalArgumentException(\"Inputs must not be null\");\n        }\n        final StringBuilder longestCommonSubstringArray = new StringBuilder(Math.max(left.length(), right.length()));\n        final int[][] lcsLengthArray = longestCommonSubstringLengthArray(left, right);\n        int i = left.length() - 1;\n        int j = right.length() - 1;\n        int k = lcsLengthArray[left.length()][right.length()] - 1;\n        while (k >= 0) {\n            if (left.charAt(i) == right.charAt(j)) {\n                longestCommonSubstringArray.append(left.charAt(i));\n                i = i - 1;\n                j = j - 1;\n                k = k - 1;\n            } else if (lcsLengthArray[i + 1][j] < lcsLengthArray[i][j + 1]) {\n                i = i - 1;\n            } else {\n                j = j - 1;\n            }\n        }\n        return longestCommonSubstringArray.reverse().toString();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic <A extends Closeable> A api(Class<A> apitype, final String provider, final String credId, final String url,\n            final String zones, final boolean trustAll) {\n        return api(apitype, provider, credId, buildJcloudsOverrides(url, zones, trustAll));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,\n            boolean serializeType) throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {\n\n        java.lang.String prefix = null;\n        java.lang.String namespace = null;\n\n        prefix = parentQName.getPrefix();\n        namespace = parentQName.getNamespaceURI();\n        writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);\n\n        if (serializeType) {\n\n            java.lang.String namespacePrefix = registerPrefix(xmlWriter, \"urn:partner.soap.sforce.com\");\n            if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {\n                writeAttribute(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\", \"type\", namespacePrefix + \":DescribeIcon\",\n                        xmlWriter);\n            } else {\n                writeAttribute(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\", \"type\", \"DescribeIcon\", xmlWriter);\n            }\n\n        }\n\n        namespace = \"urn:partner.soap.sforce.com\";\n        writeStartElement(null, namespace, \"contentType\", xmlWriter);\n\n        if (localContentType == null) {\n\n            throw new org.apache.axis2.databinding.ADBException(\"contentType cannot be null!!\");\n\n        } else {\n\n            xmlWriter.writeCharacters(localContentType);\n\n        }\n\n        xmlWriter.writeEndElement();\n\n        namespace = \"urn:partner.soap.sforce.com\";\n        writeStartElement(null, namespace, \"height\", xmlWriter);\n\n        if (localHeight == java.lang.Integer.MIN_VALUE) {\n\n            writeAttribute(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\", \"nil\", \"1\", xmlWriter);\n\n        } else {\n            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHeight));\n        }\n\n        xmlWriter.writeEndElement();\n\n        namespace = \"urn:partner.soap.sforce.com\";\n        writeStartElement(null, namespace, \"theme\", xmlWriter);\n\n        if (localTheme == null) {\n\n            throw new org.apache.axis2.databinding.ADBException(\"theme cannot be null!!\");\n\n        } else {\n\n            xmlWriter.writeCharacters(localTheme);\n\n        }\n\n        xmlWriter.writeEndElement();\n\n        namespace = \"urn:partner.soap.sforce.com\";\n        writeStartElement(null, namespace, \"url\", xmlWriter);\n\n        if (localUrl == null) {\n\n            throw new org.apache.axis2.databinding.ADBException(\"url cannot be null!!\");\n\n        } else {\n\n            xmlWriter.writeCharacters(localUrl);\n\n        }\n\n        xmlWriter.writeEndElement();\n\n        namespace = \"urn:partner.soap.sforce.com\";\n        writeStartElement(null, namespace, \"width\", xmlWriter);\n\n        if (localWidth == java.lang.Integer.MIN_VALUE) {\n\n            writeAttribute(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\", \"nil\", \"1\", xmlWriter);\n\n        } else {\n            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWidth));\n        }\n\n        xmlWriter.writeEndElement();\n\n        xmlWriter.writeEndElement();\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate IFile getWorkspaceFile(IFileStore fileStore) {\n\t\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();\n\t\tIFile[] files = workspaceRoot.findFilesForLocationURI(fileStore.toURI());\n\t\tif(files != null && files.length == 1)\n\t\t\treturn files[0];\n\t\treturn null;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public PartitionLoad getLoad() throws IOException{\n        Map<ServerName, List<HRegionInfo>> serverToRegionMap=new HashMap<>();\n        try(RegionLocator rl=connection.getRegionLocator(tableName)){\n            List<HRegionLocation> locations=rl.getAllRegionLocations();\n            for(HRegionLocation location : locations){\n                List<HRegionInfo> info=serverToRegionMap.get(location.getServerName());\n                if(info==null){\n                    info = new LinkedList<>();\n                    serverToRegionMap.put(location.getServerName(),info);\n                }\n                info.add(location.getRegionInfo());\n            }\n        }\n        int totalStoreFileSizeMB = 0;\n        int totalMemstoreSieMB = 0;\n        int storefileIndexSizeMB = 0;\n        try(Admin admin=connection.getAdmin()){\n            ClusterStatus clusterStatus=admin.getClusterStatus();\n            for(Map.Entry<ServerName,List<HRegionInfo>> entry:serverToRegionMap.entrySet()){\n                ServerLoad load=clusterStatus.getLoad(entry.getKey());\n                Map<byte[], RegionLoad> regionsLoad=load.getRegionsLoad();\n                for(HRegionInfo info:entry.getValue()){\n                    RegionLoad rl = regionsLoad.get(info.getRegionName());\n                    totalStoreFileSizeMB+=rl.getStorefileSizeMB();\n                    totalMemstoreSieMB+=rl.getMemStoreSizeMB();\n                    storefileIndexSizeMB+=rl.getStorefileIndexSizeMB();\n                }\n            }\n        }\n        return new HPartitionLoad(getName(),totalStoreFileSizeMB,totalMemstoreSieMB,storefileIndexSizeMB);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic Vector<Operator> topologicalSort() {\n\t\tfinal Map<Operator, Integer> originalIndices = new HashMap<Operator, Integer>();\n\t\tfor (int i = 0; i < operators.size(); i++) {\n\t\t\toriginalIndices.put(operators.get(i), i);\n\t\t}\n\t\tEdgeCounter counter = new EdgeCounter(operators);\n\t\tfor (Operator child : getOperators()) {\n\t\t\tfor (OutputPort out : child.getOutputPorts().getAllPorts()) {\n\t\t\t\tInputPort dest = out.getDestination();\n\t\t\t\tif (dest != null) {\n\t\t\t\t\tcounter.incNumEdges(dest.getPorts().getOwner().getOperator());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tVector<Operator> sorted = new Vector<Operator>();\n\t\tPriorityQueue<Operator> independentOperators = new PriorityQueue<Operator>(Math.max(1, operators.size()),\n\t\t\t\tnew Comparator<Operator>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic int compare(Operator o1, Operator o2) {\n\t\t\t\t\t\treturn originalIndices.get(o1) - originalIndices.get(o2);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\tindependentOperators.addAll(counter.getIndependentOperators());\n\t\twhile (!independentOperators.isEmpty()) {\n\t\t\tOperator first = independentOperators.poll();\n\t\t\tsorted.add(first);\n\t\t\tfor (OutputPort out : first.getOutputPorts().getAllPorts()) {\n\t\t\t\tInputPort dest = out.getDestination();\n\t\t\t\tif (dest != null) {\n\t\t\t\t\tOperator destOp = dest.getPorts().getOwner().getOperator();\n\t\t\t\t\tif (counter.decNumEdges(destOp) == 0) {\n\t\t\t\t\t\tindependentOperators.add(destOp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprotected List<EMConversation> loadConversationList() {\n\t\tMap<String, EMConversation> conversations = EMClient.getInstance().chatManager().getAllConversations();\n\t\t\n\t\tList<Pair<Long, EMConversation>> sortList = new ArrayList<Pair<Long, EMConversation>>();\n\t\tsynchronized (conversations) {\n\t\t\tfor (EMConversation conversation : conversations.values()) {\n\t\t\t\tif (conversation.getAllMessages().size() != 0) {\n\t\t\t\t\tsortList.add(\n\t\t\t\t\t\t\tnew Pair<Long, EMConversation>(conversation.getLastMessage().getMsgTime(), conversation));\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\tsortConversationByLastChatTime(sortList);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tList<EMConversation> list = new ArrayList<EMConversation>();\n\t\tfor (Pair<Long, EMConversation> sortItem : sortList) {\n\t\t\tlist.add(sortItem.second);\n\t\t}\n\t\treturn list;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tpublic List<Gadget> findAll(int start, int end) throws SystemException {\n\t\treturn findAll(start, end, null);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void theLocalAndRemoteGitReposAreTaggedWithTheModuleNameAndVersion() throws IOException, InterruptedException {\n        assertThat(testProject.local, not(hasTag(\"parent-as-sibling-\" + expectedAggregatorVersion)));\n        assertThat(testProject.origin, not(hasTag(\"parent-as-sibling-\" + expectedAggregatorVersion)));\n        assertThat(testProject.local, hasTag(\"core-utils-\" + expectedCoreVersion));\n        assertThat(testProject.origin, hasTag(\"core-utils-\" + expectedCoreVersion));\n        assertThat(testProject.local, not(hasTag(\"console-app-\" + expectedAppVersion)));\n        assertThat(testProject.origin, not(hasTag(\"console-app-\" + expectedAppVersion)));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private boolean isInContent(float touchX, float touchY, Sticker currentSticker) {\n\n\n\n        float[] f = new float[9];\n        currentSticker.getmMatrix().getValues(f);\n        mContentDstLeftTopPoint.x = f[0] * 0 + f[1] * 0 + f[2];\n        mContentDstLeftTopPoint.y = f[3] * 0 + f[4] * 0 + f[5];\n        mContentDstRightTopPoint.x = f[0] * currentSticker.getBitmap().getWidth() + f[1] * 0 + f[2];\n        mContentDstRightTopPoint.y = f[3] * currentSticker.getBitmap().getWidth() + f[4] * 0 + f[5];\n        mContentDstLeftBottomPoint.x = f[0] * 0 + f[1] * currentSticker.getBitmap().getHeight() + f[2];\n        mContentDstLeftBottomPoint.y = f[3] * 0 + f[4] * currentSticker.getBitmap().getHeight() + f[5];\n        mContentDstRigintBottomPoint.x = f[0] * currentSticker.getBitmap().getWidth() + f[1] * currentSticker.getBitmap().getHeight() + f[2];\n        mContentDstRigintBottomPoint.y = f[3] * currentSticker.getBitmap().getWidth() + f[4] * currentSticker.getBitmap().getHeight() + f[5];\n\n        PointF pointF = new PointF(touchX, touchY);\n        PointF[] vertexPointFs = new PointF[] { mContentDstLeftTopPoint, mContentDstRightTopPoint, mContentDstRigintBottomPoint, mContentDstLeftBottomPoint };\n        int nCross = 0;\n        for (int i = 0; i < vertexPointFs.length; i++) {\n            PointF p1 = vertexPointFs[i];\n            PointF p2 = vertexPointFs[(i + 1) % vertexPointFs.length];\n            if (p1.y == p2.y)\n                continue;\n            if (pointF.y < Math.min(p1.y, p2.y))\n                continue;\n            if (pointF.y >= Math.max(p1.y, p2.y))\n                continue;\n            double x = (double) (pointF.y - p1.y) * (double) (p2.x - p1.x) / (double) (p2.y - p1.y) + p1.x;\n            if (x > pointF.x)\n                nCross++;\n        }\n        return (nCross % 2 == 1);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void adaptToEnablementChange(HighlightingStyle highlighting,\n\t\t\tPropertyChangeEvent event) {\n\t\tObject value = event.getNewValue();\n\t\tboolean eventValue;\n\t\tif (value instanceof Boolean)\n\t\t\teventValue = ((Boolean) value).booleanValue();\n\t\telse if (IPreferenceStore.TRUE.equals(value))\n\t\t\teventValue = true;\n\t\telse\n\t\t\teventValue = false;\n\t\thighlighting.setEnabled(eventValue);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        \n        byte[] byteArray = new byte[bytes.size()]; \n        bytes.getBytes(byteArray, 0);\n        return Utf8Utils.utf8BytesToString(byteArray);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic JMethod addGetter(final JDefinedClass definedClass, final JFieldVar field) {\n        final JMethod method = definedClass.method(JMod.PUBLIC, field.type(), getGetterName(field));\n        final JBlock block = method.body();\n        block._return(field);\n        return method;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate ProductSceneView getProductSceneView(MouseEvent event) {\n        final Component eventComponent = event.getComponent();\n        if (eventComponent instanceof ProductSceneView) {\n            return (ProductSceneView) eventComponent;\n        }\n        final Container parentComponent = eventComponent.getParent();\n        if (parentComponent instanceof ProductSceneView) {\n            return (ProductSceneView) parentComponent;\n        }\n        if (parentComponent.getParent() instanceof ProductSceneView) {\n            return (ProductSceneView) parentComponent.getParent();\n        }\n        return null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static <V> Iterable<V> topologicalSort(\n            @Nonnull Map<V, List<V>> adjacencyMap, @Nonnull Function<V, String> vertexNameFn\n    ) {\n        Map<V, TarjanVertex<V>> tarjanVertices =\n                adjacencyMap.keySet().stream()\n                            .map(v -> entry(v, new TarjanVertex<>(v)))\n                            .collect(toMap(Entry::getKey, Entry::getValue));\n        Map<TarjanVertex<V>, List<TarjanVertex<V>>> tarjanAdjacencyMap =\n                adjacencyMap.entrySet().stream()\n                            .collect(toMap(e -> tarjanVertices.get(e.getKey()),\n                                           e -> e.getValue().stream()\n                                                 .map(tarjanVertices::get)\n                                                 .collect(toList())));\n        return new TopologicalSorter<>(tarjanAdjacencyMap, vertexNameFn).go();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprotected void fireVetoableChange (String name, Object o, Object n)\n\t\tthrows PropertyVetoException\n\t{\n\t\tif (_vetoableSupport != null)\n\t\t\t_vetoableSupport.fireVetoableChange(name, o, n);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static String loadJSONFromAsset(Context context, String path) {\n        String json;\n        try {\n            InputStream is = context.getAssets().open(path);\n            int size = is.available();\n            byte[] buffer = new byte[size];\n            is.read(buffer);\n            is.close();\n            json = new String(buffer, \"UTF-8\");\n        } catch (IOException ex) {\n            ex.printStackTrace();\n            return null;\n        }\n        return json;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic int\n\t\tnormalizeMe() throws IllegalArgumentException {\n        int src;\n        int wordcount = 0;\n        int bitcount  = 0;\n        int v = 0;\n        for ( src= nWords-1 ; src >= 0 && (v=data[src]) == 0 ; src--){\n            wordcount += 1;\n        }\n        if ( src < 0 ){\n            throw new IllegalArgumentException(\"zero value\");\n        }\n        \n        nWords -= wordcount;\n        \n        if ( (v & 0xf0000000) != 0 ){\n            for( bitcount = 32 ; (v & 0xf0000000) != 0 ; bitcount-- )\n                v >>>= 1;\n        } else {\n            while ( v <= 0x000fffff ){\n                v <<= 8;\n                bitcount += 8;\n            }\n            while ( v <= 0x07ffffff ){\n                v <<= 1;\n                bitcount += 1;\n            }\n        }\n        if ( bitcount != 0 )\n            lshiftMe( bitcount );\n        return bitcount;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public boolean isSourceEncodingSupported(AudioFormat.Encoding sourceEncoding){\n\n        AudioFormat.Encoding sourceEncodings[] = getSourceEncodings();\n\n        for(int i=0; i<sourceEncodings.length; i++) {\n            if( sourceEncoding.equals( sourceEncodings[i]) ) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprivate int blendColors(int nFromColor, int nToColor, float nProgress) {\n\t\tfinal float nInverseProgress = 1f - nProgress;\n\n\t\tfinal float r = Color.red(nToColor) * nProgress + Color.red(nFromColor) * nInverseProgress;\n\t\tfinal float g = Color.green(nToColor) * nProgress + Color.green(nFromColor) * nInverseProgress;\n\t\tfinal float b = Color.blue(nToColor) * nProgress + Color.blue(nFromColor) * nInverseProgress;\n\n\t\treturn Color.rgb((int) r, (int) g, (int) b);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; } \n        return retVal;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@NotNull\n    @Parameterized.Parameters\n    public static Collection<Object[]> combinations() {\n        @NotNull List<Object[]> list = new ArrayList<>();\n        @NotNull Marshallable[] objects = {\n                new Nested(new ScalarValues(), Collections.emptyList(), Collections.emptySet(), Collections.emptyMap(), \"\".split(\"\")),\n                new ScalarValues(1),\n        };\n        @NotNull String[] fields = {\n                \"[!FieldInfo {\\n\" +\n                        \"  name: values,\\n\" +\n                        \"  type: !type net.openhft.chronicle.wire.marshallable.ScalarValues,\\n\" +\n                        \"  bracketType: MAP,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: strings,\\n\" +\n                        \"  type: !type !seq,\\n\" +\n                        \"  bracketType: SEQ,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: ints,\\n\" +\n                        \"  type: !type !set,\\n\" +\n                        \"  bracketType: SEQ,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: map,\\n\" +\n                        \"  type: !type !map,\\n\" +\n                        \"  bracketType: MAP,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: array,\\n\" +\n                        \"  type: !type String[],\\n\" +\n                        \"  bracketType: SEQ,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \"]\",\n                \"[!FieldInfo {\\n\" +\n                        \"  name: flag,\\n\" +\n                        \"  type: !type boolean,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: b,\\n\" +\n                        \"  type: !type byte,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: s,\\n\" +\n                        \"  type: !type short,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: ch,\\n\" +\n                        \"  type: !type char,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: i,\\n\" +\n                        \"  type: !type int,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: f,\\n\" +\n                        \"  type: !type float,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: l,\\n\" +\n                        \"  type: !type long,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: d,\\n\" +\n                        \"  type: !type double,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: flag2,\\n\" +\n                        \"  type: !type java.lang.Boolean,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: b2,\\n\" +\n                        \"  type: !type byte,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: s2,\\n\" +\n                        \"  type: !type short,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: ch2,\\n\" +\n                        \"  type: !type Char,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: i2,\\n\" +\n                        \"  type: !type int,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: f2,\\n\" +\n                        \"  type: !type Float32,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: l2,\\n\" +\n                        \"  type: !type long,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: d2,\\n\" +\n                        \"  type: !type Float64,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: aClass,\\n\" +\n                        \"  type: !type type,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: policy,\\n\" +\n                        \"  type: !type java.lang.annotation.RetentionPolicy,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: text,\\n\" +\n                        \"  type: !type String,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: date,\\n\" +\n                        \"  type: !type Date,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: time,\\n\" +\n                        \"  type: !type Time,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: dateTime,\\n\" +\n                        \"  type: !type DateTime,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: zonedDateTime,\\n\" +\n                        \"  type: !type ZonedDateTime,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: uuid,\\n\" +\n                        \"  type: !type java.util.UUID,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: bi,\\n\" +\n                        \"  type: !type java.math.BigInteger,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: bd,\\n\" +\n                        \"  type: !type java.math.BigDecimal,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: file,\\n\" +\n                        \"  type: !type java.io.File,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \"]\",\n        };\n        for (int i = 0; i < objects.length; i++) {\n            Marshallable object = objects[i];\n            String fi = fields[i];\n            @NotNull Object[] test = {object, fi};\n            list.add(test);\n        }\n        return list;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0];\n\n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return -1f;\n            \n            Object[] row = new Object[val.length - 1];\n            for(int i = 1; i <= row.length; i++)\n                row[i - 1] = val[i];\n            table.addRow(row);\n            return 1f;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Transient\n    public String[] getFieldNames() {\n        return new String[] {\n                \"id\",\n                \"userId\",\n                \"userName\",\n                \"linkedInvoices\",\n                \"paymentMethod\",\n                \"currency\",\n                \"amount\",\n                \"balance\",\n                \"isRefund\",\n                \"isPreauth\",\n                \"createdDate\",\n                \"paymentDate\",\n                \"paymentNotes\",\n\n                \"paymentProcessor\",\n                \"code1\",\n                \"code2\",\n                \"code3\",\n                \"approvalCode\",\n                \"avs\",\n                \"transactionId\",\n                \"md5\",\n                \"cardCode\",\n                \"responseMessage\",\n\n                \"cardName\",\n                \"cardNumber\",\n                \"cardType\",\n                \"cardExpiry\",\n\n                \"achAccountName\",\n                \"achBankName\",\n                \"achAccountType\",\n\n                \"chequeBankName\",\n                \"chequeNumber\",\n                \"chequeDate\",\n        };\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n        if(!nonSequentialModel)\n            return new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n        else{\n\n            CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n            this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n            BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n            this.updateNaturalParameterPrior(prior);\n\n            return learntBN;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static Matrix getDistanceMatrix(Atom[] ca1, Atom[]ca2){\n\n\t\tint r = ca1.length;\n\t\tint c = ca2.length;\n\n\t\tMatrix out = new Matrix(r,c);\n\n\t\tfor (int i=0; i<r; i++) {\n\t\t\tAtom a1 = ca1[i];\n\t\t\tfor (int j=0;j<c;j++){\n\t\t\t\tAtom b1 = ca2[j];\n\n\t\t\t\ttry {\n\t\t\t\t\tdouble d = Calc.getDistance(a1,b1);\n\t\t\t\t\tout.set(i,j,d);\n\t\t\t\t} catch (StructureException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t\tout.set(i,j,999);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\n\t\tCIMSession cimSession =new  CIMSession(ctx.channel());\n\t\t\n\t\tlogger.warn(\"sessionClosed()... from \"+ctx.channel().remoteAddress()+\" nid:\"+cimSession.getNid() +\",isConnected:\"+ctx.channel().isActive());\n\t\tCIMRequestHandler handler = handlers.get(CIMSESSION_CLOSED_HANDLER_KEY);\n\t\tif(handler!=null)\n\t\t{\n\t\t\thandler.process(cimSession, null);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic ExecutionEvent(final Command command, @SuppressWarnings(\"rawtypes\") final Map parameters,\n\t\t\tfinal Object trigger, final Object applicationContext) {\n\t\tif (parameters == null) {\n\t\t\tthrow new NullPointerException(\"An execution event must have a non-null map of parameters\"); //$NON-NLS-1$\n\t\t}\n\n\t\tthis.command = command;\n\t\tthis.parameters = parameters;\n\t\tthis.trigger = trigger;\n\t\tthis.applicationContext = applicationContext;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void channelInactive(final ChannelHandlerContext ctx) throws Exception {\n        for (Attachment object : fileMap.values()) {\n            try {\n                object.outputStream.close();\n            } catch (IOException e) {\n                logger.log(Level.SEVERE, e.getLocalizedMessage(), e);\n            }\n        }\n\n        ctx.fireChannelInactive();    // forward to the next handler in the pipeline\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    protected void initEnablementBehaviours( List<EnablementBehaviour> enablementBehaviours ) {\n\t\tenablementBehaviours.add(new WithinLegalLayerBoundsBehaviour());\n\t\tenablementBehaviours.add(new ValidToolDetectionActivator(new Class[] {\n\t\t\t\tGeometry.class,\n\t\t\t\tPolygon.class,\n\t\t\t\tMultiPolygon.class,\n\t\t\t\tLineString.class,\n\t\t\t\tMultiLineString.class }));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n\tpublic void testShootmeRegister() throws Exception {\n\n\t\tlogger.info(\"About to deploy the application\");\n\t\tdeployer.deploy(testArchive);\n\t\tisDeployed = true;\n\n\t\t\n\t\tSipURI requestURI = sender.getAddressFactory().createSipURI(\"sender\",\"127.0.0.1:5070;transport=udp\");\n\t\tassertTrue(sipPhoneSender.register(requestURI, \"no_user\", \"no_password\", \"sip:sender@127.0.0.1:5080;transport=udp;lr\", TIMEOUT, TIMEOUT));\n\n\t\t\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n        this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n        BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n        this.updateNaturalParameterPrior(prior);\n\n        return learntBN;\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        return CharacterData.of(codePoint).isIdentifierIgnorable(codePoint);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    protected ResourceHandle prefetch(ResourceSpec spec,\n                                      ResourceAllocator alloc, Transaction tran) {\n        AssocWithThreadResourceHandle ar = localResource.get();\n        if (ar != null) {\n            synchronized (ar.lock) {\n                if ((ar.getThreadId() != Thread.currentThread().getId()) ||\n                        ar.hasConnectionErrorOccurred() ||\n                        ar.isDirty() || !ar.isAssociated()) {\n\n                    localResource.remove();\n                    return null;\n                }\n\n                if (ar.getResourceState().isFree() &&\n                        ar.getResourceState().isUnenlisted()) {\n                    if (matchConnections) {\n                        if (!alloc.matchConnection(ar)) {\n                            localResource.remove();\n                            ar.setAssociated(false);\n                            if(poolLifeCycleListener != null){\n                                poolLifeCycleListener.connectionNotMatched();\n                            }\n                            return null;\n                        }\n                        if(poolLifeCycleListener != null){\n                            poolLifeCycleListener.connectionMatched();\n                        }\n                    }\n\n                    if (!isConnectionValid(ar, alloc)) {\n                        localResource.remove();\n                        ar.setAssociated(false);\n                        return null;\n                    }\n\n                    setResourceStateToBusy(ar);\n                    if (maxConnectionUsage_ > 0) {\n                        ar.incrementUsageCount();\n                    }\n                    if(poolLifeCycleListener != null) {\n                        poolLifeCycleListener.connectionUsed(ar.getId());\n                        poolLifeCycleListener.decrementNumConnFree();\n                        \n                    }\n                    return ar;\n                }\n            }\n        }\n\n        return null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static Endpoint create(Object implementor, WebServiceFeature ... features) {\n        return create(null, implementor, features);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public URI resolve(URI uri) {\n        return resolve(this, uri);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate Token operatorName()\n    {\n        Token token = null;\n    \n        switch ( LA(1) )\n        {\n            case 'a':\n            {\n                token = and();\n                break;\n            }\n    \n            case 'o':\n            {\n                token = or();\n                break;\n            }\n    \n            case 'm':\n            {\n                token = mod();\n                break;\n            }\n    \n            case 'd':\n            {\n                token = div();\n                break;\n            }\n        }\n    \n        return token;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@RequestMapping(\"/\")\n    public void api(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        String reqUrl = request.getRequestURL().toString();\n        reqUrl = reqUrl.replace(\"api\", \"api\") + \"index.html\";\n        HttpClient client = new HttpClient();\n        HttpMethod method = new GetMethod(reqUrl);\n        client.executeMethod(method);\n        String apiUrl = request.getServerName() + COLON + request.getServerPort() + API_DOC;\n \n        String html = method.getResponseBodyAsString();\n        String body = html.replace(\"petstore.swagger.io/v2/swagger.json\", apiUrl)\n                .replace(\"css/\", \"/api/css/\")\n                .replace(\"lib/\", \"/api/lib/\")\n                .replace(\"swagger-ui.js\", \"/api/swagger-ui.js\");\n        response.getWriter().write(body);\n        response.getWriter().flush();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate <T> List<T> arrayToList(T[] array) {\n\t\tList<T> list = new ArrayList<T>(array.length);\n\t\tfor (T t : array) {\n\t\t\tlist.add(t);\n\t\t}\n\t\treturn list;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testBlock() throws HyperLedgerException, IOException {\n        Block b1 =\n                Block.fromWireDump(\"\", formatter, BitcoinHeader.class);\n        assertTrue(b1.getID().equals(new BID(\"0000000000000449ee5b94ba7a051caffff5c23d6a03335f6e20e3985b5ffa61\")));\n        Block b2 = Block.fromWireDump(b1.toWireDump(), formatter, BitcoinHeader.class);\n        assertTrue(b1.getID().equals(b2.getID()));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void channelInactive(final ChannelHandlerContext ctx) throws Exception {\n        for (Attachment object : fileMap.values()) {\n            try {\n                object.outputStream.close();\n            } catch (IOException e) {\n                logger.log(Level.SEVERE, e.getLocalizedMessage(), e);\n            }\n        }\n\n        ctx.fireChannelInactive();    // forward to the next handler in the pipeline\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic List<Author> authors() {\n\t\treturn listCall(new ListCallable<Author>() {\n\t\t\tpublic List<Author> call() throws RemoteException {\n\t\t\t\tfinal List<String> strings = myInterface.authors();\n\t\t\t\tfinal List<Author> authors = new ArrayList<Author>(strings.size());\n\t\t\t\tfor (String s : strings) {\n\t\t\t\t\tauthors.add(Util.stringToAuthor(s));\n\t\t\t\t}\n\t\t\t\treturn authors;\n\t\t\t}\n\t\t});\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void setSceneRasterStartAndStopTime(Product product) {\n        final Product sourceProduct = getSourceProduct();\n        final ProductData.UTC startTime = sourceProduct.getStartTime();\n        final ProductData.UTC stopTime = sourceProduct.getEndTime();\n        final ProductSubsetDef subsetDef = getSubsetDef();\n        if (startTime != null && stopTime != null && subsetDef != null && subsetDef.getRegion() != null) {\n            final double height = sourceProduct.getSceneRasterHeight();\n            final Rectangle region = subsetDef.getRegion();\n            final double regionY = region.getY();\n            final double regionHeight = region.getHeight();\n            final double dStart = startTime.getMJD();\n            final double dStop = stopTime.getMJD();\n            final double vPerLine = (dStop - dStart) / (height - 1);\n            final double newStart = vPerLine * regionY + dStart;\n            final double newStop = vPerLine * (regionHeight - 1) + newStart;\n            product.setStartTime(new ProductData.UTC(newStart));\n            product.setEndTime(new ProductData.UTC(newStop));\n        } else {\n            product.setStartTime(startTime);\n            product.setEndTime(stopTime);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        int sample(final RandomGenerator random) {\n            while(true) {\n\n                final double u = hIntegralNumberOfElements + random.nextDouble() * (hIntegralX1 - hIntegralNumberOfElements);\n\n                double x = hIntegralInverse(u);\n\n                int k = (int)(x + 0.5);\n\n                if (k < 1) {\n                    k = 1;\n                }\n                else if (k > numberOfElements) {\n                    k = numberOfElements;\n                }\n\n\n                if (k - x <= s || u >= hIntegral(k + 0.5) - h(k)) {\n\n\n                    return k;\n                }\n            }\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static List<Integer> topologicalSort(List<Integer>[] graph) {\n\t\tint n = graph.length;\n\t\tboolean[] used = new boolean[n];\n\t\tLinkedList<Integer> res = new LinkedList<>();\n\t\tused = new boolean[n];\n\t\tfor (int i = 0; i < n; i++){\n\t\t\tif (!used[i])\n\t\t\t\tdfs(graph, used, res, i);\n\t\t}\n\t\t\t\t\n\t\tCollections.reverse(res);\n\t\treturn res;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void createRemoteDisplay(final Display disp){\n\t\t\ttry{\n\t\t\t\tif (disp == null){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (remoteDisplay != null && remoteDisplay.getDisplay() != disp) {\n\t\t\t\t\tremoteDisplay.dismissPresentation();\n\t\t\t\t}\n\n\t\t\t\tFutureTask<Boolean> fTask =  new FutureTask<Boolean>( new SdlRemoteDisplay.Creator(context, disp, remoteDisplay, remoteDisplayClass, new SdlRemoteDisplay.Callback(){\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onCreated(final SdlRemoteDisplay remoteDisplay) {\n\t\t\t\t\t\tVideoStreamingManager.this.remoteDisplay = remoteDisplay;\n\t\t\t\t\t\tif(hapticManager != null) {\n\t\t\t\t\t\t\tremoteDisplay.getMainView().post(new Runnable() {\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\t\thapticManager.refreshHapticData(remoteDisplay.getMainView());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tImageResolution resolution = null;\n\t\t\t\t\t\tif(getWiProVersion()>=5){ //At this point we should already have the capability\n\t\t\t\t\t\t\tVideoStreamingCapability capability = (VideoStreamingCapability)_systemCapabilityManager.getCapability(SystemCapabilityType.VIDEO_STREAMING);\n\t\t\t\t\t\t\tresolution = capability.getPreferredResolution();\n\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\tDisplayCapabilities dispCap = (DisplayCapabilities) _systemCapabilityManager.getCapability(SystemCapabilityType.DISPLAY);\n\t\t\t\t\t\t\tif (dispCap != null) {\n\t\t\t\t\t\t\t\t resolution = (dispCap.getScreenParams().getImageResolution());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(resolution != null){\n\t\t\t\t\t\t\tDisplayMetrics displayMetrics = new DisplayMetrics();\n\t\t\t\t\t\t\tdisp.getMetrics(displayMetrics);\n\t\t\t\t\t\t\ttouchScalar[0] = ((float)displayMetrics.widthPixels) / resolution.getResolutionWidth();\n\t\t\t\t\t\t\ttouchScalar[1] = ((float)displayMetrics.heightPixels) / resolution.getResolutionHeight();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onInvalidated(final SdlRemoteDisplay remoteDisplay) {\n\t\t\t\t\t\tif(hapticManager != null) {\n\t\t\t\t\t\t\tremoteDisplay.getMainView().post(new Runnable() {\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\t\thapticManager.refreshHapticData(remoteDisplay.getMainView());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} ));\n\t\t\t\tThread showPresentation = new Thread(fTask);\n\n\t\t\t\tshowPresentation.start();\n\t\t\t\t} catch (Exception ex) {\n\t\t\t\tLog.e(TAG, \"Unable to create Virtual Display.\");\n\t\t\t}\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void process(JCas cas) throws AnalysisEngineProcessException {\n      if (this.isTraining()) {\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_Three LCWord_three CapitalType_INITIAL_UPPERCASE L0OOB1 L1OOB2 R0_sequence R0_TypePath_Pos_NN R0_TypePath_Stem_sequenc R1_elements R1_TypePath_Pos_NNS R1_TypePath_Stem_element TypePath_Pos_CD TypePath_Stem_Three PrevNEMTokenLabel_L0OOB1 PrevNEMTokenLabel_L1OOB2\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_sequence LCWord_sequence CapitalType_ALL_LOWERCASE Prefix3_seq Suffix3_nce Suffix4_ence Suffix5_uence L0_Three L0_TypePath_Pos_CD L0_TypePath_Stem_Three L1OOB1 R0_elements R0_TypePath_Pos_NNS R0_TypePath_Stem_element R1_are R1_TypePath_Pos_VBP R1_TypePath_Stem_are TypePath_Pos_NN TypePath_Stem_sequenc PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1OOB1\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_elements LCWord_elements CapitalType_ALL_LOWERCASE Prefix3_ele Suffix3_nts Suffix4_ents Suffix5_ments L0_sequence L0_TypePath_Pos_NN L0_TypePath_Stem_sequenc L1_Three L1_TypePath_Pos_CD L1_TypePath_Stem_Three R0_are R0_TypePath_Pos_VBP R0_TypePath_Stem_are R1_shown R1_TypePath_Pos_VBN R1_TypePath_Stem_shown TypePath_Pos_NNS TypePath_Stem_element PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_are LCWord_are CapitalType_ALL_LOWERCASE L0_elements L0_TypePath_Pos_NNS L0_TypePath_Stem_element L1_sequence L1_TypePath_Pos_NN L1_TypePath_Stem_sequenc R0_shown R0_TypePath_Pos_VBN R0_TypePath_Stem_shown R1_to R1_TypePath_Pos_TO R1_TypePath_Stem_to TypePath_Pos_VBP TypePath_Stem_are PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_shown LCWord_shown CapitalType_ALL_LOWERCASE L0_are L0_TypePath_Pos_VBP L0_TypePath_Stem_are L1_elements L1_TypePath_Pos_NNS L1_TypePath_Stem_element R0_to R0_TypePath_Pos_TO R0_TypePath_Stem_to R1_be R1_TypePath_Pos_VB R1_TypePath_Stem_be TypePath_Pos_VBN TypePath_Stem_shown PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_to LCWord_to CapitalType_ALL_LOWERCASE L0_shown L0_TypePath_Pos_VBN L0_TypePath_Stem_shown L1_are L1_TypePath_Pos_VBP L1_TypePath_Stem_are R0_be R0_TypePath_Pos_VB R0_TypePath_Stem_be R1_required R1_TypePath_Pos_VBN R1_TypePath_Stem_requir TypePath_Pos_TO TypePath_Stem_to PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_be LCWord_be CapitalType_ALL_LOWERCASE L0_to L0_TypePath_Pos_TO L0_TypePath_Stem_to L1_shown L1_TypePath_Pos_VBN L1_TypePath_Stem_shown R0_required R0_TypePath_Pos_VBN R0_TypePath_Stem_requir R1_for R1_TypePath_Pos_IN R1_TypePath_Stem_for TypePath_Pos_VB TypePath_Stem_be PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_required LCWord_required CapitalType_ALL_LOWERCASE Prefix3_req Suffix3_red Suffix4_ired Suffix5_uired L0_be L0_TypePath_Pos_VB L0_TypePath_Stem_be L1_to L1_TypePath_Pos_TO L1_TypePath_Stem_to R0_for R0_TypePath_Pos_IN R0_TypePath_Stem_for R1_accurate R1_TypePath_Pos_JJ R1_TypePath_Stem_accur TypePath_Pos_VBN TypePath_Stem_requir PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_for LCWord_for CapitalType_ALL_LOWERCASE L0_required L0_TypePath_Pos_VBN L0_TypePath_Stem_requir L1_be L1_TypePath_Pos_VB L1_TypePath_Stem_be R0_accurate R0_TypePath_Pos_JJ R0_TypePath_Stem_accur R1_and R1_TypePath_Pos_CC R1_TypePath_Stem_and TypePath_Pos_IN TypePath_Stem_for PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_accurate LCWord_accurate CapitalType_ALL_LOWERCASE Prefix3_acc Suffix3_ate Suffix4_rate Suffix5_urate L0_for L0_TypePath_Pos_IN L0_TypePath_Stem_for L1_required L1_TypePath_Pos_VBN L1_TypePath_Stem_requir R0_and R0_TypePath_Pos_CC R0_TypePath_Stem_and R1_efficient R1_TypePath_Pos_JJ R1_TypePath_Stem_effici TypePath_Pos_JJ TypePath_Stem_accur PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_and LCWord_and CapitalType_ALL_LOWERCASE L0_accurate L0_TypePath_Pos_JJ L0_TypePath_Stem_accur L1_for L1_TypePath_Pos_IN L1_TypePath_Stem_for R0_efficient R0_TypePath_Pos_JJ R0_TypePath_Stem_effici R1_transcription R1_TypePath_Pos_NN R1_TypePath_Stem_transcript TypePath_Pos_CC TypePath_Stem_and PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_efficient LCWord_efficient CapitalType_ALL_LOWERCASE Prefix3_eff Suffix3_ent Suffix4_ient Suffix5_cient L0_and L0_TypePath_Pos_CC L0_TypePath_Stem_and L1_accurate L1_TypePath_Pos_JJ L1_TypePath_Stem_accur R0_transcription R0_TypePath_Pos_NN R0_TypePath_Stem_transcript R1_termination R1_TypePath_Pos_NN R1_TypePath_Stem_termin TypePath_Pos_JJ TypePath_Stem_effici PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_transcription LCWord_transcription CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ption L0_efficient L0_TypePath_Pos_JJ L0_TypePath_Stem_effici L1_and L1_TypePath_Pos_CC L1_TypePath_Stem_and R0_termination R0_TypePath_Pos_NN R0_TypePath_Stem_termin R1_by R1_TypePath_Pos_IN R1_TypePath_Stem_by TypePath_Pos_NN TypePath_Stem_transcript PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_termination LCWord_termination CapitalType_ALL_LOWERCASE Prefix3_ter Suffix3_ion Suffix4_tion Suffix5_ation L0_transcription L0_TypePath_Pos_NN L0_TypePath_Stem_transcript L1_efficient L1_TypePath_Pos_JJ L1_TypePath_Stem_effici R0_by R0_TypePath_Pos_IN R0_TypePath_Stem_by R1_RNA R1_TypePath_Pos_NNP R1_TypePath_Stem_RNA TypePath_Pos_NN TypePath_Stem_termin PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_by LCWord_by CapitalType_ALL_LOWERCASE L0_termination L0_TypePath_Pos_NN L0_TypePath_Stem_termin L1_transcription L1_TypePath_Pos_NN L1_TypePath_Stem_transcript R0_RNA R0_TypePath_Pos_NNP R0_TypePath_Stem_RNA R1_polymerase R1_TypePath_Pos_NN R1_TypePath_Stem_polymeras TypePath_Pos_IN TypePath_Stem_by PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"B-GENE\",\n            \"Word_RNA LCWord_rna CapitalType_ALL_UPPERCASE L0_by L0_TypePath_Pos_IN L0_TypePath_Stem_by L1_termination L1_TypePath_Pos_NN L1_TypePath_Stem_termin R0_polymerase R0_TypePath_Pos_NN R0_TypePath_Stem_polymeras R1_I R1_TypePath_Pos_PRP R1_TypePath_Stem_I TypePath_Pos_NNP TypePath_Stem_RNA PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"I-GENE\",\n            \"Word_polymerase LCWord_polymerase CapitalType_ALL_LOWERCASE Prefix3_pol Suffix3_ase Suffix4_rase Suffix5_erase L0_RNA L0_TypePath_Pos_NNP L0_TypePath_Stem_RNA L1_by L1_TypePath_Pos_IN L1_TypePath_Stem_by R0_I R0_TypePath_Pos_PRP R0_TypePath_Stem_I R1_( R1_TypePath_Pos_-LRB- R1_TypePath_Stem_( TypePath_Pos_NN TypePath_Stem_polymeras PrevNEMTokenLabel_L0_B-GENE PrevNEMTokenLabel_L1_O Gazetteer_entrez_genes.txt Gazetteer_entrez_genes.txt\"));\n        this.dataWriter.write(createInstance(\n            \"I-GENE\",\n            \"Word_I LCWord_i CapitalType_ALL_UPPERCASE NumericType_ROMAN_NUMERAL L0_polymerase L0_TypePath_Pos_NN L0_TypePath_Stem_polymeras L1_RNA L1_TypePath_Pos_NNP L1_TypePath_Stem_RNA R0_( R0_TypePath_Pos_-LRB- R0_TypePath_Stem_( R1_pol R1_TypePath_Pos_NN R1_TypePath_Stem_pol TypePath_Pos_PRP TypePath_Stem_I PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_B-GENE\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_( LCWord_( L0_I L0_TypePath_Pos_PRP L0_TypePath_Stem_I L1_polymerase L1_TypePath_Pos_NN L1_TypePath_Stem_polymeras R0_pol R0_TypePath_Pos_NN R0_TypePath_Stem_pol R1_I R1_TypePath_Pos_PRP R1_TypePath_Stem_I TypePath_Pos_-LRB- TypePath_Stem_( PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_I-GENE\"));\n        this.dataWriter.write(createInstance(\n            \"B-GENE\",\n            \"Word_pol LCWord_pol CapitalType_ALL_LOWERCASE L0_( L0_TypePath_Pos_-LRB- L0_TypePath_Stem_( L1_I L1_TypePath_Pos_PRP L1_TypePath_Stem_I R0_I R0_TypePath_Pos_PRP R0_TypePath_Stem_I R1_) R1_TypePath_Pos_-RRB- R1_TypePath_Stem_) TypePath_Pos_NN TypePath_Stem_pol PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_I-GENE Gazetteer_entrez_genes.txt\"));\n        this.dataWriter.write(createInstance(\n            \"I-GENE\",\n            \"Word_I LCWord_i CapitalType_ALL_UPPERCASE NumericType_ROMAN_NUMERAL L0_pol L0_TypePath_Pos_NN L0_TypePath_Stem_pol L1_( L1_TypePath_Pos_-LRB- L1_TypePath_Stem_( R0_) R0_TypePath_Pos_-RRB- R0_TypePath_Stem_) R1_assayed R1_TypePath_Pos_VBD R1_TypePath_Stem_assay TypePath_Pos_PRP TypePath_Stem_I PrevNEMTokenLabel_L0_B-GENE PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_) LCWord_) L0_I L0_TypePath_Pos_PRP L0_TypePath_Stem_I L1_pol L1_TypePath_Pos_NN L1_TypePath_Stem_pol R0_assayed R0_TypePath_Pos_VBD R0_TypePath_Stem_assay R1_both R1_TypePath_Pos_DT R1_TypePath_Stem_both TypePath_Pos_-RRB- TypePath_Stem_) PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_B-GENE\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_assayed LCWord_assayed CapitalType_ALL_LOWERCASE Prefix3_ass Suffix3_yed Suffix4_ayed L0_) L0_TypePath_Pos_-RRB- L0_TypePath_Stem_) L1_I L1_TypePath_Pos_PRP L1_TypePath_Stem_I R0_both R0_TypePath_Pos_DT R0_TypePath_Stem_both R1_in R1_TypePath_Pos_IN R1_TypePath_Stem_in TypePath_Pos_VBD TypePath_Stem_assay PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_I-GENE\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_both LCWord_both CapitalType_ALL_LOWERCASE L0_assayed L0_TypePath_Pos_VBD L0_TypePath_Stem_assay L1_) L1_TypePath_Pos_-RRB- L1_TypePath_Stem_) R0_in R0_TypePath_Pos_IN R0_TypePath_Stem_in R1_a R1_TypePath_Pos_DT R1_TypePath_Stem_a TypePath_Pos_DT TypePath_Stem_both PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_in LCWord_in CapitalType_ALL_LOWERCASE L0_both L0_TypePath_Pos_DT L0_TypePath_Stem_both L1_assayed L1_TypePath_Pos_VBD L1_TypePath_Stem_assay R0_a R0_TypePath_Pos_DT R0_TypePath_Stem_a R1_cell-free R1_TypePath_Pos_JJ R1_TypePath_Stem_cell-fre TypePath_Pos_IN TypePath_Stem_in PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_a LCWord_a CapitalType_ALL_LOWERCASE L0_in L0_TypePath_Pos_IN L0_TypePath_Stem_in L1_both L1_TypePath_Pos_DT L1_TypePath_Stem_both R0_cell-free R0_TypePath_Pos_JJ R0_TypePath_Stem_cell-fre R1_transcription R1_TypePath_Pos_NN R1_TypePath_Stem_transcript TypePath_Pos_DT TypePath_Stem_a PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_cell-free LCWord_cell-free CapitalType_ALL_LOWERCASE ContainsHyphen_CONTAINS_HYPHEN Prefix3_cel Suffix3_ree Suffix4_free Suffix5_-free L0_a L0_TypePath_Pos_DT L0_TypePath_Stem_a L1_in L1_TypePath_Pos_IN L1_TypePath_Stem_in R0_transcription R0_TypePath_Pos_NN R0_TypePath_Stem_transcript R1_system R1_TypePath_Pos_NN R1_TypePath_Stem_system TypePath_Pos_JJ TypePath_Stem_cell-fre PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_transcription LCWord_transcription CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ption L0_cell-free L0_TypePath_Pos_JJ L0_TypePath_Stem_cell-fre L1_a L1_TypePath_Pos_DT L1_TypePath_Stem_a R0_system R0_TypePath_Pos_NN R0_TypePath_Stem_system R1_and R1_TypePath_Pos_CC R1_TypePath_Stem_and TypePath_Pos_NN TypePath_Stem_transcript PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_system LCWord_system CapitalType_ALL_LOWERCASE Prefix3_sys Suffix3_tem L0_transcription L0_TypePath_Pos_NN L0_TypePath_Stem_transcript L1_cell-free L1_TypePath_Pos_JJ L1_TypePath_Stem_cell-fre R0_and R0_TypePath_Pos_CC R0_TypePath_Stem_and R1_in R1_TypePath_Pos_IN R1_TypePath_Stem_in TypePath_Pos_NN TypePath_Stem_system PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_and LCWord_and CapitalType_ALL_LOWERCASE L0_system L0_TypePath_Pos_NN L0_TypePath_Stem_system L1_transcription L1_TypePath_Pos_NN L1_TypePath_Stem_transcript R0_in R0_TypePath_Pos_IN R0_TypePath_Stem_in R1_vivo R1_TypePath_Pos_RB R1_TypePath_Stem_vivo TypePath_Pos_CC TypePath_Stem_and PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_in LCWord_in CapitalType_ALL_LOWERCASE L0_and L0_TypePath_Pos_CC L0_TypePath_Stem_and L1_system L1_TypePath_Pos_NN L1_TypePath_Stem_system R0_vivo R0_TypePath_Pos_RB R0_TypePath_Stem_vivo R1_after R1_TypePath_Pos_IN R1_TypePath_Stem_after TypePath_Pos_IN TypePath_Stem_in PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_vivo LCWord_vivo CapitalType_ALL_LOWERCASE L0_in L0_TypePath_Pos_IN L0_TypePath_Stem_in L1_and L1_TypePath_Pos_CC L1_TypePath_Stem_and R0_after R0_TypePath_Pos_IN R0_TypePath_Stem_after R1_transfection R1_TypePath_Pos_NN R1_TypePath_Stem_transfect TypePath_Pos_RB TypePath_Stem_vivo PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_after LCWord_after CapitalType_ALL_LOWERCASE L0_vivo L0_TypePath_Pos_RB L0_TypePath_Stem_vivo L1_in L1_TypePath_Pos_IN L1_TypePath_Stem_in R0_transfection R0_TypePath_Pos_NN R0_TypePath_Stem_transfect R1_of R1_TypePath_Pos_IN R1_TypePath_Stem_of TypePath_Pos_IN TypePath_Stem_after PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_transfection LCWord_transfection CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ction L0_after L0_TypePath_Pos_IN L0_TypePath_Stem_after L1_vivo L1_TypePath_Pos_RB L1_TypePath_Stem_vivo R0_of R0_TypePath_Pos_IN R0_TypePath_Stem_of R1_rDNA R1_TypePath_Pos_NNP R1_TypePath_Stem_rDNA TypePath_Pos_NN TypePath_Stem_transfect PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_of LCWord_of CapitalType_ALL_LOWERCASE L0_transfection L0_TypePath_Pos_NN L0_TypePath_Stem_transfect L1_after L1_TypePath_Pos_IN L1_TypePath_Stem_after R0_rDNA R0_TypePath_Pos_NNP R0_TypePath_Stem_rDNA R1_minigene R1_TypePath_Pos_NN R1_TypePath_Stem_minigen TypePath_Pos_IN TypePath_Stem_of PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_rDNA LCWord_rdna CapitalType_MIXED_CASE L0_of L0_TypePath_Pos_IN L0_TypePath_Stem_of L1_transfection L1_TypePath_Pos_NN L1_TypePath_Stem_transfect R0_minigene R0_TypePath_Pos_NN R0_TypePath_Stem_minigen R1_constructs R1_TypePath_Pos_NNS R1_TypePath_Stem_construct TypePath_Pos_NNP TypePath_Stem_rDNA PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_minigene LCWord_minigene CapitalType_ALL_LOWERCASE Prefix3_min Suffix3_ene Suffix4_gene Suffix5_igene L0_rDNA L0_TypePath_Pos_NNP L0_TypePath_Stem_rDNA L1_of L1_TypePath_Pos_IN L1_TypePath_Stem_of R0_constructs R0_TypePath_Pos_NNS R0_TypePath_Stem_construct R1_into R1_TypePath_Pos_IN R1_TypePath_Stem_into TypePath_Pos_NN TypePath_Stem_minigen PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_constructs LCWord_constructs CapitalType_ALL_LOWERCASE Prefix3_con Suffix3_cts Suffix4_ucts Suffix5_ructs L0_minigene L0_TypePath_Pos_NN L0_TypePath_Stem_minigen L1_rDNA L1_TypePath_Pos_NNP L1_TypePath_Stem_rDNA R0_into R0_TypePath_Pos_IN R0_TypePath_Stem_into R1_3T6 R1_TypePath_Pos_CD R1_TypePath_Stem_3T6 TypePath_Pos_NNS TypePath_Stem_construct PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_into LCWord_into CapitalType_ALL_LOWERCASE L0_constructs L0_TypePath_Pos_NNS L0_TypePath_Stem_construct L1_minigene L1_TypePath_Pos_NN L1_TypePath_Stem_minigen R0_3T6 R0_TypePath_Pos_CD R0_TypePath_Stem_3T6 R1_cells R1_TypePath_Pos_NNS R1_TypePath_Stem_cell TypePath_Pos_IN TypePath_Stem_into PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_3T6 LCWord_3t6 CapitalType_ALL_UPPERCASE NumericType_ALPHANUMERIC L0_into L0_TypePath_Pos_IN L0_TypePath_Stem_into L1_constructs L1_TypePath_Pos_NNS L1_TypePath_Stem_construct R0_cells R0_TypePath_Pos_NNS R0_TypePath_Stem_cell R1_. R1_TypePath_Pos_. R1_TypePath_Stem_. TypePath_Pos_CD TypePath_Stem_3T6 PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_cells LCWord_cells CapitalType_ALL_LOWERCASE L0_3T6 L0_TypePath_Pos_CD L0_TypePath_Stem_3T6 L1_into L1_TypePath_Pos_IN L1_TypePath_Stem_into R0_. R0_TypePath_Pos_. R0_TypePath_Stem_. R1OOB1 TypePath_Pos_NNS TypePath_Stem_cell PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_. LCWord_. L0_cells L0_TypePath_Pos_NNS L0_TypePath_Stem_cell L1_3T6 L1_TypePath_Pos_CD L1_TypePath_Stem_3T6 R0OOB1 R1OOB2 TypePath_Pos_. TypePath_Stem_. PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n      } else {\n        Instance<String> instance = createInstance(\n            \"B-GENE\",\n            \"Word_pol LCWord_pol CapitalType_ALL_LOWERCASE L0_( L0_TypePath_Pos_-LRB- L0_TypePath_Stem_( L1_I L1_TypePath_Pos_PRP L1_TypePath_Stem_I R0_I R0_TypePath_Pos_PRP R0_TypePath_Stem_I R1_) R1_TypePath_Pos_-RRB- R1_TypePath_Stem_) TypePath_Pos_NN TypePath_Stem_pol PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_I-GENE Gazetteer_entrez_genes.txt\");\n        String outcome = this.classifier.classify(instance.getFeatures());\n        assertEquals(\"B-GENE\", outcome);\n\n        instance = createInstance(\n            \"O\",\n            \"Word_cells LCWord_cells CapitalType_ALL_LOWERCASE L0_3T6 L0_TypePath_Pos_CD L0_TypePath_Stem_3T6 L1_into L1_TypePath_Pos_IN L1_TypePath_Stem_into R0_. R0_TypePath_Pos_. R0_TypePath_Stem_. R1OOB1 TypePath_Pos_NNS TypePath_Stem_cell PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\");\n        outcome = this.classifier.classify(instance.getFeatures());\n        assertEquals(\"O\", outcome);\n      }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void visitLdcInsn(final Object cst) {\n        if (cst instanceof Integer) {\n            int val = ((Integer) cst).intValue();\n            iconst(val);\n        } else if (cst instanceof Byte) {\n            int val = ((Byte) cst).intValue();\n            iconst(val);\n        } else if (cst instanceof Character) {\n            int val = ((Character) cst).charValue();\n            iconst(val);\n        } else if (cst instanceof Short) {\n            int val = ((Short) cst).intValue();\n            iconst(val);\n        } else if (cst instanceof Boolean) {\n            int val = ((Boolean) cst).booleanValue() ? 1 : 0;\n            iconst(val);\n        } else if (cst instanceof Float) {\n            float val = ((Float) cst).floatValue();\n            fconst(val);\n        } else if (cst instanceof Long) {\n            long val = ((Long) cst).longValue();\n            lconst(val);\n        } else if (cst instanceof Double) {\n            double val = ((Double) cst).doubleValue();\n            dconst(val);\n        } else if (cst instanceof String) {\n            aconst(cst);\n        } else if (cst instanceof Type) {\n            tconst((Type) cst);\n        } else if (cst instanceof Handle) {\n            hconst((Handle) cst);\n        } else {\n            throw new IllegalArgumentException();\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void setJoinType(Player player, int joinType)\n\t{\n\t\tLegion legion = player.getLegion();\n\t\t\n\t\tif (legion == null)\n\t\t\treturn;\n\n\t\tif (legionRestrictions.canChangeLegionJoinSetting(player))\n\t\t{\n\t\t\tlegion.setJoinType(joinType);\n\t\t\tPacketSendUtility.sendPacket(player, new SM_LEGION_EDIT(0x0D , legion));\n\t\t\tDAOManager.getDAO(LegionDAO.class).updateLegionDescription(legion);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public PartitionLoad getLoad() throws IOException{\n        Map<ServerName, List<HRegionInfo>> serverToRegionMap=new HashMap<>();\n        try(RegionLocator rl=connection.getRegionLocator(tableName)){\n            List<HRegionLocation> locations=rl.getAllRegionLocations();\n            for(HRegionLocation location : locations){\n                List<HRegionInfo> info=serverToRegionMap.get(location.getServerName());\n                if(info==null){\n                    info = new LinkedList<>();\n                    serverToRegionMap.put(location.getServerName(),info);\n                }\n                info.add(location.getRegionInfo());\n            }\n        }\n        int totalStoreFileSizeMB = 0;\n        int totalMemstoreSieMB = 0;\n        int storefileIndexSizeMB = 0;\n        try(Admin admin=connection.getAdmin()){\n            ClusterStatus clusterStatus=admin.getClusterStatus();\n            for(Map.Entry<ServerName,List<HRegionInfo>> entry:serverToRegionMap.entrySet()){\n                ServerLoad load=clusterStatus.getLoad(entry.getKey());\n                Map<byte[], RegionLoad> regionsLoad=load.getRegionsLoad();\n                for(HRegionInfo info:entry.getValue()){\n                    RegionLoad rl = regionsLoad.get(info.getRegionName());\n                    totalStoreFileSizeMB+=rl.getStorefileSizeMB();\n                    totalMemstoreSieMB+=rl.getMemStoreSizeMB();\n                    storefileIndexSizeMB+=rl.getStorefileIndexSizeMB();\n                }\n            }\n        }\n        return new HPartitionLoad(getName(),totalStoreFileSizeMB,totalMemstoreSieMB,storefileIndexSizeMB);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void requestListViewData() {\n        mBllUser = new BusinessUser(this);\n        mBllServer = new BusinessServer(this);\n        mListMap = new ArrayList<Map<String, Object>>();\n        mBllUser.userServerOrderList((position + 1) + \"\", pageNum + \"\");\n\n\n            mAdapterNotake = new AdapterFrgServerOrderComplete(getActivity(), this, mListMap);\n            mListView.setAdapter(mAdapterNotake);\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public PartitionLoad getLoad() throws IOException{\n        Map<ServerName, List<HRegionInfo>> serverToRegionMap=new HashMap<>();\n        try(RegionLocator rl=connection.getRegionLocator(tableName)){\n            List<HRegionLocation> locations=rl.getAllRegionLocations();\n            for(HRegionLocation location : locations){\n                List<HRegionInfo> info=serverToRegionMap.get(location.getServerName());\n                if(info==null){\n                    info = new LinkedList<>();\n                    serverToRegionMap.put(location.getServerName(),info);\n                }\n                info.add(location.getRegionInfo());\n            }\n        }\n        int totalStoreFileSizeMB = 0;\n        int totalMemstoreSieMB = 0;\n        int storefileIndexSizeMB = 0;\n        try(Admin admin=connection.getAdmin()){\n            ClusterStatus clusterStatus=admin.getClusterStatus();\n            for(Map.Entry<ServerName,List<HRegionInfo>> entry:serverToRegionMap.entrySet()){\n                ServerLoad load=clusterStatus.getLoad(entry.getKey());\n                Map<byte[], RegionLoad> regionsLoad=load.getRegionsLoad();\n                for(HRegionInfo info:entry.getValue()){\n                    RegionLoad rl = regionsLoad.get(info.getRegionName());\n                    totalStoreFileSizeMB+=rl.getStorefileSizeMB();\n                    totalMemstoreSieMB+=rl.getMemStoreSizeMB();\n                    storefileIndexSizeMB+=rl.getStorefileIndexSizeMB();\n                }\n            }\n        }\n        return new HPartitionLoad(getName(),totalStoreFileSizeMB,totalMemstoreSieMB,storefileIndexSizeMB);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public int getOpacity(ChunkSection section, int x, int y, int z) {\n        int combined = getCombinedId4Data(section, x, y, z);\n        if (combined == 0) {\n            return 0;\n        }\n        Block block = Block.getById(FaweCache.getId(combined));\n        return block.p();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static <N extends RootedDAGNode<N>> List<N> topologicalSort(N root) throws GraphException {\n\t\tList<N> queued = new ArrayList<N>();\n\t\tqueued.add(root);\n\t\tint i=0;\n\t\twhile (i<queued.size()) {\n\t\t\tN n = queued.get(i);\n\t\t\tfor (N c : n.getChildren()) {\n\t\t\t\tif (!queued.contains(c))\n\t\t\t\t\tqueued.add(c);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tCollections.reverse(queued);\n\t\tList<N> sorted = new ArrayList<N>();\n\t\ti = 0;\n\t\twhile (!queued.isEmpty()) {\n\t\t\ti = queued.size()-1;\n\t\t\twhile (i>=0) {\n\t\t\t\tN n = queued.get(i);\n\t\t\t\tboolean allParentsSorted = true;\n\t\t\t\tfor (N p : n.getParents()) {\n\t\t\t\t\tif (!sorted.contains(p)) {\n\t\t\t\t\t\tallParentsSorted = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (allParentsSorted) {\n\t\t\t\t\tsorted.add(queued.remove(i));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tif (i==-1)\n\t\t\t\tthrow new GraphException(\"Cannot produce a topological sort: not a DAG\");\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void expandPostprocessPrintAndCompare(\n\t\t\tFile inputFile,\n\t\t\tString inputSubDir,\n\t\t\tString expectedSubDir,\n\t\t\tPrinterInterface printer) throws IOException, LinkTargetException, EngineException\n\t{\n\t\tExpansionCallback callback = new TestExpansionCallback(inputSubDir);\n\n\t\tboolean forInclusion = false;\n\n\t\texpandPostprocessPrintAndCompare(\n\t\t\t\tinputFile,\n\t\t\t\tinputSubDir,\n\t\t\t\texpectedSubDir,\n\t\t\t\tcallback,\n\t\t\t\tforInclusion,\n\t\t\t\tprinter);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic Runner(Analyser handler, Scenario scenario) throws Exception {\n      this.server = new Adapter(handler, scenario);\n      this.manager = new SecurityManager();\n      this.target = new StringBuilder();\n      this.header = new KeyMap<String>();\n      this.body = new ArrayBuffer(1048576);\n      this.scenario = scenario;\n      this.handler = handler;\n   }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static <N extends RootedDAGNode<N>> List<N> topologicalSort(N root) throws GraphException {\n\t\tList<N> queued = new ArrayList<N>();\n\t\tqueued.add(root);\n\t\tint i=0;\n\t\twhile (i<queued.size()) {\n\t\t\tN n = queued.get(i);\n\t\t\tfor (N c : n.getChildren()) {\n\t\t\t\tif (!queued.contains(c))\n\t\t\t\t\tqueued.add(c);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tCollections.reverse(queued);\n\t\tList<N> sorted = new ArrayList<N>();\n\t\ti = 0;\n\t\twhile (!queued.isEmpty()) {\n\t\t\ti = queued.size()-1;\n\t\t\twhile (i>=0) {\n\t\t\t\tN n = queued.get(i);\n\t\t\t\tboolean allParentsSorted = true;\n\t\t\t\tfor (N p : n.getParents()) {\n\t\t\t\t\tif (!sorted.contains(p)) {\n\t\t\t\t\t\tallParentsSorted = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (allParentsSorted) {\n\t\t\t\t\tsorted.add(queued.remove(i));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tif (i==-1)\n\t\t\t\tthrow new GraphException(\"Cannot produce a topological sort: not a DAG\");\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    protected void createExtendedMetaDataAnnotations() {\n        String source = \"http:///org/eclipse/emf/ecore/util/ExtendedMetaData\"; //$NON-NLS-1$\t\n        addAnnotation\n          (getProperties_Properties(), \n           source, \n           new String[] {\n             \"name\", \"property\", //$NON-NLS-1$ //$NON-NLS-2$\n             \"kind\", \"element\" //$NON-NLS-1$ //$NON-NLS-2$\n           });\t\n        addAnnotation\n          (getMetadata_Entries(), \n           source, \n           new String[] {\n             \"name\", \"entry\", //$NON-NLS-1$ //$NON-NLS-2$\n             \"kind\", \"element\" //$NON-NLS-1$ //$NON-NLS-2$\n           });\t\n        addAnnotation\n          (getTextContent_Content(), \n           source, \n           new String[] {\n             \"kind\", \"element\" //$NON-NLS-1$ //$NON-NLS-2$\n           });\t\n        addAnnotation\n          (getDocumentable_Documentation(), \n           source, \n           new String[] {\n             \"kind\", \"element\" //$NON-NLS-1$ //$NON-NLS-2$\n           });\t\n        addAnnotation\n          (getFolderContainer_Folders(), \n           source, \n           new String[] {\n             \"name\", \"folder\", //$NON-NLS-1$ //$NON-NLS-2$\n             \"kind\", \"element\" //$NON-NLS-1$ //$NON-NLS-2$\n           });\t\n        addAnnotation\n          (getFolder_Elements(), \n           source, \n           new String[] {\n             \"name\", \"element\", //$NON-NLS-1$ //$NON-NLS-2$\n             \"kind\", \"element\" //$NON-NLS-1$ //$NON-NLS-2$\n           });\t\n        addAnnotation\n          (archimateModelEClass, \n           source, \n           new String[] {\n             \"name\", \"model\" //$NON-NLS-1$ //$NON-NLS-2$\n           });\t\n        addAnnotation\n          (getArchimateModel_Purpose(), \n           source, \n           new String[] {\n             \"kind\", \"element\" //$NON-NLS-1$ //$NON-NLS-2$\n           });\t\n        addAnnotation\n          (getConnectable_SourceConnections(), \n           source, \n           new String[] {\n             \"name\", \"sourceConnection\", //$NON-NLS-1$ //$NON-NLS-2$\n             \"kind\", \"element\" //$NON-NLS-1$ //$NON-NLS-2$\n           });\t\n        addAnnotation\n          (getDiagramModelContainer_Children(), \n           source, \n           new String[] {\n             \"name\", \"child\", //$NON-NLS-1$ //$NON-NLS-2$\n             \"kind\", \"element\" //$NON-NLS-1$ //$NON-NLS-2$\n           });\t\n        addAnnotation\n          (getDiagramModelReference_ReferencedModel(), \n           source, \n           new String[] {\n             \"name\", \"model\", //$NON-NLS-1$ //$NON-NLS-2$\n             \"kind\", \"attribute\" //$NON-NLS-1$ //$NON-NLS-2$\n           });\t\n        addAnnotation\n          (diagramModelGroupEClass, \n           source, \n           new String[] {\n             \"name\", \"Group\" //$NON-NLS-1$ //$NON-NLS-2$\n           });\t\n        addAnnotation\n          (diagramModelNoteEClass, \n           source, \n           new String[] {\n             \"name\", \"Note\" //$NON-NLS-1$ //$NON-NLS-2$\n           });\t\n        addAnnotation\n          (getDiagramModelConnection_Bendpoints(), \n           source, \n           new String[] {\n             \"name\", \"bendpoint\", //$NON-NLS-1$ //$NON-NLS-2$\n             \"kind\", \"element\" //$NON-NLS-1$ //$NON-NLS-2$\n           });\t\n        addAnnotation\n          (diagramModelArchimateObjectEClass, \n           source, \n           new String[] {\n             \"name\", \"DiagramObject\" //$NON-NLS-1$ //$NON-NLS-2$\n           });\t\n        addAnnotation\n          (diagramModelArchimateConnectionEClass, \n           source, \n           new String[] {\n             \"name\", \"Connection\" //$NON-NLS-1$ //$NON-NLS-2$\n           });\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void drawQuad() {\n        \n        if (!Debug.noVBO) {\n            vertex_VBO.bindWithFormat(3, Format.FLOAT, 0, 0); \n    \n            texture_VBO.bindWithFormat(2, Format.FLOAT, 0, 0); \n            \n            index_VBO.bindAsIndex();\n            \n            VBO.render(6, Format.UNSIGNED_SHORT);\n        } else {\n            vertex_VBO.bindImmediate(3, Format.FLOAT, 0); \n    \n            texture_VBO.bindImmediate(2, Format.FLOAT, 0); \n            \n            index_VBO.renderImmediate(6, Format.UNSIGNED_SHORT);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void onSurfaceCreated(GL10 gl, EGLConfig config) {\n\n        SetupTriangle();\n        SetupImage();\n\n        GLES20.glClearColor(0.0f, 0.0f, 0.0f, 0.0f);\n\n\n        int vertexShader = GraphicTools.loadShader(GLES20.GL_VERTEX_SHADER, GraphicTools.vs_Image);\n        int fragmentShader = GraphicTools.loadShader(GLES20.GL_FRAGMENT_SHADER, GraphicTools.fs_Image);\n\n        GraphicTools.sp_Image = GLES20.glCreateProgram();             // create empty OpenGL ES Program\n        GLES20.glAttachShader(GraphicTools.sp_Image, vertexShader);   // add the vertex shader to program\n        GLES20.glAttachShader(GraphicTools.sp_Image, fragmentShader); // add the fragment shader to program\n        GLES20.glLinkProgram(GraphicTools.sp_Image);                  // creates OpenGL ES program executables\n\n\n        GLES20.glUseProgram(GraphicTools.sp_Image);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" deltaNeutralOpenClose=\" + order.m_deltaNeutralOpenClose +\n        \" deltaNeutralShortSale=\" + order.m_deltaNeutralShortSale +\n        \" deltaNeutralShortSaleSlot=\" + order.m_deltaNeutralShortSaleSlot +\n        \" deltaNeutralDesignatedLocation=\" + order.m_deltaNeutralDesignatedLocation +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprotected void printMethods (       IndentingWriter writer,\n                                        boolean useQualifiedNames,\n                                        boolean useIDLNames,\n                                        boolean globalIDLNames) throws IOException {\n\n        CompoundType.Method[] methods = getMethods();\n\n        for (int m = 0; m < methods.length; m++) {\n            CompoundType.Method theMethod = methods[m];\n            printMethod(theMethod,writer,useQualifiedNames,useIDLNames,globalIDLNames);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic MP3Reader(File file) throws IOException {\n\t\tthis.file = file;\n\t\ttry {\n\t\t\tMP3File mp3file = (MP3File) AudioFileIO.read(file);\n\t\t\tMP3AudioHeader audioHeader = (MP3AudioHeader) mp3file.getAudioHeader();\n\t\t\tif (audioHeader != null) {\n\t\t\t\tlog.debug(\"Track length: {}\", audioHeader.getTrackLength());\n\t\t\t\tlog.debug(\"Sample rate: {}\", audioHeader.getSampleRateAsNumber());\n\t\t\t\tlog.debug(\"Channels: {}\", audioHeader.getChannels());\n\t\t\t\tlog.debug(\"Variable bit rate: {}\", audioHeader.isVariableBitRate());\n\t\t\t\tlog.debug(\"Track length (2): {}\", audioHeader.getTrackLengthAsString());\n\t\t\t\tlog.debug(\"Mpeg version: {}\", audioHeader.getMpegVersion());\n\t\t\t\tlog.debug(\"Mpeg layer: {}\", audioHeader.getMpegLayer());\n\t\t\t\tlog.debug(\"Original: {}\", audioHeader.isOriginal());\n\t\t\t\tlog.debug(\"Copyrighted: {}\", audioHeader.isCopyrighted());\n\t\t\t\tlog.debug(\"Private: {}\", audioHeader.isPrivate());\n\t\t\t\tlog.debug(\"Protected: {}\", audioHeader.isProtected());\n\t\t\t\tlog.debug(\"Bitrate: {}\", audioHeader.getBitRate());\n\t\t\t\tlog.debug(\"Encoding type: {}\", audioHeader.getEncodingType());\n\t\t\t\tlog.debug(\"Encoder: {}\", audioHeader.getEncoder());\n\t\t\t}\n\t\t\tID3v24Tag idTag = mp3file.getID3v2TagAsv24();\n\t\t\tif (idTag != null) {\n\t\t\t\tmetaData = new MetaData();\n\t\t\t\tmetaData.setAlbum(idTag.getFirst(FieldKey.ALBUM));\n\t\t\t\tmetaData.setArtist(idTag.getFirst(FieldKey.ARTIST));\n\t\t\t\tmetaData.setComment(idTag.getFirst(FieldKey.COMMENT));\n\t\t\t\tmetaData.setGenre(idTag.getFirst(FieldKey.GENRE));\n\t\t\t\tmetaData.setSongName(idTag.getFirst(FieldKey.TITLE));\n\t\t\t\tmetaData.setTrack(idTag.getFirst(FieldKey.TRACK));\n\t\t\t\tmetaData.setYear(idTag.getFirst(FieldKey.YEAR));\n\t\t\t\tList<Artwork> tagFieldList = idTag.getArtworkList();\n\t\t\t\tif (tagFieldList == null || tagFieldList.isEmpty()) {\n\t\t\t\t\tlog.debug(\"No cover art was found\");\n\t\t\t\t} else {\n\t\t\t\t\tArtwork imageField = tagFieldList.get(0);\n\t\t\t\t\tlog.debug(\"Picture type: {}\", imageField.getPictureType());\n\t\t\t\t\tFrameBodyAPIC imageFrameBody = new FrameBodyAPIC();\n\t\t\t\t\timageFrameBody.setImageData(imageField.getBinaryData());\n\t\t\t\t\tif (!imageFrameBody.isImageUrl()) {\n\t\t\t\t\t\tbyte[] imageBuffer = (byte[]) imageFrameBody.getObjectValue(DataTypes.OBJ_PICTURE_DATA);\n\t\t\t\t\t\tmetaData.setCovr(imageBuffer);\n\t\t\t\t\t\tIoBuffer buf = IoBuffer.allocate(imageBuffer.length);\n\t\t\t\t\t\tbuf.setAutoExpand(true);\n\t\t\t\t\t\tOutput out = new Output(buf);\n\t\t\t\t\t\tout.writeString(\"onImageData\");\n\t\t\t\t\t\tMap<Object, Object> props = new HashMap<Object, Object>();\n\t\t\t\t\t\tprops.put(\"trackid\", 1);\n\t\t\t\t\t\tprops.put(\"data\", imageBuffer);\n\t\t\t\t\t\tout.writeMap(props, new Serializer());\n\t\t\t\t\t\tbuf.flip();\n\t\t\t\t\t\tITag result = new Tag(IoConstants.TYPE_METADATA, 0, buf.limit(), null, 0);\n\t\t\t\t\t\tresult.setBody(buf);\n\t\t\t\t\t\tfirstTags.add(result);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog.info(\"File did not contain ID3v2 data: {}\", file.getName());\n\t\t\t}\n\t\t\tmp3file = null;\n\t\t} catch (TagException e) {\n\t\t\tlog.error(\"MP3Reader (tag error) {}\", e);\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"MP3Reader {}\", e);\n\t\t}\n\t\tfis = new FileInputStream(file);\n\t\tchannel = fis.getChannel();\n\t\tfileSize = channel.size();\n\t\tlog.debug(\"File size: {}\", fileSize);\n\t\tanalyzeKeyFrames();\n\t\tfirstTags.addFirst(createFileMeta());\n\t\tif ((fileSize - channel.position()) > 4) {\n\t\t\tsearchNextFrame();\n\t\t\tlong pos = channel.position();\n\t\t\tMP3Header header = null;\n\t\t\ttry {\n\t\t\t\theader = readHeader();\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.warn(\"Exception reading initial header\", e);\n\t\t\t}\n\t\t\tchannel.position(pos);\n\t\t\tif (header != null) {\n\t\t\t\tcheckValidHeader(header);\n\t\t\t} else {\n\t\t\t\tthrow new RuntimeException(\"No initial header found\");\n\t\t\t}\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic List<Instance<String>> createInstances() {\n    List<Instance<String>> instances = new ArrayList<Instance<String>>();\n    instances.add(createInstance(\"O Word_Three LCWord_three CapitalType_INITIAL_UPPERCASE L0OOB1 L1OOB2 R0_sequence R0_TypePath_Pos_NN R0_TypePath_Stem_sequenc R1_elements R1_TypePath_Pos_NNS R1_TypePath_Stem_element TypePath_Pos_CD TypePath_Stem_Three PrevNEMTokenLabel_L0OOB1 PrevNEMTokenLabel_L1OOB2\"));\n    instances.add(createInstance(\"O Word_sequence LCWord_sequence CapitalType_ALL_LOWERCASE Prefix3_seq Suffix3_nce Suffix4_ence Suffix5_uence L0_Three L0_TypePath_Pos_CD L0_TypePath_Stem_Three L1OOB1 R0_elements R0_TypePath_Pos_NNS R0_TypePath_Stem_element R1_are R1_TypePath_Pos_VBP R1_TypePath_Stem_are TypePath_Pos_NN TypePath_Stem_sequenc PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1OOB1\"));\n    instances.add(createInstance(\"O Word_elements LCWord_elements CapitalType_ALL_LOWERCASE Prefix3_ele Suffix3_nts Suffix4_ents Suffix5_ments L0_sequence L0_TypePath_Pos_NN L0_TypePath_Stem_sequenc L1_Three L1_TypePath_Pos_CD L1_TypePath_Stem_Three R0_are R0_TypePath_Pos_VBP R0_TypePath_Stem_are R1_shown R1_TypePath_Pos_VBN R1_TypePath_Stem_shown TypePath_Pos_NNS TypePath_Stem_element PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_are LCWord_are CapitalType_ALL_LOWERCASE L0_elements L0_TypePath_Pos_NNS L0_TypePath_Stem_element L1_sequence L1_TypePath_Pos_NN L1_TypePath_Stem_sequenc R0_shown R0_TypePath_Pos_VBN R0_TypePath_Stem_shown R1_to R1_TypePath_Pos_TO R1_TypePath_Stem_to TypePath_Pos_VBP TypePath_Stem_are PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_shown LCWord_shown CapitalType_ALL_LOWERCASE L0_are L0_TypePath_Pos_VBP L0_TypePath_Stem_are L1_elements L1_TypePath_Pos_NNS L1_TypePath_Stem_element R0_to R0_TypePath_Pos_TO R0_TypePath_Stem_to R1_be R1_TypePath_Pos_VB R1_TypePath_Stem_be TypePath_Pos_VBN TypePath_Stem_shown PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_to LCWord_to CapitalType_ALL_LOWERCASE L0_shown L0_TypePath_Pos_VBN L0_TypePath_Stem_shown L1_are L1_TypePath_Pos_VBP L1_TypePath_Stem_are R0_be R0_TypePath_Pos_VB R0_TypePath_Stem_be R1_required R1_TypePath_Pos_VBN R1_TypePath_Stem_requir TypePath_Pos_TO TypePath_Stem_to PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_be LCWord_be CapitalType_ALL_LOWERCASE L0_to L0_TypePath_Pos_TO L0_TypePath_Stem_to L1_shown L1_TypePath_Pos_VBN L1_TypePath_Stem_shown R0_required R0_TypePath_Pos_VBN R0_TypePath_Stem_requir R1_for R1_TypePath_Pos_IN R1_TypePath_Stem_for TypePath_Pos_VB TypePath_Stem_be PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_required LCWord_required CapitalType_ALL_LOWERCASE Prefix3_req Suffix3_red Suffix4_ired Suffix5_uired L0_be L0_TypePath_Pos_VB L0_TypePath_Stem_be L1_to L1_TypePath_Pos_TO L1_TypePath_Stem_to R0_for R0_TypePath_Pos_IN R0_TypePath_Stem_for R1_accurate R1_TypePath_Pos_JJ R1_TypePath_Stem_accur TypePath_Pos_VBN TypePath_Stem_requir PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_for LCWord_for CapitalType_ALL_LOWERCASE L0_required L0_TypePath_Pos_VBN L0_TypePath_Stem_requir L1_be L1_TypePath_Pos_VB L1_TypePath_Stem_be R0_accurate R0_TypePath_Pos_JJ R0_TypePath_Stem_accur R1_and R1_TypePath_Pos_CC R1_TypePath_Stem_and TypePath_Pos_IN TypePath_Stem_for PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_accurate LCWord_accurate CapitalType_ALL_LOWERCASE Prefix3_acc Suffix3_ate Suffix4_rate Suffix5_urate L0_for L0_TypePath_Pos_IN L0_TypePath_Stem_for L1_required L1_TypePath_Pos_VBN L1_TypePath_Stem_requir R0_and R0_TypePath_Pos_CC R0_TypePath_Stem_and R1_efficient R1_TypePath_Pos_JJ R1_TypePath_Stem_effici TypePath_Pos_JJ TypePath_Stem_accur PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_and LCWord_and CapitalType_ALL_LOWERCASE L0_accurate L0_TypePath_Pos_JJ L0_TypePath_Stem_accur L1_for L1_TypePath_Pos_IN L1_TypePath_Stem_for R0_efficient R0_TypePath_Pos_JJ R0_TypePath_Stem_effici R1_transcription R1_TypePath_Pos_NN R1_TypePath_Stem_transcript TypePath_Pos_CC TypePath_Stem_and PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_efficient LCWord_efficient CapitalType_ALL_LOWERCASE Prefix3_eff Suffix3_ent Suffix4_ient Suffix5_cient L0_and L0_TypePath_Pos_CC L0_TypePath_Stem_and L1_accurate L1_TypePath_Pos_JJ L1_TypePath_Stem_accur R0_transcription R0_TypePath_Pos_NN R0_TypePath_Stem_transcript R1_termination R1_TypePath_Pos_NN R1_TypePath_Stem_termin TypePath_Pos_JJ TypePath_Stem_effici PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_transcription LCWord_transcription CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ption L0_efficient L0_TypePath_Pos_JJ L0_TypePath_Stem_effici L1_and L1_TypePath_Pos_CC L1_TypePath_Stem_and R0_termination R0_TypePath_Pos_NN R0_TypePath_Stem_termin R1_by R1_TypePath_Pos_IN R1_TypePath_Stem_by TypePath_Pos_NN TypePath_Stem_transcript PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_termination LCWord_termination CapitalType_ALL_LOWERCASE Prefix3_ter Suffix3_ion Suffix4_tion Suffix5_ation L0_transcription L0_TypePath_Pos_NN L0_TypePath_Stem_transcript L1_efficient L1_TypePath_Pos_JJ L1_TypePath_Stem_effici R0_by R0_TypePath_Pos_IN R0_TypePath_Stem_by R1_RNA R1_TypePath_Pos_NNP R1_TypePath_Stem_RNA TypePath_Pos_NN TypePath_Stem_termin PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_by LCWord_by CapitalType_ALL_LOWERCASE L0_termination L0_TypePath_Pos_NN L0_TypePath_Stem_termin L1_transcription L1_TypePath_Pos_NN L1_TypePath_Stem_transcript R0_RNA R0_TypePath_Pos_NNP R0_TypePath_Stem_RNA R1_polymerase R1_TypePath_Pos_NN R1_TypePath_Stem_polymeras TypePath_Pos_IN TypePath_Stem_by PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"B-GENE Word_RNA LCWord_rna CapitalType_ALL_UPPERCASE L0_by L0_TypePath_Pos_IN L0_TypePath_Stem_by L1_termination L1_TypePath_Pos_NN L1_TypePath_Stem_termin R0_polymerase R0_TypePath_Pos_NN R0_TypePath_Stem_polymeras R1_I R1_TypePath_Pos_PRP R1_TypePath_Stem_I TypePath_Pos_NNP TypePath_Stem_RNA PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"I-GENE Word_polymerase LCWord_polymerase CapitalType_ALL_LOWERCASE Prefix3_pol Suffix3_ase Suffix4_rase Suffix5_erase L0_RNA L0_TypePath_Pos_NNP L0_TypePath_Stem_RNA L1_by L1_TypePath_Pos_IN L1_TypePath_Stem_by R0_I R0_TypePath_Pos_PRP R0_TypePath_Stem_I R1_( R1_TypePath_Pos_-LRB- R1_TypePath_Stem_( TypePath_Pos_NN TypePath_Stem_polymeras PrevNEMTokenLabel_L0_B-GENE PrevNEMTokenLabel_L1_O Gazetteer_entrez_genes.txt Gazetteer_entrez_genes.txt\"));\n    instances.add(createInstance(\"I-GENE Word_I LCWord_i CapitalType_ALL_UPPERCASE NumericType_ROMAN_NUMERAL L0_polymerase L0_TypePath_Pos_NN L0_TypePath_Stem_polymeras L1_RNA L1_TypePath_Pos_NNP L1_TypePath_Stem_RNA R0_( R0_TypePath_Pos_-LRB- R0_TypePath_Stem_( R1_pol R1_TypePath_Pos_NN R1_TypePath_Stem_pol TypePath_Pos_PRP TypePath_Stem_I PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_B-GENE\"));\n    instances.add(createInstance(\"O Word_( LCWord_( L0_I L0_TypePath_Pos_PRP L0_TypePath_Stem_I L1_polymerase L1_TypePath_Pos_NN L1_TypePath_Stem_polymeras R0_pol R0_TypePath_Pos_NN R0_TypePath_Stem_pol R1_I R1_TypePath_Pos_PRP R1_TypePath_Stem_I TypePath_Pos_-LRB- TypePath_Stem_( PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_I-GENE\"));\n    instances.add(createInstance(\"B-GENE Word_pol LCWord_pol CapitalType_ALL_LOWERCASE L0_( L0_TypePath_Pos_-LRB- L0_TypePath_Stem_( L1_I L1_TypePath_Pos_PRP L1_TypePath_Stem_I R0_I R0_TypePath_Pos_PRP R0_TypePath_Stem_I R1_) R1_TypePath_Pos_-RRB- R1_TypePath_Stem_) TypePath_Pos_NN TypePath_Stem_pol PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_I-GENE Gazetteer_entrez_genes.txt\"));\n    instances.add(createInstance(\"I-GENE Word_I LCWord_i CapitalType_ALL_UPPERCASE NumericType_ROMAN_NUMERAL L0_pol L0_TypePath_Pos_NN L0_TypePath_Stem_pol L1_( L1_TypePath_Pos_-LRB- L1_TypePath_Stem_( R0_) R0_TypePath_Pos_-RRB- R0_TypePath_Stem_) R1_assayed R1_TypePath_Pos_VBD R1_TypePath_Stem_assay TypePath_Pos_PRP TypePath_Stem_I PrevNEMTokenLabel_L0_B-GENE PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_) LCWord_) L0_I L0_TypePath_Pos_PRP L0_TypePath_Stem_I L1_pol L1_TypePath_Pos_NN L1_TypePath_Stem_pol R0_assayed R0_TypePath_Pos_VBD R0_TypePath_Stem_assay R1_both R1_TypePath_Pos_DT R1_TypePath_Stem_both TypePath_Pos_-RRB- TypePath_Stem_) PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_B-GENE\"));\n    instances.add(createInstance(\"O Word_assayed LCWord_assayed CapitalType_ALL_LOWERCASE Prefix3_ass Suffix3_yed Suffix4_ayed L0_) L0_TypePath_Pos_-RRB- L0_TypePath_Stem_) L1_I L1_TypePath_Pos_PRP L1_TypePath_Stem_I R0_both R0_TypePath_Pos_DT R0_TypePath_Stem_both R1_in R1_TypePath_Pos_IN R1_TypePath_Stem_in TypePath_Pos_VBD TypePath_Stem_assay PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_I-GENE\"));\n    instances.add(createInstance(\"O Word_both LCWord_both CapitalType_ALL_LOWERCASE L0_assayed L0_TypePath_Pos_VBD L0_TypePath_Stem_assay L1_) L1_TypePath_Pos_-RRB- L1_TypePath_Stem_) R0_in R0_TypePath_Pos_IN R0_TypePath_Stem_in R1_a R1_TypePath_Pos_DT R1_TypePath_Stem_a TypePath_Pos_DT TypePath_Stem_both PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_in LCWord_in CapitalType_ALL_LOWERCASE L0_both L0_TypePath_Pos_DT L0_TypePath_Stem_both L1_assayed L1_TypePath_Pos_VBD L1_TypePath_Stem_assay R0_a R0_TypePath_Pos_DT R0_TypePath_Stem_a R1_cell-free R1_TypePath_Pos_JJ R1_TypePath_Stem_cell-fre TypePath_Pos_IN TypePath_Stem_in PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_a LCWord_a CapitalType_ALL_LOWERCASE L0_in L0_TypePath_Pos_IN L0_TypePath_Stem_in L1_both L1_TypePath_Pos_DT L1_TypePath_Stem_both R0_cell-free R0_TypePath_Pos_JJ R0_TypePath_Stem_cell-fre R1_transcription R1_TypePath_Pos_NN R1_TypePath_Stem_transcript TypePath_Pos_DT TypePath_Stem_a PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_cell-free LCWord_cell-free CapitalType_ALL_LOWERCASE ContainsHyphen_CONTAINS_HYPHEN Prefix3_cel Suffix3_ree Suffix4_free Suffix5_-free L0_a L0_TypePath_Pos_DT L0_TypePath_Stem_a L1_in L1_TypePath_Pos_IN L1_TypePath_Stem_in R0_transcription R0_TypePath_Pos_NN R0_TypePath_Stem_transcript R1_system R1_TypePath_Pos_NN R1_TypePath_Stem_system TypePath_Pos_JJ TypePath_Stem_cell-fre PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_transcription LCWord_transcription CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ption L0_cell-free L0_TypePath_Pos_JJ L0_TypePath_Stem_cell-fre L1_a L1_TypePath_Pos_DT L1_TypePath_Stem_a R0_system R0_TypePath_Pos_NN R0_TypePath_Stem_system R1_and R1_TypePath_Pos_CC R1_TypePath_Stem_and TypePath_Pos_NN TypePath_Stem_transcript PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_system LCWord_system CapitalType_ALL_LOWERCASE Prefix3_sys Suffix3_tem L0_transcription L0_TypePath_Pos_NN L0_TypePath_Stem_transcript L1_cell-free L1_TypePath_Pos_JJ L1_TypePath_Stem_cell-fre R0_and R0_TypePath_Pos_CC R0_TypePath_Stem_and R1_in R1_TypePath_Pos_IN R1_TypePath_Stem_in TypePath_Pos_NN TypePath_Stem_system PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_and LCWord_and CapitalType_ALL_LOWERCASE L0_system L0_TypePath_Pos_NN L0_TypePath_Stem_system L1_transcription L1_TypePath_Pos_NN L1_TypePath_Stem_transcript R0_in R0_TypePath_Pos_IN R0_TypePath_Stem_in R1_vivo R1_TypePath_Pos_RB R1_TypePath_Stem_vivo TypePath_Pos_CC TypePath_Stem_and PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_in LCWord_in CapitalType_ALL_LOWERCASE L0_and L0_TypePath_Pos_CC L0_TypePath_Stem_and L1_system L1_TypePath_Pos_NN L1_TypePath_Stem_system R0_vivo R0_TypePath_Pos_RB R0_TypePath_Stem_vivo R1_after R1_TypePath_Pos_IN R1_TypePath_Stem_after TypePath_Pos_IN TypePath_Stem_in PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_vivo LCWord_vivo CapitalType_ALL_LOWERCASE L0_in L0_TypePath_Pos_IN L0_TypePath_Stem_in L1_and L1_TypePath_Pos_CC L1_TypePath_Stem_and R0_after R0_TypePath_Pos_IN R0_TypePath_Stem_after R1_transfection R1_TypePath_Pos_NN R1_TypePath_Stem_transfect TypePath_Pos_RB TypePath_Stem_vivo PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_after LCWord_after CapitalType_ALL_LOWERCASE L0_vivo L0_TypePath_Pos_RB L0_TypePath_Stem_vivo L1_in L1_TypePath_Pos_IN L1_TypePath_Stem_in R0_transfection R0_TypePath_Pos_NN R0_TypePath_Stem_transfect R1_of R1_TypePath_Pos_IN R1_TypePath_Stem_of TypePath_Pos_IN TypePath_Stem_after PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_transfection LCWord_transfection CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ction L0_after L0_TypePath_Pos_IN L0_TypePath_Stem_after L1_vivo L1_TypePath_Pos_RB L1_TypePath_Stem_vivo R0_of R0_TypePath_Pos_IN R0_TypePath_Stem_of R1_rDNA R1_TypePath_Pos_NNP R1_TypePath_Stem_rDNA TypePath_Pos_NN TypePath_Stem_transfect PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_of LCWord_of CapitalType_ALL_LOWERCASE L0_transfection L0_TypePath_Pos_NN L0_TypePath_Stem_transfect L1_after L1_TypePath_Pos_IN L1_TypePath_Stem_after R0_rDNA R0_TypePath_Pos_NNP R0_TypePath_Stem_rDNA R1_minigene R1_TypePath_Pos_NN R1_TypePath_Stem_minigen TypePath_Pos_IN TypePath_Stem_of PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_rDNA LCWord_rdna CapitalType_MIXED_CASE L0_of L0_TypePath_Pos_IN L0_TypePath_Stem_of L1_transfection L1_TypePath_Pos_NN L1_TypePath_Stem_transfect R0_minigene R0_TypePath_Pos_NN R0_TypePath_Stem_minigen R1_constructs R1_TypePath_Pos_NNS R1_TypePath_Stem_construct TypePath_Pos_NNP TypePath_Stem_rDNA PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_minigene LCWord_minigene CapitalType_ALL_LOWERCASE Prefix3_min Suffix3_ene Suffix4_gene Suffix5_igene L0_rDNA L0_TypePath_Pos_NNP L0_TypePath_Stem_rDNA L1_of L1_TypePath_Pos_IN L1_TypePath_Stem_of R0_constructs R0_TypePath_Pos_NNS R0_TypePath_Stem_construct R1_into R1_TypePath_Pos_IN R1_TypePath_Stem_into TypePath_Pos_NN TypePath_Stem_minigen PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_constructs LCWord_constructs CapitalType_ALL_LOWERCASE Prefix3_con Suffix3_cts Suffix4_ucts Suffix5_ructs L0_minigene L0_TypePath_Pos_NN L0_TypePath_Stem_minigen L1_rDNA L1_TypePath_Pos_NNP L1_TypePath_Stem_rDNA R0_into R0_TypePath_Pos_IN R0_TypePath_Stem_into R1_3T6 R1_TypePath_Pos_CD R1_TypePath_Stem_3T6 TypePath_Pos_NNS TypePath_Stem_construct PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_into LCWord_into CapitalType_ALL_LOWERCASE L0_constructs L0_TypePath_Pos_NNS L0_TypePath_Stem_construct L1_minigene L1_TypePath_Pos_NN L1_TypePath_Stem_minigen R0_3T6 R0_TypePath_Pos_CD R0_TypePath_Stem_3T6 R1_cells R1_TypePath_Pos_NNS R1_TypePath_Stem_cell TypePath_Pos_IN TypePath_Stem_into PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_3T6 LCWord_3t6 CapitalType_ALL_UPPERCASE NumericType_ALPHANUMERIC L0_into L0_TypePath_Pos_IN L0_TypePath_Stem_into L1_constructs L1_TypePath_Pos_NNS L1_TypePath_Stem_construct R0_cells R0_TypePath_Pos_NNS R0_TypePath_Stem_cell R1_. R1_TypePath_Pos_. R1_TypePath_Stem_. TypePath_Pos_CD TypePath_Stem_3T6 PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_cells LCWord_cells CapitalType_ALL_LOWERCASE L0_3T6 L0_TypePath_Pos_CD L0_TypePath_Stem_3T6 L1_into L1_TypePath_Pos_IN L1_TypePath_Stem_into R0_. R0_TypePath_Pos_. R0_TypePath_Stem_. R1OOB1 TypePath_Pos_NNS TypePath_Stem_cell PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_. LCWord_. L0_cells L0_TypePath_Pos_NNS L0_TypePath_Stem_cell L1_3T6 L1_TypePath_Pos_CD L1_TypePath_Stem_3T6 R0OOB1 R1OOB2 TypePath_Pos_. TypePath_Stem_. PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    return instances;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n     public ConeSound(MediaContainer soundData,\n                      float initialGain,\n                      Point3f position,\n                      Vector3f direction) {\n\n        super(soundData, initialGain, position );\n\n        setDefaultReadCapabilities(readCapabilities);\n\n        ((ConeSoundRetained)this.retained).setDirection(direction);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate String endCapture() {\n            int end = current == -1 ? index : index - 1;\n            String captured;\n            if (captureBuffer.length() > 0) {\n                captureBuffer.append(json.substring(captureStart, end));\n                captured = captureBuffer.toString();\n                captureBuffer.setLength(0);\n            } else {\n                captured = json.substring(captureStart, end);\n            }\n            captureStart = -1;\n            return captured;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate Component buildHeader() {\n        HorizontalLayout header = new HorizontalLayout();\n        header.addStyleName(\"viewheader\");\n        header.setSpacing(true);\n\n        titleLabel = new Label(\"Dashboard\");\n        titleLabel.setId(TITLE_ID);\n        titleLabel.setSizeUndefined();\n        titleLabel.addStyleName(ValoTheme.LABEL_H1);\n        titleLabel.addStyleName(ValoTheme.LABEL_NO_MARGIN);\n        header.addComponent(titleLabel);\n\n        notificationsButton = buildNotificationsButton();\n        Component edit = buildEditButton();\n        HorizontalLayout tools = new HorizontalLayout(notificationsButton, edit);\n        tools.setSpacing(true);\n        tools.addStyleName(\"toolbar\");\n        header.addComponent(tools);\n\n        return header;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void adaptToEnablementChange(HighlightingStyle highlighting,\n\t\t\tPropertyChangeEvent event) {\n\t\tObject value = event.getNewValue();\n\t\tboolean eventValue;\n\t\tif (value instanceof Boolean)\n\t\t\teventValue = ((Boolean) value).booleanValue();\n\t\telse if (IPreferenceStore.TRUE.equals(value))\n\t\t\teventValue = true;\n\t\telse\n\t\t\teventValue = false;\n\t\thighlighting.setEnabled(eventValue);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic boolean isLinked(ParaObject obj, String type2, String id2) {\n\t\t\tif (type2 == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn getDao().read(obj.getAppid(), new Linker(obj.getType(), type2, obj.getId(), id2).getId()) != null;\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public CallNode(\n        ParseRegion region,\n        String name,\n        Syntax syntax,\n        ParseTreeNode... args)\n    {\n        this(region, name, syntax, Arrays.asList(args));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprivate void completeAddAppWidget(final int appWidgetId, long container,\n\t\t\tint screen, AppWidgetHostView hostView,\n\t\t\tAppWidgetProviderInfo appWidgetInfo) {\n\t\tif (appWidgetInfo == null) {\n\t\t\tappWidgetInfo = mAppWidgetManager.getAppWidgetInfo(appWidgetId);\n\t\t}\n\n\t\tCellLayout layout = getCellLayout(container, screen);\n\n\t\tint[] minSpanXY = getMinSpanForWidget(this, appWidgetInfo);\n\t\tint[] spanXY = getSpanForWidget(this, appWidgetInfo);\n\n\t\tint[] cellXY = mTmpAddItemCellCoordinates;\n\t\tint[] touchXY = mPendingAddInfo.dropPos;\n\t\tint[] finalSpan = new int[2];\n\t\tboolean foundCellSpan = false;\n\t\tif (mPendingAddInfo.cellX >= 0 && mPendingAddInfo.cellY >= 0) {\n\t\t\tcellXY[0] = mPendingAddInfo.cellX;\n\t\t\tcellXY[1] = mPendingAddInfo.cellY;\n\t\t\tspanXY[0] = mPendingAddInfo.spanX;\n\t\t\tspanXY[1] = mPendingAddInfo.spanY;\n\t\t\tfoundCellSpan = true;\n\t\t} else if (touchXY != null) {\n\t\t\tint[] result = layout.findNearestVacantArea(touchXY[0], touchXY[1],\n\t\t\t\t\tminSpanXY[0], minSpanXY[1], spanXY[0], spanXY[1], cellXY,\n\t\t\t\t\tfinalSpan);\n\t\t\tspanXY[0] = finalSpan[0];\n\t\t\tspanXY[1] = finalSpan[1];\n\t\t\tfoundCellSpan = (result != null);\n\t\t} else {\n\t\t\tfoundCellSpan = layout.findCellForSpan(cellXY, minSpanXY[0],\n\t\t\t\t\tminSpanXY[1]);\n\t\t}\n\n\t\tif (!foundCellSpan) {\n\t\t\tif (appWidgetId != -1) {\n\t\t\t\tnew Thread(\"deleteAppWidgetId\") {\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tmAppWidgetHost.deleteAppWidgetId(appWidgetId);\n\t\t\t\t\t}\n\t\t\t\t}.start();\n\t\t\t}\n\t\t\tshowOutOfSpaceMessage(isHotseatLayout(layout));\n\t\t\treturn;\n\t\t}\n\n\t\tLauncherAppWidgetInfo launcherInfo = new LauncherAppWidgetInfo(\n\t\t\t\tappWidgetId, appWidgetInfo.provider);\n\t\tlauncherInfo.spanX = spanXY[0];\n\t\tlauncherInfo.spanY = spanXY[1];\n\t\tlauncherInfo.minSpanX = mPendingAddInfo.minSpanX;\n\t\tlauncherInfo.minSpanY = mPendingAddInfo.minSpanY;\n\n\t\tLauncherModel.addItemToDatabase(this, launcherInfo, container, screen,\n\t\t\t\tcellXY[0], cellXY[1], false);\n\n\t\tif (!mRestoring) {\n\t\t\tif (hostView == null) {\n\t\t\t\tlauncherInfo.hostView = mAppWidgetHost.createView(this,\n\t\t\t\t\t\tappWidgetId, appWidgetInfo);\n\t\t\t\tlauncherInfo.hostView.setAppWidget(appWidgetId, appWidgetInfo);\n\t\t\t} else {\n\t\t\t\tlauncherInfo.hostView = hostView;\n\t\t\t}\n\n\t\t\tlauncherInfo.hostView.setTag(launcherInfo);\n\t\t\tlauncherInfo.hostView.setVisibility(View.VISIBLE);\n\t\t\tlauncherInfo.notifyWidgetSizeChanged(this);\n\n\t\t\tmWorkspace.addInScreen(launcherInfo.hostView, container, screen,\n\t\t\t\t\tcellXY[0], cellXY[1], launcherInfo.spanX,\n\t\t\t\t\tlauncherInfo.spanY, isWorkspaceLocked());\n\n\t\t\taddWidgetToAutoAdvanceIfNeeded(launcherInfo.hostView, appWidgetInfo);\n\t\t}\n\t\tresetAddInfo();\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic Result(String name,\n\t               Map<String, List<String>> tags,\n\t               List<DataPoint> dataPoints,\n\t               List<GroupResult> groupResults)\n\t{\n\t\tthis.name = name;\n\t\tthis.tags = tags;\n\t\tthis.groupResults = groupResults;\n\t\tthis.dataPoints = dataPoints;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static String stringFromStream(InputStream inputStream) throws IOException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        byte[] buffer = new byte[1024];\n        while (true) {\n            int length = inputStream.read(buffer);\n            if (length == -1) {\n                return new String(baos.toByteArray(), \"UTF-8\");\n            }\n            baos.write(buffer, 0, length);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic Transformation(BigInteger q, BigInteger r, BigInteger s, BigInteger t){\n      this.q = q;\n      this.r = r;\n      this.s = s;\n      this.t = t;                  \n      k = 0;\n   }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.crm._2007.webservices.GetInvoiceProductsFromOpportunityRequest parse(javax.xml.stream.XMLStreamReader sr, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException {\n          return (com.microsoft.schemas.crm._2007.webservices.GetInvoiceProductsFromOpportunityRequest) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( sr, type, options ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprivate void completeAddAppWidget(final int appWidgetId, long container,\n\t\t\tint screen, AppWidgetHostView hostView,\n\t\t\tAppWidgetProviderInfo appWidgetInfo) {\n\t\tif (appWidgetInfo == null) {\n\t\t\tappWidgetInfo = mAppWidgetManager.getAppWidgetInfo(appWidgetId);\n\t\t}\n\n\t\tCellLayout layout = getCellLayout(container, screen);\n\n\t\tint[] minSpanXY = getMinSpanForWidget(this, appWidgetInfo);\n\t\tint[] spanXY = getSpanForWidget(this, appWidgetInfo);\n\n\t\tint[] cellXY = mTmpAddItemCellCoordinates;\n\t\tint[] touchXY = mPendingAddInfo.dropPos;\n\t\tint[] finalSpan = new int[2];\n\t\tboolean foundCellSpan = false;\n\t\tif (mPendingAddInfo.cellX >= 0 && mPendingAddInfo.cellY >= 0) {\n\t\t\tcellXY[0] = mPendingAddInfo.cellX;\n\t\t\tcellXY[1] = mPendingAddInfo.cellY;\n\t\t\tspanXY[0] = mPendingAddInfo.spanX;\n\t\t\tspanXY[1] = mPendingAddInfo.spanY;\n\t\t\tfoundCellSpan = true;\n\t\t} else if (touchXY != null) {\n\t\t\tint[] result = layout.findNearestVacantArea(touchXY[0], touchXY[1],\n\t\t\t\t\tminSpanXY[0], minSpanXY[1], spanXY[0], spanXY[1], cellXY,\n\t\t\t\t\tfinalSpan);\n\t\t\tspanXY[0] = finalSpan[0];\n\t\t\tspanXY[1] = finalSpan[1];\n\t\t\tfoundCellSpan = (result != null);\n\t\t} else {\n\t\t\tfoundCellSpan = layout.findCellForSpan(cellXY, minSpanXY[0],\n\t\t\t\t\tminSpanXY[1]);\n\t\t}\n\n\t\tif (!foundCellSpan) {\n\t\t\tif (appWidgetId != -1) {\n\t\t\t\tnew Thread(\"deleteAppWidgetId\") {\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tmAppWidgetHost.deleteAppWidgetId(appWidgetId);\n\t\t\t\t\t}\n\t\t\t\t}.start();\n\t\t\t}\n\t\t\tshowOutOfSpaceMessage(isHotseatLayout(layout));\n\t\t\treturn;\n\t\t}\n\n\t\tLauncherAppWidgetInfo launcherInfo = new LauncherAppWidgetInfo(\n\t\t\t\tappWidgetId, appWidgetInfo.provider);\n\t\tlauncherInfo.spanX = spanXY[0];\n\t\tlauncherInfo.spanY = spanXY[1];\n\t\tlauncherInfo.minSpanX = mPendingAddInfo.minSpanX;\n\t\tlauncherInfo.minSpanY = mPendingAddInfo.minSpanY;\n\n\t\tLauncherModel.addItemToDatabase(this, launcherInfo, container, screen,\n\t\t\t\tcellXY[0], cellXY[1], false);\n\n\t\tif (!mRestoring) {\n\t\t\tif (hostView == null) {\n\t\t\t\tlauncherInfo.hostView = mAppWidgetHost.createView(this,\n\t\t\t\t\t\tappWidgetId, appWidgetInfo);\n\t\t\t\tlauncherInfo.hostView.setAppWidget(appWidgetId, appWidgetInfo);\n\t\t\t} else {\n\t\t\t\tlauncherInfo.hostView = hostView;\n\t\t\t}\n\n\t\t\tlauncherInfo.hostView.setTag(launcherInfo);\n\t\t\tlauncherInfo.hostView.setVisibility(View.VISIBLE);\n\t\t\tlauncherInfo.notifyWidgetSizeChanged(this);\n\n\t\t\tmWorkspace.addInScreen(launcherInfo.hostView, container, screen,\n\t\t\t\t\tcellXY[0], cellXY[1], launcherInfo.spanX,\n\t\t\t\t\tlauncherInfo.spanY, isWorkspaceLocked());\n\n\t\t\taddWidgetToAutoAdvanceIfNeeded(launcherInfo.hostView, appWidgetInfo);\n\t\t}\n\t\tresetAddInfo();\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode parse(java.lang.String xmlAsString, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException {\n          return (com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( xmlAsString, type, options ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, Predicate<String> isStatic, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            lineNumber = printMethod(mv, clazz, method, isStatic.test(method), lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void appendReplacement(StringBuffer sb, Matcher m)\n\t{\n\t\tString key = m.group(1), value;\n\t\tint ascii;\n\t\t\n\t\tif ((value = m_tags.get(key.toLowerCase())) != null)\n\t\t\tm.appendReplacement(sb, value);\n\t\telse if ((ascii = getASCII(key)) != -1)\n\t\t\tm.appendReplacement(sb, Character.toString((char)ascii));\n\t\telse\n\t\t\tm.appendReplacement(sb, m.group());\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate <E> void buildElements(ReadableDocument<? super E, E, ?> doc, E e, List<E> els) {\n    E child = DocHelper.getFirstChildElement(doc, e);\n    while (child != null) {\n      els.add(child);\n      buildElements(doc, child, els);\n      child = DocHelper.getNextSiblingElement(doc, child);\n    }\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"net.chrisrichardson.eventstore.examples.customersandorders\"))\n                .build()\n                .pathMapping(\"/\")\n                .genericModelSubstitutes(ResponseEntity.class, CompletableFuture.class)\n                .alternateTypeRules(\n                        newRule(typeResolver.resolve(DeferredResult.class,\n                                        typeResolver.resolve(ResponseEntity.class, WildcardType.class)),\n                                typeResolver.resolve(WildcardType.class))\n                )\n                .useDefaultResponseMessages(false)\n                ;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void extractValues(List<Object> result, Node parent, String uri, String name, int type, boolean global) {\n            if(name.startsWith(\"@\")) {\n                if(parent.getNodeType()==Node.ELEMENT_NODE) {\n                    Element e = (Element)parent;\n                    String attrName = name.substring(1);\n                    Attr attr = (uri==null) ? e.getAttributeNode(attrName) : e.getAttributeNodeNS(uri,attrName);\n                    if(attr!=null) {\n                        Object v = convertTo(attr.getValue(),type);\n                        if(v!=null) {\n                            result.add(v);\n                        }\n                    }\n                }\n                return;\n            } else {\n                if(name.equals(\".\")) {\n                    if(parent.getNodeType()==Node.ELEMENT_NODE) {\n                        String text = DOMUtil.getText(parent);\n                        if(StringUtil.isNotEmpty(text)) {\n                            Object v = convertTo(text,type);\n                            result.add(v);\n                        }\n                    }\n                } else {\n                    NodeList children = parent.getChildNodes();\n                    for(int i=0; i<children.getLength(); i++) {\n                        Node node = children.item(i);\n                        if(node.getNodeType()==Node.ELEMENT_NODE && matches(node,uri,name)) {\n                            String text = DOMUtil.getText(node);\n                            if(StringUtil.isNotEmpty(text)) {\n                                Object v = convertTo(text,type);\n                                result.add(v);\n                            }\n                        }\n                    }\n                }\n            }\n            if(global) {\n                NodeList list = parent.getChildNodes();\n                for(int i=0; i<list.getLength(); i++) {\n                    Node node = list.item(i);\n                    if(node.getNodeType()==Node.ELEMENT_NODE) {\n                        extractValues(result, node, uri, name, type, global);\n                    }\n                }\n            }\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n     public ConeSound(MediaContainer soundData,\n                      float initialGain,\n                      Point3f position,\n                      Vector3f direction) {\n\n        super(soundData, initialGain, position );\n\n        setDefaultReadCapabilities(readCapabilities);\n\n        ((ConeSoundRetained)this.retained).setDirection(direction);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public Value<Integer> run(Integer x, Integer y, Integer z) {\n      DiffJob diffJob = new DiffJob();\n      MultJob multJob = new MultJob();\n      FutureValue<Integer> r = futureCall(diffJob, immediate(x), immediate(y));\n      FutureValue<Integer> s = futureCall(diffJob, immediate(x), immediate(z));\n      FutureValue<Integer> t = futureCall(multJob, r, s);\n      FutureValue<Integer> u = futureCall(diffJob, t, immediate(2));\n      return u;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                col = (int)val[1];\n\n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            Float max = Float.MIN_VALUE;\n            for(int i = 0; i < table.data.size(); i++)\n            {\n                Object o = table.data.get(i)[col-1];\n                if (o instanceof Float)\n                    max = Math.max((Float)o, max);\n            }\n            if (max == Float.MIN_VALUE)\n            {\n                return 0f;\n            }\n            return max;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static <V> Iterable<V> topologicalSort(\n            @Nonnull Map<V, List<V>> adjacencyMap, @Nonnull Function<V, String> vertexNameFn\n    ) {\n        Map<V, TarjanVertex<V>> tarjanVertices =\n                adjacencyMap.keySet().stream()\n                            .map(v -> entry(v, new TarjanVertex<>(v)))\n                            .collect(toMap(Entry::getKey, Entry::getValue));\n        Map<TarjanVertex<V>, List<TarjanVertex<V>>> tarjanAdjacencyMap =\n                adjacencyMap.entrySet().stream()\n                            .collect(toMap(e -> tarjanVertices.get(e.getKey()),\n                                           e -> e.getValue().stream()\n                                                 .map(tarjanVertices::get)\n                                                 .collect(toList())));\n        return new TopologicalSorter<>(tarjanAdjacencyMap, vertexNameFn).go();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void Bld_all(Bry_bfr bfr, Xoae_page page, List_adp list) {\n\t\tthis.list = list; this.list_len = list.Count();\n\t\thash.Clear();\n\t\tfmtr_grp.Bld_bfr_many(bfr, xtn_mgr.Msg_sidebar_ttl(), xtn_mgr.Msg_about_page(), xtn_mgr.Msg_about_ttl(), this);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static <V> Iterable<V> topologicalSort(\n            @Nonnull Map<V, List<V>> adjacencyMap, @Nonnull Function<V, String> vertexNameFn\n    ) {\n        Map<V, TarjanVertex<V>> tarjanVertices =\n                adjacencyMap.keySet().stream()\n                            .map(v -> entry(v, new TarjanVertex<>(v)))\n                            .collect(toMap(Entry::getKey, Entry::getValue));\n        Map<TarjanVertex<V>, List<TarjanVertex<V>>> tarjanAdjacencyMap =\n                adjacencyMap.entrySet().stream()\n                            .collect(toMap(e -> tarjanVertices.get(e.getKey()),\n                                           e -> e.getValue().stream()\n                                                 .map(tarjanVertices::get)\n                                                 .collect(toList())));\n        return new TopologicalSorter<>(tarjanAdjacencyMap, vertexNameFn).go();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        PartialSufficientSatistics partialSufficientSatistics = PartialSufficientSatistics.createZeroPartialSufficientStatistics(efBayesianNetwork);\n        partialSufficientSatistics.copy(this.sumSS);\n        partialSufficientSatistics.normalize();\n        SufficientStatistics finalSS = efBayesianNetwork.createZeroSufficientStatistics();\n        finalSS.sum(partialSufficientSatistics.getCompoundVector());\n\n        efBayesianNetwork.setMomentParameters(finalSS);\n        return efBayesianNetwork.toBayesianNetwork(dag);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static int compareWithConversion(Object v1, Object v2) {\n        return compareWithConversion(v1, v2, false);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic MP3Reader(File file) throws IOException {\n\t\tthis.file = file;\n\t\ttry {\n\t\t\tMP3File mp3file = (MP3File) AudioFileIO.read(file);\n\t\t\tMP3AudioHeader audioHeader = (MP3AudioHeader) mp3file.getAudioHeader();\n\t\t\tif (audioHeader != null) {\n\t\t\t\tlog.debug(\"Track length: {}\", audioHeader.getTrackLength());\n\t\t\t\tlog.debug(\"Sample rate: {}\", audioHeader.getSampleRateAsNumber());\n\t\t\t\tlog.debug(\"Channels: {}\", audioHeader.getChannels());\n\t\t\t\tlog.debug(\"Variable bit rate: {}\", audioHeader.isVariableBitRate());\n\t\t\t\tlog.debug(\"Track length (2): {}\", audioHeader.getTrackLengthAsString());\n\t\t\t\tlog.debug(\"Mpeg version: {}\", audioHeader.getMpegVersion());\n\t\t\t\tlog.debug(\"Mpeg layer: {}\", audioHeader.getMpegLayer());\n\t\t\t\tlog.debug(\"Original: {}\", audioHeader.isOriginal());\n\t\t\t\tlog.debug(\"Copyrighted: {}\", audioHeader.isCopyrighted());\n\t\t\t\tlog.debug(\"Private: {}\", audioHeader.isPrivate());\n\t\t\t\tlog.debug(\"Protected: {}\", audioHeader.isProtected());\n\t\t\t\tlog.debug(\"Bitrate: {}\", audioHeader.getBitRate());\n\t\t\t\tlog.debug(\"Encoding type: {}\", audioHeader.getEncodingType());\n\t\t\t\tlog.debug(\"Encoder: {}\", audioHeader.getEncoder());\n\t\t\t}\n\t\t\tID3v24Tag idTag = mp3file.getID3v2TagAsv24();\n\t\t\tif (idTag != null) {\n\t\t\t\tmetaData = new MetaData();\n\t\t\t\tmetaData.setAlbum(idTag.getFirst(FieldKey.ALBUM));\n\t\t\t\tmetaData.setArtist(idTag.getFirst(FieldKey.ARTIST));\n\t\t\t\tmetaData.setComment(idTag.getFirst(FieldKey.COMMENT));\n\t\t\t\tmetaData.setGenre(idTag.getFirst(FieldKey.GENRE));\n\t\t\t\tmetaData.setSongName(idTag.getFirst(FieldKey.TITLE));\n\t\t\t\tmetaData.setTrack(idTag.getFirst(FieldKey.TRACK));\n\t\t\t\tmetaData.setYear(idTag.getFirst(FieldKey.YEAR));\n\t\t\t\tList<Artwork> tagFieldList = idTag.getArtworkList();\n\t\t\t\tif (tagFieldList == null || tagFieldList.isEmpty()) {\n\t\t\t\t\tlog.debug(\"No cover art was found\");\n\t\t\t\t} else {\n\t\t\t\t\tArtwork imageField = tagFieldList.get(0);\n\t\t\t\t\tlog.debug(\"Picture type: {}\", imageField.getPictureType());\n\t\t\t\t\tFrameBodyAPIC imageFrameBody = new FrameBodyAPIC();\n\t\t\t\t\timageFrameBody.setImageData(imageField.getBinaryData());\n\t\t\t\t\tif (!imageFrameBody.isImageUrl()) {\n\t\t\t\t\t\tbyte[] imageBuffer = (byte[]) imageFrameBody.getObjectValue(DataTypes.OBJ_PICTURE_DATA);\n\t\t\t\t\t\tmetaData.setCovr(imageBuffer);\n\t\t\t\t\t\tIoBuffer buf = IoBuffer.allocate(imageBuffer.length);\n\t\t\t\t\t\tbuf.setAutoExpand(true);\n\t\t\t\t\t\tOutput out = new Output(buf);\n\t\t\t\t\t\tout.writeString(\"onImageData\");\n\t\t\t\t\t\tMap<Object, Object> props = new HashMap<Object, Object>();\n\t\t\t\t\t\tprops.put(\"trackid\", 1);\n\t\t\t\t\t\tprops.put(\"data\", imageBuffer);\n\t\t\t\t\t\tout.writeMap(props, new Serializer());\n\t\t\t\t\t\tbuf.flip();\n\t\t\t\t\t\tITag result = new Tag(IoConstants.TYPE_METADATA, 0, buf.limit(), null, 0);\n\t\t\t\t\t\tresult.setBody(buf);\n\t\t\t\t\t\tfirstTags.add(result);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog.info(\"File did not contain ID3v2 data: {}\", file.getName());\n\t\t\t}\n\t\t\tmp3file = null;\n\t\t} catch (TagException e) {\n\t\t\tlog.error(\"MP3Reader (tag error) {}\", e);\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"MP3Reader {}\", e);\n\t\t}\n\t\tfis = new FileInputStream(file);\n\t\tchannel = fis.getChannel();\n\t\tfileSize = channel.size();\n\t\tlog.debug(\"File size: {}\", fileSize);\n\t\tanalyzeKeyFrames();\n\t\tfirstTags.addFirst(createFileMeta());\n\t\tif ((fileSize - channel.position()) > 4) {\n\t\t\tsearchNextFrame();\n\t\t\tlong pos = channel.position();\n\t\t\tMP3Header header = null;\n\t\t\ttry {\n\t\t\t\theader = readHeader();\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.warn(\"Exception reading initial header\", e);\n\t\t\t}\n\t\t\tchannel.position(pos);\n\t\t\tif (header != null) {\n\t\t\t\tcheckValidHeader(header);\n\t\t\t} else {\n\t\t\t\tthrow new RuntimeException(\"No initial header found\");\n\t\t\t}\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate IFile getWorkspaceFile(IFileStore fileStore) {\n\t\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();\n\t\tIFile[] files = workspaceRoot.findFilesForLocationURI(fileStore.toURI());\n\t\tif(files != null && files.length == 1)\n\t\t\treturn files[0];\n\t\treturn null;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean putMapNotEmptyKeyAndValue(Map<String, String> map, String key, String value,\n            String defaultValue) {\n        if (map == null || StringUtils.isEmpty(key)) {\n            return false;\n        }\n\n        map.put(key, StringUtils.isEmpty(value) ? defaultValue : value);\n        return true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(javax.xml.stream.XMLStreamReader sr, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( sr, type, options ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public boolean transformOne(GlyphLine line) {\n        if (line.idx >= line.end) {\n            return false;\n        }\n        Glyph g = line.get(line.idx);\n        boolean changed = false;\n        if (!openReader.isSkip(g.getCode(), lookupFlag)) {\n            int[] substSequence = substMap.get(g.getCode());\n            if (substSequence != null) {\n                if (substSequence.length > 0) {\n                    line.substituteOneToMany(openReader, substSequence);\n                    changed = true;\n                }\n            }\n        }\n        line.idx++;\n        return changed;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void testLogMessage() throws Exception {\n    \tListLogger cfg = (ListLogger)LogManager.logListener;\n        cfg.setLogLevel(CONTEXT, MessageLevel.INFO );\n\n        List<String> sentMsgList = new ArrayList<String>();\n        sentMsgList.add(\"A message 1\"); //$NON-NLS-1$\n        sentMsgList.add(\"A message 2\"); //$NON-NLS-1$\n        sentMsgList.add(\"A message 3\"); //$NON-NLS-1$\n        sentMsgList.add(\"A message 4\"); //$NON-NLS-1$\n        sentMsgList.add(\"A message 5\"); //$NON-NLS-1$\n        sentMsgList.add(\"A message 6\"); //$NON-NLS-1$\n\n        for (Iterator<String> iter = sentMsgList.iterator(); iter.hasNext();) {\n            String msg = iter.next();\n            LogManager.logInfo(CONTEXT, msg); \n        }\n        \n        List<String> recevedMsgList = cfg.getLoggedMessages();\n        assertEquals(sentMsgList.size(), recevedMsgList.size());\n        assertEquals(sentMsgList, recevedMsgList);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static <N extends RootedDAGNode<N>> List<N> topologicalSort(N root) throws GraphException {\n\t\tList<N> queued = new ArrayList<N>();\n\t\tqueued.add(root);\n\t\tint i=0;\n\t\twhile (i<queued.size()) {\n\t\t\tN n = queued.get(i);\n\t\t\tfor (N c : n.getChildren()) {\n\t\t\t\tif (!queued.contains(c))\n\t\t\t\t\tqueued.add(c);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tCollections.reverse(queued);\n\t\tList<N> sorted = new ArrayList<N>();\n\t\ti = 0;\n\t\twhile (!queued.isEmpty()) {\n\t\t\ti = queued.size()-1;\n\t\t\twhile (i>=0) {\n\t\t\t\tN n = queued.get(i);\n\t\t\t\tboolean allParentsSorted = true;\n\t\t\t\tfor (N p : n.getParents()) {\n\t\t\t\t\tif (!sorted.contains(p)) {\n\t\t\t\t\t\tallParentsSorted = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (allParentsSorted) {\n\t\t\t\t\tsorted.add(queued.remove(i));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tif (i==-1)\n\t\t\t\tthrow new GraphException(\"Cannot produce a topological sort: not a DAG\");\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprotected List<EMConversation> loadConversationList() {\n\t\tMap<String, EMConversation> conversations = EMClient.getInstance().chatManager().getAllConversations();\n\t\t\n\t\tList<Pair<Long, EMConversation>> sortList = new ArrayList<Pair<Long, EMConversation>>();\n\t\tsynchronized (conversations) {\n\t\t\tfor (EMConversation conversation : conversations.values()) {\n\t\t\t\tif (conversation.getAllMessages().size() != 0) {\n\t\t\t\t\tsortList.add(\n\t\t\t\t\t\t\tnew Pair<Long, EMConversation>(conversation.getLastMessage().getMsgTime(), conversation));\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\tsortConversationByLastChatTime(sortList);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tList<EMConversation> list = new ArrayList<EMConversation>();\n\t\tfor (Pair<Long, EMConversation> sortItem : sortList) {\n\t\t\tlist.add(sortItem.second);\n\t\t}\n\t\treturn list;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void addShaped(IItemStack output, IIngredient[][] ingredients, IRecipeFunction function, boolean mirrored) {\n\t\tShapedRecipe recipe = new ShapedRecipe(output, ingredients, function, mirrored);\n\t\tIRecipe irecipe = RecipeConverter.convert(recipe);\n\t\tMineTweakerAPI.apply(new ActionAddRecipe(irecipe, recipe));\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void requestListViewData() {\n        mBllUser = new BusinessUser(this);\n        mBllServer = new BusinessServer(this);\n        mListMap = new ArrayList<Map<String, Object>>();\n        mBllUser.userServerOrderList((position + 1) + \"\", pageNum + \"\");\n\n\n            mAdapterNotake = new AdapterFrgServerOrderComplete(getActivity(), this, mListMap);\n            mListView.setAdapter(mAdapterNotake);\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public MissionData(String missionName, String missionId, float lengthOfGameMinutes,\n            float lengthOfIntervalMinutes, float challengePaceMinutesPerMile) {\n        this(missionName, missionId, lengthOfGameMinutes, lengthOfIntervalMinutes,\n                challengePaceMinutesPerMile, new HashMap<String, Moment>(), null, null);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\tChannelListener listener = this.listeners.remove(ctx.channel());\n\t\tif (listener != null) {\n\t\t\tLogManager.logDetail(LogConstants.CTX_TRANSPORT, \n\t\t\t        RuntimePlugin.Util.getString(\"SSLAwareChannelHandler.channel_closed\")); //$NON-NLS-1$\n\t\t\tlistener.disconnected();\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    protected void initEnablementBehaviours( List<EnablementBehaviour> enablementBehaviours ) {\n\t\tenablementBehaviours.add(new WithinLegalLayerBoundsBehaviour());\n\t\tenablementBehaviours.add(new ValidToolDetectionActivator(new Class[] {\n\t\t\t\tGeometry.class,\n\t\t\t\tPolygon.class,\n\t\t\t\tMultiPolygon.class,\n\t\t\t\tLineString.class,\n\t\t\t\tMultiLineString.class }));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public ConeSound(MediaContainer soundData,\n                     float initialGain,\n                     int loopCount,\n                     boolean release,\n                     boolean continuous,\n                     boolean enable,\n                     Bounds  region,\n                     float   priority,\n                     float posX, float posY, float posZ,\n                     float[] frontDistance,\n                     float[] frontDistanceGain,\n                     float[] backDistance,\n                     float[] backDistanceGain,\n                     float dirX, float dirY, float dirZ ) {\n        super(soundData, initialGain, loopCount, release, continuous, enable,\n                     region, priority, posX, posY, posZ,\n                     frontDistance, frontDistanceGain );\n\n        setDefaultReadCapabilities(readCapabilities);\n\n        ((ConeSoundRetained)this.retained).setDirection(dirX, dirY, dirZ);\n        ((ConeSoundRetained)this.retained).setBackDistanceGain(\n                     backDistance, backDistanceGain );\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    protected void performDismiss(final View dismissView, final int dismissPosition, boolean doPendingDismiss) {\n        final ViewGroup.LayoutParams lp = dismissView.getLayoutParams();\n        final int originalHeight = dismissView.getHeight();\n\n        ValueAnimator animator = ValueAnimator.ofInt(originalHeight, 1).setDuration(animationTime);\n\n        if (doPendingDismiss) {\n            animator.addListener(new AnimatorListenerAdapter() {\n                @Override\n                public void onAnimationEnd(Animator animation) {\n                    --dismissAnimationRefCount;\n                    if (dismissAnimationRefCount == 0) {\n                        removePendingDismisses(originalHeight);\n                    }\n                }\n            });\n        }\n\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                lp.height = (Integer) valueAnimator.getAnimatedValue();\n                dismissView.setLayoutParams(lp);\n            }\n        });\n\n        pendingDismisses.add(new PendingDismissData(dismissPosition, dismissView));\n        animator.start();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Deprecated\n    public static boolean isJavaLetterOrDigit(char ch) {\n        return isJavaIdentifierPart(ch);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n      public int hashCode() {\n        int result = hashCode;\n        if (result == 0) {\n          result = latitude != null ? latitude.hashCode() : 0;\n          result = result * 37 + (longitude != null ? longitude.hashCode() : 0);\n          result = result * 37 + (accuracy != null ? accuracy.hashCode() : 0);\n          result = result * 37 + (zeroField4 != null ? zeroField4.hashCode() : 0);\n          result = result * 37 + (altitude != null ? altitude.hashCode() : 0);\n          result = result * 37 + (altitudeAccuracy != null ? altitudeAccuracy.hashCode() : 0);\n          result = result * 37 + (unknown11 != null ? unknown11.hashCode() : 0);\n          result = result * 37 + (unknown12 != null ? unknown12.hashCode() : 0);\n          hashCode = result;\n        }\n        return result;\n      }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void main(String[] args) {\n        Looper.prepare();\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (sPower) {\n                    String cmd = String.format(\"am startservice%s-n com.aigestudio.daemon/\" +\n                                    \"com.aigestudio.daemon.services.DaemonService\",\n                            SysUtil.isAfter17() ? \" --user 0 \" : \" \");\n                    LogUtil.i(\"CMD exec \" + cmd);\n                    try {\n                        Runtime.getRuntime().exec(cmd);\n                    } catch (IOException e) {\n                    }\n                    try {\n                        Thread.sleep(1500);\n                    } catch (InterruptedException e) {\n                        LogUtil.w(\"Thread sleep failed:\" + e.toString());\n                    }\n                }\n            }\n        }).start();\n        Looper.loop();\n        LogUtil.i(\"====================Daemon exit with error====================\");\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic Vector<Operator> topologicalSort() {\n\t\tfinal Map<Operator, Integer> originalIndices = new HashMap<Operator, Integer>();\n\t\tfor (int i = 0; i < operators.size(); i++) {\n\t\t\toriginalIndices.put(operators.get(i), i);\n\t\t}\n\t\tEdgeCounter counter = new EdgeCounter(operators);\n\t\tfor (Operator child : getOperators()) {\n\t\t\tfor (OutputPort out : child.getOutputPorts().getAllPorts()) {\n\t\t\t\tInputPort dest = out.getDestination();\n\t\t\t\tif (dest != null) {\n\t\t\t\t\tcounter.incNumEdges(dest.getPorts().getOwner().getOperator());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tVector<Operator> sorted = new Vector<Operator>();\n\t\tPriorityQueue<Operator> independentOperators = new PriorityQueue<Operator>(Math.max(1, operators.size()),\n\t\t\t\tnew Comparator<Operator>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic int compare(Operator o1, Operator o2) {\n\t\t\t\t\t\treturn originalIndices.get(o1) - originalIndices.get(o2);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\tindependentOperators.addAll(counter.getIndependentOperators());\n\t\twhile (!independentOperators.isEmpty()) {\n\t\t\tOperator first = independentOperators.poll();\n\t\t\tsorted.add(first);\n\t\t\tfor (OutputPort out : first.getOutputPorts().getAllPorts()) {\n\t\t\t\tInputPort dest = out.getDestination();\n\t\t\t\tif (dest != null) {\n\t\t\t\t\tOperator destOp = dest.getPorts().getOwner().getOperator();\n\t\t\t\t\tif (counter.decNumEdges(destOp) == 0) {\n\t\t\t\t\t\tindependentOperators.add(destOp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n  public void testSum() throws Exception {\n    Double act = Aggregations.sum(Arrays.asList(1, 2, 3.8));  // check with mixed Number\n    Double exp = 1 + 2 + 3.8;\n    assertEquals(exp, act, 0.01);\n\n    act = Aggregations.sum(Arrays.asList());\n    exp = 0.0;\n    assertEquals(exp, act, 0.01);\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic Transformation(BigInteger q, BigInteger r, BigInteger s, BigInteger t){\n      this.q = q;\n      this.r = r;\n      this.s = s;\n      this.t = t;                  \n      k = 0;\n   }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        \n        byte[] byteArray = new byte[bytes.size()]; \n        bytes.getBytes(byteArray, 0);\n        return Utf8Utils.utf8BytesToString(byteArray);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic String loadJSONFromAsset(String fileName) {\n        String json = null;\n        try {\n            InputStream is = context.getAssets().open(fileName);\n            int size = is.available();\n            byte[] buffer = new byte[size];\n            is.read(buffer);\n            is.close();\n            json = new String(buffer, \"UTF-8\");\n\n        } catch (IOException ex) {\n            ex.printStackTrace();\n            return null;\n        }\n        return json;\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        \n        byte[] byteArray = new byte[bytes.size()]; \n        bytes.getBytes(byteArray, 0);\n        return Utf8Utils.utf8BytesToString(byteArray);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n        if(!nonSequentialModel)\n            return new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n        else{\n\n            CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n            this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n            BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n            this.updateNaturalParameterPrior(prior);\n\n            return learntBN;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Kernel(int width, int height, double factor, double data[]) {\n        this(width, height, (width - 1) / 2, (height - 1) / 2, factor, data);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static final void writeIntLittleEndian(byte[] array, int pos,int value) {\n\t\tarray[pos+3] = (byte) (value >>>24); \n\t\tarray[pos+2] = (byte) (value >>>16);\n\t\tarray[pos+1] = (byte) (value >>>8);\n\t\tarray[pos] = (byte) (value &0xFF);\n\t\t\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static HashMap<Integer,Object> arrayToMap(Object[] array) {\n\t\tHashMap<Integer,Object> map = new HashMap<Integer,Object>();\n\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\tmap.put(i+1, array[i]);\n\t\t}\n\t\treturn map;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\tpublic ID scrapeID() {\t\n\t\tElement idElement = document.select(\"td:containsOwn(\u935d\u4f7a\u6698\u951b) ~ td\").first();\n\t\tif(idElement != null)\n\t\t{\n\t\t\tString idElementText = idElement.text();\n\t\t\tidElementText = fixUpIDFormatting(idElementText);\n\t\t\treturn new ID(idElementText);\n\t\t}\n\t\telse return ID.BLANK_ID;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void quadrantRotate(int numquadrants,\n                               double anchorx, double anchory)\n    {\n        switch (numquadrants & 3) {\n        case 0:\n            return;\n        case 1:\n            m02 += anchorx * (m00 - m01) + anchory * (m01 + m00);\n            m12 += anchorx * (m10 - m11) + anchory * (m11 + m10);\n            rotate90();\n            break;\n        case 2:\n            m02 += anchorx * (m00 + m00) + anchory * (m01 + m01);\n            m12 += anchorx * (m10 + m10) + anchory * (m11 + m11);\n            rotate180();\n            break;\n        case 3:\n            m02 += anchorx * (m00 + m01) + anchory * (m01 - m00);\n            m12 += anchorx * (m10 + m11) + anchory * (m11 - m10);\n            rotate270();\n            break;\n        }\n        if (m02 == 0.0 && m12 == 0.0) {\n            state &= ~APPLY_TRANSLATE;\n        } else {\n            state |= APPLY_TRANSLATE;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, boolean isStatic, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            lineNumber = printMethod(mv, clazz, method, isStatic, lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprotected static boolean isConstant(IModelElement modelElement) {\n\n\t\tif (modelElement instanceof IField && modelElement.getParent() instanceof ISourceModule) {\n\t\t\tint flags = 0;\n\t\t\ttry {\n\t\t\t\tflags = ((IField) modelElement).getFlags();\n\t\t\t} catch (ModelException e) {\n\t\t\t}\n\t\t\tif ((flags & Modifiers.AccConstant) != 0)\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n      public com.google.protobuf.ByteString\n          getSendInfoBytes() {\n        java.lang.Object ref = sendInfo_;\n        if (ref instanceof String) {\n          com.google.protobuf.ByteString b = \n              com.google.protobuf.ByteString.copyFromUtf8(\n                  (java.lang.String) ref);\n          sendInfo_ = b;\n          return b;\n        } else {\n          return (com.google.protobuf.ByteString) ref;\n        }\n      }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps,\n                boolean isUserGenerated) {\n            Validate.notNull(objectProperty, \"objectProperty\");\n            Validate.containsNoNulls(bitmaps, \"bitmaps\");\n            if (action == null) {\n                throw new FacebookException(\"Can not set attachments prior to setting action.\");\n            }\n\n            List<String> attachmentUrls = addImageAttachments(bitmaps);\n            updateObjectAttachmentUrls(objectProperty, attachmentUrls, isUserGenerated);\n\n            return this;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\n\tprivate void topologicalSort( Collection<TopologicalElement> unmarkedNodes, List<Element> sorted ) {\n\n\t\twhile ( !unmarkedNodes.isEmpty() ) {\n\n\t\t\tTopologicalElement node = unmarkedNodes.iterator().next();\n\t\t\ttopologicalVisit( node, unmarkedNodes, sorted, unmarkedNodes.size() );\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public RealVector solve(final RealLinearOperator a, final RealVector b,\n        final boolean goodb, final double shift) throws NullArgumentException,\n        NonSquareOperatorException, DimensionMismatchException,\n        NonSelfAdjointOperatorException, IllConditionedOperatorException,\n        MaxCountExceededException {\n        MathUtils.checkNotNull(a);\n        final RealVector x = new ArrayRealVector(a.getColumnDimension());\n        return solveInPlace(a, null, b, x, goodb, shift);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0];\n\n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return -1f;\n            \n            Object[] row = new Object[val.length - 1];\n            for(int i = 1; i <= row.length; i++)\n                row[i - 1] = val[i];\n            table.addRow(row);\n            return 1f;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void registerReceiver(BroadcastReceiver receiver, IntentFilter filter) {\n\t\tif (receiver == null || filter == null) {\n\t\t\tLogUtil.e(TAG, \"invalid parameters\");\n\t\t\treturn;\n\t\t}\n\n\t\tsynchronized (mManager) {\n\t\t\tif (mReceivers.contains(receiver)) {\n\t\t\t\tLogUtil.e(TAG, \"unregister old receiver!\");\n\t\t\t\tmManager.unregisterReceiver(receiver);\n\t\t\t}\n\n\t\t\tmReceivers.addLast(receiver);\n\t\t\tmManager.registerReceiver(receiver, filter);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\tpublic void onClick(View v) {\n\t\tautoTest = false;\n\t\tswitch (v.getId()) {\n\t\tcase R.id.normal_btn:\n\t\t\tif (layout == null)\n\t\t\t\treturn;\n\t\t\tAdViewLayout.isTest = false;\n\t\t\tadViewLayout = new AdViewLayout(this, sdkKey);\n\n\t\t\tif (null != adViewLayout) {\n\t\t\t\tAdViewUtil.logInfo(\"setInterFace\");\n\t\t\t\tadViewLayout.setAdViewInterface(this);\n\t\t\t\tlayout.removeAllViews();\n\t\t\t\tlayout.addView(adViewLayout);\n\t\t\t\tlayout.invalidate();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase R.id.clear_btn:\n\t\t\t if (layout == null)\n\t\t\t return;\n\t\t\t AdViewLayout.isTest = true;\n\t\t\t adViewLayout = new AdViewLayout(this, sdkKey);\n\t\t\tbreak;\n\t\tcase R.id.start_btn:\n\t\t\tautoTest = true;\n\t\t\tcount = 0;\n\t\t\tlist = adViewLayout.adViewManager.getRationList();\n\n\t\t\tadapter = new BaseAdapter() {\n\t\t\t\t@Override\n\t\t\t\tpublic View getView(int position, View convertView,\n\t\t\t\t\t\tViewGroup parent) {\n\t\t\t\t\tLayoutInflater layoutInflater = LayoutInflater\n\t\t\t\t\t\t\t.from(Invoker.this);\n\t\t\t\t\tconvertView = layoutInflater.inflate(R.layout.listitem,\n\t\t\t\t\t\t\tnull);\n\t\t\t\t\tTextView name = (TextView) convertView\n\t\t\t\t\t\t\t.findViewById(R.id.textView1);\n\t\t\t\t\tTextView status = (TextView) convertView\n\t\t\t\t\t\t\t.findViewById(R.id.textView3);\n\t\t\t\t\tname.setTextSize(20);\n\t\t\t\t\tstatus.setTextSize(20);\n\t\t\t\t\tname.setText(list.get(position).name);\n\t\t\t\t\tstatus.setText(list.get(position).nid);\n\t\t\t\t\treturn convertView;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic long getItemId(int position) {\n\t\t\t\t\treturn position;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic Object getItem(int position) {\n\t\t\t\t\treturn list.get(position);\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic int getCount() {\n\t\t\t\t\treturn list.size();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlistView.setAdapter(adapter);\n\n\t\t\tadViewLayout.postDelayed(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tif (count < list.size()) {\n\t\t\t\t\t\tadViewLayout.nextRation = (Ration) list.get(count);\n\t\t\t\t\t\tAdViewAdapter.handleOne(adViewLayout,\n\t\t\t\t\t\t\t\t(Ration) list.get(count));\n\t\t\t\t\t\tadViewLayout.extra.cycleTime = 9000000;\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, 2 * 1000);\n\t\t\tbreak;\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void initEnablementBehaviours( List<EnablementBehaviour> helper ) {\n        helper.add(new WithinLegalLayerBoundsBehaviour());\n        helper.add(new ValidToolDetectionActivator(new Class[]{Geometry.class, MultiLineString.class, \n                LineString.class, LinearRing.class, Polygon.class, MultiPolygon.class}));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static Matrix getDistanceMatrix(Atom[] ca1, Atom[]ca2){\n\n\t\tint r = ca1.length;\n\t\tint c = ca2.length;\n\n\t\tMatrix out = new Matrix(r,c);\n\n\t\tfor (int i=0; i<r; i++) {\n\t\t\tAtom a1 = ca1[i];\n\t\t\tfor (int j=0;j<c;j++){\n\t\t\t\tAtom b1 = ca2[j];\n\n\t\t\t\ttry {\n\t\t\t\t\tdouble d = Calc.getDistance(a1,b1);\n\t\t\t\t\tout.set(i,j,d);\n\t\t\t\t} catch (StructureException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t\tout.set(i,j,999);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void printMethods(){\n        MethodData[] methods = cls.getMethods();\n        for(int m = 0; m < methods.length; m++){\n            String[] accflags = methods[m].getAccess();\n            if(checkAccess(accflags)){\n                if(!(env. showLineAndLocal || env.showDisassembled || env.showVerbose\n                     ||  env.showInternalSigs || env.showallAttr)){\n                    out.print(\"    \");\n                }\n                printMethodSignature(methods[m], accflags);\n                printExceptions(methods[m]);\n                out.println(\";\");\n\n                if (env.showInternalSigs){\n                    out.println(\"  Signature: \" + (methods[m].getInternalSig()));\n                }\n\n                if(env.showDisassembled && ! env.showallAttr) {\n                    printcodeSequence(methods[m]);\n                    printExceptionTable(methods[m]);\n                    out.println();\n                }\n\n                if (env.showLineAndLocal) {\n                    printLineNumTable(methods[m]);\n                    printLocVarTable(methods[m]);\n                    out.println();\n                }\n\n                if (env.showallAttr){\n                    printMethodAttributes(methods[m]);\n                }\n            }\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@SuppressLint(\"NewApi\")\n\tpublic static Bitmap fastblur(Context context, Bitmap sentBitmap, int radius) {\n\n\n\n\n\t\tBitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\t\tif (radius < 1) {\n\t\t\treturn (null);\n\t\t}\n\t\tint w = bitmap.getWidth();\n\t\tint h = bitmap.getHeight();\n\n\t\tint[] pix = new int[w * h];\n\t\tLog.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n\t\tbitmap.getPixels(pix, 0, w, 0, 0, w, h);\n\n\t\tint wm = w - 1;\n\t\tint hm = h - 1;\n\t\tint wh = w * h;\n\t\tint div = radius + radius + 1;\n\n\t\tint r[] = new int[wh];\n\t\tint g[] = new int[wh];\n\t\tint b[] = new int[wh];\n\t\tint rsum, gsum, bsum, x, y, i, p, yp, yi, yw;\n\t\tint vmin[] = new int[Math.max(w, h)];\n\n\t\tint divsum = (div + 1) >> 1;\n\t\tdivsum *= divsum;\n\t\tint dv[] = new int[256 * divsum];\n\t\tfor (i = 0; i < 256 * divsum; i++) {\n\t\t\tdv[i] = (i / divsum);\n\t\t}\n\n\t\tyw = yi = 0;\n\n\t\tint[][] stack = new int[div][3];\n\t\tint stackpointer;\n\t\tint stackstart;\n\t\tint[] sir;\n\t\tint rbs;\n\t\tint r1 = radius + 1;\n\t\tint routsum, goutsum, boutsum;\n\t\tint rinsum, ginsum, binsum;\n\n\t\tfor (y = 0; y < h; y++) {\n\t\t\trinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n\t\t\tfor (i = -radius; i <= radius; i++) {\n\t\t\t\tp = pix[yi + Math.min(wm, Math.max(i, 0))];\n\t\t\t\tsir = stack[i + radius];\n\t\t\t\tsir[0] = (p & 0xff0000) >> 16;\n\t\t\t\tsir[1] = (p & 0x00ff00) >> 8;\n\t\t\t\tsir[2] = (p & 0x0000ff);\n\t\t\t\trbs = r1 - Math.abs(i);\n\t\t\t\trsum += sir[0] * rbs;\n\t\t\t\tgsum += sir[1] * rbs;\n\t\t\t\tbsum += sir[2] * rbs;\n\t\t\t\tif (i > 0) {\n\t\t\t\t\trinsum += sir[0];\n\t\t\t\t\tginsum += sir[1];\n\t\t\t\t\tbinsum += sir[2];\n\t\t\t\t} else {\n\t\t\t\t\troutsum += sir[0];\n\t\t\t\t\tgoutsum += sir[1];\n\t\t\t\t\tboutsum += sir[2];\n\t\t\t\t}\n\t\t\t}\n\t\t\tstackpointer = radius;\n\n\t\t\tfor (x = 0; x < w; x++) {\n\n\t\t\t\tr[yi] = dv[rsum];\n\t\t\t\tg[yi] = dv[gsum];\n\t\t\t\tb[yi] = dv[bsum];\n\n\t\t\t\trsum -= routsum;\n\t\t\t\tgsum -= goutsum;\n\t\t\t\tbsum -= boutsum;\n\n\t\t\t\tstackstart = stackpointer - radius + div;\n\t\t\t\tsir = stack[stackstart % div];\n\n\t\t\t\troutsum -= sir[0];\n\t\t\t\tgoutsum -= sir[1];\n\t\t\t\tboutsum -= sir[2];\n\n\t\t\t\tif (y == 0) {\n\t\t\t\t\tvmin[x] = Math.min(x + radius + 1, wm);\n\t\t\t\t}\n\t\t\t\tp = pix[yw + vmin[x]];\n\n\t\t\t\tsir[0] = (p & 0xff0000) >> 16;\n\t\t\t\tsir[1] = (p & 0x00ff00) >> 8;\n\t\t\t\tsir[2] = (p & 0x0000ff);\n\n\t\t\t\trinsum += sir[0];\n\t\t\t\tginsum += sir[1];\n\t\t\t\tbinsum += sir[2];\n\n\t\t\t\trsum += rinsum;\n\t\t\t\tgsum += ginsum;\n\t\t\t\tbsum += binsum;\n\n\t\t\t\tstackpointer = (stackpointer + 1) % div;\n\t\t\t\tsir = stack[(stackpointer) % div];\n\n\t\t\t\troutsum += sir[0];\n\t\t\t\tgoutsum += sir[1];\n\t\t\t\tboutsum += sir[2];\n\n\t\t\t\trinsum -= sir[0];\n\t\t\t\tginsum -= sir[1];\n\t\t\t\tbinsum -= sir[2];\n\n\t\t\t\tyi++;\n\t\t\t}\n\t\t\tyw += w;\n\t\t}\n\t\tfor (x = 0; x < w; x++) {\n\t\t\trinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n\t\t\typ = -radius * w;\n\t\t\tfor (i = -radius; i <= radius; i++) {\n\t\t\t\tyi = Math.max(0, yp) + x;\n\n\t\t\t\tsir = stack[i + radius];\n\n\t\t\t\tsir[0] = r[yi];\n\t\t\t\tsir[1] = g[yi];\n\t\t\t\tsir[2] = b[yi];\n\n\t\t\t\trbs = r1 - Math.abs(i);\n\n\t\t\t\trsum += r[yi] * rbs;\n\t\t\t\tgsum += g[yi] * rbs;\n\t\t\t\tbsum += b[yi] * rbs;\n\n\t\t\t\tif (i > 0) {\n\t\t\t\t\trinsum += sir[0];\n\t\t\t\t\tginsum += sir[1];\n\t\t\t\t\tbinsum += sir[2];\n\t\t\t\t} else {\n\t\t\t\t\troutsum += sir[0];\n\t\t\t\t\tgoutsum += sir[1];\n\t\t\t\t\tboutsum += sir[2];\n\t\t\t\t}\n\n\t\t\t\tif (i < hm) {\n\t\t\t\t\typ += w;\n\t\t\t\t}\n\t\t\t}\n\t\t\tyi = x;\n\t\t\tstackpointer = radius;\n\t\t\tfor (y = 0; y < h; y++) {\n\t\t\t\tpix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8) | dv[bsum];\n\n\t\t\t\trsum -= routsum;\n\t\t\t\tgsum -= goutsum;\n\t\t\t\tbsum -= boutsum;\n\n\t\t\t\tstackstart = stackpointer - radius + div;\n\t\t\t\tsir = stack[stackstart % div];\n\n\t\t\t\troutsum -= sir[0];\n\t\t\t\tgoutsum -= sir[1];\n\t\t\t\tboutsum -= sir[2];\n\n\t\t\t\tif (x == 0) {\n\t\t\t\t\tvmin[y] = Math.min(y + r1, hm) * w;\n\t\t\t\t}\n\t\t\t\tp = x + vmin[y];\n\n\t\t\t\tsir[0] = r[p];\n\t\t\t\tsir[1] = g[p];\n\t\t\t\tsir[2] = b[p];\n\n\t\t\t\trinsum += sir[0];\n\t\t\t\tginsum += sir[1];\n\t\t\t\tbinsum += sir[2];\n\n\t\t\t\trsum += rinsum;\n\t\t\t\tgsum += ginsum;\n\t\t\t\tbsum += binsum;\n\n\t\t\t\tstackpointer = (stackpointer + 1) % div;\n\t\t\t\tsir = stack[stackpointer];\n\n\t\t\t\troutsum += sir[0];\n\t\t\t\tgoutsum += sir[1];\n\t\t\t\tboutsum += sir[2];\n\n\t\t\t\trinsum -= sir[0];\n\t\t\t\tginsum -= sir[1];\n\t\t\t\tbinsum -= sir[2];\n\n\t\t\t\tyi += w;\n\t\t\t}\n\t\t}\n\n\t\tLog.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n\t\tbitmap.setPixels(pix, 0, w, 0, 0, w, h);\n\t\treturn (bitmap);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic ContentAssistCommandAdapter(Control control,\n\t\t\tIControlContentAdapter controlContentAdapter,\n\t\t\tIContentProposalProvider proposalProvider, String commandId,\n\t\t\tchar[] autoActivationCharacters) {\n\t\tthis(control, controlContentAdapter, proposalProvider, commandId,\n\t\t\t\tautoActivationCharacters, false);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void quadrantRotate(int numquadrants,\n                               double anchorx, double anchory)\n    {\n        switch (numquadrants & 3) {\n        case 0:\n            return;\n        case 1:\n            m02 += anchorx * (m00 - m01) + anchory * (m01 + m00);\n            m12 += anchorx * (m10 - m11) + anchory * (m11 + m10);\n            rotate90();\n            break;\n        case 2:\n            m02 += anchorx * (m00 + m00) + anchory * (m01 + m01);\n            m12 += anchorx * (m10 + m10) + anchory * (m11 + m11);\n            rotate180();\n            break;\n        case 3:\n            m02 += anchorx * (m00 + m01) + anchory * (m01 - m00);\n            m12 += anchorx * (m10 + m11) + anchory * (m11 - m10);\n            rotate270();\n            break;\n        }\n        if (m02 == 0.0 && m12 == 0.0) {\n            state &= ~APPLY_TRANSLATE;\n        } else {\n            state |= APPLY_TRANSLATE;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n        if(!nonSequentialModel)\n            return new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n        else{\n\n            CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n            this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n            BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n            this.updateNaturalParameterPrior(prior);\n\n            return learntBN;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void actionPerformed(ActionEvent e) {\n                                                                                                int i = 0;\n                                                                                                for (i = 0; i < runners\n                                                                                                    .size(); i++) {\n                                                                                                    if (runners\n                                                                                                        .get(\n                                                                                                            i)\n                                                                                                        .isAlive())\n                                                                                                        break;\n                                                                                                }\n\n                                                                                                if (i == runners\n                                                                                                    .size()) {\n                                                                                                    Display\n                                                                                                        .getDefault()\n                                                                                                        .asyncExec(\n                                                                                                            new Runnable() {\n                                                                                                                public void run() {\n                                                                                                                    stop(true);\n                                                                                                                    setButton(\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true);\n                                                                                                                }\n                                                                                                            });\n\n                                                                                                }\n                                                                                            }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public ColorRGBA multiplyLocal(final ReadOnlyColorRGBA scale) {\n        return set(getRed() * scale.getRed(), getGreen() * scale.getGreen(), getBlue() * scale.getBlue(), getAlpha()\n                * scale.getAlpha());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        return CharacterData.of(codePoint).isIdentifierIgnorable(codePoint);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void adaptToEnablementChange(HighlightingStyle highlighting, PropertyChangeEvent event) {\n\t\tObject value = event.getNewValue();\n\t\tboolean eventValue;\n\t\tif (value instanceof Boolean)\n\t\t\teventValue = ((Boolean) value).booleanValue();\n\t\telse if (IPreferenceStore.TRUE.equals(value))\n\t\t\teventValue = true;\n\t\telse\n\t\t\teventValue = false;\n\t\thighlighting.setEnabled(eventValue);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic final DenseMatrix zeros(ValueType valueType, long... size) {\n\t\tswitch (size.length) {\n\t\tcase 0:\n\t\t\tthrow new RuntimeException(\"Size not defined\");\n\t\tcase 1:\n\t\t\tthrow new RuntimeException(\"Size must be at least 2-dimensional\");\n\t\tdefault:\n\t\t\tswitch (valueType) {\n\t\t\tcase BIGDECIMAL:\n\t\t\t\treturn new DefaultDenseBigDecimalMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BIGINTEGER:\n\t\t\t\treturn new DefaultDenseBigIntegerMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BOOLEAN:\n\t\t\t\treturn new ArrayDenseBooleanMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BYTE:\n\t\t\t\treturn new DefaultDenseByteMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase CHAR:\n\t\t\t\treturn new DefaultDenseCharMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase DOUBLE:\n\t\t\t\tif (size.length == 2) {\n\t\t\t\t\treturn new DefaultDenseDoubleMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\t\t} else {\n\t\t\t\t\treturn new DefaultDenseDoubleMatrixMultiD(size);\n\t\t\t\t}\n\t\t\tcase FLOAT:\n\t\t\t\treturn new DefaultDenseFloatMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase INT:\n\t\t\t\treturn new DefaultDenseIntMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase LONG:\n\t\t\t\treturn new DefaultDenseLongMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase OBJECT:\n\t\t\t\treturn ObjectMatrix.Factory.zeros(size);\n\t\t\tcase SHORT:\n\t\t\t\treturn new DefaultDenseShortMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase STRING:\n\t\t\t\treturn new DefaultDenseStringMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tdefault:\n\t\t\t\tthrow new RuntimeException(\"unknown value type: \" + valueType);\n\t\t\t}\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public ConeSound(MediaContainer soundData,\n                     float initialGain,\n                     int loopCount,\n                     boolean release,\n                     boolean continuous,\n                     boolean enable,\n                     Bounds  region,\n                     float   priority,\n                     float posX, float posY, float posZ,\n                     float[] frontDistance,\n                     float[] frontDistanceGain,\n                     float[] backDistance,\n                     float[] backDistanceGain,\n                     float dirX, float dirY, float dirZ ) {\n        super(soundData, initialGain, loopCount, release, continuous, enable,\n                     region, priority, posX, posY, posZ,\n                     frontDistance, frontDistanceGain );\n\n        setDefaultReadCapabilities(readCapabilities);\n\n        ((ConeSoundRetained)this.retained).setDirection(dirX, dirY, dirZ);\n        ((ConeSoundRetained)this.retained).setBackDistanceGain(\n                     backDistance, backDistanceGain );\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate OnClickListener getClickListener(final CardStack cardStack,\n                                             final RelativeLayout container, final int index) {\n        return new OnClickListener() {\n\n            @Override\n            public void onClick(View v) {\n\n                View[] views = new View[container.getChildCount()];\n\n                for (int i = 0; i < views.length; i++) {\n                    views[i] = container.getChildAt(i);\n\n                }\n\n                int last = views.length - 1;\n\n                if (index != last) {\n\n                    if (index == 0) {\n                        onClickFirstCard(cardStack, container, index, views);\n                    } else if (index < last) {\n                        onClickOtherCard(cardStack, container, index, views,\n                                last);\n                    }\n\n                }\n\n            }\n\n            public void onClickFirstCard(final CardStack cardStack,\n                                         final RelativeLayout frameLayout, final int index,\n                                         View[] views) {\n                for (int i = 0; i < views.length; i++) {\n                    ObjectAnimator anim = null;\n\n                    if (i == 0) {\n                        float downFactor = 0;\n                        if (views.length > 2) {\n                            downFactor = convertDpToPixel((_45F)\n                                    * (views.length - 1) - 1);\n                        } else {\n                            downFactor = convertDpToPixel(_45F);\n                        }\n\n                        anim = ObjectAnimator.ofFloat(views[i],\n                                NINE_OLD_TRANSLATION_Y, 0, downFactor);\n                        anim.addListener(getAnimationListener(cardStack,\n                                frameLayout, index, views[index]));\n\n                    } else if (i == 1) {\n\n                        float upFactor = convertDpToPixel(-17f);\n                        anim = ObjectAnimator.ofFloat(views[i],\n                                NINE_OLD_TRANSLATION_Y, 0, upFactor);\n\n                    } else {\n                        float upFactor = convertDpToPixel(-1 * _45F);\n                        anim = ObjectAnimator.ofFloat(views[i],\n                                NINE_OLD_TRANSLATION_Y, 0, upFactor);\n                    }\n\n                    if (anim != null)\n                        anim.start();\n\n                }\n            }\n\n            public void onClickOtherCard(final CardStack cardStack,\n                                         final RelativeLayout frameLayout, final int index,\n                                         View[] views, int last) {\n                for (int i = index; i <= last; i++) {\n                    ObjectAnimator anim = null;\n\n                    if (i == index) {\n                        float downFactor = convertDpToPixel(_45F * (last - i)\n                                + _12F);\n                        anim = ObjectAnimator.ofFloat(views[i],\n                                NINE_OLD_TRANSLATION_Y, 0, downFactor);\n                        anim.addListener(getAnimationListener(cardStack,\n                                frameLayout, index, views[index]));\n                    } else {\n                        float upFactor = convertDpToPixel(_45F * -1);\n                        anim = ObjectAnimator.ofFloat(views[i],\n                                NINE_OLD_TRANSLATION_Y, 0, upFactor);\n                    }\n\n                    if (anim != null)\n                        anim.start();\n                }\n            }\n        };\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\tpublic boolean cleanData(Object[] params) {\n\t\tboolean flag = false;\n\t\tSQLiteDatabase database = null;\n\t\ttry {\n\t\t\tString sql1 = \"delete from blog\";\n\t\t\tString sql2 = \"select * from sqlite_sequence\";\n\t\t\tString sql3 = \"update sqlite_sequence set seq=0 where name = blog\";\n\t\t\tdatabase = helper.getWritableDatabase();\n\t\t\tdatabase.execSQL(sql1, params);\n\t\t\tdatabase.execSQL(sql2, params);\n\t\t\tdatabase.execSQL(sql3, params);\n\t\t\tflag = true;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (database != null) {\n\t\t\t\tdatabase.close();\n\t\t\t}\n\t\t}\n\n\t\treturn flag;\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void setJoinType(Player player, int joinType)\n\t{\n\t\tLegion legion = player.getLegion();\n\t\t\n\t\tif (legion == null)\n\t\t\treturn;\n\n\t\tif (legionRestrictions.canChangeLegionJoinSetting(player))\n\t\t{\n\t\t\tlegion.setJoinType(joinType);\n\t\t\tPacketSendUtility.sendPacket(player, new SM_LEGION_EDIT(0x0D , legion));\n\t\t\tDAOManager.getDAO(LegionDAO.class).updateLegionDescription(legion);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void printMethods(Class<?> cls) {\n\t\tMethod[] methods = cls.getDeclaredMethods();\n\t\tfor (Method method : methods) {\n\t\t\tString name = method.getName();\n\t\t\tClass<?>[] parameterType = method.getParameterTypes();\n\t\t\tClass<?> returnType = method.getReturnType();\n\t\t\tSystem.out.println(name);\n\t\t\tSystem.out.println(returnType.getName());\n\t\t\tfor (Class<?> class1 : parameterType)\n\t\t\t\tSystem.out.println(class1);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static <N extends RootedDAGNode<N>> List<N> topologicalSort(N root) throws GraphException {\n\t\tList<N> queued = new ArrayList<N>();\n\t\tqueued.add(root);\n\t\tint i=0;\n\t\twhile (i<queued.size()) {\n\t\t\tN n = queued.get(i);\n\t\t\tfor (N c : n.getChildren()) {\n\t\t\t\tif (!queued.contains(c))\n\t\t\t\t\tqueued.add(c);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tCollections.reverse(queued);\n\t\tList<N> sorted = new ArrayList<N>();\n\t\ti = 0;\n\t\twhile (!queued.isEmpty()) {\n\t\t\ti = queued.size()-1;\n\t\t\twhile (i>=0) {\n\t\t\t\tN n = queued.get(i);\n\t\t\t\tboolean allParentsSorted = true;\n\t\t\t\tfor (N p : n.getParents()) {\n\t\t\t\t\tif (!sorted.contains(p)) {\n\t\t\t\t\t\tallParentsSorted = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (allParentsSorted) {\n\t\t\t\t\tsorted.add(queued.remove(i));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tif (i==-1)\n\t\t\t\tthrow new GraphException(\"Cannot produce a topological sort: not a DAG\");\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public LogEntry(long timestamp, Level level, String tag, String message) {\n        this.timestamp = timestamp;\n        this.level = level;\n        this.tag = tag;\n        this.message = message;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void actionPerformed(ActionEvent e) {\n                                                                                                final Element element = UIPool\n                                                                                                    .poll();\n                                                                                                if (null != element) {\n                                                                                                    Display\n                                                                                                        .getDefault()\n                                                                                                        .asyncExec(\n                                                                                                            new Runnable() {\n                                                                                                                public void run() {\n                                                                                                                    if (element\n                                                                                                                        .getElement()\n                                                                                                                        .equals(\n                                                                                                                            UIElement.TASK_PROGRESS_BAR)) {\n                                                                                                                        if (((Integer) element\n                                                                                                                            .getValue()) > 0)\n                                                                                                                            setProgressBarMax(\n                                                                                                                                element\n                                                                                                                                    .getSN(),\n                                                                                                                                element\n                                                                                                                                    .getTaskName(),\n                                                                                                                                element\n                                                                                                                                    .getScriptName());\n                                                                                                                        else\n                                                                                                                            setProgressBarCount(\n                                                                                                                                element\n                                                                                                                                    .getSN(),\n                                                                                                                                element\n                                                                                                                                    .getTaskName(),\n                                                                                                                                element\n                                                                                                                                    .getScriptName());\n                                                                                                                    } else if (element\n                                                                                                                        .getElement()\n                                                                                                                        .equals(\n                                                                                                                            UIElement.TASK_START_TIME)) {\n                                                                                                                        setBeginTime(\n                                                                                                                            element\n                                                                                                                                .getSN(),\n                                                                                                                            element\n                                                                                                                                .getTaskName(),\n                                                                                                                            element\n                                                                                                                                .getScriptName(),\n                                                                                                                            String\n                                                                                                                                .valueOf(element\n                                                                                                                                    .getValue()));\n                                                                                                                    } else if (element\n                                                                                                                        .getElement()\n                                                                                                                        .equals(\n                                                                                                                            UIElement.TASK_TEST_RESULT)) {\n                                                                                                                        setPassOrFailCount(\n                                                                                                                            element\n                                                                                                                                .getSN(),\n                                                                                                                            element\n                                                                                                                                .getTaskName(),\n                                                                                                                            element\n                                                                                                                                .getScriptName(),\n                                                                                                                            Boolean\n                                                                                                                                .parseBoolean((String) element\n                                                                                                                                    .getValue()));\n                                                                                                                    }\n                                                                                                                }\n                                                                                                            });\n\n                                                                                                }\n                                                                                            }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void removePropertyChangeListener(\n                                                          PropertyChangeListener listener) {\n        synchronized (getObjectLock()) {\n            if (listener == null || changeSupport == null) {\n                return;\n            }\n            changeSupport.removePropertyChangeListener(listener);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        boolean bIdentifierIgnorable = false;\n\n        if (codePoint >= MIN_CODE_POINT && codePoint <= FAST_PATH_MAX) {\n            bIdentifierIgnorable = CharacterDataLatin1.isIdentifierIgnorable(codePoint);\n        } else {\n            int plane = getPlane(codePoint);\n            switch(plane) {\n            case(0):\n                bIdentifierIgnorable = CharacterData00.isIdentifierIgnorable(codePoint);\n                break;\n            case(1):\n                bIdentifierIgnorable = CharacterData01.isIdentifierIgnorable(codePoint);\n                break;\n            case(2):\n                bIdentifierIgnorable = CharacterData02.isIdentifierIgnorable(codePoint);\n                break;\n            case(3): // Undefined\n            case(4): // Undefined\n            case(5): // Undefined\n            case(6): // Undefined\n            case(7): // Undefined\n            case(8): // Undefined\n            case(9): // Undefined\n            case(10): // Undefined\n            case(11): // Undefined\n            case(12): // Undefined\n            case(13): // Undefined\n                bIdentifierIgnorable = CharacterDataUndefined.isIdentifierIgnorable(codePoint);\n                break;\n            case(14): \n                bIdentifierIgnorable = CharacterData0E.isIdentifierIgnorable(codePoint);\n                break;\n            case(15): // Private Use\n            case(16): // Private Use\n                bIdentifierIgnorable = CharacterDataPrivateUse.isIdentifierIgnorable(codePoint);\n                break;\n            default:\n                break;\n            }\n        }\n        return bIdentifierIgnorable;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public void onPlayerStateChange(PlayerState oldState, PlayerState newState, Bundle extra) {\n\n        mPrevState = mCurrentState;\n        mCurrentState = newState;\n        Log.d(TAG, \"State change event! Oldstate= \" + oldState + \" NewState= \" + newState);\n        if (mPrevState == mCurrentState) {\n            Log.w(TAG, \"Duplicate state change message!!! \");\n        }\n        if (mPrevState == PlayerState.BUFFERING && mCurrentState != PlayerState.BUFFERING) {\n            AnalyticsHelper.trackPlaybackControlAction(AnalyticsTags.ACTION_PLAYBACK_BUFFER_END,\n                                                       mSelectedContent, getCurrentPosition());\n        }\n        switch (newState) {\n            case IDLE:\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mIsContentChangeRequested) {\n                    openSelectedContent();\n                }\n                break;\n            case OPENING:\n                break;\n            case OPENED:\n                if (mPlayer != null && mIsActivityResumed) {\n                    mPlayer.prepare();\n                }\n                else {\n                    mIsContentChangeRequested = false;\n                }\n                if (mIsContentSupportCC && mIsCloseCaptionEnabled) {\n                    if (mPlaybackOverlayFragment != null) {\n                        mPlaybackOverlayFragment.updateCCButtonState(true, true);\n                    }\n                    if (mPlayer != null) {\n                        mPlayer.enableTextTrack(TrackType.SUBTITLE, true);\n                    }\n                }\n                break;\n            case PREPARING:\n                if (mPlaybackOverlayFragment != null && mPlaybackOverlayFragment.getView() !=\n                        null) {\n                    mPlaybackOverlayFragment.getView().setVisibility(View.VISIBLE);\n                }\n                break;\n            case READY:\n                mPlaybackState = LeanbackPlaybackState.PAUSED;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(false);\n                }\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mPrevState == PlayerState.PREPARING) {\n                    if (mPlaybackOverlayFragment != null) {\n                        mPlaybackOverlayFragment.updatePlayback();\n                        mPlaybackOverlayFragment.startProgressAutomation();\n                    }\n                    if (mCurrentPlaybackPosition > 0) {\n                        mPlayer.seekTo(mCurrentPlaybackPosition);\n                    }\n                    if (mAutoPlay || mIsContentChangeRequested) {\n                        play();\n                        mAutoPlay = false;\n                        if (mIsContentChangeRequested) {\n                            mIsContentChangeRequested = false;\n                        }\n                    }\n                }\n                else if (mAudioFocusState == AudioFocusState.NoFocusNoDuck) {\n                    play();\n                }\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PAUSED);\n                }\n                break;\n            case PLAYING:\n                mPlaybackState = LeanbackPlaybackState.PLAYING;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(true);\n                }\n                hideProgress();\n                mWindow.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PLAYING);\n                }\n                break;\n            case BUFFERING:\n                showProgress();\n                AnalyticsHelper.trackPlaybackControlAction(AnalyticsTags\n                                                                   .ACTION_PLAYBACK_BUFFER_START,\n                                                           mSelectedContent, getCurrentPosition());\n                break;\n            case SEEKING:\n                showProgress();\n                break;\n            case ENDED:\n                hideProgress();\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.playbackFinished();\n                }\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.COMPLETED);\n                }\n                break;\n            case CLOSING:\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.stopProgressAutomation();\n                }\n                break;\n            case ERROR:\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                Log.e(TAG, \"Player encountered an error!\");\n                break;\n            default:\n                Log.e(TAG, \"Unknown state!!!!!\");\n                break;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps) {\n            return setImageAttachmentsForObject(objectProperty, bitmaps, false);\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n        this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n        BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n        this.updateNaturalParameterPrior(prior);\n\n        return learntBN;\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n  public boolean feed_publishTemplatizedAction(Integer actorId, CharSequence titleTemplate,\n                                               Map<String, CharSequence> titleData,\n                                               CharSequence bodyTemplate,\n                                               Map<String, CharSequence> bodyData,\n                                               CharSequence bodyGeneral,\n                                               Collection<Integer> targetIds,\n                                               Collection<IFeedImage> images)\n  throws FacebookException, IOException {\n    return feed_publishTemplatizedAction(titleTemplate, titleData, bodyTemplate, bodyData, bodyGeneral,\n                                         targetIds, images,  null);\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic SmoothStreamingRendererBuilder(String userAgent, String url, String contentId,\n      MediaDrmCallback drmCallback, TextView debugTextView) {\n    this.userAgent = userAgent;\n    this.url = url;\n    this.contentId = contentId;\n    this.drmCallback = drmCallback;\n    this.debugTextView = debugTextView;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tpublic synchronized void clearContexts(Resource... contexts)\n\t\tthrows IOException\n\t{\n\n\n\t\tlogger.debug(\"deleting contexts: {}\", Arrays.toString(contexts));\n\n\t\tfor (Resource context : contexts) {\n\t\t\tString contextString = SearchFields.getContextID(context);\n\t\t\tTerm contextTerm = new Term(SearchFields.CONTEXT_FIELD_NAME, contextString);\n\n\n\t\t\tgetIndexWriter().deleteDocuments(contextTerm);\n\t\t}\n\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void initEnablementBehaviours( List<EnablementBehaviour> helper ) {\n        helper.add(new WithinLegalLayerBoundsBehaviour());\n        helper.add(new ValidToolDetectionActivator(new Class[]{Geometry.class, Polygon.class, MultiPolygon.class, LineString.class, MultiLineString.class}));\n   }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic boolean handleControlWord(RtfCtrlWordData ctrlWordData) {\n\t\tif(ctrlWordData.ctrlWord.equals(\"blue\")) this.setBlue(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"red\")) this.setRed(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"green\")) this.setGreen(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"cshade\")) this.setShade(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"ctint\")) this.setTint(ctrlWordData.intValue());\n\treturn true;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate IFile getWorkspaceFile(IFileStore fileStore) {\n\t\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();\n\t\tIFile[] files = workspaceRoot.findFilesForLocationURI(fileStore.toURI());\n\t\tif(files != null && files.length == 1)\n\t\t\treturn files[0];\n\t\treturn null;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic BufferedImage getRenderedImage()\n\t{\n\t\tBufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n\t\t{\n\t\t\tGraphics2D g = image.createGraphics();\n\t\t\tfor(Layer l : flatmap)\n\t\t\t{\n\t\t\t\tl.render(g);\n\t\t\t}\n\t\t\tg.dispose();\n\t\t}\n\t\treturn image;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic GradientRadialBackground( int innerColor, int outerColor, Dimension start, Dimension end, Dimension centerX, Dimension centerY ) {\n\t\tthis.innerColor = innerColor;\n\t\tthis.outerColor = outerColor;\n\t\tif (start != null && end != null && start.getValue(100) != end.getValue( 100)) {\n\t\t\tthis.start = start;\n\t\t\tthis.end = end;\n\t\t}\n\t\tthis.centerX = centerX;\n\t\tthis.centerY = centerY;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\tprotected void initEnablementBehaviours(List<EnablementBehaviour> enablementBehaviours) {\n\t\tenablementBehaviours.add(new WithinLegalLayerBoundsBehaviour());\n\t\tenablementBehaviours.add(new ValidToolDetectionActivator(new Class[] {\n\t\t\t\tGeometry.class,\n\t\t\t\tPolygon.class,\n\t\t\t\tMultiPolygon.class,\n\t\t\t\tLineString.class,\n\t\t\t\tMultiLineString.class }));\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void actionPerformed(ActionEvent e) {\n                                                                                                final Element element = UIPool\n                                                                                                    .poll();\n                                                                                                if (null != element) {\n                                                                                                    Display\n                                                                                                        .getDefault()\n                                                                                                        .asyncExec(\n                                                                                                            new Runnable() {\n                                                                                                                public void run() {\n                                                                                                                    if (element\n                                                                                                                        .getElement()\n                                                                                                                        .equals(\n                                                                                                                            UIElement.TASK_PROGRESS_BAR)) {\n                                                                                                                        if (((Integer) element\n                                                                                                                            .getValue()) > 0)\n                                                                                                                            setProgressBarMax(\n                                                                                                                                element\n                                                                                                                                    .getSN(),\n                                                                                                                                element\n                                                                                                                                    .getTaskName(),\n                                                                                                                                element\n                                                                                                                                    .getScriptName());\n                                                                                                                        else\n                                                                                                                            setProgressBarCount(\n                                                                                                                                element\n                                                                                                                                    .getSN(),\n                                                                                                                                element\n                                                                                                                                    .getTaskName(),\n                                                                                                                                element\n                                                                                                                                    .getScriptName());\n                                                                                                                    } else if (element\n                                                                                                                        .getElement()\n                                                                                                                        .equals(\n                                                                                                                            UIElement.TASK_START_TIME)) {\n                                                                                                                        setBeginTime(\n                                                                                                                            element\n                                                                                                                                .getSN(),\n                                                                                                                            element\n                                                                                                                                .getTaskName(),\n                                                                                                                            element\n                                                                                                                                .getScriptName(),\n                                                                                                                            String\n                                                                                                                                .valueOf(element\n                                                                                                                                    .getValue()));\n                                                                                                                    } else if (element\n                                                                                                                        .getElement()\n                                                                                                                        .equals(\n                                                                                                                            UIElement.TASK_TEST_RESULT)) {\n                                                                                                                        setPassOrFailCount(\n                                                                                                                            element\n                                                                                                                                .getSN(),\n                                                                                                                            element\n                                                                                                                                .getTaskName(),\n                                                                                                                            element\n                                                                                                                                .getScriptName(),\n                                                                                                                            Boolean\n                                                                                                                                .parseBoolean((String) element\n                                                                                                                                    .getValue()));\n                                                                                                                    }\n                                                                                                                }\n                                                                                                            });\n\n                                                                                                }\n                                                                                            }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n        logger.trace(\"Start handling inactive event for client {}\", this.clientId);\n\n        if (this.connected) {\n\n            logger.debug(\"Connection closed: Connection lost from client {} user {}\", this.clientId, this.userName);\n\n            boolean redirect = handleConnectLost(ctx);\n\n            if (redirect)\n                logger.trace(\"Send a copy of DISCONNECT message from client {} to 3rd party application\", this.clientId);\n            this.cluster.sendToApplication(new Message<>(\n                    new MqttFixedHeader(MqttMessageType.DISCONNECT, false, MqttQoS.AT_MOST_ONCE, false, 0),\n                    new MqttAdditionalHeader(this.version, this.clientId, this.userName, this.brokerId), null, null));\n\n            if (this.willMessage != null) {\n\n                MqttQoS willQos = this.willMessage.fixedHeader().qos();\n                String willTopic = this.willMessage.variableHeader().topicName();\n                boolean willRetain = this.willMessage.fixedHeader().retain();\n\n                AuthorizeResult result = this.authenticator.authPublish(this.clientId, this.userName, willTopic, willQos.value(), willRetain);\n                if (result == AuthorizeResult.OK) {\n                    logger.trace(\"Authorization WILL message succeeded on topic {} for client {}\", willTopic, this.clientId);\n\n                    onwardRecipients(this.willMessage, Message.fromMqttMessage(this.willMessage, this.version, this.clientId, this.userName, this.brokerId).payload());\n                }\n                else {\n                    logger.trace(\"Authorization WILL message failed on topic {} for client {}\", willTopic, this.clientId);\n                }\n            }\n        }\n\n        logger.trace(\"Finish handling inactive event for client {}\", this.clientId);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void testParameterTypes() throws Exception {\n        Response<String> response = webb\n                .get(\"/parameter-types\")\n                .param(\"string\", SIMPLE_ASCII)\n                .param(\"number\", 815)\n                .param(\"number\", 4711) // test overwrite feature of multiple calls with same name\n                .param(\"null\", null)\n                .param(\"empty\", \"\")\n                .asString();\n\n        assertEquals(204, response.getStatusCode());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public void onPlayerStateChange(PlayerState oldState, PlayerState newState, Bundle extra) {\n\n        mPrevState = mCurrentState;\n        mCurrentState = newState;\n        Log.d(TAG, \"State change event! Oldstate= \" + oldState + \" NewState= \" + newState);\n        if (mPrevState == mCurrentState) {\n            Log.w(TAG, \"Duplicate state change message!!! \");\n        }\n        if (mPrevState == PlayerState.BUFFERING && mCurrentState != PlayerState.BUFFERING) {\n            AnalyticsHelper.trackPlaybackControlAction(AnalyticsTags.ACTION_PLAYBACK_BUFFER_END,\n                                                       mSelectedContent, getCurrentPosition());\n        }\n        switch (newState) {\n            case IDLE:\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mIsContentChangeRequested) {\n                    openSelectedContent();\n                }\n                break;\n            case OPENING:\n                break;\n            case OPENED:\n                if (mPlayer != null && mIsActivityResumed) {\n                    mPlayer.prepare();\n                }\n                else {\n                    mIsContentChangeRequested = false;\n                }\n                break;\n            case PREPARING:\n                if (mPlaybackOverlayFragment != null && mPlaybackOverlayFragment.getView() !=\n                        null) {\n                    mPlaybackOverlayFragment.getView().setVisibility(View.VISIBLE);\n                }\n                break;\n            case READY:\n                mPlaybackState = LeanbackPlaybackState.PAUSED;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(false);\n                }\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mPrevState == PlayerState.PREPARING) {\n                    if (mPlaybackOverlayFragment != null) {\n                        modifyClosedCaptionState(mIsCloseCaptionEnabled);\n\n                        mPlaybackOverlayFragment.updatePlayback();\n                        mPlaybackOverlayFragment.startProgressAutomation();\n                    }\n                    if (mCurrentPlaybackPosition > 0) {\n                        mPlayer.seekTo(mCurrentPlaybackPosition);\n                    }\n                    if (mAutoPlay || mIsContentChangeRequested) {\n                        play();\n                        mAutoPlay = false;\n                        if (mIsContentChangeRequested) {\n                            mIsContentChangeRequested = false;\n                        }\n                    }\n                }\n                else if (mAudioFocusState == AudioFocusState.NoFocusNoDuck) {\n                    play();\n                }\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PAUSED);\n                }\n                break;\n            case PLAYING:\n                mPlaybackState = LeanbackPlaybackState.PLAYING;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(true);\n                }\n                hideProgress();\n                mWindow.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PLAYING);\n                }\n                if (mCurrentPlaybackPosition < getCurrentPosition()) {\n                    mCurrentPlaybackPosition = getCurrentPosition();\n                }\n                AnalyticsHelper.trackPlaybackStarted(mSelectedContent, getDuration(),\n                                                     mCurrentPlaybackPosition);\n                break;\n            case BUFFERING:\n                showProgress();\n                AnalyticsHelper.trackPlaybackControlAction(AnalyticsTags\n                                                                   .ACTION_PLAYBACK_BUFFER_START,\n                                                           mSelectedContent, getCurrentPosition());\n                break;\n            case SEEKING:\n                showProgress();\n                break;\n            case ENDED:\n                hideProgress();\n                if (mAdsImplementation != null && mAdsImplementation.isPostRollAvailable()) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.COMPLETED);\n                }\n                else {\n                    playbackFinished();\n                }\n\n                break;\n            case CLOSING:\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.stopProgressAutomation();\n                }\n                break;\n            case ERROR:\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                Log.e(TAG, \"Player encountered an error!\");\n                break;\n            default:\n                Log.e(TAG, \"Unknown state!!!!!\");\n                break;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic UApp initConfig() {\n    if(conf==null) conf=new UConfig();\n    conf.put(CONFW,1024).put(CONFH,768);\n    conf.put(CONFWINX,0).put(CONFWINY,0);\n    conf.put(CONFDECORATED,false).put(CONFRENDERER, OPENGL);\n    conf.put(CONFPATH,UFile.getCurrentDir());\n    conf.put(CONFDATAPATH,UFile.getCurrentDir());\n    \n    conf.list();\n    appFlags=new HashMap<Integer,Integer>();\n    return this;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void requestListViewData() {\n        mBllUser = new BusinessUser(this);\n        mBllServer = new BusinessServer(this);\n        mListMap = new ArrayList<Map<String, Object>>();\n        mBllUser.userServerOrderList((position + 1) + \"\", pageNum + \"\");\n\n\n            mAdapterNotake = new AdapterFrgServerOrderComplete(getActivity(), this, mListMap);\n            mListView.setAdapter(mAdapterNotake);\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public boolean isSourceEncodingSupported(AudioFormat.Encoding sourceEncoding){\n\n        AudioFormat.Encoding sourceEncodings[] = getSourceEncodings();\n\n        for(int i=0; i<sourceEncodings.length; i++) {\n            if( sourceEncoding.equals( sourceEncodings[i]) ) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic Vector<Operator> topologicalSort() {\n\t\tfinal Map<Operator, Integer> originalIndices = new HashMap<Operator, Integer>();\n\t\tfor (int i = 0; i < operators.size(); i++) {\n\t\t\toriginalIndices.put(operators.get(i), i);\n\t\t}\n\t\tEdgeCounter counter = new EdgeCounter(operators);\n\t\tfor (Operator child : getOperators()) {\n\t\t\tfor (OutputPort out : child.getOutputPorts().getAllPorts()) {\n\t\t\t\tInputPort dest = out.getDestination();\n\t\t\t\tif (dest != null) {\n\t\t\t\t\tcounter.incNumEdges(dest.getPorts().getOwner().getOperator());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tVector<Operator> sorted = new Vector<Operator>();\n\t\tPriorityQueue<Operator> independentOperators = new PriorityQueue<Operator>(Math.max(1, operators.size()),\n\t\t\t\tnew Comparator<Operator>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic int compare(Operator o1, Operator o2) {\n\t\t\t\t\t\treturn originalIndices.get(o1) - originalIndices.get(o2);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\tindependentOperators.addAll(counter.getIndependentOperators());\n\t\twhile (!independentOperators.isEmpty()) {\n\t\t\tOperator first = independentOperators.poll();\n\t\t\tsorted.add(first);\n\t\t\tfor (OutputPort out : first.getOutputPorts().getAllPorts()) {\n\t\t\t\tInputPort dest = out.getDestination();\n\t\t\t\tif (dest != null) {\n\t\t\t\t\tOperator destOp = dest.getPorts().getOwner().getOperator();\n\t\t\t\t\tif (counter.decNumEdges(destOp) == 0) {\n\t\t\t\t\t\tindependentOperators.add(destOp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\n\tprivate void topologicalSort( Collection<TopologicalElement> unmarkedNodes, List<Element> sorted ) {\n\n\t\twhile ( !unmarkedNodes.isEmpty() ) {\n\n\t\t\tTopologicalElement node = unmarkedNodes.iterator().next();\n\t\t\ttopologicalVisit( node, unmarkedNodes, sorted, unmarkedNodes.size() );\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        PartialSufficientSatistics partialSufficientSatistics = PartialSufficientSatistics.createZeroPartialSufficientStatistics(efBayesianNetwork);\n        partialSufficientSatistics.copy(this.sumSS);\n        partialSufficientSatistics.normalize();\n        SufficientStatistics finalSS = efBayesianNetwork.createZeroSufficientStatistics();\n        finalSS.sum(partialSufficientSatistics.getCompoundVector());\n\n        efBayesianNetwork.setMomentParameters(finalSS);\n        return efBayesianNetwork.toBayesianNetwork(dag);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void setGlobalProperties(String resource, String url) {\n    config.getErrorContext().setActivity(\"loading global properties\");\n    try {\n      Properties props;\n      if (resource != null) {\n        config.getErrorContext().setResource(resource);\n        props = Resources.getResourceAsProperties(resource);\n      } else if (url != null) {\n        config.getErrorContext().setResource(url);\n        props = Resources.getUrlAsProperties(url);\n      } else {\n        throw new RuntimeException(\"The \" + \"properties\" + \" element requires either a resource or a url attribute.\");\n      }\n\n      if (props != null) {\n        props.putAll(globalProps);\n        globalProps = props;\n      }\n\n      String customizedSQLExecutor = globalProps.getProperty(\"sql_executor_class\");\n      config.getErrorContext().setActivity(\"Loading SQLExecutor.\");\n      if (customizedSQLExecutor != null) {\n        try {\n          config.getClient().getDelegate().setCustomExecutor(customizedSQLExecutor);\n          config.getClient().getDelegate().getSqlExecutor().init(config, globalProps);\n        } catch (Exception e) {\n          config.getErrorContext().setCause(e);\n          config.getErrorContext()\n              .setMoreInfo(\"Loading of customizedSQLExecutor failed. Please check Properties file.\");\n        }\n      }\n\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error loading properties.  Cause: \" + e, e);\n    }\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static final void writeIntLittleEndian(byte[] array, int pos,\n\t    int value) {\n\tarray[pos + 3] = (byte) (value >>> 24);\n\tarray[pos + 2] = (byte) (value >>> 16);\n\tarray[pos + 1] = (byte) (value >>> 8);\n\tarray[pos] = (byte) (value & 0xFF);\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void initEnablementBehaviours( List<EnablementBehaviour> helper ) {\n        helper.add(new ValidToolDetectionActivator(new Class[]{Geometry.class, LineString.class, MultiLineString.class,\n                Polygon.class, MultiPolygon.class, Point.class, MultiPoint.class}));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n\tpublic void testBlock() throws IOException {\n\t\tBlock b = new Block(BlockCompressionMethod.GZIP.ordinal(),\n\t\t\t\tBlockContentType.CORE, 0, \"123457890\".getBytes(), null);\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tb.write(baos);\n\n\t\tByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n\t\tBlock b2 = new Block(bais, true, true);\n\n\t\tassertArrayEquals(b.getRawContent(), b2.getRawContent());\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic ExternalCarrierBillingInstrumentProto(String instrumentKey, String subscriberIdentifier, String accountType, String subscriberCurrency, Long transactionLimit, String subscriberName, String address1, String address2, String city, String state, String postalCode, String country, EncryptedSubscriberInfo encryptedSubscriberInfo) {\n    this.instrumentKey = instrumentKey;\n    this.subscriberIdentifier = subscriberIdentifier;\n    this.accountType = accountType;\n    this.subscriberCurrency = subscriberCurrency;\n    this.transactionLimit = transactionLimit;\n    this.subscriberName = subscriberName;\n    this.address1 = address1;\n    this.address2 = address2;\n    this.city = city;\n    this.state = state;\n    this.postalCode = postalCode;\n    this.country = country;\n    this.encryptedSubscriberInfo = encryptedSubscriberInfo;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n\n\n        Debug.v(\"onCreate here!\");\n        Debug.d(1, 2, 3, 4, 5);\n        Debug.i(\"0\", \"1\", \"2\", \"3\"); // will just enumerate strings\n        Debug.w(\"%s %s %s\", null, null, null); // will call String.format\n        Debug.e(true, null, Integer.MAX_VALUE, Long.MIN_VALUE);\n        Debug.wtf(\"No, really, WTF?!\");\n\n\n        if (savedInstanceState == null) {\n            getSupportFragmentManager()\n                    .beginTransaction()\n                    .add(R.id.content, new MainFragment())\n                    .commit();\n        }\n\n        Debug.trace(100);\n\n\n\n\n\n\n\n\n\n        final UnknownHostException exception = new UnknownHostException();\n        exception.initCause(new Throwable());\n        Debug.e(exception, \"Hello this is a message for exception\");\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(java.io.InputStream is) throws org.apache.xmlbeans.XmlException, java.io.IOException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( is, type, null ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static <T> T getViewer(Class<T> clazz, Control control, int event) {\n\t\tListener[] listeners = control.getListeners(event);\n\t\tfor (Listener listener : listeners) {\n\t\t\tObject lookFor = listener;\n\t\t\tif (listener instanceof TypedListener) {\n\t\t\t\tlookFor = ((TypedListener) listener).getEventListener();\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tField this$0 = lookFor.getClass().getDeclaredField(\"this$0\");\n\t\t\t\tthis$0.setAccessible(true);\n\t\t\t\tObject viewer = this$0.get(lookFor);\n\t\t\t\tif (clazz.isInstance(viewer)) {\n\t\t\t\t\treturn clazz.cast(viewer);\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, com.ib.client.Contract contractIB, com.ib.client.Order order,\n\t\t\tOrderState orderState) {\n\t\ttry {\n\n\t\t\tTWSBrokerModel.logOrderState(orderState);\n\t\t\tTWSBrokerModel.logTradeOrder(order);\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(new Integer(order.m_orderId));\n\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170,\n\t\t\t\t\t\t\"Warning Order not found for Order Key: \" + order.m_orderId + \" make sure Client ID: \"\n\t\t\t\t\t\t\t\t+ this.m_clientId + \" is not the master in TWS. On openOrder update.\");\n\t\t\t\ttransientInstance = new TradeOrder();\n\t\t\t\ttransientInstance.setOrderKey(order.m_orderId);\n\t\t\t\ttransientInstance.setCreateDate(TradingCalendar.getDateTimeNowMarketTimeZone());\n\t\t\t\tTWSBrokerModel.updateTradeOrder(order, orderState, transientInstance);\n\t\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (TWSBrokerModel.updateTradeOrder(order, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t_log.debug(\"Open order filled Order Key:\" + transientInstance.getOrderKey());\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (transientInstance.hasTradePosition() && !transientInstance.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(transientInstance.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Open order state changed. Status:\" + orderState.m_status);\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(transientInstance);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.fireTradeOrderStatusChanged(transientInstance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private double readDecimalLiteral(int c) {\n        return readDecimalLiteral(c, true);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker, boolean showDirection) {\n        this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@SuppressLint(\"NewApi\")\n    public static Bitmap fastblur(Context context, Bitmap sentBitmap, int radius) {\n\n        if (VERSION.SDK_INT > 16) {\n            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n            final RenderScript rs = RenderScript.create(context);\n            final Allocation input = Allocation.createFromBitmap(rs,\n                    sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n                    Allocation.USAGE_SCRIPT);\n            final Allocation output = Allocation.createTyped(rs,\n                    input.getType());\n            final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs,\n                    Element.U8_4(rs));\n            script.setRadius(radius );\n            script.setInput(input);\n            script.forEach(output);\n            output.copyTo(bitmap);\n            return bitmap;\n        }\n\n\n\n        Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n        if (radius < 1) {\n            return (null);\n        }\n\n        int w = bitmap.getWidth();\n        int h = bitmap.getHeight();\n\n        int[] pix = new int[w * h];\n        Log.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n        bitmap.getPixels(pix, 0, w, 0, 0, w, h);\n\n        int wm = w - 1;\n        int hm = h - 1;\n        int wh = w * h;\n        int div = radius + radius + 1;\n\n        int r[] = new int[wh];\n        int g[] = new int[wh];\n        int b[] = new int[wh];\n        int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;\n        int vmin[] = new int[Math.max(w, h)];\n\n        int divsum = (div + 1) >> 1;\n        divsum *= divsum;\n        int dv[] = new int[256 * divsum];\n        for (i = 0; i < 256 * divsum; i++) {\n            dv[i] = (i / divsum);\n        }\n\n        yw = yi = 0;\n\n        int[][] stack = new int[div][3];\n        int stackpointer;\n        int stackstart;\n        int[] sir;\n        int rbs;\n        int r1 = radius + 1;\n        int routsum, goutsum, boutsum;\n        int rinsum, ginsum, binsum;\n\n        for (y = 0; y < h; y++) {\n            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n            for (i = -radius; i <= radius; i++) {\n                p = pix[yi + Math.min(wm, Math.max(i, 0))];\n                sir = stack[i + radius];\n                sir[0] = (p & 0xff0000) >> 16;\n                sir[1] = (p & 0x00ff00) >> 8;\n                sir[2] = (p & 0x0000ff);\n                rbs = r1 - Math.abs(i);\n                rsum += sir[0] * rbs;\n                gsum += sir[1] * rbs;\n                bsum += sir[2] * rbs;\n                if (i > 0) {\n                    rinsum += sir[0];\n                    ginsum += sir[1];\n                    binsum += sir[2];\n                } else {\n                    routsum += sir[0];\n                    goutsum += sir[1];\n                    boutsum += sir[2];\n                }\n            }\n            stackpointer = radius;\n\n            for (x = 0; x < w; x++) {\n\n                r[yi] = dv[rsum];\n                g[yi] = dv[gsum];\n                b[yi] = dv[bsum];\n\n                rsum -= routsum;\n                gsum -= goutsum;\n                bsum -= boutsum;\n\n                stackstart = stackpointer - radius + div;\n                sir = stack[stackstart % div];\n\n                routsum -= sir[0];\n                goutsum -= sir[1];\n                boutsum -= sir[2];\n\n                if (y == 0) {\n                    vmin[x] = Math.min(x + radius + 1, wm);\n                }\n                p = pix[yw + vmin[x]];\n\n                sir[0] = (p & 0xff0000) >> 16;\n                sir[1] = (p & 0x00ff00) >> 8;\n                sir[2] = (p & 0x0000ff);\n\n                rinsum += sir[0];\n                ginsum += sir[1];\n                binsum += sir[2];\n\n                rsum += rinsum;\n                gsum += ginsum;\n                bsum += binsum;\n\n                stackpointer = (stackpointer + 1) % div;\n                sir = stack[(stackpointer) % div];\n\n                routsum += sir[0];\n                goutsum += sir[1];\n                boutsum += sir[2];\n\n                rinsum -= sir[0];\n                ginsum -= sir[1];\n                binsum -= sir[2];\n\n                yi++;\n            }\n            yw += w;\n        }\n        for (x = 0; x < w; x++) {\n            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n            yp = -radius * w;\n            for (i = -radius; i <= radius; i++) {\n                yi = Math.max(0, yp) + x;\n\n                sir = stack[i + radius];\n\n                sir[0] = r[yi];\n                sir[1] = g[yi];\n                sir[2] = b[yi];\n\n                rbs = r1 - Math.abs(i);\n\n                rsum += r[yi] * rbs;\n                gsum += g[yi] * rbs;\n                bsum += b[yi] * rbs;\n\n                if (i > 0) {\n                    rinsum += sir[0];\n                    ginsum += sir[1];\n                    binsum += sir[2];\n                } else {\n                    routsum += sir[0];\n                    goutsum += sir[1];\n                    boutsum += sir[2];\n                }\n\n                if (i < hm) {\n                    yp += w;\n                }\n            }\n            yi = x;\n            stackpointer = radius;\n            for (y = 0; y < h; y++) {\n                pix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16)\n                        | (dv[gsum] << 8) | dv[bsum];\n\n                rsum -= routsum;\n                gsum -= goutsum;\n                bsum -= boutsum;\n\n                stackstart = stackpointer - radius + div;\n                sir = stack[stackstart % div];\n\n                routsum -= sir[0];\n                goutsum -= sir[1];\n                boutsum -= sir[2];\n\n                if (x == 0) {\n                    vmin[y] = Math.min(y + r1, hm) * w;\n                }\n                p = x + vmin[y];\n\n                sir[0] = r[p];\n                sir[1] = g[p];\n                sir[2] = b[p];\n\n                rinsum += sir[0];\n                ginsum += sir[1];\n                binsum += sir[2];\n\n                rsum += rinsum;\n                gsum += ginsum;\n                bsum += binsum;\n\n                stackpointer = (stackpointer + 1) % div;\n                sir = stack[stackpointer];\n\n                routsum += sir[0];\n                goutsum += sir[1];\n                boutsum += sir[2];\n\n                rinsum -= sir[0];\n                ginsum -= sir[1];\n                binsum -= sir[2];\n\n                yi += w;\n            }\n        }\n\n        Log.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n        bitmap.setPixels(pix, 0, w, 0, 0, w, h);\n        return (bitmap);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n  public void testNotEquals() {\n    Point p1 = Point.of(2.0, 3.0);\n    Point p2 = Point.of(2.0, 4.0);\n    Point p3 = Point.of(1.0, 3.0);\n    \n    assertNotEquals(p1, p2);\n    assertNotEquals(p1, p3);\n    assertNotEquals(p2, p3);\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic TabbedPane(String title, Displayable[] tabs, Image[] tabIcons, boolean useTabTitle)\n\t{\n\t\tthis( title, tabs, tabIcons, useTabTitle, null );\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testExamples() throws EncoderException {\n        final String[][] data = {\n            {\"m\\u00DCller\", \"657\"}, // m\u813aller - why upper case U-umlaut?\n            {\"schmidt\", \"862\"},\n            {\"schneider\", \"8627\"},\n            {\"fischer\", \"387\"},\n            {\"weber\", \"317\"},\n            {\"wagner\", \"3467\"},\n            {\"becker\", \"147\"},\n            {\"hoffmann\", \"0366\"},\n            {\"sch\\u00C4fer\", \"837\"}, // sch\u811bfer - why upper case A-umlaut ?\n            {\"Breschnew\", \"17863\"},\n            {\"Wikipedia\", \"3412\"},\n            {\"peter\", \"127\"},\n            {\"pharma\", \"376\"},\n            {\"m\\u00f6nchengladbach\", \"664645214\"}, // m\u679anchengladbach\n            {\"deutsch\", \"28\"},\n            {\"deutz\", \"28\"},\n            {\"hamburg\", \"06174\"},\n            {\"hannover\", \"0637\"},\n            {\"christstollen\", \"478256\"},\n            {\"Xanthippe\", \"48621\"},\n            {\"Zacharias\", \"8478\"},\n            {\"Holzbau\", \"0581\"},\n            {\"matsch\", \"68\"},\n            {\"matz\", \"68\"},\n            {\"Arbeitsamt\", \"071862\"},\n            {\"Eberhard\", \"01772\"},\n            {\"Eberhardt\", \"01772\"},\n            {\"heithabu\", \"021\"}};\n        this.checkEncodings(data);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate <E> void buildElements(ReadableDocument<? super E, E, ?> doc, E e, List<E> els) {\n    E child = DocHelper.getFirstChildElement(doc, e);\n    while (child != null) {\n      els.add(child);\n      buildElements(doc, child, els);\n      child = DocHelper.getNextSiblingElement(doc, child);\n    }\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static <P extends IUnlistedProperty<T>, T> T getStatePropertySafely(@Nullable TileEntity te, Class<? extends Block> block, P property, T defaultVal) {\n\t\treturn getStatePropertySafely(te, block, property, defaultVal, false, false);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public final void writeDashLengthProperty(List<JulianDate> dates, List<Double> values, int startIndex, int length) {\n        {\n            cesiumlanguagewriter.DoubleCesiumWriter writer = openDashLengthProperty();\n            try {\n                writer.writeNumber(dates, values, startIndex, length);\n            } finally {\n                DisposeHelper.dispose(writer);\n            }\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static <E> List<E> toBeanList(Class<E> cla, List<Map<String, Object>> mapList) {\n\t\tList<E> list = new ArrayList<E>(mapList.size());\n\t\tfor (Map<String, Object> map : mapList) {\n\t\t\tE obj = toBean(cla, map);\n\t\t\tlist.add(obj);\n\t\t}\n\t\treturn list;\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public Value<Integer> run(Integer x, Integer y, Integer z) {\n      DiffJob diffJob = new DiffJob();\n      MultJob multJob = new MultJob();\n      FutureValue<Integer> r = futureCall(diffJob, immediate(x), immediate(y));\n      FutureValue<Integer> s = futureCall(diffJob, immediate(x), immediate(z));\n      FutureValue<Integer> t = futureCall(multJob, r, s);\n      FutureValue<Integer> u = futureCall(diffJob, t, immediate(2));\n      return u;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n   public static void printMethods(Class cl)\n   {\n      Method[] methods = cl.getDeclaredMethods();\n\n      for (Method m : methods)\n      {\n         Class retType = m.getReturnType();\n         String name = m.getName();\n\n         System.out.print(\"   \");\n         String modifiers = Modifier.toString(m.getModifiers());\n         if (modifiers.length() > 0) System.out.print(modifiers + \" \");         \n         System.out.print(retType.getName() + \" \" + name + \"(\");\n\n         Class[] paramTypes = m.getParameterTypes();\n         for (int j = 0; j < paramTypes.length; j++)\n         {\n            if (j > 0) System.out.print(\", \");\n            System.out.print(paramTypes[j].getName());\n         }\n         System.out.println(\");\");\n      }\n   }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, final Contract contract, final TradeOrder tradeOrder,\n\t\t\tfinal OrderState orderState) {\n\n\t\ttry {\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(tradeOrder.getOrderKey());\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170, \"Warning Order not found for Order Key: \" + orderId + \" make sure Client ID: \" + 0\n\t\t\t\t\t\t+ \" is not the master in TWS. On openOrder update.\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (BackTestBrokerModel.updateTradeOrder(tradeOrder, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\n\t\t\t\t\t_log.debug(\"Order Key: \" + transientInstance.getOrderKey() + \" filled.\");\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (updatedOrder.hasTradePosition() && !updatedOrder.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(updatedOrder.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Order key: \" + transientInstance.getOrderKey() + \" state changed. Status:\"\n\t\t\t\t\t\t\t+ orderState.m_status);\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(updatedOrder.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(updatedOrder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public PartitionLoad getLoad() throws IOException{\n        Map<ServerName, List<HRegionInfo>> serverToRegionMap=new HashMap<>();\n        try(RegionLocator rl=connection.getRegionLocator(tableName)){\n            List<HRegionLocation> locations=rl.getAllRegionLocations();\n            for(HRegionLocation location : locations){\n                List<HRegionInfo> info=serverToRegionMap.get(location.getServerName());\n                if(info==null){\n                    info = new LinkedList<>();\n                    serverToRegionMap.put(location.getServerName(),info);\n                }\n                info.add(location.getRegionInfo());\n            }\n        }\n        int totalStoreFileSizeMB = 0;\n        int totalMemstoreSieMB = 0;\n        int storefileIndexSizeMB = 0;\n        try(Admin admin=connection.getAdmin()){\n            ClusterStatus clusterStatus=admin.getClusterStatus();\n            for(Map.Entry<ServerName,List<HRegionInfo>> entry:serverToRegionMap.entrySet()){\n                ServerLoad load=clusterStatus.getLoad(entry.getKey());\n                Map<byte[], RegionLoad> regionsLoad=load.getRegionsLoad();\n                for(HRegionInfo info:entry.getValue()){\n                    RegionLoad rl = regionsLoad.get(info.getRegionName());\n                    totalStoreFileSizeMB+=rl.getStorefileSizeMB();\n                    totalMemstoreSieMB+=rl.getMemStoreSizeMB();\n                    storefileIndexSizeMB+=rl.getStorefileIndexSizeMB();\n                }\n            }\n        }\n        return new HPartitionLoad(getName(),totalStoreFileSizeMB,totalMemstoreSieMB,storefileIndexSizeMB);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void runScheduleJobToAction(List<JobPersistenceOld> jobDetails, Date now, SimpleDateFormat df2, Map<Long, JobPersistence> actionDetails, String currentDateStr){\n\t\tfor(JobPersistenceOld jobDetail : jobDetails){\n\t\t\tif(jobDetail.getScheduleType() != null && jobDetail.getScheduleType()==0){\n\t\t\t\ttry{\n\t\t\t\t\tString jobCronExpression = jobDetail.getCronExpression();\n\t\t\t\t\tString cronDate= df2.format(now);\n\t\t\t\t\tList<String> lTime = new ArrayList<String>();\n\t\t\t\t\tif(jobCronExpression != null && jobCronExpression.trim().length() > 0){\n\t\t\t\t\t\tboolean isCronExp = false;\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\tisCronExp = CronExpParser.Parser(jobCronExpression, cronDate, lTime);\n\t\t\t\t\t\t}catch(Exception ex){\n\t\t\t\t\t\t\tisCronExp = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!isCronExp) {\n\t\t\t\t\t\t\tlog.error(\"\u93c3\u72b3\u7876\u9422\u71b8\u579aCron\u741b\u3128\u63ea\u5bee\u5fe5\u7d30\u93c3\u30e6\u6e61,\" + cronDate + \";\u6d93\u5d87\ue0c1\u935a\u5823\ue749\u9352\u6a86ron\u741b\u3128\u63ea\u5bee\u5fe5\u7d30\" + jobCronExpression);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (int i = 0; i < lTime.size(); i++) {\n\t\t\t\t\t\t\tString actionDateStr = ZeusDateTool.StringToDateStr(lTime.get(i), \"yyyy-MM-dd HH:mm:ss\", \"yyyyMMddHHmmss\");\n\t\t\t\t\t\t\tString actionCronExpr = ZeusDateTool.StringToDateStr(lTime.get(i), \"yyyy-MM-dd HH:mm:ss\", \"s m H d M\") + \" ?\";\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tJobPersistence actionPer = new JobPersistence();\n\t\t\t\t\t\t\tactionPer.setId(Long.parseLong(actionDateStr)*10000+jobDetail.getId());//update action id\n\t\t\t\t\t\t\tactionPer.setToJobId(jobDetail.getId());\n\t\t\t\t\t\t\tactionPer.setAuto(jobDetail.getAuto());\n\t\t\t\t\t\t\tactionPer.setConfigs(jobDetail.getConfigs());\n\t\t\t\t\t\t\tactionPer.setCronExpression(actionCronExpr);//update action cron expression\n\t\t\t\t\t\t\tactionPer.setCycle(jobDetail.getCycle());\n\t\t\t\t\t\t\tString jobDependencies = jobDetail.getDependencies();\n\t\t\t\t\t\t\tactionPer.setDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setJobDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setDescr(jobDetail.getDescr());\n\t\t\t\t\t\t\tactionPer.setGmtCreate(jobDetail.getGmtCreate());\n\t\t\t\t\t\t\tactionPer.setGmtModified(new Date());\n\t\t\t\t\t\t\tactionPer.setGroupId(jobDetail.getGroupId());\n\t\t\t\t\t\t\tactionPer.setHistoryId(jobDetail.getHistoryId());\n\t\t\t\t\t\t\tactionPer.setHost(jobDetail.getHost());\n\t\t\t\t\t\t\tactionPer.setLastEndTime(jobDetail.getLastEndTime());\n\t\t\t\t\t\t\tactionPer.setLastResult(jobDetail.getLastResult());\n\t\t\t\t\t\t\tactionPer.setName(jobDetail.getName());\n\t\t\t\t\t\t\tactionPer.setOffset(jobDetail.getOffset());\n\t\t\t\t\t\t\tactionPer.setOwner(jobDetail.getOwner());\n\t\t\t\t\t\t\tactionPer.setPostProcessers(jobDetail.getPostProcessers());\n\t\t\t\t\t\t\tactionPer.setPreProcessers(jobDetail.getPreProcessers());\n\t\t\t\t\t\t\tactionPer.setReadyDependency(jobDetail.getReadyDependency());\n\t\t\t\t\t\t\tactionPer.setResources(jobDetail.getResources());\n\t\t\t\t\t\t\tactionPer.setRunType(jobDetail.getRunType());\n\t\t\t\t\t\t\tactionPer.setScheduleType(jobDetail.getScheduleType());\n\t\t\t\t\t\t\tactionPer.setScript(jobDetail.getScript());\n\t\t\t\t\t\t\tactionPer.setStartTime(jobDetail.getStartTime());\n\t\t\t\t\t\t\tactionPer.setStartTimestamp(jobDetail.getStartTimestamp());\n\t\t\t\t\t\t\tactionPer.setStatisStartTime(jobDetail.getStatisStartTime());\n\t\t\t\t\t\t\tactionPer.setStatisEndTime(jobDetail.getStatisEndTime());\n\t\t\t\t\t\t\tactionPer.setStatus(jobDetail.getStatus());\n\t\t\t\t\t\t\tactionPer.setTimezone(jobDetail.getTimezone());\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tSystem.out.println(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59dfJobId: \" + jobDetail.getId()+\";  ActionId: \" +actionPer.getId());\n\t\t\t\t\t\t\t\t\tcontext.getGroupManager().saveJob(actionPer);\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"success\");\n\t\t\t\t\t\t\t\t\tactionDetails.put(actionPer.getId(),actionPer);\n\t\t\t\t\t\t\t} catch (ZeusException e) {\n\t\t\t\t\t\t\t\tSystem.out.println(\"failed\");\n\t\t\t\t\t\t\t\tlog.error(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59dfJobId:\" + jobDetail.getId() + \" \u9422\u71b8\u579aAction\" +actionPer.getId() + \"\u6fb6\u8fab\u89e6\", e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}catch(Exception ex){\n\t\t\t\t\tlog.error(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59df\u9422\u71b8\u579aAction\u6fb6\u8fab\u89e6\",ex);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(jobDetail.getScheduleType() != null && jobDetail.getScheduleType()==2){\n\t\t\t\ttry{\n\t\t\t\t\tif(jobDetail.getDependencies()==null || jobDetail.getDependencies().trim().length()==0){\n\t\t\t\t\t\tDate date = null;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tdate = DateUtil.timestamp2Date(jobDetail.getStartTimestamp(),\n\t\t\t\t\t\t\t\t\tDateUtil.getDefaultTZStr());\n\t\t\t\t\t\t} catch (ParseException e) {\n\t\t\t\t\t\t\tdate = new Date();\n\t\t\t\t\t\t\tlog.error(\"parse job start timestamp to date failed,\", e);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tSimpleDateFormat dfTime=new SimpleDateFormat(\"HHmmss\");\n\t\t\t\t\t\tSimpleDateFormat dfDate=new SimpleDateFormat(\"yyyyMMdd\");\n\t\t\t\t\t\tSimpleDateFormat dfMinute=new SimpleDateFormat(\"mmss\");\n\t\t\t\t\t\tString currentDate = dfDate.format(new Date());\n\t\t\t\t\t\tString startTime = dfTime.format(date);\n\t\t\t\t\t\tString startMinute = dfMinute.format(date);\n\t\t\t\t\t\tif(jobDetail.getCycle().equals(\"day\")){\n\t\t\t\t\t\t\tDate newStartDate = ZeusDateTool.StringToDate(currentDate+startTime, \"yyyyMMddHHmmss\");\n\t\t\t\t\t\t\tCalendar calendar = Calendar.getInstance();\n\t\t\t\t\t\t\tcalendar.setTimeInMillis(newStartDate.getTime());\n\t\t\t\t\t\t\tcalendar.add(Calendar.DATE, -1);\n\t\t\t\t\t\t\tcalendar.getTime();\n\t\t\t\t\t\t\tDate statisStartTime = calendar.getTime();\n\t\t\t\t\t\t\tcalendar.add(Calendar.MINUTE, 60*23+59);\n\t\t\t\t\t\t\tDate statisEndTime = calendar.getTime();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tJobPersistence actionPer = new JobPersistence();\n\t\t\t\t\t\t\tactionPer.setId(Long.parseLong(currentDate+startTime)*10000+jobDetail.getId());//update action id\n\t\t\t\t\t\t\tactionPer.setToJobId(jobDetail.getId());\n\t\t\t\t\t\t\tactionPer.setAuto(jobDetail.getAuto());\n\t\t\t\t\t\t\tactionPer.setConfigs(jobDetail.getConfigs());\n\t\t\t\t\t\t\tactionPer.setCronExpression(jobDetail.getCronExpression());\n\t\t\t\t\t\t\tactionPer.setCycle(jobDetail.getCycle());\n\t\t\t\t\t\t\tString jobDependencies = jobDetail.getDependencies();\n\t\t\t\t\t\t\tactionPer.setDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setJobDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setDescr(jobDetail.getDescr());\n\t\t\t\t\t\t\tactionPer.setGmtCreate(jobDetail.getGmtCreate());\n\t\t\t\t\t\t\tactionPer.setGmtModified(new Date());\n\t\t\t\t\t\t\tactionPer.setGroupId(jobDetail.getGroupId());\n\t\t\t\t\t\t\tactionPer.setHistoryId(jobDetail.getHistoryId());\n\t\t\t\t\t\t\tactionPer.setHost(jobDetail.getHost());\n\t\t\t\t\t\t\tactionPer.setLastEndTime(jobDetail.getLastEndTime());\n\t\t\t\t\t\t\tactionPer.setLastResult(jobDetail.getLastResult());\n\t\t\t\t\t\t\tactionPer.setName(jobDetail.getName());\n\t\t\t\t\t\t\tactionPer.setOffset(jobDetail.getOffset());\n\t\t\t\t\t\t\tactionPer.setOwner(jobDetail.getOwner());\n\t\t\t\t\t\t\tactionPer.setPostProcessers(jobDetail.getPostProcessers());\n\t\t\t\t\t\t\tactionPer.setPreProcessers(jobDetail.getPreProcessers());\n\t\t\t\t\t\t\tactionPer.setReadyDependency(jobDetail.getReadyDependency());\n\t\t\t\t\t\t\tactionPer.setResources(jobDetail.getResources());\n\t\t\t\t\t\t\tactionPer.setRunType(jobDetail.getRunType());\n\t\t\t\t\t\t\tactionPer.setScheduleType(jobDetail.getScheduleType());\n\t\t\t\t\t\t\tactionPer.setScript(jobDetail.getScript());\n\t\t\t\t\t\t\tactionPer.setStartTime(newStartDate);\n\t\t\t\t\t\t\tactionPer.setStartTimestamp(newStartDate.getTime());\n\t\t\t\t\t\t\tactionPer.setStatisStartTime(statisStartTime);\n\t\t\t\t\t\t\tactionPer.setStatisEndTime(statisEndTime);\n\t\t\t\t\t\t\tactionPer.setStatus(jobDetail.getStatus());\n\t\t\t\t\t\t\tactionPer.setTimezone(jobDetail.getTimezone());\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tSystem.out.println(\"\u935b\u3126\u6e61\u6d60\u8bf2\u59df\u951b\u581d\u3049\u951b\u5849obId: \" + jobDetail.getId()+\";  ActionId: \" +actionPer.getId());\n\t\t\t\t\t\t\t\t\tcontext.getGroupManager().saveJob(actionPer);\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"success\");\n\t\t\t\t\t\t\t\t\tactionDetails.put(actionPer.getId(),actionPer);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t} catch (ZeusException e) {\n\t\t\t\t\t\t\t\tSystem.out.println(\"failed\");\n\t\t\t\t\t\t\t\tlog.error(\"\u935b\u3126\u6e61\u6d60\u8bf2\u59df\u951b\u581d\u3049\u951b\u5849obId:\" + jobDetail.getId() + \" \u9422\u71b8\u579aAction\" +actionPer.getId() + \"\u6fb6\u8fab\u89e6\", e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(jobDetail.getCycle().equals(\"hour\")){\n\t\t\t\t\t\t\tfor (int i = 0; i < 24; i++) {\t\t\n\t\t\t\t\t\t\t\tString startHour = String.valueOf(i);\n\t\t\t\t\t\t\t\tif(startHour.trim().length()<2){\n\t\t\t\t\t\t\t\t\tstartHour = \"0\"+startHour;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDate newStartDate = ZeusDateTool.StringToDate(currentDate+startHour+startMinute, \"yyyyMMddHHmmss\");\n\t\t\t\t\t\t\t\tCalendar calendar = Calendar.getInstance();\n\t\t\t\t\t\t\t\tcalendar.setTimeInMillis(newStartDate.getTime());\n\t\t\t\t\t\t\t\tcalendar.add(Calendar.HOUR, -1);\n\t\t\t\t\t\t\t\tcalendar.getTime();\n\t\t\t\t\t\t\t\tDate statisStartTime = calendar.getTime();\n\t\t\t\t\t\t\t\tcalendar.add(Calendar.MINUTE, 59);\n\t\t\t\t\t\t\t\tDate statisEndTime = calendar.getTime();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tJobPersistence actionPer = new JobPersistence();\n\t\t\t\t\t\t\t\tactionPer.setId(Long.parseLong(currentDate+startHour+startMinute)*10000+jobDetail.getId());//update action id\n\t\t\t\t\t\t\t\tactionPer.setToJobId(jobDetail.getId());\n\t\t\t\t\t\t\t\tactionPer.setAuto(jobDetail.getAuto());\n\t\t\t\t\t\t\t\tactionPer.setConfigs(jobDetail.getConfigs());\n\t\t\t\t\t\t\t\tactionPer.setCronExpression(jobDetail.getCronExpression());\n\t\t\t\t\t\t\t\tactionPer.setCycle(jobDetail.getCycle());\n\t\t\t\t\t\t\t\tString jobDependencies = jobDetail.getDependencies();\n\t\t\t\t\t\t\t\tactionPer.setDependencies(jobDependencies);\n\t\t\t\t\t\t\t\tactionPer.setJobDependencies(jobDependencies);\n\t\t\t\t\t\t\t\tactionPer.setDescr(jobDetail.getDescr());\n\t\t\t\t\t\t\t\tactionPer.setGmtCreate(jobDetail.getGmtCreate());\n\t\t\t\t\t\t\t\tactionPer.setGmtModified(new Date());\n\t\t\t\t\t\t\t\tactionPer.setGroupId(jobDetail.getGroupId());\n\t\t\t\t\t\t\t\tactionPer.setHistoryId(jobDetail.getHistoryId());\n\t\t\t\t\t\t\t\tactionPer.setHost(jobDetail.getHost());\n\t\t\t\t\t\t\t\tactionPer.setLastEndTime(jobDetail.getLastEndTime());\n\t\t\t\t\t\t\t\tactionPer.setLastResult(jobDetail.getLastResult());\n\t\t\t\t\t\t\t\tactionPer.setName(jobDetail.getName());\n\t\t\t\t\t\t\t\tactionPer.setOffset(jobDetail.getOffset());\n\t\t\t\t\t\t\t\tactionPer.setOwner(jobDetail.getOwner());\n\t\t\t\t\t\t\t\tactionPer.setPostProcessers(jobDetail.getPostProcessers());\n\t\t\t\t\t\t\t\tactionPer.setPreProcessers(jobDetail.getPreProcessers());\n\t\t\t\t\t\t\t\tactionPer.setReadyDependency(jobDetail.getReadyDependency());\n\t\t\t\t\t\t\t\tactionPer.setResources(jobDetail.getResources());\n\t\t\t\t\t\t\t\tactionPer.setRunType(jobDetail.getRunType());\n\t\t\t\t\t\t\t\tactionPer.setScheduleType(jobDetail.getScheduleType());\n\t\t\t\t\t\t\t\tactionPer.setScript(jobDetail.getScript());\n\t\t\t\t\t\t\t\tactionPer.setStartTime(newStartDate);\n\t\t\t\t\t\t\t\tactionPer.setStartTimestamp(newStartDate.getTime());\n\t\t\t\t\t\t\t\tactionPer.setStatisStartTime(statisStartTime);\n\t\t\t\t\t\t\t\tactionPer.setStatisEndTime(statisEndTime);\n\t\t\t\t\t\t\t\tactionPer.setStatus(jobDetail.getStatus());\n\t\t\t\t\t\t\t\tactionPer.setTimezone(jobDetail.getTimezone());\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"\u935b\u3126\u6e61\u6d60\u8bf2\u59df\u951b\u581f\u6902\u951b\u5849obId: \" + jobDetail.getId()+\";  ActionId: \" +actionPer.getId());\n\t\t\t\t\t\t\t\t\t\tcontext.getGroupManager().saveJob(actionPer);\n\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"success\");\n\t\t\t\t\t\t\t\t\t\tactionDetails.put(actionPer.getId(),actionPer);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t} catch (ZeusException e) {\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"failed\");\n\t\t\t\t\t\t\t\t\tlog.error(\"\u935b\u3126\u6e61\u6d60\u8bf2\u59df\u951b\u581f\u6902\u951b\u5849obId:\" + jobDetail.getId() + \" \u9422\u71b8\u579aAction\" +actionPer.getId() + \"\u6fb6\u8fab\u89e6\", e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}catch(Exception ex){\n\t\t\t\t\tlog.error(\"\u935b\u3126\u6e61\u6d60\u8bf2\u59df\u9422\u71b8\u579aAction\u6fb6\u8fab\u89e6\",ex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n  @SuppressWarnings(\"unchecked\")\n  public int compareValues(T first, T second) {\n    if (first == null) {\n      if (second == null) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (second == null) {\n      return 1;\n    } else {\n      return ((Comparable<T>) first).compareTo(second);\n    }\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate <T> List<T> arrayToList(T[] array) {\n\t\tList<T> list = new ArrayList<T>(array.length);\n\t\tfor (T t : array) {\n\t\t\tlist.add(t);\n\t\t}\n\t\treturn list;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nOutput(boolean isDefault, String name, OutputFormat outputFormat, Class keyClass, Class valueClass,\n\t\t    Map<String, String> specificContext) {\n\t\t\tthis.isDefault = isDefault;\n\t\t\tthis.outputFormat = outputFormat;\n\t\t\tthis.keyClass = keyClass;\n\t\t\tthis.valueClass = valueClass;\n\t\t\tthis.name = name;\n\t\t\tif(specificContext != null) {\n\t\t\t\tthis.specificContext = specificContext;\n\t\t\t}\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void ensureScopeSetup() {\n\t\tif (scopeSetup) return; // don't do it again\n\t\tMethodScope scope = this.scope;\n\t\t\n\t\tTypeReference ot = onType;\n\t\tReferenceBinding rb = null;\n\t\t\n\t\tif (ot instanceof ParameterizedQualifiedTypeReference) { // pr132349\n\t\t\tParameterizedQualifiedTypeReference pref = (ParameterizedQualifiedTypeReference) ot;\n\t\t\tif (pref.typeArguments!=null && pref.typeArguments.length!=0) {\n\t\t\t\tboolean usingNonTypeVariableInITD = false;\n\t\t\t\tfor (int i = 0; i < pref.typeArguments.length; i++) {\n\t\t\t\t\tTypeReference[] refs = pref.typeArguments[i];\n\t\t\t\t\tfor (int j = 0; refs!=null && j < refs.length; j++) {\n\t\t\t\t\t\tTypeBinding tb = refs[j].getTypeBindingPublic(scope.parent);\n\t\t\t\t\t\tif (!tb.isTypeVariable() && !(tb instanceof ProblemReferenceBinding)) {\n\t\t\t\t\t\t\tusingNonTypeVariableInITD = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (usingNonTypeVariableInITD) {\n\t\t\t\t\tscope.problemReporter().signalError(sourceStart,sourceEnd,\n\t\t\t\t\t  \"Cannot make inter-type declarations on parameterized types\");\n\t\t\t\t\tthis.arguments=null;\n\t\t\t\t\tthis.returnType=new SingleTypeReference(TypeReference.VOID,0L);\n\t\t\t\t\t\n\t\t\t\t\tthis.ignoreFurtherInvestigation=true;\n\t\t\t\t\tReferenceBinding closestMatch = null;\n\t\t\t\t\trb = new ProblemReferenceBinding(ot.getParameterizedTypeName(),closestMatch,0);\t\t\n\t\t\t\t\tonType=null;\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t}\n\n\t\tif (ot instanceof ParameterizedSingleTypeReference) {\n\t\t\tParameterizedSingleTypeReference pref = (ParameterizedSingleTypeReference) ot;\n\t\t\tlong pos = (((long)pref.sourceStart) << 32) | pref.sourceEnd;\n\t\t\tot = new SingleTypeReference(pref.token,pos);\n\t\t} else if (ot instanceof ParameterizedQualifiedTypeReference) {\n\t\t\tParameterizedQualifiedTypeReference pref = (ParameterizedQualifiedTypeReference) ot;\n\t\t\tlong pos = (((long)pref.sourceStart) << 32) | pref.sourceEnd;\n\t\t\tot = new QualifiedTypeReference(pref.tokens,new long[]{pos});//SingleTypeReference(pref.Quatoken,pos);\n\t\t}\n\t\t\n\t\tif (rb==null) {\n\t\t  rb = (ReferenceBinding)ot.getTypeBindingPublic(scope.parent);\n\t\t}\n\t\t\n\t\tif (rb.isRawType() && rb.isMemberType()) {\n\t\t\trb = ((RawTypeBinding)rb).type;\n\t\t}\n\t\t\n\t\tif (rb instanceof TypeVariableBinding) {\n\t\t\tscope.problemReporter().signalError(sourceStart,sourceEnd,\n\t\t\t\t\t  \"Cannot make inter-type declarations on type variables, use an interface and declare parents\");\n\t\t\tthis.arguments=null;\n\t\t\tthis.returnType=new SingleTypeReference(TypeReference.VOID,0L);\n\t\t\t\n\t\t\tthis.ignoreFurtherInvestigation=true;\n\t\t\tReferenceBinding closestMatch = null;\n\t\t\tif (((TypeVariableBinding)rb).firstBound!=null) {\n\t\t\t\tclosestMatch = ((TypeVariableBinding)rb).firstBound.enclosingType();\n\t\t\t}\n\t\t\trb = new ProblemReferenceBinding(rb.compoundName,closestMatch,0);\n\t\t}\n\n\t\t\n\t\tif (rb instanceof ProblemReferenceBinding) return;\n\t\t\n\t\tinterTypeScope = new InterTypeScope(scope.parent, rb, typeVariableAliases);\n\t\tscope.isStatic = (typeVariableAliases!=null?false:Modifier.isStatic(declaredModifiers));\n\t\tscope.parent = interTypeScope;\n\t    scopeSetup = true;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic ContentAssistCommandAdapter(Control control,\n\t\t\tIControlContentAdapter controlContentAdapter,\n\t\t\tIContentProposalProvider proposalProvider, String commandId,\n\t\t\tchar[] autoActivationCharacters) {\n\t\tthis(control, controlContentAdapter, proposalProvider, commandId,\n\t\t\t\tautoActivationCharacters, false);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate PolicyDescriptions createPolicyDescriptions(Map<URI, PolicyDescription> policies) {\n        PolicyDescriptions pd = new PolicyDescriptions();\n        for(URI key : policies.keySet()) {\n            PolicyDescriptionsEntry entry = new PolicyDescriptionsEntry();\n            entry.setKey(key);\n            entry.setValue(policies.get(key));\n            pd.getEntry().add(entry);\n        }\n        return pd;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void drawKeyBackground(int drawableId,Canvas canvas,Key key){\n\t\tDrawable npd = (Drawable) mContext.getResources().getDrawable(\n\t\t\t\tdrawableId);\n\t\tint[] drawableState = key.getCurrentDrawableState();\n\t\tif (key.codes[0] != 0) {\n\t\t\tnpd.setState(drawableState);\n\t\t}\n\t\tnpd.setBounds(key.x, key.y, key.x + key.width, key.y\n\t\t\t\t+ key.height);\n\t\tnpd.draw(canvas);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public void onNewFrame(HeadTransform headTransform) {\n        GLES20.glUseProgram(mGlProgram);\n\n        mModelViewProjectionParam = GLES20.glGetUniformLocation(mGlProgram, \"u_MVP\");\n        mLightPosParam = GLES20.glGetUniformLocation(mGlProgram, \"u_LightPos\");\n        mModelViewParam = GLES20.glGetUniformLocation(mGlProgram, \"u_MVMatrix\");\n        mModelParam = GLES20.glGetUniformLocation(mGlProgram, \"u_Model\");\n        mIsFloorParam = GLES20.glGetUniformLocation(mGlProgram, \"u_IsFloor\");\n\n        Matrix.rotateM(mModelCube, 0, TIME_DELTA, 0.5f, 0.5f, 1.0f);\n\n        Matrix.setLookAtM(mCamera, 0, 0.0f, 0.0f, CAMERA_Z, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f);\n\n        headTransform.getHeadView(mHeadView, 0);\n\n        checkGLError(\"onReadyToDraw\");\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr graph) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), graph});\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprotected void init() {\n        taskTimeout = new Runnable() {\n            @Override\n            public void run() {\n                pendingDataProcessors= null;\n                for(byte it: successfulProcessors) {\n                    removeProcessor(true, it);\n                }\n                createProcessorsTask.setError(new TimeoutException(\"Creating data processor timed out\"));\n            }\n        };\n\n        this.mwPrivate.addResponseHandler(new Pair<>(DATA_PROCESSOR.id, ADD), new JseMetaWearBoard.RegisterResponseHandler() {\n            @Override\n            public void onResponseReceived(byte[] response) {\n                timeoutFuture.cancel(false);\n\n                Processor current = pendingDataProcessors.poll();\n                current.editor.source.eventConfig[2]= response[2];\n                if (current.state != null) {\n                    current.state.eventConfig[2] = response[2];\n                }\n                activeProcessors.put(response[2], current);\n                successfulProcessors.add(response[2]);\n\n                createProcessor();\n            }\n        });\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private PooledConnection createPooledConnection (String user,\n        String password, boolean requestPassword) throws SQLException\n    {\n        \n        return findDriver().getNewPooledConnection(\n            this, user, password, requestPassword);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        PartialSufficientSatistics partialSufficientSatistics = PartialSufficientSatistics.createZeroPartialSufficientStatistics(efBayesianNetwork);\n        partialSufficientSatistics.copy(this.sumSS);\n        partialSufficientSatistics.normalize();\n        SufficientStatistics finalSS = efBayesianNetwork.createZeroSufficientStatistics();\n        finalSS.sum(partialSufficientSatistics.getCompoundVector());\n\n        efBayesianNetwork.setMomentParameters(finalSS);\n        return efBayesianNetwork.toBayesianNetwork(dag);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static <N extends RootedDAGNode<N>> List<N> topologicalSort(N root) throws GraphException {\n\t\tList<N> queued = new ArrayList<N>();\n\t\tqueued.add(root);\n\t\tint i=0;\n\t\twhile (i<queued.size()) {\n\t\t\tN n = queued.get(i);\n\t\t\tfor (N c : n.getChildren()) {\n\t\t\t\tif (!queued.contains(c))\n\t\t\t\t\tqueued.add(c);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tCollections.reverse(queued);\n\t\tList<N> sorted = new ArrayList<N>();\n\t\ti = 0;\n\t\twhile (!queued.isEmpty()) {\n\t\t\ti = queued.size()-1;\n\t\t\twhile (i>=0) {\n\t\t\t\tN n = queued.get(i);\n\t\t\t\tboolean allParentsSorted = true;\n\t\t\t\tfor (N p : n.getParents()) {\n\t\t\t\t\tif (!sorted.contains(p)) {\n\t\t\t\t\t\tallParentsSorted = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (allParentsSorted) {\n\t\t\t\t\tsorted.add(queued.remove(i));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tif (i==-1)\n\t\t\t\tthrow new GraphException(\"Cannot produce a topological sort: not a DAG\");\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .directModelSubstitute(LocalDate.class, java.sql.Date.class)\n                .directModelSubstitute(LocalDateTime.class, java.util.Date.class)\n                .select()\n                .apis(requestHandler -> {\n                    String packageName = requestHandler.getHandlerMethod().getMethod()\n                            .getDeclaringClass().getPackage().getName();\n                    return packageName.startsWith(\"com.akkafun.\") && packageName.contains(\".web\");\n                })\n                .paths(PathSelectors.any())\n                .build();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static <V> Iterable<V> topologicalSort(\n            @Nonnull Map<V, List<V>> adjacencyMap, @Nonnull Function<V, String> vertexNameFn\n    ) {\n        Map<V, TarjanVertex<V>> tarjanVertices =\n                adjacencyMap.keySet().stream()\n                            .map(v -> entry(v, new TarjanVertex<>(v)))\n                            .collect(toMap(Entry::getKey, Entry::getValue));\n        Map<TarjanVertex<V>, List<TarjanVertex<V>>> tarjanAdjacencyMap =\n                adjacencyMap.entrySet().stream()\n                            .collect(toMap(e -> tarjanVertices.get(e.getKey()),\n                                           e -> e.getValue().stream()\n                                                 .map(tarjanVertices::get)\n                                                 .collect(toList())));\n        return new TopologicalSorter<>(tarjanAdjacencyMap, vertexNameFn).go();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void onDownloadError(int index, String message) {\n    for (int i = 0; i < mDownloadStatus.length; i++) {\n        if (mDownloadStatus[i] != Constants.DOWNLOAD_STATE_FINISH && mDownloadStatus[i] != Constants.DOWNLOAD_STATE_ERROR) {\n            mDownloadThreads[i].cancel();\n        }\n    }\n    notifyError(message);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void insert(int itemNum, Item item)\n\t{\n\t\tif (itemNum == this.container.size()) {\n\t\t\tthis.container.add(item);\n\t\t} else {\n\t\t\tthis.container.add( itemNum, item );\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static byte[] decodeHex(char[] hexData) {\n\n\t\tint len = hexData.length;\n\n\t\tif ((len & 0x01) != 0) {\n\t\t\tthrow new RuntimeException(\"Odd number of characters.\");\n\t\t}\n\n\t\tbyte[] out = new byte[len >> 1];\n\n\t\tfor (int i = 0, j = 0; j < len; i++) {\n\t\t\tint f = toDigit(hexData[j], j) << 4;\n\t\t\tj++;\n\t\t\tf = f | toDigit(hexData[j], j);\n\t\t\tj++;\n\t\t\tout[i] = (byte) (f & 0xFF);\n\t\t}\n\n\t\treturn out;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic ShortcutView(final Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t\tpm = context.getPackageManager();\n\t\t\n\t\tgetResources().getInteger(R.integer.shortcut_capacity);\n\t\t\n\t\tsec = PreferenceManager.getDefaultSharedPreferences(getContext());\n\n\t\tpkg = sec.getString(\"pkg\", \"\");\n\t\tpin = sec.getString(\"pin\", \"\");\t\t\n\t\t\n\t\t\n\t\tfor (int i = 0; i < CAPACITY; i++) {\n\t\t\tfinal int b = i;\n\t\t\tApplicationInfo ai = null;\n\t\t\tString sv = null;\n\t\t\tString s = Settings.System.getString(context.getContentResolver(), \"PiSC\" + i);\n\n\t\t\tif (s == null | s == \"\") {\n\n\t\t\t\tSettings.System.putString(context.getContentResolver(), \"PiSC\"+b, \"com.pilockerstable\");\n\t\t\t}\n\t\t\tsv = s;\n\n\t\t\ttry {\n\t\t\t\tai = pm.getApplicationInfo(sv, 0);\n\t\t\t} catch (NameNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tShortCut sc = new ShortCut(context, attrs);\n\t\t\tString App_Name = (String) pm.getApplicationLabel(ai);\n\t\t\tDrawable Icon = pm.getApplicationIcon(ai);\n\t\t\tShortcutter st = new Shortcutter(App_Name, Icon);\n\t\t\tsc.setName(st.getName());\n\t\t\tsc.setImage(st.getIcon());\n\n\t\t\taddView(sc);\n\t\t\tsc.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t\n\t\t\t\tString sv = Settings.System.getString( context.getContentResolver(), \"PiSC\" + b);\n\n\t\t\t\t@Override \n\t\t\t\tpublic void onClick(View arg0) {\n\n\t\t\t\t\tif( pin.equals(\"\") || pin.equals(null) || pin.isEmpty()) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t((Activity) context).finish();\n\t\t\t\t\t\tIntent i = new Intent();\n\t\t\t\t\t\ti.setClass(getContext(), LockerService.class);\n\t\t\t\t\t\tcontext.startService(i);\n\t\t\t\t\t\tIntent LaunchIntent = context.getPackageManager().getLaunchIntentForPackage(sv);\n\t\t\t\t\t\tcontext.startActivity(LaunchIntent);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t} else{\n\t\t\t\t\t\n\t\t\t\t\tsave(\"pkg\", \"true\");\n\t\t\t\t\tIntent x = new Intent(getContext(), PinActivity.class);\n\t\t\t\t\tx.putExtra(\"sv\", sv);\n\t\t\t\t\tcontext.startActivity(x);\n\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void createRemoteDisplay(final Display disp){\n\t\t\ttry{\n\t\t\t\tif (disp == null){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (remoteDisplay != null && remoteDisplay.getDisplay() != disp) {\n\t\t\t\t\tremoteDisplay.dismissPresentation();\n\t\t\t\t}\n\n\t\t\t\tFutureTask<Boolean> fTask =  new FutureTask<Boolean>( new SdlRemoteDisplay.Creator(context, disp, remoteDisplay, remoteDisplayClass, new SdlRemoteDisplay.Callback(){\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onCreated(final SdlRemoteDisplay remoteDisplay) {\n\t\t\t\t\t\tVideoStreamingManager.this.remoteDisplay = remoteDisplay;\n\t\t\t\t\t\tif(hapticManager != null) {\n\t\t\t\t\t\t\tremoteDisplay.getMainView().post(new Runnable() {\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\t\thapticManager.refreshHapticData(remoteDisplay.getMainView());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tImageResolution resolution = null;\n\t\t\t\t\t\tif(getWiProVersion()>=5){ //At this point we should already have the capability\n\t\t\t\t\t\t\tVideoStreamingCapability capability = (VideoStreamingCapability)_systemCapabilityManager.getCapability(SystemCapabilityType.VIDEO_STREAMING);\n\t\t\t\t\t\t\tresolution = capability.getPreferredResolution();\n\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\tDisplayCapabilities dispCap = (DisplayCapabilities) _systemCapabilityManager.getCapability(SystemCapabilityType.DISPLAY);\n\t\t\t\t\t\t\tif (dispCap != null) {\n\t\t\t\t\t\t\t\t resolution = (dispCap.getScreenParams().getImageResolution());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(resolution != null){\n\t\t\t\t\t\t\tDisplayMetrics displayMetrics = new DisplayMetrics();\n\t\t\t\t\t\t\tdisp.getMetrics(displayMetrics);\n\t\t\t\t\t\t\ttouchScalar[0] = ((float)displayMetrics.widthPixels) / resolution.getResolutionWidth();\n\t\t\t\t\t\t\ttouchScalar[1] = ((float)displayMetrics.heightPixels) / resolution.getResolutionHeight();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onInvalidated(final SdlRemoteDisplay remoteDisplay) {\n\t\t\t\t\t\tif(hapticManager != null) {\n\t\t\t\t\t\t\tremoteDisplay.getMainView().post(new Runnable() {\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\t\thapticManager.refreshHapticData(remoteDisplay.getMainView());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} ));\n\t\t\t\tThread showPresentation = new Thread(fTask);\n\n\t\t\t\tshowPresentation.start();\n\t\t\t\t} catch (Exception ex) {\n\t\t\t\tLog.e(TAG, \"Unable to create Virtual Display.\");\n\t\t\t}\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                col = (int)val[1];\n\n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            Float min = Float.MAX_VALUE;\n            for(int i = 0; i < table.data.size(); i++)\n            {\n                Object o = table.data.get(i)[col-1];\n                if (o instanceof Float)\n                    min = Math.min((Float)o, min);\n            }\n            if (min == Float.MAX_VALUE)\n            {\n                return 0f;\n            }\n            return min;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        protected PreparedStatement initStatement(String sql, Object... parameters) throws SQLException\n        {\n            preparedStatement = getConnection().prepareStatement(sql);\n\n            for (int i = 0; i < parameters.length; i++)\n            {\n                preparedStatement.setObject(i + 1, parameters[i]);\n            }\n\n            return preparedStatement;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic ContentAssistCommandAdapter(Control control,\n\t\t\tIControlContentAdapter controlContentAdapter,\n\t\t\tIContentProposalProvider proposalProvider, String commandId,\n\t\t\tchar[] autoActivationCharacters) {\n\t\tthis(control, controlContentAdapter, proposalProvider, commandId,\n\t\t\t\tautoActivationCharacters, false);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private boolean isInContent(float touchX, float touchY, Sticker currentSticker) {\n\n\n\n        float[] f = new float[9];\n        currentSticker.getmMatrix().getValues(f);\n        mContentDstLeftTopPoint.x = f[0] * 0 + f[1] * 0 + f[2];\n        mContentDstLeftTopPoint.y = f[3] * 0 + f[4] * 0 + f[5];\n        mContentDstRightTopPoint.x = f[0] * currentSticker.getBitmap().getWidth() + f[1] * 0 + f[2];\n        mContentDstRightTopPoint.y = f[3] * currentSticker.getBitmap().getWidth() + f[4] * 0 + f[5];\n        mContentDstLeftBottomPoint.x = f[0] * 0 + f[1] * currentSticker.getBitmap().getHeight() + f[2];\n        mContentDstLeftBottomPoint.y = f[3] * 0 + f[4] * currentSticker.getBitmap().getHeight() + f[5];\n        mContentDstRigintBottomPoint.x = f[0] * currentSticker.getBitmap().getWidth() + f[1] * currentSticker.getBitmap().getHeight() + f[2];\n        mContentDstRigintBottomPoint.y = f[3] * currentSticker.getBitmap().getWidth() + f[4] * currentSticker.getBitmap().getHeight() + f[5];\n\n        PointF pointF = new PointF(touchX, touchY);\n        PointF[] vertexPointFs = new PointF[] { mContentDstLeftTopPoint, mContentDstRightTopPoint, mContentDstRigintBottomPoint, mContentDstLeftBottomPoint };\n        int nCross = 0;\n        for (int i = 0; i < vertexPointFs.length; i++) {\n            PointF p1 = vertexPointFs[i];\n            PointF p2 = vertexPointFs[(i + 1) % vertexPointFs.length];\n            if (p1.y == p2.y)\n                continue;\n            if (pointF.y < Math.min(p1.y, p2.y))\n                continue;\n            if (pointF.y >= Math.max(p1.y, p2.y))\n                continue;\n            double x = (double) (pointF.y - p1.y) * (double) (p2.x - p1.x) / (double) (p2.y - p1.y) + p1.x;\n            if (x > pointF.x)\n                nCross++;\n        }\n        return (nCross % 2 == 1);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static String loadJSONFromAsset(Context context, String filename) {\n\t\tString json;\n\t\ttry {\n\n\t\t\tInputStream is = context.getAssets().open(\"json/\" +filename+\".json\");\n\n\t\t\tint size = is.available();\n\n\t\t\tbyte[] buffer = new byte[size];\n\n\t\t\tis.read(buffer);\n\t\t\t\n\t\t\tis.close();\n\n\t\t\tjson = new String(buffer, \"UTF-8\");\n\t\t\tLog.v(\"AppUtils\", \"JSONArray=>\"+json);\n\t\t} catch (IOException ex) {\n\t\t\tex.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\t\treturn json;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static String getMsgWithLineNumber(String msg) {\n        try {\n            for (StackTraceElement st : (new Throwable()).getStackTrace()) {\n                if (mClassname.equals(st.getClassName()) || mMethods.contains(st.getMethodName())) {\n                    continue;\n                } else {\n                    int b = st.getClassName().lastIndexOf(\".\") + 1;\n                    String message = new StringBuilder(st.getClassName().substring(b)).append(\"->\").append(st.getMethodName())\n                            .append(\"():\").append(st.getLineNumber()).append(msg).toString();\n                    return message;\n                }\n\n            }\n        } catch (Exception e) {\n\n        }\n        return msg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static float convertDpToPixel(float dp, Context context) {\n        Resources resources = context.getResources();\n        DisplayMetrics metrics = resources.getDisplayMetrics();\n        float px = dp * ((float) metrics.densityDpi / DisplayMetrics.DENSITY_DEFAULT);\n        return px;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n      public com.google.protobuf.ByteString\n          getSendInfoBytes() {\n        java.lang.Object ref = sendInfo_;\n        if (ref instanceof String) {\n          com.google.protobuf.ByteString b = \n              com.google.protobuf.ByteString.copyFromUtf8(\n                  (java.lang.String) ref);\n          sendInfo_ = b;\n          return b;\n        } else {\n          return (com.google.protobuf.ByteString) ref;\n        }\n      }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static List<ActiveDescriptor<?>> addClasses(ServiceLocator locator, Class<?>... toAdd) {\n        return addClasses(locator, false, toAdd);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void channelInactive(ChannelHandlerContext ctx){\n        Assert.notNull(this.channelRepository, \"[Assertion failed] - ChannelRepository is required; it must not be null\");\n        Assert.notNull(ctx);\n\n        String channelKey = ctx.channel().remoteAddress().toString();\n        this.channelRepository.remove(channelKey);\n\n        logger.debug(\"Binded Channel Count is \" + this.channelRepository.size());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr adjacencyList) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), adjacencyList});\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        \n        byte[] byteArray = new byte[bytes.size()]; \n        bytes.getBytes(byteArray, 0);\n        return Utf8Utils.utf8BytesToString(byteArray);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public ConeSound(MediaContainer soundData,\n                     float initialGain,\n                     int loopCount,\n                     boolean release,\n                     boolean continuous,\n                     boolean enable,\n                     Bounds  region,\n                     float   priority,\n                     float posX, float posY, float posZ,\n                     float[] frontDistance,\n                     float[] frontDistanceGain,\n                     float[] backDistance,\n                     float[] backDistanceGain,\n                     float dirX, float dirY, float dirZ ) {\n        super(soundData, initialGain, loopCount, release, continuous, enable,\n                     region, priority, posX, posY, posZ,\n                     frontDistance, frontDistanceGain );\n\n        setDefaultReadCapabilities(readCapabilities);\n\n        ((ConeSoundRetained)this.retained).setDirection(dirX, dirY, dirZ);\n        ((ConeSoundRetained)this.retained).setBackDistanceGain(\n                     backDistance, backDistanceGain );\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static float convertDpToPixel(float dp,Context context){\n\t    Resources resources = context.getResources();\n\t    DisplayMetrics metrics = resources.getDisplayMetrics();\n\t    float px = dp * metrics.density;\n\t    return px;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n        this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n        BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n        this.updateNaturalParameterPrior(prior);\n\n        return learntBN;\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprivate void completeAddAppWidget(Intent data, CellLayout.CellInfo cellInfo) {\n\t\tBundle extras = data.getExtras();\n\t\tint appWidgetId = extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID, -1);\n\n\t\tLog.d(LOG_TAG, \"dumping extras content=\" + extras.toString());\n\n\t\tAppWidgetProviderInfo appWidgetInfo = appWidgetManager.getAppWidgetInfo(appWidgetId);\n\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps) {\n            return setImageAttachmentsForObject(objectProperty, bitmaps, false);\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void channelInactive(ChannelHandlerContext ctx){\n        Assert.notNull(this.channelRepository, \"[Assertion failed] - ChannelRepository is required; it must not be null\");\n        Assert.notNull(ctx);\n\n        String channelKey = ctx.channel().remoteAddress().toString();\n        this.channelRepository.remove(channelKey);\n\n        logger.debug(\"Binded Channel Count is \" + this.channelRepository.size());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        PartialSufficientSatistics partialSufficientSatistics = PartialSufficientSatistics.createZeroPartialSufficientStatistics(efBayesianNetwork);\n        partialSufficientSatistics.copy(this.sumSS);\n        partialSufficientSatistics.normalize();\n        SufficientStatistics finalSS = efBayesianNetwork.createZeroSufficientStatistics();\n        finalSS.sum(partialSufficientSatistics.getCompoundVector());\n\n        efBayesianNetwork.setMomentParameters(finalSS);\n        return efBayesianNetwork.toBayesianNetwork(dag);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker, boolean showDirection) {\n        this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void ensureScopeSetup() {\n\t\tif (scopeSetup) return; // don't do it again\n\t\tMethodScope scope = this.scope;\n\t\t\n\t\tTypeReference ot = onType;\n\t\tReferenceBinding rb = null;\n\t\t\n\t\tif (ot instanceof ParameterizedQualifiedTypeReference) { // pr132349\n\t\t\tParameterizedQualifiedTypeReference pref = (ParameterizedQualifiedTypeReference) ot;\n\t\t\tif (pref.typeArguments!=null && pref.typeArguments.length!=0) {\n\t\t\t\tboolean usingNonTypeVariableInITD = false;\n\t\t\t\tfor (int i = 0; i < pref.typeArguments.length; i++) {\n\t\t\t\t\tTypeReference[] refs = pref.typeArguments[i];\n\t\t\t\t\tfor (int j = 0; refs!=null && j < refs.length; j++) {\n\t\t\t\t\t\tTypeBinding tb = refs[j].getTypeBindingPublic(scope.parent);\n\t\t\t\t\t\tif (!tb.isTypeVariable() && !(tb instanceof ProblemReferenceBinding)) {\n\t\t\t\t\t\t\tusingNonTypeVariableInITD = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (usingNonTypeVariableInITD) {\n\t\t\t\t\tscope.problemReporter().signalError(sourceStart,sourceEnd,\n\t\t\t\t\t  \"Cannot make inter-type declarations on parameterized types\");\n\t\t\t\t\tthis.arguments=null;\n\t\t\t\t\tthis.returnType=new SingleTypeReference(TypeReference.VOID,0L);\n\t\t\t\t\t\n\t\t\t\t\tthis.ignoreFurtherInvestigation=true;\n\t\t\t\t\tReferenceBinding closestMatch = null;\n\t\t\t\t\trb = new ProblemReferenceBinding(ot.getParameterizedTypeName(),closestMatch,0);\t\t\n\t\t\t\t\tonType=null;\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t}\n\n\t\tif (ot instanceof ParameterizedSingleTypeReference) {\n\t\t\tParameterizedSingleTypeReference pref = (ParameterizedSingleTypeReference) ot;\n\t\t\tlong pos = (((long)pref.sourceStart) << 32) | pref.sourceEnd;\n\t\t\tot = new SingleTypeReference(pref.token,pos);\n\t\t} else if (ot instanceof ParameterizedQualifiedTypeReference) {\n\t\t\tParameterizedQualifiedTypeReference pref = (ParameterizedQualifiedTypeReference) ot;\n\t\t\tlong pos = (((long)pref.sourceStart) << 32) | pref.sourceEnd;\n\t\t\tot = new QualifiedTypeReference(pref.tokens,new long[]{pos});//SingleTypeReference(pref.Quatoken,pos);\n\t\t}\n\t\t\n\t\tif (rb==null) {\n\t\t  rb = (ReferenceBinding)ot.getTypeBindingPublic(scope.parent);\n\t\t}\n\t\t\n\t\tif (rb.isRawType() && rb.isMemberType()) {\n\t\t\trb = ((RawTypeBinding)rb).type;\n\t\t}\n\t\t\n\t\tif (rb instanceof TypeVariableBinding) {\n\t\t\tscope.problemReporter().signalError(sourceStart,sourceEnd,\n\t\t\t\t\t  \"Cannot make inter-type declarations on type variables, use an interface and declare parents\");\n\t\t\tthis.arguments=null;\n\t\t\tthis.returnType=new SingleTypeReference(TypeReference.VOID,0L);\n\t\t\t\n\t\t\tthis.ignoreFurtherInvestigation=true;\n\t\t\tReferenceBinding closestMatch = null;\n\t\t\tif (((TypeVariableBinding)rb).firstBound!=null) {\n\t\t\t\tclosestMatch = ((TypeVariableBinding)rb).firstBound.enclosingType();\n\t\t\t}\n\t\t\trb = new ProblemReferenceBinding(rb.compoundName,closestMatch,0);\n\t\t}\n\n\t\t\n\t\tif (rb instanceof ProblemReferenceBinding) return;\n\t\t\n\t\tinterTypeScope = new InterTypeScope(scope.parent, rb, typeVariableAliases);\n\t\tscope.isStatic = (typeVariableAliases!=null?false:Modifier.isStatic(declaredModifiers));\n\t\tscope.parent = interTypeScope;\n\t    scopeSetup = true;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    protected ResourceHandle prefetch(ResourceSpec spec,\n                                      ResourceAllocator alloc, Transaction tran) {\n        AssocWithThreadResourceHandle ar = localResource.get();\n        if (ar != null) {\n            synchronized (ar.lock) {\n                if ((ar.getThreadId() != Thread.currentThread().getId()) ||\n                        ar.hasConnectionErrorOccurred() ||\n                        ar.isDirty() || !ar.isAssociated()) {\n\n                    localResource.remove();\n                    return null;\n                }\n\n                if (ar.getResourceState().isFree() &&\n                        ar.getResourceState().isUnenlisted()) {\n                    if (matchConnections) {\n                        if (!alloc.matchConnection(ar)) {\n                            localResource.remove();\n                            ar.setAssociated(false);\n                            if(poolLifeCycleListener != null){\n                                poolLifeCycleListener.connectionNotMatched();\n                            }\n                            return null;\n                        }\n                        if(poolLifeCycleListener != null){\n                            poolLifeCycleListener.connectionMatched();\n                        }\n                    }\n\n                    if (!isConnectionValid(ar, alloc)) {\n                        localResource.remove();\n                        ar.setAssociated(false);\n                        return null;\n                    }\n\n                    setResourceStateToBusy(ar);\n                    if (maxConnectionUsage_ > 0) {\n                        ar.incrementUsageCount();\n                    }\n                    if(poolLifeCycleListener != null) {\n                        poolLifeCycleListener.connectionUsed(ar.getId());\n                        poolLifeCycleListener.decrementNumConnFree();\n                        \n                    }\n                    return ar;\n                }\n            }\n        }\n\n        return null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr adjacencyList) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), adjacencyList});\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static String loadJSONFromAsset(Context context, String filename) {\n\t\tString json;\n\t\ttry {\n\n\t\t\tInputStream is = context.getAssets().open(\"json/\" +filename+\".json\");\n\n\t\t\tint size = is.available();\n\n\t\t\tbyte[] buffer = new byte[size];\n\n\t\t\tis.read(buffer);\n\t\t\t\n\t\t\tis.close();\n\n\t\t\tjson = new String(buffer, \"UTF-8\");\n\t\t\tLog.v(\"AppUtils\", \"JSONArray=>\"+json);\n\t\t} catch (IOException ex) {\n\t\t\tex.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\t\treturn json;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void visitLdcInsn(final Object cst) {\n        if (cst instanceof Integer) {\n            int val = ((Integer) cst).intValue();\n            iconst(val);\n        } else if (cst instanceof Byte) {\n            int val = ((Byte) cst).intValue();\n            iconst(val);\n        } else if (cst instanceof Character) {\n            int val = ((Character) cst).charValue();\n            iconst(val);\n        } else if (cst instanceof Short) {\n            int val = ((Short) cst).intValue();\n            iconst(val);\n        } else if (cst instanceof Boolean) {\n            int val = ((Boolean) cst).booleanValue() ? 1 : 0;\n            iconst(val);\n        } else if (cst instanceof Float) {\n            float val = ((Float) cst).floatValue();\n            fconst(val);\n        } else if (cst instanceof Long) {\n            long val = ((Long) cst).longValue();\n            lconst(val);\n        } else if (cst instanceof Double) {\n            double val = ((Double) cst).doubleValue();\n            dconst(val);\n        } else if (cst instanceof String) {\n            aconst(cst);\n        } else if (cst instanceof Type) {\n            tconst((Type) cst);\n        } else if (cst instanceof Handle) {\n            hconst((Handle) cst);\n        } else {\n            throw new IllegalArgumentException();\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static Graph<ITestNGMethod> topologicalSort(ITestNGMethod[] methods,\n      List<ITestNGMethod> sequentialList, List<ITestNGMethod> parallelList) {\n    Graph<ITestNGMethod> result = new Graph<ITestNGMethod>();\n\n    if (methods.length == 0) {\n      return result;\n    }\n\n    for (ITestNGMethod m : methods) {\n      result.addNode(m);\n\n      List<ITestNGMethod> predecessors = Lists.newArrayList();\n\n      String[] methodsDependedUpon = m.getMethodsDependedUpon();\n      String[] groupsDependedUpon = m.getGroupsDependedUpon();\n      if (methodsDependedUpon.length > 0) {\n        ITestNGMethod[] methodsNamed =\n          MethodHelper.findDependedUponMethods(m, methods);\n        for (ITestNGMethod pred : methodsNamed) {\n          predecessors.add(pred);\n        }\n      }\n      if (groupsDependedUpon.length > 0) {\n        for (String group : groupsDependedUpon) {\n          ITestNGMethod[] methodsThatBelongToGroup =\n            MethodGroupsHelper.findMethodsThatBelongToGroup(m, methods, group);\n          for (ITestNGMethod pred : methodsThatBelongToGroup) {\n            predecessors.add(pred);\n          }\n        }\n      }\n\n      for (ITestNGMethod predecessor : predecessors) {\n        result.addPredecessor(m, predecessor);\n      }\n    }\n\n    result.topologicalSort();\n    sequentialList.addAll(result.getStrictlySortedNodes());\n    parallelList.addAll(result.getIndependentNodes());\n\n    return result;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testAs() {\n        XCriteriaBuilder cb = entityManagerFactory.getCriteriaBuilder();\n        XCriteriaQuery<Tuple> cq = cb.createTupleQuery();\n        XRoot<SaleTransaction> saleTransaction = cq.from(SaleTransaction.class);\n        cq\n        .groupBy(\n                saleTransaction.join(SaleTransaction_.buyer).get(Customer_.name),\n                saleTransaction.join(SaleTransaction_.product).get(Product_.name)\n        )\n        .orderBy(\n                cb.asc(saleTransaction.join(SaleTransaction_.buyer).get(Customer_.name)),\n                cb.asc(saleTransaction.join(SaleTransaction_.product).get(Product_.name))\n        )\n        .multiselect(\n                saleTransaction.get(SaleTransaction_.buyer).get(Customer_.name).alias(\"customer\"),\n                saleTransaction.get(SaleTransaction_.product).get(Product_.name).alias(\"product\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(int.class)\n                .alias(\"totalIntPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(long.class)\n                .alias(\"totalLongPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(float.class)\n                .alias(\"totalFloatPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(double.class)\n                .alias(\"totalDoublePrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(Integer.class)\n                .alias(\"totalNullableIntPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(Long.class)\n                .alias(\"totalNullableLongPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(Float.class)\n                .alias(\"totalNullableFloatPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(Double.class)\n                .alias(\"totalNullableDoublePrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(BigInteger.class)\n                .alias(\"totalBigIntegerPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(BigDecimal.class)\n                .alias(\"totalBigDecimalPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(short.class)\n                .alias(\"totalShortWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(int.class)\n                .alias(\"totalIntWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(long.class)\n                .alias(\"totalLongWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(float.class)\n                .alias(\"totalFloatWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(double.class)\n                .alias(\"totalDoubleWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(Short.class)\n                .alias(\"totalNullableShortWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(Integer.class)\n                .alias(\"totalNullableIntWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(Long.class)\n                .alias(\"totalNullableLongWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(Float.class)\n                .alias(\"totalNullableFloatWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(Double.class)\n                .alias(\"totalNullableDoubleWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(BigInteger.class)\n                .alias(\"totalBigIntegerWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(BigDecimal.class)\n                .alias(\"totalBigDecimalWeight\")\n        );\n        \n        List<Tuple> tuples = this.entityManager.createQuery(cq).getResultList();\n        Assert.assertEquals(5, tuples.size());\n        \n        Assert.assertEquals(\"Howard\", (String)tuples.get(0).get(\"customer\"));\n        Assert.assertEquals(\"ADUI-A8\", (String)tuples.get(0).get(\"product\"));\n        Assert.assertEquals(2620000 * 2 - 1280000, ((Integer)tuples.get(0).get(\"totalIntPrice\")).intValue());\n        Assert.assertEquals(2620000L * 2 - 1280000, ((Long)tuples.get(0).get(\"totalLongPrice\")).longValue());\n        Assert.assertEquals(2620000F * 2 - 1280000, ((Float)tuples.get(0).get(\"totalFloatPrice\")).floatValue());\n        Assert.assertEquals(2620000D * 2 - 1280000, ((Double)tuples.get(0).get(\"totalDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2620000 * 2 - 1280000, ((Integer)tuples.get(0).get(\"totalNullableIntPrice\")).intValue());\n        Assert.assertEquals(2620000L * 2 - 1280000, ((Long)tuples.get(0).get(\"totalNullableLongPrice\")).longValue());\n        Assert.assertEquals(2620000F * 2 - 1280000, ((Float)tuples.get(0).get(\"totalNullableFloatPrice\")).floatValue());\n        Assert.assertEquals(2620000D * 2 - 1280000, ((Double)tuples.get(0).get(\"totalNullableDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2620000L * 2 - 1280000, ((BigInteger)tuples.get(0).get(\"totalBigIntegerPrice\")).longValue());\n        Assert.assertEquals(2620000L * 2 - 1280000, ((BigDecimal)tuples.get(0).get(\"totalBigDecimalPrice\")).longValue());\n        Assert.assertEquals((short)2185, ((Short)tuples.get(0).get(\"totalShortWeight\")).shortValue());\n        Assert.assertEquals(2185, ((Integer)tuples.get(0).get(\"totalIntWeight\")).intValue());\n        Assert.assertEquals(2185L, ((Long)tuples.get(0).get(\"totalLongWeight\")).longValue());\n        Assert.assertEquals(2185F, ((Float)tuples.get(0).get(\"totalFloatWeight\")).floatValue());\n        Assert.assertEquals(2185D, ((Double)tuples.get(0).get(\"totalDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals((short)2185, ((Short)tuples.get(0).get(\"totalNullableShortWeight\")).shortValue());\n        Assert.assertEquals(2185, ((Integer)tuples.get(0).get(\"totalNullableIntWeight\")).intValue());\n        Assert.assertEquals(2185L, ((Long)tuples.get(0).get(\"totalNullableLongWeight\")).longValue());\n        Assert.assertEquals(2185F, ((Float)tuples.get(0).get(\"totalNullableFloatWeight\")).floatValue());\n        Assert.assertEquals(2185D, ((Double)tuples.get(0).get(\"totalNullableDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2185L, ((BigInteger)tuples.get(0).get(\"totalBigIntegerWeight\")).longValue());\n        Assert.assertEquals(2185L, ((BigDecimal)tuples.get(0).get(\"totalBigDecimalWeight\")).longValue());\n        \n        Assert.assertEquals(\"Howard\", (String)tuples.get(1).get(\"customer\"));\n        Assert.assertEquals(\"Aventador LP700-4\", (String)tuples.get(1).get(\"product\"));\n        Assert.assertEquals(7354000, ((Integer)tuples.get(1).get(\"totalIntPrice\")).intValue());\n        Assert.assertEquals(7354000L, ((Long)tuples.get(1).get(\"totalLongPrice\")).longValue());\n        Assert.assertEquals(7354000F, ((Float)tuples.get(1).get(\"totalFloatPrice\")).floatValue());\n        Assert.assertEquals(7354000D, ((Double)tuples.get(1).get(\"totalDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(7354000, ((Integer)tuples.get(1).get(\"totalNullableIntPrice\")).intValue());\n        Assert.assertEquals(7354000L, ((Long)tuples.get(1).get(\"totalNullableLongPrice\")).longValue());\n        Assert.assertEquals(7354000F, ((Float)tuples.get(1).get(\"totalNullableFloatPrice\")).floatValue());\n        Assert.assertEquals(7354000D, ((Double)tuples.get(1).get(\"totalNullableDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(7354000L, ((BigInteger)tuples.get(1).get(\"totalBigIntegerPrice\")).longValue());\n        Assert.assertEquals(7354000L, ((BigDecimal)tuples.get(1).get(\"totalBigDecimalPrice\")).longValue());\n        Assert.assertEquals((short)1585, ((Short)tuples.get(1).get(\"totalShortWeight\")).shortValue());\n        Assert.assertEquals(1585, ((Integer)tuples.get(1).get(\"totalIntWeight\")).intValue());\n        Assert.assertEquals(1585L, ((Long)tuples.get(1).get(\"totalLongWeight\")).longValue());\n        Assert.assertEquals(1585F, ((Float)tuples.get(1).get(\"totalFloatWeight\")).floatValue());\n        Assert.assertEquals(1585D, ((Double)tuples.get(1).get(\"totalDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals((short)1585, ((Short)tuples.get(1).get(\"totalNullableShortWeight\")).shortValue());\n        Assert.assertEquals(1585, ((Integer)tuples.get(1).get(\"totalNullableIntWeight\")).intValue());\n        Assert.assertEquals(1585L, ((Long)tuples.get(1).get(\"totalNullableLongWeight\")).longValue());\n        Assert.assertEquals(1585F, ((Float)tuples.get(1).get(\"totalNullableFloatWeight\")).floatValue());\n        Assert.assertEquals(1585D, ((Double)tuples.get(1).get(\"totalNullableDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(1585L, ((BigInteger)tuples.get(1).get(\"totalBigIntegerWeight\")).longValue());\n        Assert.assertEquals(1585L, ((BigDecimal)tuples.get(1).get(\"totalBigDecimalWeight\")).longValue());\n        \n        Assert.assertEquals(\"Howard\", (String)tuples.get(2).get(\"customer\"));\n        Assert.assertEquals(\"BENZ-S\", (String)tuples.get(2).get(\"product\"));\n        Assert.assertEquals(3612000, ((Integer)tuples.get(2).get(\"totalIntPrice\")).intValue());\n        Assert.assertEquals(3612000L, ((Long)tuples.get(2).get(\"totalLongPrice\")).longValue());\n        Assert.assertEquals(3612000F, ((Float)tuples.get(2).get(\"totalFloatPrice\")).floatValue());\n        Assert.assertEquals(3612000D, ((Double)tuples.get(2).get(\"totalDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(3612000, ((Integer)tuples.get(2).get(\"totalNullableIntPrice\")).intValue());\n        Assert.assertEquals(3612000L, ((Long)tuples.get(2).get(\"totalNullableLongPrice\")).longValue());\n        Assert.assertEquals(3612000F, ((Float)tuples.get(2).get(\"totalNullableFloatPrice\")).floatValue());\n        Assert.assertEquals(3612000D, ((Double)tuples.get(2).get(\"totalNullableDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(3612000L, ((BigInteger)tuples.get(2).get(\"totalBigIntegerPrice\")).longValue());\n        Assert.assertEquals(3612000L, ((BigDecimal)tuples.get(2).get(\"totalBigDecimalPrice\")).longValue());\n        Assert.assertEquals((short)2250, ((Short)tuples.get(2).get(\"totalShortWeight\")).shortValue());\n        Assert.assertEquals(2250, ((Integer)tuples.get(2).get(\"totalIntWeight\")).intValue());\n        Assert.assertEquals(2250L, ((Long)tuples.get(2).get(\"totalLongWeight\")).longValue());\n        Assert.assertEquals(2250F, ((Float)tuples.get(2).get(\"totalFloatWeight\")).floatValue());\n        Assert.assertEquals(2250D, ((Double)tuples.get(2).get(\"totalDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals((short)2250, ((Short)tuples.get(2).get(\"totalNullableShortWeight\")).shortValue());\n        Assert.assertEquals(2250, ((Integer)tuples.get(2).get(\"totalNullableIntWeight\")).intValue());\n        Assert.assertEquals(2250L, ((Long)tuples.get(2).get(\"totalNullableLongWeight\")).longValue());\n        Assert.assertEquals(2250F, ((Float)tuples.get(2).get(\"totalNullableFloatWeight\")).floatValue());\n        Assert.assertEquals(2250D, ((Double)tuples.get(2).get(\"totalNullableDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2250L, ((BigInteger)tuples.get(2).get(\"totalBigIntegerWeight\")).longValue());\n        Assert.assertEquals(2250L, ((BigDecimal)tuples.get(2).get(\"totalBigDecimalWeight\")).longValue());\n        \n        Assert.assertEquals(\"Jim\", (String)tuples.get(3).get(\"customer\"));\n        Assert.assertEquals(\"ADUI-A8\", (String)tuples.get(3).get(\"product\"));\n        Assert.assertEquals(2611000 * 4, ((Integer)tuples.get(3).get(\"totalIntPrice\")).intValue());\n        Assert.assertEquals(2611000L * 4, ((Long)tuples.get(3).get(\"totalLongPrice\")).longValue());\n        Assert.assertEquals(2611000F * 4, ((Float)tuples.get(3).get(\"totalFloatPrice\")).floatValue());\n        Assert.assertEquals(2611000D * 4, ((Double)tuples.get(3).get(\"totalDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2611000 * 4, ((Integer)tuples.get(3).get(\"totalNullableIntPrice\")).intValue());\n        Assert.assertEquals(2611000L * 4, ((Long)tuples.get(3).get(\"totalNullableLongPrice\")).longValue());\n        Assert.assertEquals(2611000F * 4, ((Float)tuples.get(3).get(\"totalNullableFloatPrice\")).floatValue());\n        Assert.assertEquals(2611000D * 4, ((Double)tuples.get(3).get(\"totalNullableDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2611000L * 4, ((BigInteger)tuples.get(3).get(\"totalBigIntegerPrice\")).longValue());\n        Assert.assertEquals(2611000L * 4, ((BigDecimal)tuples.get(3).get(\"totalBigDecimalPrice\")).longValue());\n        Assert.assertEquals((short)(2185 * 4), ((Short)tuples.get(3).get(\"totalShortWeight\")).shortValue());\n        Assert.assertEquals(2185 * 4, ((Integer)tuples.get(3).get(\"totalIntWeight\")).intValue());\n        Assert.assertEquals(2185L * 4, ((Long)tuples.get(3).get(\"totalLongWeight\")).longValue());\n        Assert.assertEquals(2185F * 4, ((Float)tuples.get(3).get(\"totalFloatWeight\")).floatValue());\n        Assert.assertEquals(2185D * 4, ((Double)tuples.get(3).get(\"totalDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals((short)(2185 * 4), ((Short)tuples.get(3).get(\"totalNullableShortWeight\")).shortValue());\n        Assert.assertEquals(2185 * 4, ((Integer)tuples.get(3).get(\"totalNullableIntWeight\")).intValue());\n        Assert.assertEquals(2185L * 4, ((Long)tuples.get(3).get(\"totalNullableLongWeight\")).longValue());\n        Assert.assertEquals(2185F * 4, ((Float)tuples.get(3).get(\"totalNullableFloatWeight\")).floatValue());\n        Assert.assertEquals(2185D * 4, ((Double)tuples.get(3).get(\"totalNullableDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2185L * 4, ((BigInteger)tuples.get(3).get(\"totalBigIntegerWeight\")).longValue());\n        Assert.assertEquals(2185L * 4, ((BigDecimal)tuples.get(3).get(\"totalBigDecimalWeight\")).longValue());\n        \n        Assert.assertEquals(\"Smith\", (String)tuples.get(4).get(\"customer\"));\n        Assert.assertEquals(\"BENZ-S\", (String)tuples.get(4).get(\"product\"));\n        Assert.assertEquals(3582000 * 3, ((Integer)tuples.get(4).get(\"totalIntPrice\")).intValue());\n        Assert.assertEquals(3582000L * 3, ((Long)tuples.get(4).get(\"totalLongPrice\")).longValue());\n        Assert.assertEquals(3582000F * 3, ((Float)tuples.get(4).get(\"totalFloatPrice\")).floatValue());\n        Assert.assertEquals(3582000D * 3, ((Double)tuples.get(4).get(\"totalDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(3582000 * 3, ((Integer)tuples.get(4).get(\"totalNullableIntPrice\")).intValue());\n        Assert.assertEquals(3582000L * 3, ((Long)tuples.get(4).get(\"totalNullableLongPrice\")).longValue());\n        Assert.assertEquals(3582000F * 3, ((Float)tuples.get(4).get(\"totalNullableFloatPrice\")).floatValue());\n        Assert.assertEquals(3582000D * 3, ((Double)tuples.get(4).get(\"totalNullableDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(3582000L * 3, ((BigInteger)tuples.get(4).get(\"totalBigIntegerPrice\")).longValue());\n        Assert.assertEquals(3582000L * 3, ((BigDecimal)tuples.get(4).get(\"totalBigDecimalPrice\")).longValue());\n        Assert.assertEquals((short)(2250 * 3), ((Short)tuples.get(4).get(\"totalShortWeight\")).shortValue());\n        Assert.assertEquals(2250 * 3, ((Integer)tuples.get(4).get(\"totalIntWeight\")).intValue());\n        Assert.assertEquals(2250L * 3, ((Long)tuples.get(4).get(\"totalLongWeight\")).longValue());\n        Assert.assertEquals(2250F * 3, ((Float)tuples.get(4).get(\"totalFloatWeight\")).floatValue());\n        Assert.assertEquals(2250D * 3, ((Double)tuples.get(4).get(\"totalDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals((short)(2250 * 3), ((Short)tuples.get(4).get(\"totalNullableShortWeight\")).shortValue());\n        Assert.assertEquals(2250 * 3, ((Integer)tuples.get(4).get(\"totalNullableIntWeight\")).intValue());\n        Assert.assertEquals(2250L * 3, ((Long)tuples.get(4).get(\"totalNullableLongWeight\")).longValue());\n        Assert.assertEquals(2250F * 3, ((Float)tuples.get(4).get(\"totalNullableFloatWeight\")).floatValue());\n        Assert.assertEquals(2250D * 3, ((Double)tuples.get(4).get(\"totalNullableDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2250L * 3, ((BigInteger)tuples.get(4).get(\"totalBigIntegerWeight\")).longValue());\n        Assert.assertEquals(2250L * 3, ((BigDecimal)tuples.get(4).get(\"totalBigDecimalWeight\")).longValue());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic BufferedImage getRenderedImage()\n\t{\n\t\tBufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n\t\t{\n\t\t\tGraphics2D g = image.createGraphics();\n\t\t\tfor(Layer l : flatmap)\n\t\t\t{\n\t\t\t\tl.render(g);\n\t\t\t}\n\t\t\tg.dispose();\n\t\t}\n\t\treturn image;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic Vector<Operator> topologicalSort() {\n\t\tfinal Map<Operator, Integer> originalIndices = new HashMap<Operator, Integer>();\n\t\tfor (int i = 0; i < operators.size(); i++) {\n\t\t\toriginalIndices.put(operators.get(i), i);\n\t\t}\n\t\tEdgeCounter counter = new EdgeCounter(operators);\n\t\tfor (Operator child : getOperators()) {\n\t\t\tfor (OutputPort out : child.getOutputPorts().getAllPorts()) {\n\t\t\t\tInputPort dest = out.getDestination();\n\t\t\t\tif (dest != null) {\n\t\t\t\t\tcounter.incNumEdges(dest.getPorts().getOwner().getOperator());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tVector<Operator> sorted = new Vector<Operator>();\n\t\tPriorityQueue<Operator> independentOperators = new PriorityQueue<Operator>(Math.max(1, operators.size()),\n\t\t\t\tnew Comparator<Operator>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic int compare(Operator o1, Operator o2) {\n\t\t\t\t\t\treturn originalIndices.get(o1) - originalIndices.get(o2);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\tindependentOperators.addAll(counter.getIndependentOperators());\n\t\twhile (!independentOperators.isEmpty()) {\n\t\t\tOperator first = independentOperators.poll();\n\t\t\tsorted.add(first);\n\t\t\tfor (OutputPort out : first.getOutputPorts().getAllPorts()) {\n\t\t\t\tInputPort dest = out.getDestination();\n\t\t\t\tif (dest != null) {\n\t\t\t\t\tOperator destOp = dest.getPorts().getOwner().getOperator();\n\t\t\t\t\tif (counter.decNumEdges(destOp) == 0) {\n\t\t\t\t\t\tindependentOperators.add(destOp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode parse(java.lang.String xmlAsString, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException {\n          return (com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( xmlAsString, type, options ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static <T extends Vm> T getByIdAndUserId(List<T> vmList, int id, int userId) {\n\t\tfor (T vm : vmList) {\n\t\t\tif (vm.getId() == id && vm.getUserId() == userId) {\n\t\t\t\treturn vm;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\tpublic synchronized void onDownloadError(int index, String message) {\n\t\tTrace.e(\"onDownloadError:\" + message);\n\t\tdownloadStatus[index] = DownloadStatus.error;\n\t\tfor(int i = 0; i < downloadStatus.length; i++){\n\t\t\tif(downloadStatus[i] != DownloadStatus.done \n\t\t\t\t\t&& downloadStatus[i] != DownloadStatus.error){\n\t\t\t\tdownloadThreads[i].cancelByError();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\tentry.status = DownloadStatus.error;\n    \tnotifyUpdate(entry, DownloadService.NOTIFY_ERROR);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void main(String[] args){\n\t\ttry {\n\t\t\t@SuppressWarnings(\"deprecation\")\n\t\t\tHBaseConfiguration conf = new HBaseConfiguration();\n\t\t\tconf.set(\"hbase.zookeeper.quorum\", \"den3dhdptk01.int.photobucket.com\");\n\t\t\tconf.set(\"hbase.zookeeper.property.clientPort\", \"2181\");\n\t\t\tconf.setInt(\"hbase.client.retries.number\", 7);\n\t\t\tconf.setInt(\"ipc.client.connect.max.retries\", 3);\n\n\t\t\t\n\t\t\t\n\t\t\tHTablePool hTablePool = new HTablePool(conf, 10);\n\t\t\t\n\t\t\tHTableInterface seq = hTablePool.getTable(\"DocKeyIdMap\");\t\t\t\n\n\t\t\tString globalId = \"0089210673:0000540572:309AB023-orig.jpg\";\n\t\t\tGet get = new Get(Bytes.toBytes(globalId));\n\t\t\t\n\t\t\tResult result = seq.get(get);\n\t\t\t\n\t\t\tbyte[] docId = result.getValue(Bytes.toBytes(\"docId\"), Bytes.toBytes(\"\"));\n\n\t\t\tint docNumber = 384900472;\n\t\t\t\n\t\t\tSolrInputDocument doc = new SolrInputDocument();\t\t\t\n\t\t\tif(docId != null) {\n\t\t\t\tSystem.out.println(Bytes.toInt(docId));\n\t\t\t\tdocNumber = Bytes.toInt(docId);\n\t\t\t\tdoc.addField(\"edit\", true);\n\t\t\t}\n\t\t\t\n\t\t\tCommonsHttpSolrServer solbaseServer = new CommonsHttpSolrServer(\"http://localhost:8080/solbase/pbimages~1\");\n\n\t\t\tdoc.addField(\"docId\", docNumber);\n\t\t\tdoc.addField(\"global_uniq_id\", globalId);\n\t\t\tdoc.addField(\"title\", \"tom\");\n\t\t\tdoc.addField(\"description\", \"Uploaded with Snapbucket\");\n\t\t\tdoc.addField(\"tags\", \"Snapbucket\");\n\t\t\tdoc.addField(\"path\", \"/albums/tt262/koh_tester/309AB021-orig.jpg\");\n\t\t\tdoc.addField(\"subdomain\", \"i618\");\n\t\t\tdoc.addField(\"lastModified\", new Integer(SolbaseUtil.getEpochSinceSolbase(System.currentTimeMillis() / 60000)).toString());\n\t\t\tdoc.addField(\"media_type\", new Integer(1).toString());\n\t\t\tdoc.addField(\"total_view_count\", new Long(10).toString());\n\t\t\tdoc.addField(\"sevendays_view_count\", new Integer(5).toString());\n\t\t\tdoc.addField(\"total_likes_count\", new Long(5).toString());\n\t\t\tdoc.addField(\"sevendays_likes_count\", new Integer(1).toString());\n\t\t\tdoc.addField(\"total_comments_count\", new Long(5).toString());\n\t\t\tdoc.addField(\"sevendays_comments_count\", new Integer(1).toString());\n\t\t\tdoc.addField(\"contents\", \"audi tom solbase Uploaded with Snapbucket \");\n\t\t\tdoc.addField(\"updateStore\", true);\n\t\t\t\n\t\t\tsolbaseServer.add(doc);\n\n\t\t} catch (MalformedURLException e) {\n\n\t\t} catch (SolrServerException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static boolean isTrue(Object o) {\n        if (o == null) return false;\n\n        Class<?> cls = o.getClass();\n        if (cls == Boolean.class) return (Boolean) o;\n        if (o instanceof Collection) return !((Collection<?>) o).isEmpty();\n        if (o instanceof Map) return !((Map<?, ?>) o).isEmpty();\n        if (o instanceof CharSequence) return ((CharSequence) o).length() > 0;\n        if (o instanceof Number) return ((Number) o).intValue() != 0;\n        if (cls.isArray()) return Array.getLength(o) > 0;\n        if (cls == Character.class) return ((Character) o) != '\\0';\n        if (o instanceof Enumeration) return ((Enumeration<?>) o).hasMoreElements();\n        if (o instanceof Iterator) return ((Iterator<?>) o).hasNext();\n        if (o instanceof Iterable) return ((Iterable<?>) o).iterator().hasNext();\n\n        return true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void systemLoader()\n\t\t{\n\t\t\t\n\t\t\tlong loginCount = mXPref.getUseTotalCount();\n\t\t\tmXPref.putUseTotalCount(loginCount + 1); // Login count++\n\t\t\t\n\t\t\tmXPref.putUseDayCount(mXPref.getUseDayCount() + 1);\t\t\t\n\t\t\t\n\t\t\tLog.I(TAG, String.format(\"Entry %1s %2s Times.\", getString(R.string.app_name), loginCount));\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void testParameterTypes() throws Exception {\n        Response<String> response = webb\n                .get(\"/parameter-types\")\n                .param(\"string\", SIMPLE_ASCII)\n                .param(\"number\", 815)\n                .param(\"number\", 4711) // test overwrite feature of multiple calls with same name\n                .param(\"null\", null)\n                .param(\"empty\", \"\")\n                .asString();\n\n        assertEquals(204, response.getStatusCode());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Kernel(int width, int height, float data[]) {\n        this.width  = width;\n        this.height = height;\n        this.xOrigin  = (width-1)>>1;\n        this.yOrigin  = (height-1)>>1;\n        int len = width*height;\n        if (data.length < len) {\n            throw new IllegalArgumentException(\"Data array too small \"+\n                                               \"(is \"+data.length+\n                                               \" and should be \"+len);\n        }\n        this.data = new float[len];\n        System.arraycopy(data, 0, this.data, 0, len);\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic final DenseMatrix zeros(ValueType valueType, long... size) {\n\t\tswitch (size.length) {\n\t\tcase 0:\n\t\t\tthrow new RuntimeException(\"Size not defined\");\n\t\tcase 1:\n\t\t\tthrow new RuntimeException(\"Size must be at least 2-dimensional\");\n\t\tdefault:\n\t\t\tswitch (valueType) {\n\t\t\tcase BIGDECIMAL:\n\t\t\t\treturn new DefaultDenseBigDecimalMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BIGINTEGER:\n\t\t\t\treturn new DefaultDenseBigIntegerMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BOOLEAN:\n\t\t\t\treturn new ArrayDenseBooleanMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BYTE:\n\t\t\t\treturn new DefaultDenseByteMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase CHAR:\n\t\t\t\treturn new DefaultDenseCharMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase DOUBLE:\n\t\t\t\tif (size.length == 2) {\n\t\t\t\t\treturn new DefaultDenseDoubleMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\t\t} else {\n\t\t\t\t\treturn new DefaultDenseDoubleMatrixMultiD(size);\n\t\t\t\t}\n\t\t\tcase FLOAT:\n\t\t\t\treturn new DefaultDenseFloatMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase INT:\n\t\t\t\treturn new DefaultDenseIntMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase LONG:\n\t\t\t\treturn new DefaultDenseLongMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase OBJECT:\n\t\t\t\treturn ObjectMatrix.Factory.zeros(size);\n\t\t\tcase SHORT:\n\t\t\t\treturn new DefaultDenseShortMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase STRING:\n\t\t\t\treturn new DefaultDenseStringMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tdefault:\n\t\t\t\tthrow new RuntimeException(\"unknown value type: \" + valueType);\n\t\t\t}\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public FluidTankInfo[] getTankInfo() {\n    \tFluidTankInfo[] infos = new FluidTankInfo[tanks.length];\n    \tfor(int i = 0; i < tanks.length; i++) {\n    \t\tinfos[i] = tanks[i].getInfo();\n    \t}\n    \t\n    \treturn infos;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testNotEquals() {\n        cip1.setProductId(\"SomeProd\");\n        assertFalse(cip1.equals(cip2));\n        cip1.setProductId(\"ProdA\");\n        assertEquals(cip1, cip2);\n        cip1.setProductName(\"some name\");\n        assertFalse(cip1.equals(cip2));\n        cip1.setProductName(\"Product A\");\n        assertEquals(cip1, cip2);\n        cip1.setVersion(null);\n        assertFalse(cip1.equals(cip2));\n        cip1.setVersion(\"1.0\");\n        assertEquals(cip1, cip2);\n        cip2.setVersion(null);\n        assertFalse(cip1.equals(cip2));\n        cip2.setVersion(\"1.0\");\n        assertEquals(cip1, cip2);\n        cip1.setArch(null);\n        assertFalse(cip1.equals(cip2));\n        cip1.setArch(\"x86\");\n        assertEquals(cip1, cip2);\n        cip2.setArch(null);\n        assertFalse(cip1.equals(cip2));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n  public void testSum() throws Exception {\n    Double act = Aggregations.sum(Arrays.asList(1, 2, 3.8));  // check with mixed Number\n    Double exp = 1 + 2 + 3.8;\n    assertEquals(exp, act, 0.01);\n\n    act = Aggregations.sum(Arrays.asList());\n    exp = 0.0;\n    assertEquals(exp, act, 0.01);\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.xrm._2011.metadata.CascadeConfiguration newInstance() {\n          return (com.microsoft.schemas.xrm._2011.metadata.CascadeConfiguration) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().newInstance( type, null ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@NotNull\n    @Parameterized.Parameters\n    public static Collection<Object[]> combinations() {\n        @NotNull List<Object[]> list = new ArrayList<>();\n        @NotNull Marshallable[] objects = {\n                new Nested(new ScalarValues(), Collections.emptyList(), Collections.emptySet(), Collections.emptyMap(), \"\".split(\"\")),\n                new ScalarValues(1),\n        };\n        @NotNull String[] fields = {\n                \"[!FieldInfo {\\n\" +\n                        \"  name: values,\\n\" +\n                        \"  type: !type net.openhft.chronicle.wire.marshallable.ScalarValues,\\n\" +\n                        \"  bracketType: MAP,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: strings,\\n\" +\n                        \"  type: !type !seq,\\n\" +\n                        \"  bracketType: SEQ,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: ints,\\n\" +\n                        \"  type: !type !set,\\n\" +\n                        \"  bracketType: SEQ,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: map,\\n\" +\n                        \"  type: !type !map,\\n\" +\n                        \"  bracketType: MAP,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: array,\\n\" +\n                        \"  type: !type String[],\\n\" +\n                        \"  bracketType: SEQ,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \"]\",\n                \"[!FieldInfo {\\n\" +\n                        \"  name: flag,\\n\" +\n                        \"  type: !type boolean,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: b,\\n\" +\n                        \"  type: !type byte,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: s,\\n\" +\n                        \"  type: !type short,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: ch,\\n\" +\n                        \"  type: !type char,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: i,\\n\" +\n                        \"  type: !type int,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: f,\\n\" +\n                        \"  type: !type float,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: l,\\n\" +\n                        \"  type: !type long,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: d,\\n\" +\n                        \"  type: !type double,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: flag2,\\n\" +\n                        \"  type: !type java.lang.Boolean,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: b2,\\n\" +\n                        \"  type: !type byte,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: s2,\\n\" +\n                        \"  type: !type short,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: ch2,\\n\" +\n                        \"  type: !type Char,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: i2,\\n\" +\n                        \"  type: !type int,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: f2,\\n\" +\n                        \"  type: !type Float32,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: l2,\\n\" +\n                        \"  type: !type long,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: d2,\\n\" +\n                        \"  type: !type Float64,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: aClass,\\n\" +\n                        \"  type: !type type,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: policy,\\n\" +\n                        \"  type: !type java.lang.annotation.RetentionPolicy,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: text,\\n\" +\n                        \"  type: !type String,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: date,\\n\" +\n                        \"  type: !type Date,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: time,\\n\" +\n                        \"  type: !type Time,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: dateTime,\\n\" +\n                        \"  type: !type DateTime,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: zonedDateTime,\\n\" +\n                        \"  type: !type ZonedDateTime,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: uuid,\\n\" +\n                        \"  type: !type java.util.UUID,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: bi,\\n\" +\n                        \"  type: !type java.math.BigInteger,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: bd,\\n\" +\n                        \"  type: !type java.math.BigDecimal,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: file,\\n\" +\n                        \"  type: !type java.io.File,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \"]\",\n        };\n        for (int i = 0; i < objects.length; i++) {\n            Marshallable object = objects[i];\n            String fi = fields[i];\n            @NotNull Object[] test = {object, fi};\n            list.add(test);\n        }\n        return list;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public View getView(final int position, View convertView, final ViewGroup parent) {\n            ViewHolder holder = null;\n            if (convertView == null) {\n                convertView = layoutInflater.inflate(R.layout.item_marray, null);\n            } else {\n                convertView.getTag();\n            }\n            holder = new ViewHolder(convertView);\n            holder.tv_name.setText(news.get(position).getName());\n            holder.tv_phone.setText(news.get(position).getPhone());\n            if (news.get(position).isShow) {\n                holder.ly_a.setVisibility(VISIBLE);\n                holder.ly_b.setVisibility(View.GONE);\n            } else {\n                holder.ly_a.setVisibility(View.GONE);\n                holder.ly_b.setVisibility(VISIBLE);\n            }\n            final ViewHolder finalHolder = holder;\n            holder.tv_unrepeat.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(final View v) {\n\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_unrepeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_unrepeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_repeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_repeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_invalid.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_invalid.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_valid.getId() +\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \"+ \"\" + (finalHolder.tv_valid.isShown()));\n\n                    infoList.get(position).isShow = false;\n                    notifyDataSetChanged();\n                }\n            });\n\n            holder.tv_repeat.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(final View v) {\n\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_unrepeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_unrepeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_repeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_repeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_invalid.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_invalid.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_valid.getId() +\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \"+ \"\" + (finalHolder.tv_valid.isShown()));\n\n                    infoList.get(position).isShow = false;\n                    notifyDataSetChanged();\n                }\n            });\n            holder.tv_valid.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(final View v) {\n\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_unrepeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_unrepeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_repeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_repeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_invalid.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_invalid.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_valid.getId() +\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \"+ \"\" + (finalHolder.tv_valid.isShown()));\n\n                    infoList.get(position).isShow = true;\n                    notifyDataSetChanged();\n                }\n            });\n            holder.tv_invalid.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(final View v) {\n\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_unrepeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_unrepeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_repeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_repeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_invalid.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_invalid.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_valid.getId() +\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \"+ \"\" + (finalHolder.tv_valid.isShown()));\n\n                    infoList.get(position).isShow = true;\n                    notifyDataSetChanged();\n                }\n            });\n\n\n            return convertView;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static Bitmap fastblur(Context context, Bitmap sentBitmap, int radius) {\n        Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n        if (radius < 1) {\n            return (null);\n        }\n        int w = bitmap.getWidth();\n        int h = bitmap.getHeight();\n        int[] pix = new int[w * h];\n        bitmap.getPixels(pix, 0, w, 0, 0, w, h);\n        int wm = w - 1;\n        int hm = h - 1;\n        int wh = w * h;\n        int div = radius + radius + 1;\n        int r[] = new int[wh];\n        int g[] = new int[wh];\n        int b[] = new int[wh];\n        int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;\n        int vmin[] = new int[Math.max(w, h)];\n        int divsum = (div + 1) >> 1;\n        divsum *= divsum;\n        int temp = 256 * divsum;\n        int dv[] = new int[temp];\n        for (i = 0; i < temp; i++) {\n            dv[i] = (i / divsum);\n        }\n        yw = yi = 0;\n        int[][] stack = new int[div][3];\n        int stackpointer;\n        int stackstart;\n        int[] sir;\n        int rbs;\n        int r1 = radius + 1;\n        int routsum, goutsum, boutsum;\n        int rinsum, ginsum, binsum;\n        for (y = 0; y < h; y++) {\n            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n            for (i = -radius; i <= radius; i++) {\n                p = pix[yi + Math.min(wm, Math.max(i, 0))];\n                sir = stack[i + radius];\n                sir[0] = (p & 0xff0000) >> 16;\n                sir[1] = (p & 0x00ff00) >> 8;\n                sir[2] = (p & 0x0000ff);\n                rbs = r1 - Math.abs(i);\n                rsum += sir[0] * rbs;\n                gsum += sir[1] * rbs;\n                bsum += sir[2] * rbs;\n                if (i > 0) {\n                    rinsum += sir[0];\n                    ginsum += sir[1];\n                    binsum += sir[2];\n                } else {\n                    routsum += sir[0];\n                    goutsum += sir[1];\n                    boutsum += sir[2];\n                }\n            }\n            stackpointer = radius;\n            for (x = 0; x < w; x++) {\n                r[yi] = dv[rsum];\n                g[yi] = dv[gsum];\n                b[yi] = dv[bsum];\n                rsum -= routsum;\n                gsum -= goutsum;\n                bsum -= boutsum;\n                stackstart = stackpointer - radius + div;\n                sir = stack[stackstart % div];\n                routsum -= sir[0];\n                goutsum -= sir[1];\n                boutsum -= sir[2];\n                if (y == 0) {\n                    vmin[x] = Math.min(x + radius + 1, wm);\n                }\n                p = pix[yw + vmin[x]];\n                sir[0] = (p & 0xff0000) >> 16;\n                sir[1] = (p & 0x00ff00) >> 8;\n                sir[2] = (p & 0x0000ff);\n                rinsum += sir[0];\n                ginsum += sir[1];\n                binsum += sir[2];\n                rsum += rinsum;\n                gsum += ginsum;\n                bsum += binsum;\n                stackpointer = (stackpointer + 1) % div;\n                sir = stack[(stackpointer) % div];\n                routsum += sir[0];\n                goutsum += sir[1];\n                boutsum += sir[2];\n                rinsum -= sir[0];\n                ginsum -= sir[1];\n                binsum -= sir[2];\n                yi++;\n            }\n            yw += w;\n        }\n        for (x = 0; x < w; x++) {\n            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n            yp = -radius * w;\n            for (i = -radius; i <= radius; i++) {\n                yi = Math.max(0, yp) + x;\n                sir = stack[i + radius];\n                sir[0] = r[yi];\n                sir[1] = g[yi];\n                sir[2] = b[yi];\n                rbs = r1 - Math.abs(i);\n                rsum += r[yi] * rbs;\n                gsum += g[yi] * rbs;\n                bsum += b[yi] * rbs;\n                if (i > 0) {\n                    rinsum += sir[0];\n                    ginsum += sir[1];\n                    binsum += sir[2];\n                } else {\n                    routsum += sir[0];\n                    goutsum += sir[1];\n                    boutsum += sir[2];\n                }\n                if (i < hm) {\n                    yp += w;\n               }\n            }\n            yi = x;\n            stackpointer = radius;\n            for (y = 0; y < h; y++) {\n                pix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16)\n                        | (dv[gsum] << 8) | dv[bsum];\n                rsum -= routsum;\n                gsum -= goutsum;\n                bsum -= boutsum;\n                stackstart = stackpointer - radius + div;\n                sir = stack[stackstart % div];\n                routsum -= sir[0];\n                goutsum -= sir[1];\n                boutsum -= sir[2];\n                if (x == 0) {\n                    vmin[y] = Math.min(y + r1, hm) * w;\n                }\n                p = x + vmin[y];\n                sir[0] = r[p];\n                sir[1] = g[p];\n                sir[2] = b[p];\n                rinsum += sir[0];\n                ginsum += sir[1];\n                binsum += sir[2];\n                rsum += rinsum;\n                gsum += ginsum;\n                bsum += binsum;\n                stackpointer = (stackpointer + 1) % div;\n                sir = stack[stackpointer];\n                routsum += sir[0];\n                goutsum += sir[1];\n                boutsum += sir[2];\n                rinsum -= sir[0];\n                ginsum -= sir[1];\n                binsum -= sir[2];\n                yi += w;\n            }\n        }\n        bitmap.setPixels(pix, 0, w, 0, 0, w, h);\n        return (bitmap);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; } \n        return retVal;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(javax.xml.stream.XMLStreamReader sr, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( sr, type, options ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void testMultipleUnknown() throws Exception\n    {\n        ThreeField threeField = new ThreeField();\n        threeField.setF1(1);\n        threeField.setF2(2);\n        threeField.setF3(3);\n\n        ProtobufSchema schemaWith3 = MAPPER.generateSchemaFor(ThreeField.class);\n        byte[] in = MAPPER.writer(schemaWith3)\n                .writeValueAsBytes(threeField);\n\n        ProtobufSchema schemaWith1 = MAPPER.generateSchemaFor(OneField.class);\n        OneField oneField = MAPPER.readerFor(OneField.class).with(schemaWith1)\n                .with(JsonParser.Feature.IGNORE_UNDEFINED)\n                .readValue(in);\n\n        assertEquals(threeField.getF3(), oneField.f3);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void parseTypes(Element typesElement, String parentName) {\n        if (typesElement != null) {\n            for (Element type : XmlElementUtil.getNamedChildElements(typesElement, \"Type\")) {\n                String name = parentName + \".\" + getString(type, \"Name\");\n\n                parseMessages(XmlElementUtil.getFirstElementByTagName(type, \"Messages\"), name);\n                parseMembers(XmlElementUtil.getFirstElementByTagName(type, \"Members\"), name);\n            }\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, final Contract contract, final TradeOrder tradeOrder,\n\t\t\tfinal OrderState orderState) {\n\n\t\ttry {\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(tradeOrder.getOrderKey());\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170, \"Warning Order not found for Order Key: \" + orderId + \" make sure Client ID: \" + 0\n\t\t\t\t\t\t+ \" is not the master in TWS. On openOrder update.\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (BackTestBrokerModel.updateTradeOrder(tradeOrder, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\n\t\t\t\t\t_log.debug(\"Order Key: \" + transientInstance.getOrderKey() + \" filled.\");\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (updatedOrder.hasTradePosition() && !updatedOrder.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(updatedOrder.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Order key: \" + transientInstance.getOrderKey() + \" state changed. Status:\"\n\t\t\t\t\t\t\t+ orderState.m_status);\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(updatedOrder.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(updatedOrder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testBlock() throws HyperLedgerException, IOException {\n        Block b1 =\n                Block.fromWireDump(\"\", formatter, BitcoinHeader.class);\n        assertTrue(b1.getID().equals(new BID(\"0000000000000449ee5b94ba7a051caffff5c23d6a03335f6e20e3985b5ffa61\")));\n        Block b2 = Block.fromWireDump(b1.toWireDump(), formatter, BitcoinHeader.class);\n        assertTrue(b1.getID().equals(b2.getID()));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate <E> void buildElements(ReadableDocument<? super E, E, ?> doc, E e, List<E> els) {\n    E child = DocHelper.getFirstChildElement(doc, e);\n    while (child != null) {\n      els.add(child);\n      buildElements(doc, child, els);\n      child = DocHelper.getNextSiblingElement(doc, child);\n    }\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprotected void systemLoader(Context context)\n\t{\n\t\tif (RockySdk.getInstance().getContext() != null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tContext application = context.getApplicationContext();\n\t\t\n\t\tWebView webview = new WebView(context);\n\t\twebview.layout(0, 0, 0, 0);\n\t\tWebSettings webSettings = webview.getSettings();\n\t\t\n\t\tApplicationInfo applicationInfo = context.getApplicationInfo();\n\t\t\n\t\tVersionInfo versionInfo = ManifestTools.getVersionInfo(application);\n\t\tString userAgent = webSettings.getUserAgentString();\n\t\t\n\t\tClientInfo clientInfo = new ClientInfo(application.getPackageName());\n\t\tclientInfo.setAppicon(applicationInfo.icon);\n\t\tclientInfo.setAppname(ManifestTools.getApplicationLable(application));\n\t\tclientInfo.setDeviceType(SdkConfig.Device.PHONE);\n\t\tclientInfo.setDeviceName(android.os.Build.MODEL);\n\t\tclientInfo.setAlias(android.os.Build.MODEL);\n\t\tclientInfo.setSdkVersion(android.os.Build.VERSION.SDK_INT);\n\t\tclientInfo.setMac(DeviceInfoManager.getMacAddress(application));\n\t\t\n\t\tclientInfo.setUserAgent(userAgent);\n\t\t\n\t\tif (versionInfo != null)\n\t\t{\n\t\t\tclientInfo.setVersionCode(versionInfo.getVersionCode());\n\t\t\tclientInfo.setVersionName(versionInfo.getVersionName());\n\t\t}\n\t\t\n\t\tclientInfo.addFlags(ClientInfo.FLAG_DEBUG | ClientInfo.FLAG_RELEASE);\n\t\t\n\t\tRockyConfig config = new RockyConfig.Builder(application)\n\t\t\t.clientInfo(clientInfo)\n\t\t\t.hasAdBanner(false)\t\t// \u93c4\u5267\u305a\u7ec9\ue21a\u578eBanner\n\t\t\t.hasAdPointsWall(true)\t// \u93c4\u5267\u305a\u7ec9\ue21a\u578e\u6fa7\n\t\t\t.build();\n\t\t\n\t\tRockySdk.getInstance().init(config);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprivate void completeAddAppWidget(Intent data, CellLayout.CellInfo cellInfo) {\n\t\tBundle extras = data.getExtras();\n\t\tint appWidgetId = extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID, -1);\n\n\t\tLog.d(LOG_TAG, \"dumping extras content=\" + extras.toString());\n\n\t\tAppWidgetProviderInfo appWidgetInfo = appWidgetManager.getAppWidgetInfo(appWidgetId);\n\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate Expression readCondition() {\n        if (readIf(\"NOT\")) {\n            return new ConditionNot(readCondition());\n        }\n        if (readIf(\"EXISTS\")) {\n            read(\"(\");\n            Query query = parseSelect();\n            read(\")\");\n            return new ConditionExists(query);\n        }\n        Expression r = readConcat();\n        while (true) {\n            int backup = parseIndex;\n            boolean not = false;\n            if (readIf(\"NOT\")) {\n                not = true;\n                if (isToken(\"NULL\")) {\n                    parseIndex = backup;\n                    currentToken = \"NOT\";\n                    break;\n                }\n            }\n            if (readIf(\"LIKE\")) {\n                Expression b = readConcat();\n                Expression esc = null;\n                if (readIf(\"ESCAPE\")) {\n                    esc = readConcat();\n                }\n                recompileAlways = true;\n                r = new CompareLike(database, r, b, esc, false);\n            } else if (readIf(\"REGEXP\")) {\n                Expression b = readConcat();\n                r = new CompareLike(database, r, b, null, true);\n            } else if (readIf(\"IS\")) {\n                if (readIf(\"NOT\")) {\n                    if (readIf(\"NULL\")) {\n                        r = new Comparison(session, Comparison.IS_NOT_NULL, r,\n                                null);\n                    } else if (readIf(\"DISTINCT\")) {\n                        read(\"FROM\");\n                        r = new Comparison(session, Comparison.EQUAL_NULL_SAFE,\n                                r, readConcat());\n                    } else {\n                        r = new Comparison(session,\n                                Comparison.NOT_EQUAL_NULL_SAFE, r, readConcat());\n                    }\n                } else if (readIf(\"NULL\")) {\n                    r = new Comparison(session, Comparison.IS_NULL, r, null);\n                } else if (readIf(\"DISTINCT\")) {\n                    read(\"FROM\");\n                    r = new Comparison(session, Comparison.NOT_EQUAL_NULL_SAFE,\n                            r, readConcat());\n                } else {\n                    r = new Comparison(session, Comparison.EQUAL_NULL_SAFE, r,\n                            readConcat());\n                }\n            } else if (readIf(\"IN\")) {\n                read(\"(\");\n                if (readIf(\")\")) {\n                    r = ValueExpression.get(ValueBoolean.get(false));\n                } else {\n                    if (isSelect()) {\n                        Query query = parseSelect();\n                        r = new ConditionInSelect(database, r, query, false,\n                                Comparison.EQUAL);\n                    } else {\n                        ArrayList<Expression> v = New.arrayList();\n                        Expression last;\n                        do {\n                            last = readExpression();\n                            v.add(last);\n                        } while (readIf(\",\"));\n                        if (v.size() == 1 && (last instanceof Subquery)) {\n                            Subquery s = (Subquery) last;\n                            Query q = s.getQuery();\n                            r = new ConditionInSelect(database, r, q, false,\n                                    Comparison.EQUAL);\n                        } else {\n                            r = new ConditionIn(database, r, v);\n                        }\n                    }\n                    read(\")\");\n                }\n            } else if (readIf(\"BETWEEN\")) {\n                Expression low = readConcat();\n                read(\"AND\");\n                Expression high = readConcat();\n                Expression condLow = new Comparison(session,\n                        Comparison.SMALLER_EQUAL, low, r);\n                Expression condHigh = new Comparison(session,\n                        Comparison.BIGGER_EQUAL, high, r);\n                r = new ConditionAndOr(ConditionAndOr.AND, condLow, condHigh);\n            } else {\n                int compareType = getCompareType(currentTokenType);\n                if (compareType < 0) {\n                    break;\n                }\n                read();\n                if (readIf(\"ALL\")) {\n                    read(\"(\");\n                    Query query = parseSelect();\n                    r = new ConditionInSelect(database, r, query, true,\n                            compareType);\n                    read(\")\");\n                } else if (readIf(\"ANY\") || readIf(\"SOME\")) {\n                    read(\"(\");\n                    Query query = parseSelect();\n                    r = new ConditionInSelect(database, r, query, false,\n                            compareType);\n                    read(\")\");\n                } else {\n                    Expression right = readConcat();\n                    if (SysProperties.OLD_STYLE_OUTER_JOIN &&\n                            readIf(\"(\") && readIf(\"+\") && readIf(\")\")) {\n                        if (r instanceof ExpressionColumn &&\n                                right instanceof ExpressionColumn) {\n                            ExpressionColumn leftCol = (ExpressionColumn) r;\n                            ExpressionColumn rightCol = (ExpressionColumn) right;\n                            ArrayList<TableFilter> filters = currentSelect\n                                    .getTopFilters();\n                            for (TableFilter f : filters) {\n                                while (f != null) {\n                                    leftCol.mapColumns(f, 0);\n                                    rightCol.mapColumns(f, 0);\n                                    f = f.getJoin();\n                                }\n                            }\n                            TableFilter leftFilter = leftCol.getTableFilter();\n                            TableFilter rightFilter = rightCol.getTableFilter();\n                            r = new Comparison(session, compareType, r, right);\n                            if (leftFilter != null && rightFilter != null) {\n                                int idx = filters.indexOf(rightFilter);\n                                if (idx >= 0) {\n                                    filters.remove(idx);\n                                    leftFilter.addJoin(rightFilter, true,\n                                            false, r);\n                                } else {\n                                    rightFilter.mapAndAddFilter(r);\n                                }\n                                r = ValueExpression.get(ValueBoolean.get(true));\n                            }\n                        }\n                    } else {\n                        r = new Comparison(session, compareType, r, right);\n                    }\n                }\n            }\n            if (not) {\n                r = new ConditionNot(r);\n            }\n        }\n        return r;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static String getCertificateFriendlyName(X509Certificate cert) {\n        X500Principal principal = cert.getSubjectX500Principal();\n        byte[] encodedSubject = principal.getEncoded();\n        String friendlyName=null;\n\n        \n        Exception exp=null;\n        try {\n            @SuppressLint(\"PrivateApi\") Class X509NameClass = Class.forName(\"com.android.org.bouncycastle.asn1.x509.X509Name\");\n            Method getInstance = X509NameClass.getMethod(\"getInstance\",Object.class);\n\n            Hashtable defaultSymbols = (Hashtable) X509NameClass.getField(\"DefaultSymbols\").get(X509NameClass);\n\n            if (!defaultSymbols.containsKey(\"1.2.840.113549.1.9.1\"))\n                defaultSymbols.put(\"1.2.840.113549.1.9.1\",\"eMail\");\n\n            Object subjectName = getInstance.invoke(X509NameClass, encodedSubject);\n\n            Method toString = X509NameClass.getMethod(\"toString\",boolean.class,Hashtable.class);\n\n            friendlyName= (String) toString.invoke(subjectName,true,defaultSymbols);\n                    \n        } catch (ClassNotFoundException e) {\n            exp =e ;\n        } catch (NoSuchMethodException e) {\n            exp =e;\n        } catch (InvocationTargetException e) {\n            exp =e;\n        } catch (IllegalAccessException e) {\n            exp =e;\n        } catch (NoSuchFieldException e) {\n            exp =e;\n        }\n        if (exp!=null)\n            VpnStatus.logException(\"Getting X509 Name from certificate\", exp);\n\n        \n        if(friendlyName==null)\n            friendlyName = principal.getName();\n\n\n\n        String[] parts = friendlyName.split(\",\");\n        for (int i=0;i<parts.length;i++){\n            String part = parts[i];\n            if (part.startsWith(\"1.2.840.113549.1.9.1=#16\")) {\n                parts[i] = \"email=\" + ia5decode(part.replace(\"1.2.840.113549.1.9.1=#16\", \"\"));\n            }\n        }\n        friendlyName = TextUtils.join(\",\", parts);\n        return friendlyName;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintWriter writer, boolean suppressLogin, char eolMarker, boolean showDirection)\n    {\n        __writer = writer;\n        __nologin = suppressLogin;\n        __eolMarker = eolMarker;\n        __directionMarker = showDirection;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void testParameterTypes() throws Exception {\n        Response<String> response = webb\n                .get(\"/parameter-types\")\n                .param(\"string\", SIMPLE_ASCII)\n                .param(\"number\", 815)\n                .param(\"number\", 4711) // test overwrite feature of multiple calls with same name\n                .param(\"null\", null)\n                .param(\"empty\", \"\")\n                .asString();\n\n        assertEquals(204, response.getStatusCode());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void appendReplacement(StringBuffer sb, Matcher m)\n\t{\n\t\tString key = m.group(1), value;\n\t\tint ascii;\n\t\t\n\t\tif ((value = m_tags.get(key.toLowerCase())) != null)\n\t\t\tm.appendReplacement(sb, value);\n\t\telse if ((ascii = getASCII(key)) != -1)\n\t\t\tm.appendReplacement(sb, Character.toString((char)ascii));\n\t\telse\n\t\t\tm.appendReplacement(sb, m.group());\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        return CharacterData.of(codePoint).isIdentifierIgnorable(codePoint);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Vector4 multiplyLocal(final ReadOnlyVector4 scale) {\n        return set(getX() * scale.getX(), getY() * scale.getY(), getZ() * scale.getZ(), getW() * scale.getW());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\tpublic PsiBuilder.Marker parseAndDone(ShaderLabParserBuilder builder, @NotNull PsiBuilder.Marker mark)\n\t{\n\t\tif(myFirstRole.parseAndDone(builder, builder.mark()) != null)\n\t\t{\n\t\t\tPsiBuilder.Marker secondMark = builder.mark();\n\t\t\tif(mySecondRole.parseAndDone(builder, secondMark) == null)\n\t\t\t{\n\t\t\t\tsecondMark.error(\"Expected second value\");\n\t\t\t}\n\t\t}\n\n\t\tmark.done(ShaderLabElements.PAIR_VALUE);\n\t\treturn mark;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void testMultipleUnknown() throws Exception\n    {\n        ThreeField threeField = new ThreeField();\n        threeField.setF1(1);\n        threeField.setF2(2);\n        threeField.setF3(3);\n\n        ProtobufSchema schemaWith3 = MAPPER.generateSchemaFor(ThreeField.class);\n        byte[] in = MAPPER.writer(schemaWith3)\n                .writeValueAsBytes(threeField);\n\n        ProtobufSchema schemaWith1 = MAPPER.generateSchemaFor(OneField.class);\n        OneField oneField = MAPPER.readerFor(OneField.class).with(schemaWith1)\n                .with(JsonParser.Feature.IGNORE_UNDEFINED)\n                .readValue(in);\n\n        assertEquals(threeField.getF3(), oneField.f3);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void renderImageXform(SunGraphics2D sg, Image img,\n                                    AffineTransform tx, int interpType,\n                                    int sx1, int sy1, int sx2, int sy2,\n                                    Color bgColor)\n    {\n        if (interpType != AffineTransformOp.TYPE_BICUBIC) {\n            SurfaceData dstData = sg.surfaceData;\n            SurfaceData srcData =\n                dstData.getSourceSurfaceData(img,\n                                             sg.TRANSFORM_GENERIC,\n                                             sg.imageComp,\n                                             bgColor);\n\n            if (srcData != null &&\n                !isBgOperation(srcData, bgColor) &&\n                (srcData.getSurfaceType() == OGLSurfaceData.OpenGLTexture ||\n                 srcData.getSurfaceType() == OGLSurfaceData.OpenGLSurfaceRTT ||\n                 interpType == AffineTransformOp.TYPE_NEAREST_NEIGHBOR))\n            {\n                SurfaceType srcType = srcData.getSurfaceType();\n                SurfaceType dstType = dstData.getSurfaceType();\n                TransformBlit blit = TransformBlit.getFromCache(srcType,\n                                                                sg.imageComp,\n                                                                dstType);\n\n                if (blit != null) {\n                    blit.Transform(srcData, dstData,\n                                   sg.composite, sg.getCompClip(),\n                                   tx, interpType,\n                                   sx1, sy1, 0, 0, sx2-sx1, sy2-sy1);\n                    return;\n                }\n            }\n        }\n\n        super.renderImageXform(sg, img, tx, interpType,\n                               sx1, sy1, sx2, sy2, bgColor);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate String endCapture() {\n            int end = current == -1 ? index : index - 1;\n            String captured;\n            if (captureBuffer.length() > 0) {\n                captureBuffer.append(json.substring(captureStart, end));\n                captured = captureBuffer.toString();\n                captureBuffer.setLength(0);\n            } else {\n                captured = json.substring(captureStart, end);\n            }\n            captureStart = -1;\n            return captured;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Kernel(int width, int height, float data[]) {\n        this.width  = width;\n        this.height = height;\n        this.xOrigin  = (width-1)>>1;\n        this.yOrigin  = (height-1)>>1;\n        int len = width*height;\n        if (data.length < len) {\n            throw new IllegalArgumentException(\"Data array too small \"+\n                                               \"(is \"+data.length+\n                                               \" and should be \"+len);\n        }\n        this.data = new float[len];\n        System.arraycopy(data, 0, this.data, 0, len);\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic ShortcutView(final Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t\tpm = context.getPackageManager();\n\t\t\n\t\tsec = PreferenceManager.getDefaultSharedPreferences(getContext());\n\n\t\tpkg = sec.getString(\"pkg\", \"\");\n\t\tpin = sec.getString(\"pin\", \"\");\t\t\n\t\t\n\t\t\n\t\tfor (int i = 0; i < CAPACITY; i++) {\n\t\t\tfinal int b = i;\n\t\t\tApplicationInfo ai = null;\n\t\t\tString sv = null;\n\t\t\tString s = Settings.System.getString(context.getContentResolver(), \"PiSC\" + i);\n\n\t\t\tif (s == null | s == \"\") {\n\n\t\t\t\tSettings.System.putString(context.getContentResolver(), \"PiSC\"+b, \"com.pilockerstable\");\n\t\t\t}\n\t\t\tsv = s;\n\n\t\t\ttry {\n\t\t\t\tai = pm.getApplicationInfo(sv, 0);\n\t\t\t} catch (NameNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tShortCut sc = new ShortCut(context, attrs);\n\t\t\tString App_Name = (String) pm.getApplicationLabel(ai);\n\t\t\tDrawable Icon = pm.getApplicationIcon(ai);\n\t\t\tShortcutter st = new Shortcutter(App_Name, Icon);\n\t\t\tsc.setName(st.getName());\n\t\t\tsc.setImage(st.getIcon());\n\n\t\t\taddView(sc);\n\t\t\tsc.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t\n\t\t\t\tString sv = Settings.System.getString( context.getContentResolver(), \"PiSC\" + b);\n\n\t\t\t\t@Override \n\t\t\t\tpublic void onClick(View arg0) {\n\n\t\t\t\t\tif( pin.equals(\"\") || pin.equals(null) || pin.isEmpty()) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t((Activity) context).finish();\n\t\t\t\t\t\tIntent i = new Intent();\n\t\t\t\t\t\ti.setClass(getContext(), LockerService.class);\n\t\t\t\t\t\tcontext.startService(i);\n\t\t\t\t\t\tIntent LaunchIntent = context.getPackageManager().getLaunchIntentForPackage(sv);\n\t\t\t\t\t\tcontext.startActivity(LaunchIntent);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t} else{\n\t\t\t\t\t\n\t\t\t\t\tsave(\"pkg\", \"true\");\n\t\t\t\t\tIntent x = new Intent(getContext(), PinActivity.class);\n\t\t\t\t\tx.putExtra(\"sv\", sv);\n\t\t\t\t\tcontext.startActivity(x);\n\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Kernel(int width, int height, double factor, double data[]) {\n        this(width, height, (width - 1) / 2, (height - 1) / 2, factor, data);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void onReply(final CharSequence content) {\n        TrackerUtils.onTopicReply();\n\n        doActionRequest(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    RequestHelper.INSTANCE.reply(mTopic, content.toString(), mOnceToken);\n                } catch (ConnectionException | RemoteException e) {\n                    ExecutorUtils.runInUiThread(new Runnable() {\n                        @Override\n                        public void run() {\n                            TopicFragment.this.doActionException(e);\n                        }\n                    });\n                    return;\n                }\n\n                AppCtx.getEventBus().post(new TopicEvent(TopicEvent.TYPE_REPLY));\n            }\n        }, new Function<Future<?>, Void>() {\n            @Override\n            public Void apply(Future<?> future) {\n                if (TopicFragment.this.cancelRequest(future)) {\n                    mReplyForm.setContent(content);\n                    if (!mReplyForm.getVisibility()) {\n                        mReplyForm.toggle();\n                    }\n                }\n                return null;\n            }\n        });\n\n        mReplyForm.setVisibility(false);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic ExternalCarrierBillingInstrumentProto(String instrumentKey, String subscriberIdentifier, String accountType, String subscriberCurrency, Long transactionLimit, String subscriberName, String address1, String address2, String city, String state, String postalCode, String country, EncryptedSubscriberInfo encryptedSubscriberInfo) {\n    this.instrumentKey = instrumentKey;\n    this.subscriberIdentifier = subscriberIdentifier;\n    this.accountType = accountType;\n    this.subscriberCurrency = subscriberCurrency;\n    this.transactionLimit = transactionLimit;\n    this.subscriberName = subscriberName;\n    this.address1 = address1;\n    this.address2 = address2;\n    this.city = city;\n    this.state = state;\n    this.postalCode = postalCode;\n    this.country = country;\n    this.encryptedSubscriberInfo = encryptedSubscriberInfo;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprotected void printMethods (       IndentingWriter writer,\n                                        boolean useQualifiedNames,\n                                        boolean useIDLNames,\n                                        boolean globalIDLNames) throws IOException {\n\n        CompoundType.Method[] methods = getMethods();\n\n        for (int m = 0; m < methods.length; m++) {\n            CompoundType.Method theMethod = methods[m];\n            printMethod(theMethod,writer,useQualifiedNames,useIDLNames,globalIDLNames);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public String getReplyString()\n    {\n        StringBuilder buffer = new StringBuilder(256);\n        for (String s : _replyLines)\n        {\n            buffer.append(s);\n            buffer.append(SocketClient.NETASCII_EOL);\n        }\n\n        return buffer.toString();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate Component buildHeader() {\n        HorizontalLayout header = new HorizontalLayout();\n        header.addStyleName(\"viewheader\");\n        header.setSpacing(true);\n\n        titleLabel = new Label(\"Dashboard\");\n        titleLabel.setId(TITLE_ID);\n        titleLabel.setSizeUndefined();\n        titleLabel.addStyleName(ValoTheme.LABEL_H1);\n        titleLabel.addStyleName(ValoTheme.LABEL_NO_MARGIN);\n        header.addComponent(titleLabel);\n\n        notificationsButton = buildNotificationsButton();\n        Component edit = buildEditButton();\n        HorizontalLayout tools = new HorizontalLayout(notificationsButton, edit);\n        tools.setSpacing(true);\n        tools.addStyleName(\"toolbar\");\n        header.addComponent(tools);\n\n        return header;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void systemLoader()\n\t\t{\n\t\t\t\n\t\t\tlong loginCount = mXPref.getUseTotalCount();\n\t\t\tmXPref.putUseTotalCount(loginCount + 1); // Login count++\n\t\t\t\n\t\t\tmXPref.putUseDayCount(mXPref.getUseDayCount() + 1);\t\t\t\n\t\t\t\n\t\t\tLog.I(TAG, String.format(\"Entry %1s %2s Times.\", getString(R.string.app_name), loginCount));\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testAs() {\n        XCriteriaBuilder cb = entityManagerFactory.getCriteriaBuilder();\n        XCriteriaQuery<Tuple> cq = cb.createTupleQuery();\n        XRoot<SaleTransaction> saleTransaction = cq.from(SaleTransaction.class);\n        cq\n        .groupBy(\n                saleTransaction.join(SaleTransaction_.buyer).get(Customer_.name),\n                saleTransaction.join(SaleTransaction_.product).get(Product_.name)\n        )\n        .orderBy(\n                cb.asc(saleTransaction.join(SaleTransaction_.buyer).get(Customer_.name)),\n                cb.asc(saleTransaction.join(SaleTransaction_.product).get(Product_.name))\n        )\n        .multiselect(\n                saleTransaction.get(SaleTransaction_.buyer).get(Customer_.name).alias(\"customer\"),\n                saleTransaction.get(SaleTransaction_.product).get(Product_.name).alias(\"product\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(int.class)\n                .alias(\"totalIntPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(long.class)\n                .alias(\"totalLongPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(float.class)\n                .alias(\"totalFloatPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(double.class)\n                .alias(\"totalDoublePrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(Integer.class)\n                .alias(\"totalNullableIntPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(Long.class)\n                .alias(\"totalNullableLongPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(Float.class)\n                .alias(\"totalNullableFloatPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(Double.class)\n                .alias(\"totalNullableDoublePrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(BigInteger.class)\n                .alias(\"totalBigIntegerPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(BigDecimal.class)\n                .alias(\"totalBigDecimalPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(short.class)\n                .alias(\"totalShortWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(int.class)\n                .alias(\"totalIntWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(long.class)\n                .alias(\"totalLongWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(float.class)\n                .alias(\"totalFloatWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(double.class)\n                .alias(\"totalDoubleWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(Short.class)\n                .alias(\"totalNullableShortWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(Integer.class)\n                .alias(\"totalNullableIntWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(Long.class)\n                .alias(\"totalNullableLongWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(Float.class)\n                .alias(\"totalNullableFloatWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(Double.class)\n                .alias(\"totalNullableDoubleWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(BigInteger.class)\n                .alias(\"totalBigIntegerWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(BigDecimal.class)\n                .alias(\"totalBigDecimalWeight\")\n        );\n        \n        List<Tuple> tuples = this.entityManager.createQuery(cq).getResultList();\n        Assert.assertEquals(5, tuples.size());\n        \n        Assert.assertEquals(\"Howard\", (String)tuples.get(0).get(\"customer\"));\n        Assert.assertEquals(\"ADUI-A8\", (String)tuples.get(0).get(\"product\"));\n        Assert.assertEquals(2620000 * 2 - 1280000, ((Integer)tuples.get(0).get(\"totalIntPrice\")).intValue());\n        Assert.assertEquals(2620000L * 2 - 1280000, ((Long)tuples.get(0).get(\"totalLongPrice\")).longValue());\n        Assert.assertEquals(2620000F * 2 - 1280000, ((Float)tuples.get(0).get(\"totalFloatPrice\")).floatValue());\n        Assert.assertEquals(2620000D * 2 - 1280000, ((Double)tuples.get(0).get(\"totalDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2620000 * 2 - 1280000, ((Integer)tuples.get(0).get(\"totalNullableIntPrice\")).intValue());\n        Assert.assertEquals(2620000L * 2 - 1280000, ((Long)tuples.get(0).get(\"totalNullableLongPrice\")).longValue());\n        Assert.assertEquals(2620000F * 2 - 1280000, ((Float)tuples.get(0).get(\"totalNullableFloatPrice\")).floatValue());\n        Assert.assertEquals(2620000D * 2 - 1280000, ((Double)tuples.get(0).get(\"totalNullableDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2620000L * 2 - 1280000, ((BigInteger)tuples.get(0).get(\"totalBigIntegerPrice\")).longValue());\n        Assert.assertEquals(2620000L * 2 - 1280000, ((BigDecimal)tuples.get(0).get(\"totalBigDecimalPrice\")).longValue());\n        Assert.assertEquals((short)2185, ((Short)tuples.get(0).get(\"totalShortWeight\")).shortValue());\n        Assert.assertEquals(2185, ((Integer)tuples.get(0).get(\"totalIntWeight\")).intValue());\n        Assert.assertEquals(2185L, ((Long)tuples.get(0).get(\"totalLongWeight\")).longValue());\n        Assert.assertEquals(2185F, ((Float)tuples.get(0).get(\"totalFloatWeight\")).floatValue());\n        Assert.assertEquals(2185D, ((Double)tuples.get(0).get(\"totalDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals((short)2185, ((Short)tuples.get(0).get(\"totalNullableShortWeight\")).shortValue());\n        Assert.assertEquals(2185, ((Integer)tuples.get(0).get(\"totalNullableIntWeight\")).intValue());\n        Assert.assertEquals(2185L, ((Long)tuples.get(0).get(\"totalNullableLongWeight\")).longValue());\n        Assert.assertEquals(2185F, ((Float)tuples.get(0).get(\"totalNullableFloatWeight\")).floatValue());\n        Assert.assertEquals(2185D, ((Double)tuples.get(0).get(\"totalNullableDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2185L, ((BigInteger)tuples.get(0).get(\"totalBigIntegerWeight\")).longValue());\n        Assert.assertEquals(2185L, ((BigDecimal)tuples.get(0).get(\"totalBigDecimalWeight\")).longValue());\n        \n        Assert.assertEquals(\"Howard\", (String)tuples.get(1).get(\"customer\"));\n        Assert.assertEquals(\"Aventador LP700-4\", (String)tuples.get(1).get(\"product\"));\n        Assert.assertEquals(7354000, ((Integer)tuples.get(1).get(\"totalIntPrice\")).intValue());\n        Assert.assertEquals(7354000L, ((Long)tuples.get(1).get(\"totalLongPrice\")).longValue());\n        Assert.assertEquals(7354000F, ((Float)tuples.get(1).get(\"totalFloatPrice\")).floatValue());\n        Assert.assertEquals(7354000D, ((Double)tuples.get(1).get(\"totalDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(7354000, ((Integer)tuples.get(1).get(\"totalNullableIntPrice\")).intValue());\n        Assert.assertEquals(7354000L, ((Long)tuples.get(1).get(\"totalNullableLongPrice\")).longValue());\n        Assert.assertEquals(7354000F, ((Float)tuples.get(1).get(\"totalNullableFloatPrice\")).floatValue());\n        Assert.assertEquals(7354000D, ((Double)tuples.get(1).get(\"totalNullableDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(7354000L, ((BigInteger)tuples.get(1).get(\"totalBigIntegerPrice\")).longValue());\n        Assert.assertEquals(7354000L, ((BigDecimal)tuples.get(1).get(\"totalBigDecimalPrice\")).longValue());\n        Assert.assertEquals((short)1585, ((Short)tuples.get(1).get(\"totalShortWeight\")).shortValue());\n        Assert.assertEquals(1585, ((Integer)tuples.get(1).get(\"totalIntWeight\")).intValue());\n        Assert.assertEquals(1585L, ((Long)tuples.get(1).get(\"totalLongWeight\")).longValue());\n        Assert.assertEquals(1585F, ((Float)tuples.get(1).get(\"totalFloatWeight\")).floatValue());\n        Assert.assertEquals(1585D, ((Double)tuples.get(1).get(\"totalDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals((short)1585, ((Short)tuples.get(1).get(\"totalNullableShortWeight\")).shortValue());\n        Assert.assertEquals(1585, ((Integer)tuples.get(1).get(\"totalNullableIntWeight\")).intValue());\n        Assert.assertEquals(1585L, ((Long)tuples.get(1).get(\"totalNullableLongWeight\")).longValue());\n        Assert.assertEquals(1585F, ((Float)tuples.get(1).get(\"totalNullableFloatWeight\")).floatValue());\n        Assert.assertEquals(1585D, ((Double)tuples.get(1).get(\"totalNullableDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(1585L, ((BigInteger)tuples.get(1).get(\"totalBigIntegerWeight\")).longValue());\n        Assert.assertEquals(1585L, ((BigDecimal)tuples.get(1).get(\"totalBigDecimalWeight\")).longValue());\n        \n        Assert.assertEquals(\"Howard\", (String)tuples.get(2).get(\"customer\"));\n        Assert.assertEquals(\"BENZ-S\", (String)tuples.get(2).get(\"product\"));\n        Assert.assertEquals(3612000, ((Integer)tuples.get(2).get(\"totalIntPrice\")).intValue());\n        Assert.assertEquals(3612000L, ((Long)tuples.get(2).get(\"totalLongPrice\")).longValue());\n        Assert.assertEquals(3612000F, ((Float)tuples.get(2).get(\"totalFloatPrice\")).floatValue());\n        Assert.assertEquals(3612000D, ((Double)tuples.get(2).get(\"totalDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(3612000, ((Integer)tuples.get(2).get(\"totalNullableIntPrice\")).intValue());\n        Assert.assertEquals(3612000L, ((Long)tuples.get(2).get(\"totalNullableLongPrice\")).longValue());\n        Assert.assertEquals(3612000F, ((Float)tuples.get(2).get(\"totalNullableFloatPrice\")).floatValue());\n        Assert.assertEquals(3612000D, ((Double)tuples.get(2).get(\"totalNullableDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(3612000L, ((BigInteger)tuples.get(2).get(\"totalBigIntegerPrice\")).longValue());\n        Assert.assertEquals(3612000L, ((BigDecimal)tuples.get(2).get(\"totalBigDecimalPrice\")).longValue());\n        Assert.assertEquals((short)2250, ((Short)tuples.get(2).get(\"totalShortWeight\")).shortValue());\n        Assert.assertEquals(2250, ((Integer)tuples.get(2).get(\"totalIntWeight\")).intValue());\n        Assert.assertEquals(2250L, ((Long)tuples.get(2).get(\"totalLongWeight\")).longValue());\n        Assert.assertEquals(2250F, ((Float)tuples.get(2).get(\"totalFloatWeight\")).floatValue());\n        Assert.assertEquals(2250D, ((Double)tuples.get(2).get(\"totalDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals((short)2250, ((Short)tuples.get(2).get(\"totalNullableShortWeight\")).shortValue());\n        Assert.assertEquals(2250, ((Integer)tuples.get(2).get(\"totalNullableIntWeight\")).intValue());\n        Assert.assertEquals(2250L, ((Long)tuples.get(2).get(\"totalNullableLongWeight\")).longValue());\n        Assert.assertEquals(2250F, ((Float)tuples.get(2).get(\"totalNullableFloatWeight\")).floatValue());\n        Assert.assertEquals(2250D, ((Double)tuples.get(2).get(\"totalNullableDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2250L, ((BigInteger)tuples.get(2).get(\"totalBigIntegerWeight\")).longValue());\n        Assert.assertEquals(2250L, ((BigDecimal)tuples.get(2).get(\"totalBigDecimalWeight\")).longValue());\n        \n        Assert.assertEquals(\"Jim\", (String)tuples.get(3).get(\"customer\"));\n        Assert.assertEquals(\"ADUI-A8\", (String)tuples.get(3).get(\"product\"));\n        Assert.assertEquals(2611000 * 4, ((Integer)tuples.get(3).get(\"totalIntPrice\")).intValue());\n        Assert.assertEquals(2611000L * 4, ((Long)tuples.get(3).get(\"totalLongPrice\")).longValue());\n        Assert.assertEquals(2611000F * 4, ((Float)tuples.get(3).get(\"totalFloatPrice\")).floatValue());\n        Assert.assertEquals(2611000D * 4, ((Double)tuples.get(3).get(\"totalDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2611000 * 4, ((Integer)tuples.get(3).get(\"totalNullableIntPrice\")).intValue());\n        Assert.assertEquals(2611000L * 4, ((Long)tuples.get(3).get(\"totalNullableLongPrice\")).longValue());\n        Assert.assertEquals(2611000F * 4, ((Float)tuples.get(3).get(\"totalNullableFloatPrice\")).floatValue());\n        Assert.assertEquals(2611000D * 4, ((Double)tuples.get(3).get(\"totalNullableDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2611000L * 4, ((BigInteger)tuples.get(3).get(\"totalBigIntegerPrice\")).longValue());\n        Assert.assertEquals(2611000L * 4, ((BigDecimal)tuples.get(3).get(\"totalBigDecimalPrice\")).longValue());\n        Assert.assertEquals((short)(2185 * 4), ((Short)tuples.get(3).get(\"totalShortWeight\")).shortValue());\n        Assert.assertEquals(2185 * 4, ((Integer)tuples.get(3).get(\"totalIntWeight\")).intValue());\n        Assert.assertEquals(2185L * 4, ((Long)tuples.get(3).get(\"totalLongWeight\")).longValue());\n        Assert.assertEquals(2185F * 4, ((Float)tuples.get(3).get(\"totalFloatWeight\")).floatValue());\n        Assert.assertEquals(2185D * 4, ((Double)tuples.get(3).get(\"totalDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals((short)(2185 * 4), ((Short)tuples.get(3).get(\"totalNullableShortWeight\")).shortValue());\n        Assert.assertEquals(2185 * 4, ((Integer)tuples.get(3).get(\"totalNullableIntWeight\")).intValue());\n        Assert.assertEquals(2185L * 4, ((Long)tuples.get(3).get(\"totalNullableLongWeight\")).longValue());\n        Assert.assertEquals(2185F * 4, ((Float)tuples.get(3).get(\"totalNullableFloatWeight\")).floatValue());\n        Assert.assertEquals(2185D * 4, ((Double)tuples.get(3).get(\"totalNullableDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2185L * 4, ((BigInteger)tuples.get(3).get(\"totalBigIntegerWeight\")).longValue());\n        Assert.assertEquals(2185L * 4, ((BigDecimal)tuples.get(3).get(\"totalBigDecimalWeight\")).longValue());\n        \n        Assert.assertEquals(\"Smith\", (String)tuples.get(4).get(\"customer\"));\n        Assert.assertEquals(\"BENZ-S\", (String)tuples.get(4).get(\"product\"));\n        Assert.assertEquals(3582000 * 3, ((Integer)tuples.get(4).get(\"totalIntPrice\")).intValue());\n        Assert.assertEquals(3582000L * 3, ((Long)tuples.get(4).get(\"totalLongPrice\")).longValue());\n        Assert.assertEquals(3582000F * 3, ((Float)tuples.get(4).get(\"totalFloatPrice\")).floatValue());\n        Assert.assertEquals(3582000D * 3, ((Double)tuples.get(4).get(\"totalDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(3582000 * 3, ((Integer)tuples.get(4).get(\"totalNullableIntPrice\")).intValue());\n        Assert.assertEquals(3582000L * 3, ((Long)tuples.get(4).get(\"totalNullableLongPrice\")).longValue());\n        Assert.assertEquals(3582000F * 3, ((Float)tuples.get(4).get(\"totalNullableFloatPrice\")).floatValue());\n        Assert.assertEquals(3582000D * 3, ((Double)tuples.get(4).get(\"totalNullableDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(3582000L * 3, ((BigInteger)tuples.get(4).get(\"totalBigIntegerPrice\")).longValue());\n        Assert.assertEquals(3582000L * 3, ((BigDecimal)tuples.get(4).get(\"totalBigDecimalPrice\")).longValue());\n        Assert.assertEquals((short)(2250 * 3), ((Short)tuples.get(4).get(\"totalShortWeight\")).shortValue());\n        Assert.assertEquals(2250 * 3, ((Integer)tuples.get(4).get(\"totalIntWeight\")).intValue());\n        Assert.assertEquals(2250L * 3, ((Long)tuples.get(4).get(\"totalLongWeight\")).longValue());\n        Assert.assertEquals(2250F * 3, ((Float)tuples.get(4).get(\"totalFloatWeight\")).floatValue());\n        Assert.assertEquals(2250D * 3, ((Double)tuples.get(4).get(\"totalDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals((short)(2250 * 3), ((Short)tuples.get(4).get(\"totalNullableShortWeight\")).shortValue());\n        Assert.assertEquals(2250 * 3, ((Integer)tuples.get(4).get(\"totalNullableIntWeight\")).intValue());\n        Assert.assertEquals(2250L * 3, ((Long)tuples.get(4).get(\"totalNullableLongWeight\")).longValue());\n        Assert.assertEquals(2250F * 3, ((Float)tuples.get(4).get(\"totalNullableFloatWeight\")).floatValue());\n        Assert.assertEquals(2250D * 3, ((Double)tuples.get(4).get(\"totalNullableDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2250L * 3, ((BigInteger)tuples.get(4).get(\"totalBigIntegerWeight\")).longValue());\n        Assert.assertEquals(2250L * 3, ((BigDecimal)tuples.get(4).get(\"totalBigDecimalWeight\")).longValue());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters) {\n        api = this.filterApiString(api);\n        Type type = this.defineApiType(api);\n        api = this.appendGetArgs(api, filters);\n\n        try {\n\n            Request resource;\n            HttpResponse response;\n            String klass, content;\n\n            switch (rest) {\n                case GET:\n                    response = wrapper.get(Request.to(api));\n\n                    if (response.getStatusLine().getStatusCode() == 303) { // recursive better?\n                        api = (String) (response.getFirstHeader(\"Location\").getValue() + \".json\").replace(\"https://api.soundcloud.com\", \"\");\n                        response = wrapper.get(Request.to(api));\n                    }\n\n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String) (Http.formatJSON(Http.getString(response))).trim();\n\n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n\n                            if (data.size() > 0) {\n                                switch (type) {\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default:\n                                        return null;\n                                }\n\n                            }\n\n                        } else {\n\n                            switch (type) {\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default:\n                                    return null;\n                            }\n\n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    break;\n                case POST:\n\n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.') + 1));\n\n                    if (klass.equals(\"Track\")) {\n                        Track track = ((Track) value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE, track.getTitle())\n                                .add(Params.Track.TAG_LIST, track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA, new File(track.asset_data));\n                    } else if (klass.equals(\"Comment\")) {\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\" + content + \"}\";\n                        resource = Request.to(api.replace(\".json\", \"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n\n                    response = wrapper.post(resource);\n\n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String) (Http.formatJSON(Http.getString(response))).trim();\n                        switch (type) {\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default:\n                                return null;\n                        }\n\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n\n                    break;\n                case PUT:\n\n                    if (value != null) {\n\n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.') + 1));\n\n                        content = gson.toJson(value);\n\n                        if (klass.equals(\"User\")) {\n                            content = \"{\\\"user\\\":\" + content + \"}\";\n                        } else if (klass.equals(\"Track\")) {\n                            content = \"{\\\"track\\\":\" + content + \"}\";\n                        } else {\n                            return null;\n                        }\n\n                        resource = Request.to(api.replace(\".json\", \"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\", \"\"));\n                    }\n\n                    response = wrapper.put(resource);\n\n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String) (Http.formatJSON(Http.getString(response))).trim();\n\n                        switch (type) {\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default:\n                                return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n\n                    break;\n                case DELETE:\n                    response = wrapper.delete(Request.to(api));\n\n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static long getLongFromString(String stringVal) throws SQLException {\n        if (StringUtils.isBlank(stringVal)) {\n            return 0;\n        }\n        try {\n            int decimalIndex = stringVal.indexOf(\".\");\n\n            if (decimalIndex != -1) {\n                double valueAsDouble = Double.parseDouble(stringVal);\n                return (long) valueAsDouble;\n            }\n\n            return Long.parseLong(stringVal);\n        } catch (NumberFormatException e) {\n            throw new SQLException(\"Parse integer error:\" + stringVal);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\n\tprivate void topologicalSort( Collection<TopologicalElement> unmarkedNodes, List<Element> sorted ) {\n\n\t\twhile ( !unmarkedNodes.isEmpty() ) {\n\n\t\t\tTopologicalElement node = unmarkedNodes.iterator().next();\n\t\t\ttopologicalVisit( node, unmarkedNodes, sorted, unmarkedNodes.size() );\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void paintIcon(Component c, Graphics g, int x, int y) {\n            AbstractButton b = (AbstractButton) c;\n            ButtonModel model = b.getModel();\n\n            int w = getIconWidth();\n            int h = getIconHeight();\n\n            boolean isPressed = model.isPressed();\n            boolean isArmed = model.isArmed();\n            boolean isEnabled = model.isEnabled();\n            boolean isSelected = model.isSelected();\n\n            boolean checkIn = ((isPressed &&\n                                !isArmed   &&\n                                isSelected) ||\n                               (isPressed &&\n                                isArmed   &&\n                                !isSelected)\n                               ||\n                               (!isPressed  &&\n                                isArmed    &&\n                                isSelected  ||\n                                (!isPressed &&\n                                 !isArmed  &&\n                                 isSelected)));\n\n            if (checkIn){\n                g.setColor(shadow);\n                g.drawLine(x+5,y+0,x+8,y+0);\n                g.drawLine(x+3,y+1,x+4,y+1);\n                g.drawLine(x+9,y+1,x+9,y+1);\n                g.drawLine(x+2,y+2,x+2,y+2);\n                g.drawLine(x+1,y+3,x+1,y+3);\n                g.drawLine(x,y+4,x,y+9);\n                g.drawLine(x+1,y+10,x+1,y+10);\n                g.drawLine(x+2,y+11,x+2,y+11);\n                g.setColor(highlight);\n                g.drawLine(x+3,y+12,x+4,y+12);\n                g.drawLine(x+5,y+13,x+8,y+13);\n                g.drawLine(x+9,y+12,x+10,y+12);\n                g.drawLine(x+11,y+11,x+11,y+11);\n                g.drawLine(x+12,y+10,x+12,y+10);\n                g.drawLine(x+13,y+9,x+13,y+4);\n                g.drawLine(x+12,y+3,x+12,y+3);\n                g.drawLine(x+11,y+2,x+11,y+2);\n                g.drawLine(x+10,y+1,x+10,y+1);\n                g.setColor(dot);\n                g.fillRect(x+4,y+5,6,4);\n                g.drawLine(x+5,y+4,x+8,y+4);\n                g.drawLine(x+5,y+9,x+8,y+9);\n            }\n            else {\n                g.setColor(highlight);\n                g.drawLine(x+5,y+0,x+8,y+0);\n                g.drawLine(x+3,y+1,x+4,y+1);\n                g.drawLine(x+9,y+1,x+9,y+1);\n                g.drawLine(x+2,y+2,x+2,y+2);\n                g.drawLine(x+1,y+3,x+1,y+3);\n                g.drawLine(x,y+4,x,y+9);\n                g.drawLine(x+1,y+10,x+1,y+10);\n                g.drawLine(x+2,y+11,x+2,y+11);\n\n                g.setColor(shadow);\n                g.drawLine(x+3,y+12,x+4,y+12);\n                g.drawLine(x+5,y+13,x+8,y+13);\n                g.drawLine(x+9,y+12,x+10,y+12);\n                g.drawLine(x+11,y+11,x+11,y+11);\n                g.drawLine(x+12,y+10,x+12,y+10);\n                g.drawLine(x+13,y+9,x+13,y+4);\n                g.drawLine(x+12,y+3,x+12,y+3);\n                g.drawLine(x+11,y+2,x+11,y+2);\n                g.drawLine(x+10,y+1,x+10,y+1);\n\n            }\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        \n        byte[] byteArray = new byte[bytes.size()]; \n        bytes.getBytes(byteArray, 0);\n        return Utf8Utils.utf8BytesToString(byteArray);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static <N extends RootedDAGNode<N>> List<N> topologicalSort(N root) throws GraphException {\n\t\tList<N> queued = new ArrayList<N>();\n\t\tqueued.add(root);\n\t\tint i=0;\n\t\twhile (i<queued.size()) {\n\t\t\tN n = queued.get(i);\n\t\t\tfor (N c : n.getChildren()) {\n\t\t\t\tif (!queued.contains(c))\n\t\t\t\t\tqueued.add(c);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tCollections.reverse(queued);\n\t\tList<N> sorted = new ArrayList<N>();\n\t\ti = 0;\n\t\twhile (!queued.isEmpty()) {\n\t\t\ti = queued.size()-1;\n\t\t\twhile (i>=0) {\n\t\t\t\tN n = queued.get(i);\n\t\t\t\tboolean allParentsSorted = true;\n\t\t\t\tfor (N p : n.getParents()) {\n\t\t\t\t\tif (!sorted.contains(p)) {\n\t\t\t\t\t\tallParentsSorted = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (allParentsSorted) {\n\t\t\t\t\tsorted.add(queued.remove(i));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tif (i==-1)\n\t\t\t\tthrow new GraphException(\"Cannot produce a topological sort: not a DAG\");\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic boolean handleControlWord(RtfCtrlWordData ctrlWordData) {\n\t\tif(ctrlWordData.ctrlWord.equals(\"blue\")) this.setBlue(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"red\")) this.setRed(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"green\")) this.setGreen(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"cshade\")) this.setShade(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"ctint\")) this.setTint(ctrlWordData.intValue());\n\treturn true;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1],\n                col = (int)val[2];\n            float multiplier = val[3];\n            \n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            table.setVal(row-1, col-1, (Float)table.value(row-1, col-1) * multiplier);\n            return multiplier;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        PartialSufficientSatistics partialSufficientSatistics = PartialSufficientSatistics.createZeroPartialSufficientStatistics(efBayesianNetwork);\n        partialSufficientSatistics.copy(this.sumSS);\n        partialSufficientSatistics.normalize();\n        SufficientStatistics finalSS = efBayesianNetwork.createZeroSufficientStatistics();\n        finalSS.sum(partialSufficientSatistics.getCompoundVector());\n\n        efBayesianNetwork.setMomentParameters(finalSS);\n        return efBayesianNetwork.toBayesianNetwork(dag);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic int\n    normalizeMe() throws IllegalArgumentException {\n        int src;\n        int wordcount = 0;\n        int bitcount  = 0;\n        int v = 0;\n        for ( src= nWords-1 ; src >= 0 && (v=data[src]) == 0 ; src--){\n            wordcount += 1;\n        }\n        if ( src < 0 ){\n            throw new IllegalArgumentException(\"zero value\");\n        }\n        \n        nWords -= wordcount;\n        \n        if ( (v & 0xf0000000) != 0 ){\n            for( bitcount = 32 ; (v & 0xf0000000) != 0 ; bitcount-- )\n                v >>>= 1;\n        } else {\n            while ( v <= 0x000fffff ){\n                v <<= 8;\n                bitcount += 8;\n            }\n            while ( v <= 0x07ffffff ){\n                v <<= 1;\n                bitcount += 1;\n            }\n        }\n        if ( bitcount != 0 )\n            lshiftMe( bitcount );\n        return bitcount;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        \n        byte[] byteArray = new byte[bytes.size()]; \n        bytes.getBytes(byteArray, 0);\n        return Utf8Utils.utf8BytesToString(byteArray);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic ExternalCarrierBillingInstrumentProto(String instrumentKey, String subscriberIdentifier, String accountType, String subscriberCurrency, Long transactionLimit, String subscriberName, String address1, String address2, String city, String state, String postalCode, String country, EncryptedSubscriberInfo encryptedSubscriberInfo) {\n    this.instrumentKey = instrumentKey;\n    this.subscriberIdentifier = subscriberIdentifier;\n    this.accountType = accountType;\n    this.subscriberCurrency = subscriberCurrency;\n    this.transactionLimit = transactionLimit;\n    this.subscriberName = subscriberName;\n    this.address1 = address1;\n    this.address2 = address2;\n    this.city = city;\n    this.state = state;\n    this.postalCode = postalCode;\n    this.country = country;\n    this.encryptedSubscriberInfo = encryptedSubscriberInfo;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\tpublic boolean cleanData(Object[] params) {\n\t\tboolean flag = false;\n\t\tSQLiteDatabase database = null;\n\t\ttry {\n\t\t\tString sql1 = \"delete from blog\";\n\t\t\tString sql2 = \"select * from sqlite_sequence\";\n\t\t\tString sql3 = \"update sqlite_sequence set seq=0 where name = blog\";\n\t\t\tdatabase = helper.getWritableDatabase();\n\t\t\tdatabase.execSQL(sql1, params);\n\t\t\tdatabase.execSQL(sql2, params);\n\t\t\tdatabase.execSQL(sql3, params);\n\t\t\tflag = true;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (database != null) {\n\t\t\t\tdatabase.close();\n\t\t\t}\n\t\t}\n\n\t\treturn flag;\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1],\n                col = (int)val[2];\n            float multiplier = val[3];\n            \n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            table.setVal(row-1, col-1, (Float)table.value(row-1, col-1) * multiplier);\n            return multiplier;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void Bld_all(Bry_bfr bfr, Xoae_page page, List_adp list) {\n\t\tthis.list = list; this.list_len = list.Count();\n\t\thash.Clear();\n\t\tfmtr_grp.Bld_bfr_many(bfr, xtn_mgr.Msg_sidebar_ttl(), xtn_mgr.Msg_about_page(), xtn_mgr.Msg_about_ttl(), this);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static Filter methodFilter(java.lang.reflect.Method m, Object[] extraArgs,\n            Object falseResult) {\n        return methodFilter(m, false, extraArgs, falseResult);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate <E> void buildElements(ReadableDocument<? super E, E, ?> doc, E e, List<E> els) {\n    E child = DocHelper.getFirstChildElement(doc, e);\n    while (child != null) {\n      els.add(child);\n      buildElements(doc, child, els);\n      child = DocHelper.getNextSiblingElement(doc, child);\n    }\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprotected void fireVetoableChange (String name, Object o, Object n)\n\t\tthrows PropertyVetoException\n\t{\n\t\tif (_vetoableSupport != null)\n\t\t\t_vetoableSupport.fireVetoableChange(name, o, n);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                col = (int)val[1];\n\n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            Float min = Float.MAX_VALUE;\n            for(int i = 0; i < table.data.size(); i++)\n            {\n                Object o = table.data.get(i)[col-1];\n                if (o instanceof Float)\n                    min = Math.min((Float)o, min);\n            }\n            if (min == Float.MAX_VALUE)\n            {\n                return 0f;\n            }\n            return min;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public void onReply(int num, String value, String msg)\n        {\n            switch (num)\n            {\n                case 353:\n                    tmpUserList.addAll(CollectionUtil.asList(msg.split(\" \")));\n                    break;\n\n                case 366:\n                    userList.setListData(tmpUserList.toArray(new String[tmpUserList.size()]));\n                    tmpUserList.clear();\n                    break;\n\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 250:\n                case 251:\n                case 252:\n                case 253:\n                case 254:\n                case 255:\n                case 256:\n                case 257:\n                case 258:\n                case 259:\n                case 261:\n                case 262:\n                case 263:\n                case 265:\n                case 266:\n                case 372:\n                case 375:\n                case 376:\n                    break;\n\n                default:\n                    onReceive(null, null, msg);\n            }\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static Graph<ITestNGMethod> topologicalSort(ITestNGMethod[] methods,\n      List<ITestNGMethod> sequentialList, List<ITestNGMethod> parallelList) {\n    Graph<ITestNGMethod> result = new Graph<ITestNGMethod>();\n\n    if (methods.length == 0) {\n      return result;\n    }\n\n    for (ITestNGMethod m : methods) {\n      result.addNode(m);\n\n      List<ITestNGMethod> predecessors = Lists.newArrayList();\n\n      String[] methodsDependedUpon = m.getMethodsDependedUpon();\n      String[] groupsDependedUpon = m.getGroupsDependedUpon();\n      if (methodsDependedUpon.length > 0) {\n        ITestNGMethod[] methodsNamed =\n          MethodHelper.findDependedUponMethods(m, methods);\n        for (ITestNGMethod pred : methodsNamed) {\n          predecessors.add(pred);\n        }\n      }\n      if (groupsDependedUpon.length > 0) {\n        for (String group : groupsDependedUpon) {\n          ITestNGMethod[] methodsThatBelongToGroup =\n            MethodGroupsHelper.findMethodsThatBelongToGroup(m, methods, group);\n          for (ITestNGMethod pred : methodsThatBelongToGroup) {\n            predecessors.add(pred);\n          }\n        }\n      }\n\n      for (ITestNGMethod predecessor : predecessors) {\n        result.addPredecessor(m, predecessor);\n      }\n    }\n\n    result.topologicalSort();\n    sequentialList.addAll(result.getStrictlySortedNodes());\n    parallelList.addAll(result.getIndependentNodes());\n\n    return result;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static <A extends Closeable> A api(Class<A> apitype, final String provider, final String credId, final Properties overrides) {\n        Thread.currentThread().setContextClassLoader(Apis.class.getClassLoader());\n        return CredentialsHelper.setCredentials(ContextBuilder.newBuilder(provider), credId)\n            .overrides(overrides).modules(MODULES).buildApi(typeToken(apitype));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean isWhitespace(String str) {\n        if (str == null) {\n            return false;\n        }\n\n        int length = str.length();\n\n        for (int i = 0; i < length; i++) {\n            if (!Character.isWhitespace(str.charAt(i))) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void addShaped(RecipeDifficulty difficulty, ItemStack result, Object... recipe) {\n        if (difficulty != ALL && RecipeDifficulty.getDifficulty() != difficulty) {\n            return;\n        }\n\n        boolean isOre = false;\n\n        if (!isEnabled(result)) {\n            return;\n        }\n\n        for (int i = 3; i < recipe.length; i++) {\n            if (recipe[i] instanceof String) {\n                isOre = true;\n            }\n\n            if (!isEnabled(recipe[i])) {\n                return;\n            }\n        }\n\n        if (isOre) {\n            IRecipe iRecipe = new ShapedOreRecipe(result, recipe);\n            activeCrafting.add(iRecipe);\n            GameRegistry.addRecipe(iRecipe);\n        }\n        else {\n            activeCrafting.add(GameRegistry.addShapedRecipe(result, recipe));\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static boolean checkExtensions(final String path, String... extensions) {\n\t\tString pathLower = path.toLowerCase();\n\t\tfor (String ext : extensions) {\n\t\t\tif (!ext.startsWith(\".\"))\n\t\t\t\text = \".\" + ext;\n\t\t\tif (pathLower.endsWith(ext))\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void useProxyIndirection(Class targetInterface) {\n        Class[] targetInterfaces = new Class[] { targetInterface };\n        setIndirectionPolicy(new ProxyIndirectionPolicy(targetInterfaces));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static <E> List<E> toBeanList(Class<E> cla, List<Map<String, Object>> mapList) {\n\t\tList<E> list = new ArrayList<E>(mapList.size());\n\t\tfor (Map<String, Object> map : mapList) {\n\t\t\tE obj = toBean(cla, map);\n\t\t\tlist.add(obj);\n\t\t}\n\t\treturn list;\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker, boolean showDirection) {\n        this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nvoid createCurve(PointF[] originPoint,Path path){\n        int originCount = originPoint.length;\n        float scale = 0.6f;\n        PointF midpoints[] = new PointF[originCount];\n        for(int i = 0 ;i < originCount ; i++){\n            int nexti = (i + 1) % originCount;\n            midpoints[i] = new PointF();\n            midpoints[i].x = (originPoint[i].x + originPoint[nexti].x)/2.0f;\n            midpoints[i].y = (originPoint[i].y + originPoint[nexti].y)/2.0f;\n        }\n\n        PointF extrapoints[] = new PointF[2 * originCount];\n        for(int i = 0 ;i < originCount ; i++){\n            int nexti = (i + 1) % originCount;\n            int backi = (i + originCount - 1) % originCount;\n            if(i==0) backi=0;\n            PointF midinmid = new PointF();\n            midinmid.x = (midpoints[i].x + midpoints[backi].x)/2.0f;\n            midinmid.y = (midpoints[i].y + midpoints[backi].y)/2.0f;\n            float offsetx = originPoint[i].x - midinmid.x;\n            float offsety = originPoint[i].y - midinmid.y;\n            int extraindex = 2 * i;\n            extrapoints[extraindex] = new PointF();\n            extrapoints[extraindex].x = midpoints[backi].x + offsetx;\n            extrapoints[extraindex].y = midpoints[backi].y + offsety;\n            float addx = (extrapoints[extraindex].x - originPoint[i].x) * scale;\n            float addy = (extrapoints[extraindex].y - originPoint[i].y) * scale;\n            extrapoints[extraindex].x = originPoint[i].x + addx;\n            extrapoints[extraindex].y = originPoint[i].y + addy;\n\n            int extranexti = (extraindex + 1)%(2 * originCount);\n            extrapoints[extranexti] = new PointF();\n            extrapoints[extranexti].x = midpoints[i].x + offsetx;\n            extrapoints[extranexti].y = midpoints[i].y + offsety;\n            addx = (extrapoints[extranexti].x - originPoint[i].x) * scale;\n            addy = (extrapoints[extranexti].y - originPoint[i].y) * scale;\n            extrapoints[extranexti].x = originPoint[i].x + addx;\n            extrapoints[extranexti].y = originPoint[i].y + addy;\n        }\n\n        PointF controlPoint[] = new PointF[4];\n        boolean first = true;\n        for(int i = 0 ;i < originCount ; i++){\n            controlPoint[0] = originPoint[i];\n            int extraindex = 2 * i;\n            controlPoint[1] = extrapoints[extraindex + 1];\n            if(controlPoint[1].x < originPoint[i].x) controlPoint[1] = originPoint[i];\n\n            int extranexti = (extraindex + 2) % (2 * originCount);\n            controlPoint[2] = extrapoints[extranexti];\n            if(controlPoint[2].x < originPoint[i].x) controlPoint[2] = originPoint[i];\n\n            int nexti = (i + 1) % originCount;\n            controlPoint[3] = originPoint[nexti];\n            if(controlPoint[3].x < originPoint[i].x) controlPoint[3] = originPoint[i];\n            float u = 1;\n            while(u >= 0){\n                float px = bezier3funcX(u,controlPoint);\n                float py = bezier3funcY(u,controlPoint);\n                u -= 0.005;\n                if(first){\n                    path.moveTo(px, py);\n                    first = false;\n                }\n                else path.lineTo(px, py);\n            }\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void visitLdcInsn(final Object cst) {\n        if (cst instanceof Integer) {\n            int val = ((Integer) cst).intValue();\n            iconst(val);\n        } else if (cst instanceof Byte) {\n            int val = ((Byte) cst).intValue();\n            iconst(val);\n        } else if (cst instanceof Character) {\n            int val = ((Character) cst).charValue();\n            iconst(val);\n        } else if (cst instanceof Short) {\n            int val = ((Short) cst).intValue();\n            iconst(val);\n        } else if (cst instanceof Boolean) {\n            int val = ((Boolean) cst).booleanValue() ? 1 : 0;\n            iconst(val);\n        } else if (cst instanceof Float) {\n            float val = ((Float) cst).floatValue();\n            fconst(val);\n        } else if (cst instanceof Long) {\n            long val = ((Long) cst).longValue();\n            lconst(val);\n        } else if (cst instanceof Double) {\n            double val = ((Double) cst).doubleValue();\n            dconst(val);\n        } else if (cst instanceof String) {\n            aconst(cst);\n        } else if (cst instanceof Type) {\n            tconst((Type) cst);\n        } else if (cst instanceof Handle) {\n            hconst((Handle) cst);\n        } else {\n            throw new IllegalArgumentException();\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        \n        byte[] byteArray = new byte[bytes.size()]; \n        bytes.getBytes(byteArray, 0);\n        return Utf8Utils.utf8BytesToString(byteArray);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic BufferedImage getRenderedImage()\n\t{\n\t\tBufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n\t\t{\n\t\t\tGraphics2D g = image.createGraphics();\n\t\t\tfor(Layer l : flatmap)\n\t\t\t{\n\t\t\t\tl.render(g);\n\t\t\t}\n\t\t\tg.dispose();\n\t\t}\n\t\treturn image;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void load() {\n        List<ListItemViewModel> viewModels = new ArrayList<>(DUMMY_MODEL_COUNT);\n        for (int i = 0; i < DUMMY_MODEL_COUNT; i++) {\n            ListItemViewModel vm = new ListItemViewModel();\n            if (i % 10 == 0 && isAddingHeaders) {\n                vm.primary = stringProvider.getStringForResource(R.string.item_primary_prefix) + \" \" + i;\n                vm.layout = R.layout.list_group_heading;\n            } else {\n                vm.primary = stringProvider.getStringForResource(R.string.item_primary_prefix) + \" \" + i;\n                vm.secondary = stringProvider.getStringForResource(R.string.item_secondary_prefix) + \" \" + i;\n                vm.tertiary = i + \" \" + stringProvider.getStringForResource(R.string.item_tertiary_prefix);\n                vm.imageUrl = \"http://rdiodynimages0-a.akamaihd.net/?l=a\" + (i + 100000) + \"-0\";\n            }\n            viewModels.add(vm);\n            if (vm.layout == R.layout.list_group_heading) {\n                onHeaderAdded(vm, i);\n            } else {\n                onItemAdded(vm, i);\n            }\n        }\n        setViewModels(viewModels);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void setGlobalProperties(String resource, String url) {\n    config.getErrorContext().setActivity(\"loading global properties\");\n    try {\n      Properties props;\n      if (resource != null) {\n        config.getErrorContext().setResource(resource);\n        props = Resources.getResourceAsProperties(resource);\n      } else if (url != null) {\n        config.getErrorContext().setResource(url);\n        props = Resources.getUrlAsProperties(url);\n      } else {\n        throw new RuntimeException(\"The \" + \"properties\" + \" element requires either a resource or a url attribute.\");\n      }\n\n      if (props != null) {\n        props.putAll(globalProps);\n        globalProps = props;\n      }\n\n      String customizedSQLExecutor = globalProps.getProperty(\"sql_executor_class\");\n      config.getErrorContext().setActivity(\"Loading SQLExecutor.\");\n      if (customizedSQLExecutor != null) {\n        try {\n          config.getClient().getDelegate().setCustomExecutor(customizedSQLExecutor);\n          config.getClient().getDelegate().getSqlExecutor().init(config, globalProps);\n        } catch (Exception e) {\n          config.getErrorContext().setCause(e);\n          config.getErrorContext()\n              .setMoreInfo(\"Loading of customizedSQLExecutor failed. Please check Properties file.\");\n        }\n      }\n\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error loading properties.  Cause: \" + e, e);\n    }\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@BeforeClass\n    public static void setUp(){\n    \tfinal Properties props = new Properties();\n    \ttry {\n    \tprops.load(new FileInputStream(PATH_TO_TEST_PROPERTIES));\n    \t} catch (Exception e) {\n    \t\tlog.error(\"Error occured while reading mule.test.properties\", e);\n    \t}    \t\n\t\tSystem.setProperty(\"https.protocols\", \"TLSv1.1,TLSv1.2\");\n\t\tSystem.setProperty(\"sfdc.key\", props.getProperty(\"sfdc.key\"));\n    \tSystem.setProperty(\"sfdc.secret\", props.getProperty(\"sfdc.secret\"));\n    \tUSERNAME = props.getProperty(\"sfdc.user\");\n    \tPASSWORD = props.getProperty(\"sfdc.password\");\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        PartialSufficientSatistics partialSufficientSatistics = PartialSufficientSatistics.createZeroPartialSufficientStatistics(efBayesianNetwork);\n        partialSufficientSatistics.copy(this.sumSS);\n        partialSufficientSatistics.normalize();\n        SufficientStatistics finalSS = efBayesianNetwork.createZeroSufficientStatistics();\n        finalSS.sum(partialSufficientSatistics.getCompoundVector());\n\n        efBayesianNetwork.setMomentParameters(finalSS);\n        return efBayesianNetwork.toBayesianNetwork(dag);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testBlock() throws HyperLedgerException, IOException {\n        Block b1 =\n                Block.fromWireDump(\"\", formatter, BitcoinHeader.class);\n        assertTrue(b1.getID().equals(new BID(\"0000000000000449ee5b94ba7a051caffff5c23d6a03335f6e20e3985b5ffa61\")));\n        Block b2 = Block.fromWireDump(b1.toWireDump(), formatter, BitcoinHeader.class);\n        assertTrue(b1.getID().equals(b2.getID()));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; } \n        return retVal;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.google.bigtable.v2.Column parseFrom(\n      java.nio.ByteBuffer data,\n      com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n      throws com.google.protobuf.InvalidProtocolBufferException {\n    return PARSER.parseFrom(data, extensionRegistry);\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic Result(String name,\n\t               Map<String, List<String>> tags,\n\t               List<DataPoint> dataPoints,\n\t               List<GroupResult> groupResults)\n\t{\n\t\tthis.name = name;\n\t\tthis.tags = tags;\n\t\tthis.groupResults = groupResults;\n\t\tthis.dataPoints = dataPoints;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@SuppressLint(\"NewApi\")\n\tpublic static Bitmap fastblur(Context context, Bitmap sentBitmap, int radius) {\n\n\t\tif (Build.VERSION.SDK_INT > 16) {\n\t\t\tBitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n\t\t\tfinal RenderScript rs = RenderScript.create(context);\n\t\t\tfinal Allocation input = Allocation.createFromBitmap(rs,\n\t\t\t\t\tsentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n\t\t\t\t\tAllocation.USAGE_SCRIPT);\n\t\t\tfinal Allocation output = Allocation.createTyped(rs,\n\t\t\t\t\tinput.getType());\n\t\t\tfinal ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs,\n\t\t\t\t\tElement.U8_4(rs));\n\t\t\tscript.setRadius(radius );\n\t\t\tscript.setInput(input);\n\t\t\tscript.forEach(output);\n\t\t\toutput.copyTo(bitmap);\n\t\t\treturn bitmap;\n\t\t}\n\n\t\tBitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n\t\tif (radius < 1) {\n\t\t\treturn (null);\n\t\t}\n\n\t\tint w = bitmap.getWidth();\n\t\tint h = bitmap.getHeight();\n\n\t\tint[] pix = new int[w * h];\n\t\tLog.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n\t\tbitmap.getPixels(pix, 0, w, 0, 0, w, h);\n\n\t\tint wm = w - 1;\n\t\tint hm = h - 1;\n\t\tint wh = w * h;\n\t\tint div = radius + radius + 1;\n\n\t\tint r[] = new int[wh];\n\t\tint g[] = new int[wh];\n\t\tint b[] = new int[wh];\n\t\tint rsum, gsum, bsum, x, y, i, p, yp, yi, yw;\n\t\tint vmin[] = new int[Math.max(w, h)];\n\n\t\tint divsum = (div + 1) >> 1;\n\t\tdivsum *= divsum;\n\t\tint dv[] = new int[256 * divsum];\n\t\tfor (i = 0; i < 256 * divsum; i++) {\n\t\t\tdv[i] = (i / divsum);\n\t\t}\n\n\t\tyw = yi = 0;\n\n\t\tint[][] stack = new int[div][3];\n\t\tint stackpointer;\n\t\tint stackstart;\n\t\tint[] sir;\n\t\tint rbs;\n\t\tint r1 = radius + 1;\n\t\tint routsum, goutsum, boutsum;\n\t\tint rinsum, ginsum, binsum;\n\n\t\tfor (y = 0; y < h; y++) {\n\t\t\trinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n\t\t\tfor (i = -radius; i <= radius; i++) {\n\t\t\t\tp = pix[yi + Math.min(wm, Math.max(i, 0))];\n\t\t\t\tsir = stack[i + radius];\n\t\t\t\tsir[0] = (p & 0xff0000) >> 16;\n\t\t\t\tsir[1] = (p & 0x00ff00) >> 8;\n\t\t\t\tsir[2] = (p & 0x0000ff);\n\t\t\t\trbs = r1 - Math.abs(i);\n\t\t\t\trsum += sir[0] * rbs;\n\t\t\t\tgsum += sir[1] * rbs;\n\t\t\t\tbsum += sir[2] * rbs;\n\t\t\t\tif (i > 0) {\n\t\t\t\t\trinsum += sir[0];\n\t\t\t\t\tginsum += sir[1];\n\t\t\t\t\tbinsum += sir[2];\n\t\t\t\t} else {\n\t\t\t\t\troutsum += sir[0];\n\t\t\t\t\tgoutsum += sir[1];\n\t\t\t\t\tboutsum += sir[2];\n\t\t\t\t}\n\t\t\t}\n\t\t\tstackpointer = radius;\n\n\t\t\tfor (x = 0; x < w; x++) {\n\n\t\t\t\tr[yi] = dv[rsum];\n\t\t\t\tg[yi] = dv[gsum];\n\t\t\t\tb[yi] = dv[bsum];\n\n\t\t\t\trsum -= routsum;\n\t\t\t\tgsum -= goutsum;\n\t\t\t\tbsum -= boutsum;\n\n\t\t\t\tstackstart = stackpointer - radius + div;\n\t\t\t\tsir = stack[stackstart % div];\n\n\t\t\t\troutsum -= sir[0];\n\t\t\t\tgoutsum -= sir[1];\n\t\t\t\tboutsum -= sir[2];\n\n\t\t\t\tif (y == 0) {\n\t\t\t\t\tvmin[x] = Math.min(x + radius + 1, wm);\n\t\t\t\t}\n\t\t\t\tp = pix[yw + vmin[x]];\n\n\t\t\t\tsir[0] = (p & 0xff0000) >> 16;\n\t\t\t\tsir[1] = (p & 0x00ff00) >> 8;\n\t\t\t\tsir[2] = (p & 0x0000ff);\n\n\t\t\t\trinsum += sir[0];\n\t\t\t\tginsum += sir[1];\n\t\t\t\tbinsum += sir[2];\n\n\t\t\t\trsum += rinsum;\n\t\t\t\tgsum += ginsum;\n\t\t\t\tbsum += binsum;\n\n\t\t\t\tstackpointer = (stackpointer + 1) % div;\n\t\t\t\tsir = stack[(stackpointer) % div];\n\n\t\t\t\troutsum += sir[0];\n\t\t\t\tgoutsum += sir[1];\n\t\t\t\tboutsum += sir[2];\n\n\t\t\t\trinsum -= sir[0];\n\t\t\t\tginsum -= sir[1];\n\t\t\t\tbinsum -= sir[2];\n\n\t\t\t\tyi++;\n\t\t\t}\n\t\t\tyw += w;\n\t\t}\n\t\tfor (x = 0; x < w; x++) {\n\t\t\trinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n\t\t\typ = -radius * w;\n\t\t\tfor (i = -radius; i <= radius; i++) {\n\t\t\t\tyi = Math.max(0, yp) + x;\n\n\t\t\t\tsir = stack[i + radius];\n\n\t\t\t\tsir[0] = r[yi];\n\t\t\t\tsir[1] = g[yi];\n\t\t\t\tsir[2] = b[yi];\n\n\t\t\t\trbs = r1 - Math.abs(i);\n\n\t\t\t\trsum += r[yi] * rbs;\n\t\t\t\tgsum += g[yi] * rbs;\n\t\t\t\tbsum += b[yi] * rbs;\n\n\t\t\t\tif (i > 0) {\n\t\t\t\t\trinsum += sir[0];\n\t\t\t\t\tginsum += sir[1];\n\t\t\t\t\tbinsum += sir[2];\n\t\t\t\t} else {\n\t\t\t\t\troutsum += sir[0];\n\t\t\t\t\tgoutsum += sir[1];\n\t\t\t\t\tboutsum += sir[2];\n\t\t\t\t}\n\n\t\t\t\tif (i < hm) {\n\t\t\t\t\typ += w;\n\t\t\t\t}\n\t\t\t}\n\t\t\tyi = x;\n\t\t\tstackpointer = radius;\n\t\t\tfor (y = 0; y < h; y++) {\n\t\t\t\tpix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16)\n\t\t\t\t\t\t| (dv[gsum] << 8) | dv[bsum];\n\n\t\t\t\trsum -= routsum;\n\t\t\t\tgsum -= goutsum;\n\t\t\t\tbsum -= boutsum;\n\n\t\t\t\tstackstart = stackpointer - radius + div;\n\t\t\t\tsir = stack[stackstart % div];\n\n\t\t\t\troutsum -= sir[0];\n\t\t\t\tgoutsum -= sir[1];\n\t\t\t\tboutsum -= sir[2];\n\n\t\t\t\tif (x == 0) {\n\t\t\t\t\tvmin[y] = Math.min(y + r1, hm) * w;\n\t\t\t\t}\n\t\t\t\tp = x + vmin[y];\n\n\t\t\t\tsir[0] = r[p];\n\t\t\t\tsir[1] = g[p];\n\t\t\t\tsir[2] = b[p];\n\n\t\t\t\trinsum += sir[0];\n\t\t\t\tginsum += sir[1];\n\t\t\t\tbinsum += sir[2];\n\n\t\t\t\trsum += rinsum;\n\t\t\t\tgsum += ginsum;\n\t\t\t\tbsum += binsum;\n\n\t\t\t\tstackpointer = (stackpointer + 1) % div;\n\t\t\t\tsir = stack[stackpointer];\n\n\t\t\t\troutsum += sir[0];\n\t\t\t\tgoutsum += sir[1];\n\t\t\t\tboutsum += sir[2];\n\n\t\t\t\trinsum -= sir[0];\n\t\t\t\tginsum -= sir[1];\n\t\t\t\tbinsum -= sir[2];\n\n\t\t\t\tyi += w;\n\t\t\t}\n\t\t}\n\n\t\tLog.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n\t\tbitmap.setPixels(pix, 0, w, 0, 0, w, h);\n\t\treturn (bitmap);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" deltaNeutralOpenClose=\" + order.m_deltaNeutralOpenClose +\n        \" deltaNeutralShortSale=\" + order.m_deltaNeutralShortSale +\n        \" deltaNeutralShortSaleSlot=\" + order.m_deltaNeutralShortSaleSlot +\n        \" deltaNeutralDesignatedLocation=\" + order.m_deltaNeutralDesignatedLocation +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void quickSendFail( String clazz, Map<String,byte[]> parameters, byte[] tag, double time )\n\t{\n\t\ttry\n\t\t{\n\t\t\tint cHandle = rtiamb.getInteractionClassHandle( clazz );\n\t\t\t\n\t\t\tSuppliedParameters toSend = TestSetup.getRTIFactory().createSuppliedParameters();\n\t\t\tif( parameters != null )\n\t\t\t{\n\t\t\t\tfor( String pName : parameters.keySet() )\n\t\t\t\t{\n\t\t\t\t\ttoSend.add( rtiamb.getParameterHandle(pName,cHandle), parameters.get(pName) );\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif( time == PorticoConstants.NULL_TIME )\n\t\t\t\trtiamb.sendInteraction( cHandle, toSend, tag );\n\t\t\telse\n\t\t\t\trtiamb.sendInteraction( cHandle, toSend, tag, createTime(time) );\n\t\t\tAssert.fail( \"Was expecting the sending of interaction [\" + clazz + \"] to fail\" );\n\t\t}\n\t\tcatch( Exception e )\n\t\t{\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Matcher appendReplacement(StringBuffer sb, String replacement) {\n\n        if (first < 0)\n            throw new IllegalStateException(\"No match available\");\n\n        int cursor = 0;\n        StringBuilder result = new StringBuilder();\n\n        while (cursor < replacement.length()) {\n            char nextChar = replacement.charAt(cursor);\n            if (nextChar == '\\\\') {\n                cursor++;\n                nextChar = replacement.charAt(cursor);\n                result.append(nextChar);\n                cursor++;\n            } else if (nextChar == '$') {\n                cursor++;\n                int refNum = (int)replacement.charAt(cursor) - '0';\n                if ((refNum < 0)||(refNum > 9))\n                    throw new IllegalArgumentException(\n                        \"Illegal group reference\");\n                cursor++;\n\n                boolean done = false;\n                while (!done) {\n                    if (cursor >= replacement.length()) {\n                        break;\n                    }\n                    int nextDigit = replacement.charAt(cursor) - '0';\n                    if ((nextDigit < 0)||(nextDigit > 9)) { // not a number\n                        break;\n                    }\n                    int newRefNum = (refNum * 10) + nextDigit;\n                    if (groupCount() < newRefNum) {\n                        done = true;\n                    } else {\n                        refNum = newRefNum;\n                        cursor++;\n                    }\n                }\n                if (start(refNum) != -1 && end(refNum) != -1)\n                    result.append(text, start(refNum), end(refNum));\n            } else {\n                result.append(nextChar);\n                cursor++;\n            }\n        }\n        sb.append(text, lastAppendPosition, first);\n        sb.append(result);\n\n        lastAppendPosition = last;\n        return this;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic final DenseMatrix zeros(ValueType valueType, long... size) {\n\t\tswitch (size.length) {\n\t\tcase 0:\n\t\t\tthrow new RuntimeException(\"Size not defined\");\n\t\tcase 1:\n\t\t\tthrow new RuntimeException(\"Size must be at least 2-dimensional\");\n\t\tdefault:\n\t\t\tswitch (valueType) {\n\t\t\tcase BIGDECIMAL:\n\t\t\t\treturn new DefaultDenseBigDecimalMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BIGINTEGER:\n\t\t\t\treturn new DefaultDenseBigIntegerMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BOOLEAN:\n\t\t\t\treturn new ArrayDenseBooleanMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BYTE:\n\t\t\t\treturn new DefaultDenseByteMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase CHAR:\n\t\t\t\treturn new DefaultDenseCharMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase DOUBLE:\n\t\t\t\tif (size.length == 2) {\n\t\t\t\t\treturn new DefaultDenseDoubleMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\t\t} else {\n\t\t\t\t\treturn new DefaultDenseDoubleMatrixMultiD(size);\n\t\t\t\t}\n\t\t\tcase FLOAT:\n\t\t\t\treturn new DefaultDenseFloatMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase INT:\n\t\t\t\treturn new DefaultDenseIntMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase LONG:\n\t\t\t\treturn new DefaultDenseLongMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase OBJECT:\n\t\t\t\treturn ObjectMatrix.Factory.zeros(size);\n\t\t\tcase SHORT:\n\t\t\t\treturn new DefaultDenseShortMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase STRING:\n\t\t\t\treturn new DefaultDenseStringMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tdefault:\n\t\t\t\tthrow new RuntimeException(\"unknown value type: \" + valueType);\n\t\t\t}\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic BitMapFontViewer getViewer( String input, int color ) {\n\t\tif (this.fontImage == null) {\n\t\t\tinitFont();\n\t\t\tif (this.fontImage == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\tif (!this.hasMixedCase) {\n\t\t\tinput = input.toLowerCase();\n\t\t}\n\t\tint length = input.length();\n\t\tint[] indeces = new int[ length ];\n\t\tfor (int i = length - 1; i >= 0; i-- ) {\n\t\t\tchar inputCharacter = input.charAt(i);\n\t\t\tif (inputCharacter == '\\n') {\n\t\t\t\tindeces[i] = BitMapFontViewer.ABSOLUTE_LINE_BREAK;\n\t\t\t} else {\n\t\t\t\tindeces[i] = this.characterMap.indexOf( inputCharacter );\n\t\t\t}\n\t\t}\n\t\tif (color != -1 && color != 0)\n\t\t{\n\t\t\treturn new BitMapFontViewer( this.fontImage, color, indeces, this.xPositions, this.characterWidths, this.fontHeight, this.spaceIndex, 1 );\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn new BitMapFontViewer( this.fontImage, indeces, this.xPositions, this.characterWidths, this.fontHeight, this.spaceIndex, 1 );\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void addShaped(RecipeDifficulty difficulty, ItemStack result, Object... recipe) {\n        if (difficulty != ALL && RecipeDifficulty.getDifficulty() != difficulty) {\n            return;\n        }\n\n        boolean isOre = false;\n\n        if (!isEnabled(result)) {\n            return;\n        }\n\n        for (int i = 3; i < recipe.length; i++) {\n            if (recipe[i] instanceof String) {\n                isOre = true;\n            }\n\n            if (!isEnabled(recipe[i])) {\n                return;\n            }\n        }\n\n        if (isOre) {\n            IRecipe iRecipe = new ShapedOreRecipe(result, recipe);\n            activeCrafting.add(iRecipe);\n            GameRegistry.addRecipe(iRecipe);\n        }\n        else {\n            activeCrafting.add(GameRegistry.addShapedRecipe(result, recipe));\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprivate int blendColors(int nFromColor, int nToColor, float nProgress) {\n\t\tfinal float nInverseProgress = 1f - nProgress;\n\n\t\tfinal float r = Color.red(nToColor) * nProgress + Color.red(nFromColor) * nInverseProgress;\n\t\tfinal float g = Color.green(nToColor) * nProgress + Color.green(nFromColor) * nInverseProgress;\n\t\tfinal float b = Color.blue(nToColor) * nProgress + Color.blue(nFromColor) * nInverseProgress;\n\n\t\treturn Color.rgb((int) r, (int) g, (int) b);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps,\n                boolean isUserGenerated) {\n            Validate.notNull(objectProperty, \"objectProperty\");\n            Validate.containsNoNulls(bitmaps, \"bitmaps\");\n            if (action == null) {\n                throw new FacebookException(\"Can not set attachments prior to setting action.\");\n            }\n\n            List<String> attachmentUrls = addImageAttachments(bitmaps);\n            updateObjectAttachmentUrls(objectProperty, attachmentUrls, isUserGenerated);\n\n            return this;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@SuppressLint(\"NewApi\")\n    public static Bitmap fastblur(Context context, Bitmap sentBitmap, int radius) {\n\n        if (VERSION.SDK_INT > 16) {\n            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n            final RenderScript rs = RenderScript.create(context);\n            final Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n                    Allocation.USAGE_SCRIPT);\n            final Allocation output = Allocation.createTyped(rs, input.getType());\n            final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n            script.setRadius(radius );\n            script.setInput(input);\n            script.forEach(output);\n            output.copyTo(bitmap);\n            return bitmap;\n        }\n\n\n\n        Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n        if (radius < 1) {\n            return (null);\n        }\n\n        int w = bitmap.getWidth();\n        int h = bitmap.getHeight();\n\n        int[] pix = new int[w * h];\n        Log.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n        bitmap.getPixels(pix, 0, w, 0, 0, w, h);\n\n        int wm = w - 1;\n        int hm = h - 1;\n        int wh = w * h;\n        int div = radius + radius + 1;\n\n        int r[] = new int[wh];\n        int g[] = new int[wh];\n        int b[] = new int[wh];\n        int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;\n        int vmin[] = new int[Math.max(w, h)];\n\n        int divsum = (div + 1) >> 1;\n        divsum *= divsum;\n        int dv[] = new int[256 * divsum];\n        for (i = 0; i < 256 * divsum; i++) {\n            dv[i] = (i / divsum);\n        }\n\n        yw = yi = 0;\n\n        int[][] stack = new int[div][3];\n        int stackpointer;\n        int stackstart;\n        int[] sir;\n        int rbs;\n        int r1 = radius + 1;\n        int routsum, goutsum, boutsum;\n        int rinsum, ginsum, binsum;\n\n        for (y = 0; y < h; y++) {\n            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n            for (i = -radius; i <= radius; i++) {\n                p = pix[yi + Math.min(wm, Math.max(i, 0))];\n                sir = stack[i + radius];\n                sir[0] = (p & 0xff0000) >> 16;\n                sir[1] = (p & 0x00ff00) >> 8;\n                sir[2] = (p & 0x0000ff);\n                rbs = r1 - Math.abs(i);\n                rsum += sir[0] * rbs;\n                gsum += sir[1] * rbs;\n                bsum += sir[2] * rbs;\n                if (i > 0) {\n                    rinsum += sir[0];\n                    ginsum += sir[1];\n                    binsum += sir[2];\n                } else {\n                    routsum += sir[0];\n                    goutsum += sir[1];\n                    boutsum += sir[2];\n                }\n            }\n            stackpointer = radius;\n\n            for (x = 0; x < w; x++) {\n\n                r[yi] = dv[rsum];\n                g[yi] = dv[gsum];\n                b[yi] = dv[bsum];\n\n                rsum -= routsum;\n                gsum -= goutsum;\n                bsum -= boutsum;\n\n                stackstart = stackpointer - radius + div;\n                sir = stack[stackstart % div];\n\n                routsum -= sir[0];\n                goutsum -= sir[1];\n                boutsum -= sir[2];\n\n                if (y == 0) {\n                    vmin[x] = Math.min(x + radius + 1, wm);\n                }\n                p = pix[yw + vmin[x]];\n\n                sir[0] = (p & 0xff0000) >> 16;\n                sir[1] = (p & 0x00ff00) >> 8;\n                sir[2] = (p & 0x0000ff);\n\n                rinsum += sir[0];\n                ginsum += sir[1];\n                binsum += sir[2];\n\n                rsum += rinsum;\n                gsum += ginsum;\n                bsum += binsum;\n\n                stackpointer = (stackpointer + 1) % div;\n                sir = stack[(stackpointer) % div];\n\n                routsum += sir[0];\n                goutsum += sir[1];\n                boutsum += sir[2];\n\n                rinsum -= sir[0];\n                ginsum -= sir[1];\n                binsum -= sir[2];\n\n                yi++;\n            }\n            yw += w;\n        }\n        for (x = 0; x < w; x++) {\n            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n            yp = -radius * w;\n            for (i = -radius; i <= radius; i++) {\n                yi = Math.max(0, yp) + x;\n\n                sir = stack[i + radius];\n\n                sir[0] = r[yi];\n                sir[1] = g[yi];\n                sir[2] = b[yi];\n\n                rbs = r1 - Math.abs(i);\n\n                rsum += r[yi] * rbs;\n                gsum += g[yi] * rbs;\n                bsum += b[yi] * rbs;\n\n                if (i > 0) {\n                    rinsum += sir[0];\n                    ginsum += sir[1];\n                    binsum += sir[2];\n                } else {\n                    routsum += sir[0];\n                    goutsum += sir[1];\n                    boutsum += sir[2];\n                }\n\n                if (i < hm) {\n                    yp += w;\n                }\n            }\n            yi = x;\n            stackpointer = radius;\n            for (y = 0; y < h; y++) {\n                pix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8) | dv[bsum];\n\n                rsum -= routsum;\n                gsum -= goutsum;\n                bsum -= boutsum;\n\n                stackstart = stackpointer - radius + div;\n                sir = stack[stackstart % div];\n\n                routsum -= sir[0];\n                goutsum -= sir[1];\n                boutsum -= sir[2];\n\n                if (x == 0) {\n                    vmin[y] = Math.min(y + r1, hm) * w;\n                }\n                p = x + vmin[y];\n\n                sir[0] = r[p];\n                sir[1] = g[p];\n                sir[2] = b[p];\n\n                rinsum += sir[0];\n                ginsum += sir[1];\n                binsum += sir[2];\n\n                rsum += rinsum;\n                gsum += ginsum;\n                bsum += binsum;\n\n                stackpointer = (stackpointer + 1) % div;\n                sir = stack[stackpointer];\n\n                routsum += sir[0];\n                goutsum += sir[1];\n                boutsum += sir[2];\n\n                rinsum -= sir[0];\n                ginsum -= sir[1];\n                binsum -= sir[2];\n\n                yi += w;\n            }\n        }\n\n        Log.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n        bitmap.setPixels(pix, 0, w, 0, 0, w, h);\n        return (bitmap);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic ExternalCarrierBillingInstrumentProto(String instrumentKey, String subscriberIdentifier, String accountType, String subscriberCurrency, Long transactionLimit, String subscriberName, String address1, String address2, String city, String state, String postalCode, String country, EncryptedSubscriberInfo encryptedSubscriberInfo) {\n    this.instrumentKey = instrumentKey;\n    this.subscriberIdentifier = subscriberIdentifier;\n    this.accountType = accountType;\n    this.subscriberCurrency = subscriberCurrency;\n    this.transactionLimit = transactionLimit;\n    this.subscriberName = subscriberName;\n    this.address1 = address1;\n    this.address2 = address2;\n    this.city = city;\n    this.state = state;\n    this.postalCode = postalCode;\n    this.country = country;\n    this.encryptedSubscriberInfo = encryptedSubscriberInfo;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public Value<Integer> run(String userEmail) {\n      PromisedValue<Integer> x = newPromise();\n      PromisedValue<Integer> y = newPromise();\n      PromisedValue<Integer> z = newPromise();\n      FutureValue<Integer> intermediate = futureCall(new ComplexJob(), x, y, z);\n\n      getIntFromUser(\"Please give 1st int\", userEmail, x.getHandle());\n      getIntFromUser(\"Please give 2nd int\", userEmail, y.getHandle());\n      getIntFromUser(\"Please give 3rd int\", userEmail, z.getHandle());\n\n      FutureValue<Integer> oneMoreInt =\n        futureCall(new PromptJob(), intermediate, immediate(userEmail));\n\n      return futureCall(new MultJob(), intermediate, oneMoreInt);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static float convertDpToPixel(float dp, Context context) {\n        Resources resources = context.getResources();\n        DisplayMetrics metrics = resources.getDisplayMetrics();\n        float px = dp * (metrics.densityDpi / 160f);\n        return px;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n        if(!nonSequentialModel)\n            return new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n        else{\n\n            CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n            this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n            BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n            this.updateNaturalParameterPrior(prior);\n\n            return learntBN;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void setColumnWidth() {\n        int maxNameWidth = 0; // getViewer().getTable().getColumn(NAME_COLUMN_NUM).getWidth();\n        int maxCategoryWidth = 0; // getViewer().getTable().getColumn(CATEGORY_COLUMN_NUM).getWidth();\n        int maxDescriptionWidth = 0; // getViewer().getTable().getColumn(DESCRIPTION_COLUMN_NUM).getWidth();\n\n        final GC gc = new GC(getViewer().getTable());\n\n        for (final Object element : getElements()) {\n            maxNameWidth = Math.max(maxNameWidth, gc.stringExtent(getColumnText(element, NAME_COLUMN_ID)).x);\n            maxCategoryWidth =\n                Math.max(maxCategoryWidth, gc.stringExtent(getColumnText(element, CATEGORY_COLUMN_ID)).x);\n            maxDescriptionWidth =\n                Math.max(maxDescriptionWidth, gc.stringExtent(getColumnText(element, DESCRIPTION_COLUMN_ID)).x);\n        }\n\n        gc.dispose();\n\n        getViewer().getTable().getColumn(NAME_COLUMN_NUM).setWidth(maxNameWidth + 30);\n        getViewer().getTable().getColumn(CATEGORY_COLUMN_NUM).setWidth(maxCategoryWidth + 30);\n        getViewer().getTable().getColumn(DESCRIPTION_COLUMN_NUM).setWidth(maxDescriptionWidth + 30);\n        getViewer().getTable().layout();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1],\n                col = (int)val[2];\n            \n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            return (float) table.classValue(row, col);\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic SmoothStreamingRendererBuilder(Context context, String userAgent, String url,\n      MediaDrmCallback drmCallback) {\n    this.context = context;\n    this.userAgent = userAgent;\n    this.url = Util.toLowerInvariant(url).endsWith(\"/manifest\") ? url : url + \"/Manifest\";\n    this.drmCallback = drmCallback;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Class<?>[] parseTypes(String arg) {\n        String[] names = parseTypeNames(arg);\n        Class<?>[] objs = new Class[names.length];\n        for (int i = 0; i < names.length; i++)\n            objs[i] = ClassUtil.toClass(names[i], _loader);\n        return objs;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic UApp initConfig() {\n    if(conf==null) conf=new UConfig();\n    conf.put(CONFW,1024).put(CONFH,768);\n    conf.put(CONFWINX,0).put(CONFWINY,0);\n    conf.put(CONFDECORATED,false).put(CONFRENDERER, OPENGL);\n    conf.put(CONFPATH,UFile.getCurrentDir());\n    conf.put(CONFDATAPATH,UFile.getCurrentDir());\n    \n    conf.list();\n    appFlags=new HashMap<Integer,Integer>();\n    return this;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void deliverIncomingMessage(final IIPCHandle handle, long mid, long rmid, Object payload,\n            Exception exception) {\n        CCNCFunctions.Function fn = (Function) payload;\n        switch (fn.getFunctionId()) {\n            case REGISTER_NODE:\n                CCNCFunctions.RegisterNodeFunction rnf = (CCNCFunctions.RegisterNodeFunction) fn;\n                ccs.getWorkQueue().schedule(new RegisterNodeWork(ccs, rnf.getNodeRegistration()));\n                break;\n            case UNREGISTER_NODE:\n                CCNCFunctions.UnregisterNodeFunction unf = (CCNCFunctions.UnregisterNodeFunction) fn;\n                ccs.getWorkQueue().schedule(new UnregisterNodeWork(ccs.getNodeManager(), unf.getNodeId()));\n                break;\n            case NODE_HEARTBEAT:\n                CCNCFunctions.NodeHeartbeatFunction nhf = (CCNCFunctions.NodeHeartbeatFunction) fn;\n                ccs.getWorkQueue().schedule(new NodeHeartbeatWork(ccs, nhf.getNodeId(),\n                        nhf.getHeartbeatData()));\n                break;\n            case NOTIFY_JOBLET_CLEANUP:\n                CCNCFunctions.NotifyJobletCleanupFunction njcf = (CCNCFunctions.NotifyJobletCleanupFunction) fn;\n                ccs.getWorkQueue().schedule(new JobletCleanupNotificationWork(ccs, njcf.getJobId(),\n                        njcf.getNodeId()));\n                break;\n            case NOTIFY_DEPLOY_BINARY:\n                CCNCFunctions.NotifyDeployBinaryFunction ndbf = (CCNCFunctions.NotifyDeployBinaryFunction) fn;\n                ccs.getWorkQueue().schedule(new NotifyDeployBinaryWork(ccs, ndbf.getDeploymentId(),\n                        ndbf.getNodeId(), ndbf.getDeploymentStatus()));\n                break;\n            case REPORT_PROFILE:\n                CCNCFunctions.ReportProfileFunction rpf = (CCNCFunctions.ReportProfileFunction) fn;\n                ccs.getWorkQueue().schedule(new ReportProfilesWork(ccs.getJobManager(), rpf.getProfiles()));\n                break;\n            case NOTIFY_TASK_COMPLETE:\n                CCNCFunctions.NotifyTaskCompleteFunction ntcf = (CCNCFunctions.NotifyTaskCompleteFunction) fn;\n                ccs.getWorkQueue().schedule(new TaskCompleteWork(ccs, ntcf.getJobId(),\n                        ntcf.getTaskId(), ntcf.getNodeId(), ntcf.getStatistics()));\n                break;\n            case NOTIFY_TASK_FAILURE:\n                CCNCFunctions.NotifyTaskFailureFunction ntff = (CCNCFunctions.NotifyTaskFailureFunction) fn;\n                ccs.getWorkQueue().schedule(new TaskFailureWork(ccs, ntff.getJobId(),\n                        ntff.getTaskId(), ntff.getNodeId(), ntff.getExceptions()));\n                break;\n            case DISTRIBUTED_JOB_FAILURE:\n                CCNCFunctions.ReportDistributedJobFailureFunction rdjf =\n                        (CCNCFunctions.ReportDistributedJobFailureFunction) fn;\n                ccs.getWorkQueue().schedule(new DistributedJobFailureWork(rdjf.getJobId(), rdjf.getNodeId()));\n                break;\n            case REGISTER_PARTITION_PROVIDER:\n                CCNCFunctions.RegisterPartitionProviderFunction rppf =\n                        (CCNCFunctions.RegisterPartitionProviderFunction) fn;\n                ccs.getWorkQueue().schedule(new RegisterPartitionAvailibilityWork(ccs,\n                        rppf.getPartitionDescriptor()));\n                break;\n            case REGISTER_PARTITION_REQUEST:\n                CCNCFunctions.RegisterPartitionRequestFunction rprf =\n                        (CCNCFunctions.RegisterPartitionRequestFunction) fn;\n                ccs.getWorkQueue().schedule(new RegisterPartitionRequestWork(ccs,\n                        rprf.getPartitionRequest()));\n                break;\n            case REGISTER_RESULT_PARTITION_LOCATION:\n                CCNCFunctions.RegisterResultPartitionLocationFunction rrplf =\n                        (CCNCFunctions.RegisterResultPartitionLocationFunction) fn;\n                ccs.getWorkQueue().schedule(new RegisterResultPartitionLocationWork(ccs,\n                        rrplf.getJobId(), rrplf.getResultSetId(), rrplf.getOrderedResult(), rrplf.getEmptyResult(),\n                        rrplf.getPartition(), rrplf.getNPartitions(), rrplf.getNetworkAddress()));\n                break;\n            case REPORT_RESULT_PARTITION_WRITE_COMPLETION:\n                CCNCFunctions.ReportResultPartitionWriteCompletionFunction rrpwc =\n                        (CCNCFunctions.ReportResultPartitionWriteCompletionFunction) fn;\n                ccs.getWorkQueue().schedule(new ReportResultPartitionWriteCompletionWork(ccs,\n                        rrpwc.getJobId(), rrpwc.getResultSetId(), rrpwc.getPartition()));\n                break;\n            case SEND_APPLICATION_MESSAGE:\n                CCNCFunctions.SendApplicationMessageFunction rsf =\n                        (CCNCFunctions.SendApplicationMessageFunction) fn;\n                ccs.getWorkQueue().schedule(new ApplicationMessageWork(ccs, rsf.getMessage(),\n                        rsf.getDeploymentId(), rsf.getNodeId()));\n                break;\n            case GET_NODE_CONTROLLERS_INFO:\n                ccs.getWorkQueue().schedule(new GetNodeControllersInfoWork(ccs.getNodeManager(),\n                        new IResultCallback<Map<String, NodeControllerInfo>>() {\n                            @Override\n                            public void setValue(Map<String, NodeControllerInfo> result) {\n                                new IPCResponder<CCNCFunctions.GetNodeControllersInfoResponseFunction>(handle, -1)\n                                        .setValue(new CCNCFunctions.GetNodeControllersInfoResponseFunction(result));\n                            }\n\n                            @Override\n                            public void setException(Exception e) {\n                            }\n                        }));\n                break;\n            case STATE_DUMP_RESPONSE:\n                CCNCFunctions.StateDumpResponseFunction dsrf = (StateDumpResponseFunction) fn;\n                ccs.getWorkQueue().schedule(new NotifyStateDumpResponse(ccs, dsrf.getNodeId(),\n                        dsrf.getStateDumpId(), dsrf.getState()));\n                break;\n            case SHUTDOWN_RESPONSE:\n                CCNCFunctions.ShutdownResponseFunction sdrf = (ShutdownResponseFunction) fn;\n                ccs.getWorkQueue().schedule(new NotifyShutdownWork(ccs, sdrf.getNodeId()));\n                break;\n            case THREAD_DUMP_RESPONSE:\n                CCNCFunctions.ThreadDumpResponseFunction tdrf =\n                        (CCNCFunctions.ThreadDumpResponseFunction)fn;\n                ccs.getWorkQueue().schedule(new NotifyThreadDumpResponse(ccs,\n                        tdrf.getRequestId(), tdrf.getThreadDumpJSON()));\n                break;\n            default:\n                LOGGER.warning(\"Unknown function: \" + fn.getFunctionId());\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                col = (int)val[1];\n\n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            Float max = Float.MIN_VALUE;\n            for(int i = 0; i < table.data.size(); i++)\n            {\n                Object o = table.data.get(i)[col-1];\n                if (o instanceof Float)\n                    max = Math.max((Float)o, max);\n            }\n            if (max == Float.MIN_VALUE)\n            {\n                return 0f;\n            }\n            return max;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static <V> Iterable<V> topologicalSort(\n            @Nonnull Map<V, List<V>> adjacencyMap, @Nonnull Function<V, String> vertexNameFn\n    ) {\n        Map<V, TarjanVertex<V>> tarjanVertices =\n                adjacencyMap.keySet().stream()\n                            .map(v -> entry(v, new TarjanVertex<>(v)))\n                            .collect(toMap(Entry::getKey, Entry::getValue));\n        Map<TarjanVertex<V>, List<TarjanVertex<V>>> tarjanAdjacencyMap =\n                adjacencyMap.entrySet().stream()\n                            .collect(toMap(e -> tarjanVertices.get(e.getKey()),\n                                           e -> e.getValue().stream()\n                                                 .map(tarjanVertices::get)\n                                                 .collect(toList())));\n        return new TopologicalSorter<>(tarjanAdjacencyMap, vertexNameFn).go();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    protected XMLElement(HashMap entities,\n                         boolean skipLeadingWhitespace,\n                         boolean fillBasicConversionTable,\n                         boolean ignoreCase) {\n        this.ignoreWhitespace = skipLeadingWhitespace;\n        this.ignoreCase = ignoreCase;\n        this.name = null;\n        this.contents = \"\";\n        this.attributes = new HashMap();\n        this.children = new ArrayList();\n        this.entities = entities;\n        this.lineNr = 0;\n        Iterator iter = this.entities.keySet().iterator();\n        while (iter.hasNext()) {\n            Object key = iter.next();\n            Object value = this.entities.get(key);\n            if (value instanceof String) {\n                value = ((String) value).toCharArray();\n                this.entities.put(key, value);\n            }\n        }\n        if (fillBasicConversionTable) {\n            this.entities.put(\"amp\", new char[]{'&'});\n            this.entities.put(\"quot\", new char[]{'\"'});\n            this.entities.put(\"apos\", new char[]{'\\''});\n            this.entities.put(\"lt\", new char[]{'<'});\n            this.entities.put(\"gt\", new char[]{'>'});\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void removePropertyChangeListener(\n                                                          String propertyName,\n                                                          PropertyChangeListener listener) {\n        synchronized (getObjectLock()) {\n            if (listener == null || changeSupport == null) {\n                return;\n            }\n            changeSupport.removePropertyChangeListener(propertyName, listener);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n\tpublic void testBlock () throws ValidationException\n\t{\n\t\tBlk b1 =\n\t\t\t\tBlk.fromWireDump (\"\");\n\t\tassertTrue (b1.getHash ().equals (\"0000000000000449ee5b94ba7a051caffff5c23d6a03335f6e20e3985b5ffa61\"));\n\t\tBlk b2 = Blk.fromWireDump (b1.toWireDump ());\n\t\tb2.computeHash ();\n\t\tassertTrue (b1.getHash ().equals (b2.getHash ()));\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic Vector<Operator> topologicalSort() {\n\t\tfinal Map<Operator, Integer> originalIndices = new HashMap<Operator, Integer>();\n\t\tfor (int i = 0; i < operators.size(); i++) {\n\t\t\toriginalIndices.put(operators.get(i), i);\n\t\t}\n\t\tEdgeCounter counter = new EdgeCounter(operators);\n\t\tfor (Operator child : getOperators()) {\n\t\t\tfor (OutputPort out : child.getOutputPorts().getAllPorts()) {\n\t\t\t\tInputPort dest = out.getDestination();\n\t\t\t\tif (dest != null) {\n\t\t\t\t\tcounter.incNumEdges(dest.getPorts().getOwner().getOperator());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tVector<Operator> sorted = new Vector<Operator>();\n\t\tPriorityQueue<Operator> independentOperators = new PriorityQueue<Operator>(Math.max(1, operators.size()),\n\t\t\t\tnew Comparator<Operator>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic int compare(Operator o1, Operator o2) {\n\t\t\t\t\t\treturn originalIndices.get(o1) - originalIndices.get(o2);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\tindependentOperators.addAll(counter.getIndependentOperators());\n\t\twhile (!independentOperators.isEmpty()) {\n\t\t\tOperator first = independentOperators.poll();\n\t\t\tsorted.add(first);\n\t\t\tfor (OutputPort out : first.getOutputPorts().getAllPorts()) {\n\t\t\t\tInputPort dest = out.getDestination();\n\t\t\t\tif (dest != null) {\n\t\t\t\t\tOperator destOp = dest.getPorts().getOwner().getOperator();\n\t\t\t\t\tif (counter.decNumEdges(destOp) == 0) {\n\t\t\t\t\t\tindependentOperators.add(destOp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public MissionData(String missionName, String missionId, float lengthOfGameMinutes,\n            float lengthOfIntervalMinutes, float challengePaceMinutesPerMile) {\n        this(missionName, missionId, lengthOfGameMinutes, lengthOfIntervalMinutes,\n                challengePaceMinutesPerMile, new HashMap<String, Moment>(), null, null);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic <A extends Closeable> A api(Class<A> apitype, final String provider, final String credId, final String url,\n            final String zones, final boolean trustAll) {\n        return api(apitype, provider, credId, buildJcloudsOverrides(url, zones, trustAll));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void parseTypes(Element typesElement, String parentName) {\n        if (typesElement != null) {\n            for (Element type : XmlElementUtil.getNamedChildElements(typesElement, \"Type\")) {\n                String name = parentName + \".\" + getString(type, \"Name\");\n\n                parseMessages(XmlElementUtil.getFirstElementByTagName(type, \"Messages\"), name);\n                parseMembers(XmlElementUtil.getFirstElementByTagName(type, \"Members\"), name);\n            }\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static <N extends RootedDAGNode<N>> List<N> topologicalSort(N root) throws GraphException {\n\t\tList<N> queued = new ArrayList<N>();\n\t\tqueued.add(root);\n\t\tint i=0;\n\t\twhile (i<queued.size()) {\n\t\t\tN n = queued.get(i);\n\t\t\tfor (N c : n.getChildren()) {\n\t\t\t\tif (!queued.contains(c))\n\t\t\t\t\tqueued.add(c);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tCollections.reverse(queued);\n\t\tList<N> sorted = new ArrayList<N>();\n\t\ti = 0;\n\t\twhile (!queued.isEmpty()) {\n\t\t\ti = queued.size()-1;\n\t\t\twhile (i>=0) {\n\t\t\t\tN n = queued.get(i);\n\t\t\t\tboolean allParentsSorted = true;\n\t\t\t\tfor (N p : n.getParents()) {\n\t\t\t\t\tif (!sorted.contains(p)) {\n\t\t\t\t\t\tallParentsSorted = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (allParentsSorted) {\n\t\t\t\t\tsorted.add(queued.remove(i));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tif (i==-1)\n\t\t\t\tthrow new GraphException(\"Cannot produce a topological sort: not a DAG\");\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n  public final BlockTermState writeTerm(BytesRef term, TermsEnum termsEnum, FixedBitSet docsSeen) throws IOException {\n    startTerm();\n    if (writePositions == false) {\n      docsEnum = termsEnum.docs(null, docsEnum, enumFlags);\n    } else {\n      posEnum = termsEnum.docsAndPositions(null, posEnum, enumFlags);\n      docsEnum = posEnum;\n    }\n    assert docsEnum != null;\n\n    int docFreq = 0;\n    long totalTermFreq = 0;\n    while (true) {\n      int docID = docsEnum.nextDoc();\n      if (docID == DocsEnum.NO_MORE_DOCS) {\n        break;\n      }\n      docFreq++;\n      docsSeen.set(docID);\n      int freq;\n      if (writeFreqs) {\n        freq = docsEnum.freq();\n        totalTermFreq += freq;\n      } else {\n        freq = -1;\n      }\n      startDoc(docID, freq);\n\n      if (writePositions) {\n        for(int i=0;i<freq;i++) {\n          int pos = posEnum.nextPosition();\n          BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n          int startOffset;\n          int endOffset;\n          if (writeOffsets) {\n            startOffset = posEnum.startOffset();\n            endOffset = posEnum.endOffset();\n          } else {\n            startOffset = -1;\n            endOffset = -1;\n          }\n          addPosition(pos, payload, startOffset, endOffset);\n        }\n      }\n\n      finishDoc();\n    }\n\n    if (docFreq == 0) {\n      return null;\n    } else {\n      BlockTermState state = newTermState();\n      state.docFreq = docFreq;\n      state.totalTermFreq = writeFreqs ? totalTermFreq : -1;\n      finishTerm(state);\n      return state;\n    }\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(java.io.Reader r) throws org.apache.xmlbeans.XmlException, java.io.IOException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( r, type, null ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic Runner(Analyser handler, Scenario scenario) throws Exception {\n      this.server = new Adapter(handler, scenario);\n      this.manager = new SecurityManager();\n      this.target = new StringBuilder();\n      this.header = new KeyMap<String>();\n      this.body = new ArrayBuffer(1048576);\n      this.scenario = scenario;\n      this.handler = handler;\n   }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate Expression readCondition() {\n        if (readIf(\"NOT\")) {\n            return new ConditionNot(readCondition());\n        }\n        if (readIf(\"EXISTS\")) {\n            read(\"(\");\n            Query query = parseSelect();\n            read(\")\");\n            return new ConditionExists(query);\n        }\n        Expression r = readConcat();\n        while (true) {\n            int backup = parseIndex;\n            boolean not = false;\n            if (readIf(\"NOT\")) {\n                not = true;\n                if (isToken(\"NULL\")) {\n                    parseIndex = backup;\n                    currentToken = \"NOT\";\n                    break;\n                }\n            }\n            if (readIf(\"LIKE\")) {\n                Expression b = readConcat();\n                Expression esc = null;\n                if (readIf(\"ESCAPE\")) {\n                    esc = readConcat();\n                }\n                recompileAlways = true;\n                r = new CompareLike(database, r, b, esc, false);\n            } else if (readIf(\"REGEXP\")) {\n                Expression b = readConcat();\n                r = new CompareLike(database, r, b, null, true);\n            } else if (readIf(\"IS\")) {\n                if (readIf(\"NOT\")) {\n                    if (readIf(\"NULL\")) {\n                        r = new Comparison(session, Comparison.IS_NOT_NULL, r,\n                                null);\n                    } else if (readIf(\"DISTINCT\")) {\n                        read(\"FROM\");\n                        r = new Comparison(session, Comparison.EQUAL_NULL_SAFE,\n                                r, readConcat());\n                    } else {\n                        r = new Comparison(session,\n                                Comparison.NOT_EQUAL_NULL_SAFE, r, readConcat());\n                    }\n                } else if (readIf(\"NULL\")) {\n                    r = new Comparison(session, Comparison.IS_NULL, r, null);\n                } else if (readIf(\"DISTINCT\")) {\n                    read(\"FROM\");\n                    r = new Comparison(session, Comparison.NOT_EQUAL_NULL_SAFE,\n                            r, readConcat());\n                } else {\n                    r = new Comparison(session, Comparison.EQUAL_NULL_SAFE, r,\n                            readConcat());\n                }\n            } else if (readIf(\"IN\")) {\n                read(\"(\");\n                if (readIf(\")\")) {\n                    r = ValueExpression.get(ValueBoolean.get(false));\n                } else {\n                    if (isSelect()) {\n                        Query query = parseSelect();\n                        r = new ConditionInSelect(database, r, query, false,\n                                Comparison.EQUAL);\n                    } else {\n                        ArrayList<Expression> v = New.arrayList();\n                        Expression last;\n                        do {\n                            last = readExpression();\n                            v.add(last);\n                        } while (readIf(\",\"));\n                        if (v.size() == 1 && (last instanceof Subquery)) {\n                            Subquery s = (Subquery) last;\n                            Query q = s.getQuery();\n                            r = new ConditionInSelect(database, r, q, false,\n                                    Comparison.EQUAL);\n                        } else {\n                            r = new ConditionIn(database, r, v);\n                        }\n                    }\n                    read(\")\");\n                }\n            } else if (readIf(\"BETWEEN\")) {\n                Expression low = readConcat();\n                read(\"AND\");\n                Expression high = readConcat();\n                Expression condLow = new Comparison(session,\n                        Comparison.SMALLER_EQUAL, low, r);\n                Expression condHigh = new Comparison(session,\n                        Comparison.BIGGER_EQUAL, high, r);\n                r = new ConditionAndOr(ConditionAndOr.AND, condLow, condHigh);\n            } else {\n                int compareType = getCompareType(currentTokenType);\n                if (compareType < 0) {\n                    break;\n                }\n                read();\n                if (readIf(\"ALL\")) {\n                    read(\"(\");\n                    Query query = parseSelect();\n                    r = new ConditionInSelect(database, r, query, true,\n                            compareType);\n                    read(\")\");\n                } else if (readIf(\"ANY\") || readIf(\"SOME\")) {\n                    read(\"(\");\n                    Query query = parseSelect();\n                    r = new ConditionInSelect(database, r, query, false,\n                            compareType);\n                    read(\")\");\n                } else {\n                    Expression right = readConcat();\n                    if (SysProperties.OLD_STYLE_OUTER_JOIN &&\n                            readIf(\"(\") && readIf(\"+\") && readIf(\")\")) {\n                        if (r instanceof ExpressionColumn &&\n                                right instanceof ExpressionColumn) {\n                            ExpressionColumn leftCol = (ExpressionColumn) r;\n                            ExpressionColumn rightCol = (ExpressionColumn) right;\n                            ArrayList<TableFilter> filters = currentSelect\n                                    .getTopFilters();\n                            for (TableFilter f : filters) {\n                                while (f != null) {\n                                    leftCol.mapColumns(f, 0);\n                                    rightCol.mapColumns(f, 0);\n                                    f = f.getJoin();\n                                }\n                            }\n                            TableFilter leftFilter = leftCol.getTableFilter();\n                            TableFilter rightFilter = rightCol.getTableFilter();\n                            r = new Comparison(session, compareType, r, right);\n                            if (leftFilter != null && rightFilter != null) {\n                                int idx = filters.indexOf(rightFilter);\n                                if (idx >= 0) {\n                                    filters.remove(idx);\n                                    leftFilter.addJoin(rightFilter, true,\n                                            false, r);\n                                } else {\n                                    rightFilter.mapAndAddFilter(r);\n                                }\n                                r = ValueExpression.get(ValueBoolean.get(true));\n                            }\n                        }\n                    } else {\n                        r = new Comparison(session, compareType, r, right);\n                    }\n                }\n            }\n            if (not) {\n                r = new ConditionNot(r);\n            }\n        }\n        return r;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Collection createRenderableCollectionNS(String opName,\n                                                   ParameterBlock args,\n                                                   RenderingHints hints) {\n        if(opName == null) {\n            throw new IllegalArgumentException(JaiI18N.getString(\"JAI14\"));\n        } else if (args == null) {\n            throw new IllegalArgumentException(JaiI18N.getString(\"JAI15\"));\n        }\n\n\tString modeName = \"renderableCollection\";\n\n        OperationDescriptor odesc = (OperationDescriptor)\n            operationRegistry.getDescriptor(modeName, opName);\n\n        if (odesc == null) {\n            throw new IllegalArgumentException(opName + \": \" +\n                                               JaiI18N.getString(\"JAI0\"));\n        }\n\n\tClass destClass = odesc.getDestClass(modeName);\n\n\tif (!RenderableImage.class.isAssignableFrom(destClass) &&\n\t    !CollectionImage.class.isAssignableFrom(destClass)) {\n\t  throw new IllegalArgumentException(opName + \": \" +\n\t\t\t\t\t     JaiI18N.getString(\"JAI6\"));\n        }\n\n\n\n        StringBuffer msg = new StringBuffer();\n        args = (ParameterBlock)args.clone();\n        RenderingHints mergedHints =\n            mergeRenderingHints(renderingHints, hints);\n\tif (odesc.validateArguments(modeName, args, msg)) {\n            if (RenderableImage.class.isAssignableFrom(destClass)) {\n                Vector v = new Vector(1);\n                RenderableOp op =\n                    new RenderableOp(operationRegistry, opName, args,\n                                     mergedHints);\n                v.add(op);\n                return v;\n            } else {\n                CollectionOp cOp = new\n                    CollectionOp(operationRegistry, opName, args,\n                                 mergedHints, true);\n\n                if (odesc.isImmediate()) {\n                    Collection coll = null;\n                    coll = cOp.getCollection();\n                    if(coll == null) {\n                        return null;\n                    }\n                }\n\n                return cOp;\n            }\n\n\t} else {\n            int numSources = odesc.getNumSources();\n            Vector sources = args.getSources();\n\n\n\n            Iterator[] iters = new Iterator[numSources];\n            Iterator iter = null;\n            int size = Integer.MAX_VALUE;\n            for (int i = 0; i < numSources; i++) {\n                Object s = sources.elementAt(i);\n                if (s instanceof Collection) {\n                    iters[i] = ((Collection)s).iterator();\n                    if (iter == null || ((Collection)s).size() < size) {\n                        iter = iters[i];\n                        size = ((Collection)s).size();\n                    }\n                }\n            }\n\n            if (iter == null) {\n\n\n                throw new IllegalArgumentException(msg.toString());\n            }\n\n            Collection col = null;\n            for (int i = 0; i < numSources; i++) {\n                Object s = sources.elementAt(i);\n                if (s instanceof Collection) {\n                    try {\n                        col = (Collection)s.getClass().newInstance();\n                        break;\n                    } catch (Exception e) {\n                        sendExceptionToListener(\n                            JaiI18N.getString(\"JAI16\") + s.getClass().getName(),\n                            e);\n                    }\n                }\n            }\n            if (col == null) {\n                col = new Vector();\n            }\n\n            Class[] sourceClasses = odesc.getSourceClasses(modeName);\n\n            while (iter.hasNext()) {\n                ParameterBlock pb = new ParameterBlock();\n                pb.setParameters(args.getParameters());\n\n                for (int i = 0; i < numSources; i++) {\n                    Object nextSource = null;\n                    if (iters[i] == null) {\n                        nextSource = sources.elementAt(i);\n                    } else {\n                        nextSource = iters[i].next();\n                    }\n\n                    if(!sourceClasses[i].isAssignableFrom(nextSource.getClass()) &&\n                       !(nextSource instanceof Collection)) {\n                        throw new IllegalArgumentException(msg.toString());\n                    }\n                    pb.addSource(nextSource);\n                }\n\n                Collection c = createRenderableCollectionNS(opName, pb,\n                                                            mergedHints);\n                if (c instanceof Vector &&\n                    c.size() == 1 &&\n                    ((Vector)c).elementAt(0) instanceof RenderableOp) {\n                    col.add(((Vector)c).elementAt(0));\n                } else {\n                    col.add(c);\n                }\n            }\n\n            return col;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void testParameterTypes() throws Exception {\n        Response<String> response = webb\n                .get(\"/parameter-types\")\n                .param(\"string\", SIMPLE_ASCII)\n                .param(\"number\", 815)\n                .param(\"number\", 4711) // test overwrite feature of multiple calls with same name\n                .param(\"null\", null)\n                .param(\"empty\", \"\")\n                .asString();\n\n        assertEquals(204, response.getStatusCode());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nboolean resolveBundle(boolean resolve, HashSet<BundleClassLoader> hashSet) throws BundleException {\n\n        if (Framework.DEBUG_CLASSLOADING && log.isInfoEnabled()) {\n            log.info(\"BundleClassLoader: Resolving \" + this.bundle + (resolve ? \" (critical)\" : \" (not critical)\"));\n        }\n        List<String> pkgs=BundleInfoList.getInstance().\n                getDependencyForBundle(bundle.getLocation());\n        dependencyClsLoaders=new ArrayList<BundleClassLoader>(pkgs.size());\n        for (int i=0;i<pkgs.size();i++){\n            dependencyClsLoaders.add((BundleClassLoader) ACDD.getInstance().getBundleClassLoader(pkgs.get(i)));\n        }\n\n        return true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public <T> List<T> toBeanList(ResultSet rs, Class<? extends T> type) throws SQLException {\n        List<T> results = new ArrayList<T>();\n\n        if (!rs.next()) {\n            return results;\n        }\n\n        PropertyDescriptor[] props = this.propertyDescriptors(type);\n        ResultSetMetaData rsmd = rs.getMetaData();\n        int[] columnToProperty = this.mapColumnsToProperties(rsmd, props);\n\n        do {\n            results.add(this.createBean(rs, type, props, columnToProperty));\n        } while (rs.next());\n\n        return results;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void printMethods(Class<?> cls) {\n\t\tMethod[] methods = cls.getDeclaredMethods();\n\t\tfor (Method method : methods) {\n\t\t\tString name = method.getName();\n\t\t\tClass<?>[] parameterType = method.getParameterTypes();\n\t\t\tClass<?> returnType = method.getReturnType();\n\t\t\tSystem.out.println(name);\n\t\t\tSystem.out.println(returnType.getName());\n\t\t\tfor (Class<?> class1 : parameterType)\n\t\t\t\tSystem.out.println(class1);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n  public static double interpolateZ(Coordinate p, Coordinate v0, Coordinate v1,\n      Coordinate v2)\n  {\n    double x0 = v0.x;\n    double y0 = v0.y;\n    double a = v1.x - x0;\n    double b = v2.x - x0;\n    double c = v1.y - y0;\n    double d = v2.y - y0;\n    double det = a * d - b * c;\n    double dx = p.x - x0;\n    double dy = p.y - y0;\n    double t = (d * dx - b * dy) / det;\n    double u = (-c * dx + a * dy) / det;\n    double z = v0.z + t * (v1.z - v0.z) + u * (v2.z - v0.z);\n    return z;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void addFooterView(View v, Object data, boolean isSelectable) {\n\t\tFixedViewInfo info = new FixedViewInfo();\n\t\tinfo.view = v;\n\t\tinfo.data = data;\n\t\tinfo.isSelectable = isSelectable;\n\t\tmFooterViewInfos.add(info);\n\n\t\tif (mDataSetObserver != null) {\n\t\t\tmDataSetObserver.onChanged();\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, boolean isStatic, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            lineNumber = printMethod(mv, clazz, method, isStatic, lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic JMethod addGetter(final JDefinedClass definedClass, final JFieldVar field) {\n        final JMethod method = definedClass.method(JMod.PUBLIC, field.type(), getGetterName(field));\n        final JBlock block = method.body();\n        block._return(field);\n        return method;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public BeanConnector(Class<E> beanClass, Matcher<PropertyChangeEvent> eventMatcher) {\n        this(beanClass);\n        setEventMatcher(eventMatcher);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" deltaNeutralOpenClose=\" + order.m_deltaNeutralOpenClose +\n        \" deltaNeutralShortSale=\" + order.m_deltaNeutralShortSale +\n        \" deltaNeutralShortSaleSlot=\" + order.m_deltaNeutralShortSaleSlot +\n        \" deltaNeutralDesignatedLocation=\" + order.m_deltaNeutralDesignatedLocation +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void channelActive(ChannelHandlerContext ctx) {\n        ProxyRule proxyRule = new ProxyRule();\n        long serverId = 1;\n        String host = \"127.0.0.1\";\n        int port = 7090;\n        proxyRule.setServerId(serverId);\n        proxyRule.setRemoteHost(host);\n        proxyRule.setRemotePort(port);\n\n        this.proxySession = connectProxyRule(ctx, proxyRule);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void handlePatch(final PatchParam patchParam) throws Throwable {\n        {\n            Class<?> cls = null;\n            try {\n                cls= patchParam.context.getClass().getClassLoader().loadClass(\"com.taobao.dexposed.TestFragment\");\n            } catch (Exception e) {\n                e.printStackTrace();\n                return;\n            }\n            Log.e(TAG, \"cls:\" + cls);\n            DexposedBridge.findAndHookMethod(cls, \"getText\", new XC_MethodReplacement() {\n                @Override\n                protected Object replaceHookedMethod(MethodHookParam methodHookParam) throws Throwable {\n                    Log.e(TAG, \"methodHookParam:\" + methodHookParam.method.getName());\n                    return \"from patch\";\n                }\n            });\n\n            DexposedBridge.findAndHookMethod(cls, \"onCreateView\", LayoutInflater.class, ViewGroup.class, Bundle.class, new XC_MethodReplacement() {\n                @Override\n                protected Object replaceHookedMethod(MethodHookParam methodHookParam) throws Throwable {\n                    ViewGroup view = (ViewGroup) methodHookParam.args[1];\n                    TextView tv = new TextView(view.getContext());\n                    tv.setText(\"replace onCreateView\");\n                    return tv;\n                }\n            });\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.crm._2007.webservices.GetInvoiceProductsFromOpportunityRequest parse(javax.xml.stream.XMLStreamReader sr, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException {\n          return (com.microsoft.schemas.crm._2007.webservices.GetInvoiceProductsFromOpportunityRequest) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( sr, type, options ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n\n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n\n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n\n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static <N extends RootedDAGNode<N>> List<N> topologicalSort(N root) throws GraphException {\n\t\tList<N> queued = new ArrayList<N>();\n\t\tqueued.add(root);\n\t\tint i=0;\n\t\twhile (i<queued.size()) {\n\t\t\tN n = queued.get(i);\n\t\t\tfor (N c : n.getChildren()) {\n\t\t\t\tif (!queued.contains(c))\n\t\t\t\t\tqueued.add(c);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tCollections.reverse(queued);\n\t\tList<N> sorted = new ArrayList<N>();\n\t\ti = 0;\n\t\twhile (!queued.isEmpty()) {\n\t\t\ti = queued.size()-1;\n\t\t\twhile (i>=0) {\n\t\t\t\tN n = queued.get(i);\n\t\t\t\tboolean allParentsSorted = true;\n\t\t\t\tfor (N p : n.getParents()) {\n\t\t\t\t\tif (!sorted.contains(p)) {\n\t\t\t\t\t\tallParentsSorted = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (allParentsSorted) {\n\t\t\t\t\tsorted.add(queued.remove(i));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tif (i==-1)\n\t\t\t\tthrow new GraphException(\"Cannot produce a topological sort: not a DAG\");\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void main(String[] args) {\n        Looper.prepare();\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (sPower) {\n                    String cmd = String.format(\"am startservice%s-n com.aigestudio.daemon/\" +\n                                    \"com.aigestudio.daemon.services.DaemonService\",\n                            SysUtil.isAfter17() ? \" --user 0 \" : \" \");\n                    LogUtil.i(\"CMD exec \" + cmd);\n                    try {\n                        Runtime.getRuntime().exec(cmd);\n                    } catch (IOException e) {\n                    }\n                    try {\n                        Thread.sleep(1500);\n                    } catch (InterruptedException e) {\n                        LogUtil.w(\"Thread sleep failed:\" + e.toString());\n                    }\n                }\n            }\n        }).start();\n        Looper.loop();\n        LogUtil.i(\"====================Daemon exit with error====================\");\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void registerReceiver(Context c,\n                                        BroadcastReceiver receiver,\n                                        IntentFilter f, boolean local) {\n        String hashString = receiver.toString();\n        if (!isRegistered(receiver)) {\n            try {\n                if (local)\n                    LocalBroadcastManager.getInstance(c).registerReceiver(receiver, f);\n                else\n                    c.registerReceiver(receiver, f);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            getMap().put(hashString, local);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tpublic List<Gadget> findAll(int start, int end) throws SystemException {\n\t\treturn findAll(start, end, null);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\tpublic void onClick(View v) {\n\t\tautoTest = false;\n\t\tswitch (v.getId()) {\n\t\tcase R.id.normal_btn:\n\t\t\tif (layout == null)\n\t\t\t\treturn;\n\t\t\tAdViewLayout.isTest = false;\n\t\t\tadViewLayout = new AdViewLayout(this, sdkKey);\n\n\t\t\tif (null != adViewLayout) {\n\t\t\t\tAdViewUtil.logInfo(\"setInterFace\");\n\t\t\t\tadViewLayout.setAdViewInterface(this);\n\t\t\t\tlayout.removeAllViews();\n\t\t\t\tlayout.addView(adViewLayout);\n\t\t\t\tlayout.invalidate();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase R.id.clear_btn:\n\t\t\t if (layout == null)\n\t\t\t return;\n\t\t\t AdViewLayout.isTest = true;\n\t\t\t adViewLayout = new AdViewLayout(this, sdkKey);\n\t\t\tbreak;\n\t\tcase R.id.start_btn:\n\t\t\tautoTest = true;\n\t\t\tcount = 0;\n\t\t\tlist = adViewLayout.adViewManager.getRationList();\n\n\t\t\tadapter = new BaseAdapter() {\n\t\t\t\t@Override\n\t\t\t\tpublic View getView(int position, View convertView,\n\t\t\t\t\t\tViewGroup parent) {\n\t\t\t\t\tLayoutInflater layoutInflater = LayoutInflater\n\t\t\t\t\t\t\t.from(Invoker.this);\n\t\t\t\t\tconvertView = layoutInflater.inflate(R.layout.listitem,\n\t\t\t\t\t\t\tnull);\n\t\t\t\t\tTextView name = (TextView) convertView\n\t\t\t\t\t\t\t.findViewById(R.id.textView1);\n\t\t\t\t\tTextView status = (TextView) convertView\n\t\t\t\t\t\t\t.findViewById(R.id.textView3);\n\t\t\t\t\tname.setTextSize(20);\n\t\t\t\t\tstatus.setTextSize(20);\n\t\t\t\t\tname.setText(list.get(position).name);\n\t\t\t\t\tstatus.setText(list.get(position).nid);\n\t\t\t\t\treturn convertView;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic long getItemId(int position) {\n\t\t\t\t\treturn position;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic Object getItem(int position) {\n\t\t\t\t\treturn list.get(position);\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic int getCount() {\n\t\t\t\t\treturn list.size();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlistView.setAdapter(adapter);\n\n\t\t\tadViewLayout.postDelayed(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tif (count < list.size()) {\n\t\t\t\t\t\tadViewLayout.nextRation = (Ration) list.get(count);\n\t\t\t\t\t\tAdViewAdapter.handleOne(adViewLayout,\n\t\t\t\t\t\t\t\t(Ration) list.get(count));\n\t\t\t\t\t\tadViewLayout.extra.cycleTime = 9000000;\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, 2 * 1000);\n\t\t\tbreak;\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void initStatement(int type, int concurrency, int holdability,\n                               int autoGeneratedKeys, String[] columnNames,\n                               int[] columnIndexes) throws SqlException {\n        switch (type) {\n        case java.sql.ResultSet.TYPE_FORWARD_ONLY:\n        case java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE:\n        case java.sql.ResultSet.TYPE_SCROLL_SENSITIVE:\n            resultSetType_ = type;\n            break;\n        default:\n            throw new SqlException(agent_.logWriter_, \n                new ClientMessageId(SQLState.INVALID_API_PARAMETER),\n                new Integer(type), \"type\", \"createStatement()\");\n        }\n\n        switch (concurrency) {\n        case java.sql.ResultSet.CONCUR_READ_ONLY:\n        case java.sql.ResultSet.CONCUR_UPDATABLE:\n            resultSetConcurrency_ = concurrency;\n            break;\n        default:\n            throw new SqlException(agent_.logWriter_, \n                new ClientMessageId(SQLState.INVALID_API_PARAMETER),\n                new Integer(concurrency), \"concurrency\",\n                \"createStatement()\");\n        }\n\n        switch (holdability) {\n        case ResultSet.CLOSE_CURSORS_AT_COMMIT:\n        case ResultSet.HOLD_CURSORS_OVER_COMMIT:\n            resultSetHoldability_ = holdability;\n            break;\n        default:\n            throw new SqlException(agent_.logWriter_,\n                new ClientMessageId(SQLState.INVALID_API_PARAMETER),\n                new Integer(holdability), \"holdability\",\n                \"createStatement()\");\n        }\n\n        switch (autoGeneratedKeys) {\n        case java.sql.Statement.NO_GENERATED_KEYS:\n        case java.sql.Statement.RETURN_GENERATED_KEYS:\n            autoGeneratedKeys_ = autoGeneratedKeys;\n            break;\n        default:\n            throw new SqlException(agent_.logWriter_, \n                new ClientMessageId(SQLState.INVALID_API_PARAMETER),\n                new Integer(autoGeneratedKeys),\n                \"autoGeneratedKeys\", \"createStatement\");\n        }\n\n        generatedKeysColumnNames_ = columnNames;\n        generatedKeysColumnIndexes_ = columnIndexes;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic boolean handleControlWord(RtfCtrlWordData ctrlWordData) {\n\t\tif(ctrlWordData.ctrlWord.equals(\"blue\")) this.setBlue(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"red\")) this.setRed(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"green\")) this.setGreen(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"cshade\")) this.setShade(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"ctint\")) this.setTint(ctrlWordData.intValue());\n\treturn true;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic BlameGenerator push(String description, RawText contents)\n\t\t\tthrows IOException {\n\t\tif (description == null)\n\t\t\tdescription = JGitText.get().blameNotCommittedYet;\n\t\tBlobCandidate c = new BlobCandidate(description, resultPath);\n\t\tc.sourceText = contents;\n\t\tc.regionList = new Region(0, 0, contents.size());\n\t\tremaining = contents.size();\n\t\tpush(c);\n\t\treturn this;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                col = (int)val[1];\n\n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            Float min = Float.MAX_VALUE;\n            for(int i = 0; i < table.data.size(); i++)\n            {\n                Object o = table.data.get(i)[col-1];\n                if (o instanceof Float)\n                    min = Math.min((Float)o, min);\n            }\n            if (min == Float.MAX_VALUE)\n            {\n                return 0f;\n            }\n            return min;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n  public EvaluationResult evaluate(MyrrixRecommender recommender,\n                                   RescorerProvider provider, // ignored\n                                   Multimap<Long,RecommendedItem> testData) throws TasteException {\n    FastByIDMap<FastIDSet> converted = new FastByIDMap<FastIDSet>(testData.size(), 1.25f);\n    for (long userID : testData.keySet()) {\n      Collection<RecommendedItem> userTestData = testData.get(userID);\n      FastIDSet itemIDs = new FastIDSet(userTestData.size(), 1.25f);\n      converted.put(userID, itemIDs);\n      for (RecommendedItem datum : userTestData) {\n        itemIDs.add(datum.getItemID());\n      }\n    }\n    return evaluate(recommender, converted);\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic WebSocketServer(InetSocketAddress address, int decodercount,\n\t\t\tList<Draft> drafts, Collection<WebSocket> connectionscontainer) {\n\t\tif (address == null || decodercount < 1 || connectionscontainer == null) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"address and connectionscontainer must not be null and you need at least 1 decoder\");\n\t\t}\n\n\t\tif (drafts == null)\n\t\t\tthis.drafts = Collections.emptyList();\n\t\telse\n\t\t\tthis.drafts = drafts;\n\n\t\tthis.address = address;\n\t\tthis.connections = connectionscontainer;\n\n\t\tiqueue = new LinkedList<WebSocketImpl>();\n\n\t\tdecoders = new ArrayList<WebSocketWorker>(decodercount);\n\t\tbuffers = new LinkedBlockingQueue<ByteBuffer>();\n\t\tfor (int i = 0; i < decodercount; i++) {\n\t\t\tWebSocketWorker ex = new WebSocketWorker();\n\t\t\tdecoders.add(ex);\n\t\t\tex.start();\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic void registerResources() {\n        if (sInitialized) {\n            return;\n        }\n\n        org.chromium.content.R.attr.select_dialog_multichoice =\n                R.attr.select_dialog_multichoice;\n        org.chromium.content.R.attr.select_dialog_singlechoice =\n                R.attr.select_dialog_singlechoice;\n        org.chromium.ui.R.color.dropdown_dark_divider_color =\n                R.color.dropdown_dark_divider_color;\n        org.chromium.ui.R.color.dropdown_divider_color =\n                R.color.dropdown_divider_color;\n        org.chromium.ui.R.color.color_picker_border_color =\n                R.color.color_picker_border_color;\n        org.chromium.content.R.dimen.link_preview_overlay_radius =\n                R.dimen.link_preview_overlay_radius;\n        org.chromium.ui.R.dimen.dropdown_item_height =\n                R.dimen.dropdown_item_height;\n        org.chromium.ui.R.dimen.dropdown_item_divider_height =\n                R.dimen.dropdown_item_divider_height;\n        org.chromium.ui.R.dimen.color_button_height =\n                R.dimen.color_button_height;\n        org.chromium.ui.R.dimen.config_min_scaling_span =\n                R.dimen.config_min_scaling_span;\n        org.chromium.ui.R.dimen.config_min_scaling_touch_major =\n                R.dimen.config_min_scaling_touch_major;\n        org.chromium.content.R.drawable.ondemand_overlay =\n                R.drawable.ondemand_overlay;\n        org.chromium.ui.R.drawable.color_button_background =\n                R.drawable.color_button_background;\n        org.chromium.ui.R.drawable.color_picker_advanced_select_handle =\n                R.drawable.color_picker_advanced_select_handle;\n        org.chromium.content.R.id.ampm = R.id.ampm;\n        org.chromium.content.R.id.date_picker =\n                R.id.date_picker;\n        org.chromium.content.R.id.date_time_suggestion_value =\n                R.id.date_time_suggestion_value;\n        org.chromium.content.R.id.date_time_suggestion_label =\n                R.id.date_time_suggestion_label;\n        org.chromium.content.R.id.hour = R.id.hour;\n        org.chromium.content.R.id.milli = R.id.milli;\n        org.chromium.content.R.id.minute = R.id.minute;\n        org.chromium.content.R.id.pickers = R.id.pickers;\n        org.chromium.content.R.id.position_in_year =\n                R.id.position_in_year;\n        org.chromium.content.R.id.second = R.id.second;\n        org.chromium.content.R.id.second_colon =\n                R.id.second_colon;\n        org.chromium.content.R.id.second_dot =\n                R.id.second_dot;\n        org.chromium.content.R.id.select_action_menu_select_all =\n                R.id.select_action_menu_select_all;\n        org.chromium.content.R.id.select_action_menu_cut =\n                R.id.select_action_menu_cut;\n        org.chromium.content.R.id.select_action_menu_copy =\n                R.id.select_action_menu_copy;\n        org.chromium.content.R.id.select_action_menu_paste =\n                R.id.select_action_menu_paste;\n        org.chromium.content.R.id.select_action_menu_share =\n                R.id.select_action_menu_share;\n        org.chromium.content.R.id.select_action_menu_web_search =\n                R.id.select_action_menu_web_search;\n        org.chromium.content.R.id.time_picker =\n                R.id.time_picker;\n        org.chromium.content.R.id.year = R.id.year;\n        org.chromium.content.R.id.main_text =\n                R.id.main_text;\n        org.chromium.content.R.id.sub_text =\n                R.id.sub_text;\n        org.chromium.content.R.id.arrow_image =\n                R.id.arrow_image;\n        org.chromium.ui.R.id.selected_color_view =\n                R.id.selected_color_view;\n        org.chromium.ui.R.id.title =\n                R.id.title;\n        org.chromium.ui.R.id.more_colors_button =\n                R.id.more_colors_button;\n        org.chromium.ui.R.id.color_picker_advanced =\n                R.id.color_picker_advanced;\n        org.chromium.ui.R.id.color_picker_simple =\n                R.id.color_picker_simple;\n        org.chromium.ui.R.id.color_button_swatch =\n                R.id.color_button_swatch;\n        org.chromium.ui.R.id.more_colors_button_border =\n                R.id.more_colors_button_border;\n        org.chromium.ui.R.id.gradient =\n                R.id.gradient;\n        org.chromium.ui.R.id.text =\n                R.id.text;\n        org.chromium.ui.R.id.seek_bar =\n                R.id.seek_bar;\n        org.chromium.ui.R.id.dropdown_label =\n                R.id.dropdown_label;\n        org.chromium.ui.R.id.dropdown_popup_window =\n                R.id.dropdown_popup_window;\n        org.chromium.ui.R.id.dropdown_sublabel =\n                R.id.dropdown_sublabel;\n        org.chromium.content.R.layout.date_time_picker_dialog =\n                R.layout.date_time_picker_dialog;\n        org.chromium.content.R.layout.date_time_suggestion =\n                R.layout.date_time_suggestion;\n        org.chromium.content.R.layout.two_field_date_picker =\n                R.layout.two_field_date_picker;\n        org.chromium.content.R.layout.multi_field_time_picker_dialog =\n                R.layout.multi_field_time_picker_dialog;\n        org.chromium.content.R.layout.validation_message_bubble =\n                R.layout.validation_message_bubble;\n        org.chromium.ui.R.layout.color_picker_dialog_title =\n                R.layout.color_picker_dialog_title;\n        org.chromium.ui.R.layout.color_picker_dialog_content =\n                R.layout.color_picker_dialog_content;\n        org.chromium.ui.R.layout.color_picker_advanced_component =\n                R.layout.color_picker_advanced_component;\n        org.chromium.ui.R.layout.dropdown_item =\n                R.layout.dropdown_item;\n        org.chromium.content.R.menu.select_action_menu =\n                R.menu.select_action_menu;\n        org.chromium.content.R.string.accessibility_content_view =\n                R.string.accessibility_content_view;\n        org.chromium.content.R.string.accessibility_date_picker_month =\n                R.string.accessibility_date_picker_month;\n        org.chromium.content.R.string.accessibility_date_picker_week =\n                R.string.accessibility_date_picker_week;\n        org.chromium.content.R.string.accessibility_date_picker_year =\n                R.string.accessibility_date_picker_year;\n        org.chromium.content.R.string.accessibility_datetime_picker_date =\n                R.string.accessibility_datetime_picker_date;\n        org.chromium.content.R.string.accessibility_datetime_picker_time =\n                R.string.accessibility_datetime_picker_time;\n        org.chromium.content.R.string.actionbar_share =\n                R.string.actionbar_share;\n        org.chromium.content.R.string.actionbar_web_search =\n                R.string.actionbar_web_search;\n        org.chromium.content.R.string.date_picker_dialog_clear =\n                R.string.date_picker_dialog_clear;\n        org.chromium.content.R.string.date_picker_dialog_set =\n                R.string.date_picker_dialog_set;\n        org.chromium.content.R.string.date_picker_dialog_title =\n                R.string.date_picker_dialog_title;\n        org.chromium.content.R.string.date_picker_dialog_other_button_label =\n                R.string.date_picker_dialog_other_button_label;\n        org.chromium.content.R.string.date_time_picker_dialog_title =\n                R.string.date_time_picker_dialog_title;\n        org.chromium.content.R.string.media_player_error_button =\n                R.string.media_player_error_button;\n        org.chromium.content.R.string.media_player_error_text_invalid_progressive_playback =\n                R.string.media_player_error_text_invalid_progressive_playback;\n        org.chromium.content.R.string.media_player_error_text_unknown =\n                R.string.media_player_error_text_unknown;\n        org.chromium.content.R.string.media_player_error_title =\n                R.string.media_player_error_title;\n        org.chromium.content.R.string.media_player_loading_video =\n                R.string.media_player_loading_video;\n        org.chromium.content.R.string.month_picker_dialog_title =\n                R.string.month_picker_dialog_title;\n        org.chromium.content.R.string.profiler_error_toast =\n                R.string.profiler_error_toast;\n        org.chromium.content.R.string.profiler_no_storage_toast =\n                R.string.profiler_no_storage_toast;\n        org.chromium.content.R.string.profiler_started_toast =\n                R.string.profiler_started_toast;\n        org.chromium.content.R.string.profiler_stopped_toast =\n                R.string.profiler_stopped_toast;\n        org.chromium.content.R.string.time_picker_dialog_am =\n                R.string.time_picker_dialog_am;\n        org.chromium.content.R.string.time_picker_dialog_pm =\n                R.string.time_picker_dialog_pm;\n        org.chromium.content.R.string.time_picker_dialog_hour_minute_separator =\n                R.string.time_picker_dialog_hour_minute_separator;\n        org.chromium.content.R.string.time_picker_dialog_hour_minute_separator =\n                R.string.time_picker_dialog_hour_minute_separator;\n        org.chromium.content.R.string.time_picker_dialog_minute_second_separator =\n                R.string.time_picker_dialog_minute_second_separator;\n        org.chromium.content.R.string.time_picker_dialog_second_subsecond_separator =\n                R.string.time_picker_dialog_second_subsecond_separator;\n        org.chromium.content.R.string.time_picker_dialog_title =\n                R.string.time_picker_dialog_title;\n        org.chromium.content.R.string.week_picker_dialog_title =\n                R.string.week_picker_dialog_title;\n        org.chromium.ui.R.string.copy_to_clipboard_failure_message =\n                R.string.copy_to_clipboard_failure_message;\n        org.chromium.ui.R.string.low_memory_error =\n                R.string.low_memory_error;\n        org.chromium.ui.R.string.opening_file_error =\n                R.string.opening_file_error;\n        org.chromium.ui.R.string.color_picker_button_more =\n                R.string.color_picker_button_more;\n        org.chromium.ui.R.string.color_picker_hue =\n                R.string.color_picker_hue;\n        org.chromium.ui.R.string.color_picker_saturation =\n                R.string.color_picker_saturation;\n        org.chromium.ui.R.string.color_picker_value =\n                R.string.color_picker_value;\n        org.chromium.ui.R.string.color_picker_button_set =\n                R.string.color_picker_button_set;\n        org.chromium.ui.R.string.color_picker_button_cancel =\n                R.string.color_picker_button_cancel;\n        org.chromium.ui.R.string.color_picker_dialog_title =\n                R.string.color_picker_dialog_title;\n        org.chromium.ui.R.string.color_picker_button_red =\n                R.string.color_picker_button_red;\n        org.chromium.ui.R.string.color_picker_button_cyan =\n                R.string.color_picker_button_cyan;\n        org.chromium.ui.R.string.color_picker_button_blue =\n                R.string.color_picker_button_blue;\n        org.chromium.ui.R.string.color_picker_button_green =\n                R.string.color_picker_button_green;\n        org.chromium.ui.R.string.color_picker_button_magenta =\n                R.string.color_picker_button_magenta;\n        org.chromium.ui.R.string.color_picker_button_yellow =\n                R.string.color_picker_button_yellow;\n        org.chromium.ui.R.string.color_picker_button_black =\n                R.string.color_picker_button_black;\n        org.chromium.ui.R.string.color_picker_button_white =\n                R.string.color_picker_button_white;\n        org.chromium.content.R.style.SelectPopupDialog =\n                R.style.SelectPopupDialog;\n        org.chromium.ui.R.style.DropdownPopupWindow =\n                R.style.DropdownPopupWindow;\n\n\n        if (false) {\n            verifyFields(org.chromium.content.R.class);\n            verifyFields(org.chromium.ui.R.class);\n        }\n\n\n        \n\n        sInitialized = true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void quadrantRotate(int numquadrants,\n                               double anchorx, double anchory)\n    {\n        switch (numquadrants & 3) {\n        case 0:\n            return;\n        case 1:\n            m02 += anchorx * (m00 - m01) + anchory * (m01 + m00);\n            m12 += anchorx * (m10 - m11) + anchory * (m11 + m10);\n            rotate90();\n            break;\n        case 2:\n            m02 += anchorx * (m00 + m00) + anchory * (m01 + m01);\n            m12 += anchorx * (m10 + m10) + anchory * (m11 + m11);\n            rotate180();\n            break;\n        case 3:\n            m02 += anchorx * (m00 + m01) + anchory * (m01 - m00);\n            m12 += anchorx * (m10 + m11) + anchory * (m11 - m10);\n            rotate270();\n            break;\n        }\n        if (m02 == 0.0 && m12 == 0.0) {\n            state &= ~APPLY_TRANSLATE;\n        } else {\n            state |= APPLY_TRANSLATE;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprotected static boolean isConstant(IModelElement modelElement) {\n\n\t\tif (modelElement instanceof IField && modelElement.getParent() instanceof ISourceModule) {\n\t\t\tint flags = 0;\n\t\t\ttry {\n\t\t\t\tflags = ((IField) modelElement).getFlags();\n\t\t\t} catch (ModelException e) {\n\t\t\t}\n\t\t\tif ((flags & Modifiers.AccConstant) != 0)\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        return CharacterData.of(codePoint).isIdentifierIgnorable(codePoint);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private boolean isInContent(double x, double y, Sticker currentSticker) {\n        long startTime = System.currentTimeMillis();\n        float[] pointsDst = currentSticker.getMapPointsDst();\n        PointD pointF_1 = Utils.getMidpointCoordinate(pointsDst[0], pointsDst[1], pointsDst[2], pointsDst[3]);\n        double a1 = Utils.lineSpace(pointsDst[8], pointsDst[9], pointF_1.getX(), pointF_1.getY());\n        double b1 = Utils.lineSpace(pointsDst[8], pointsDst[9], x, y);\n        if (b1 <= a1) {\n            return true;\n        }\n        double c1 = Utils.lineSpace(pointF_1.getX(), pointF_1.getY(), x, y);\n        double p1 = (a1 + b1 + c1) / 2;\n        double s1 = Math.sqrt(p1 * (p1 - a1) * (p1 - b1) * (p1 - c1));\n        double d1 = 2 * s1 / a1;\n        if (d1 > a1) {\n            return false;\n        }\n\n        PointD pointF_2 = Utils.getMidpointCoordinate(pointsDst[2], pointsDst[3], pointsDst[4], pointsDst[5]);\n        double a2 = a1;\n        double b2 = b1;\n        double c2 = Utils.lineSpace(pointF_2.getX(), pointF_2.getY(), x, y);\n        double p2 = (a2 + b2 + c2) / 2;\n        double temp = p2 * (p2 - a2) * (p2 - b2) * (p2 - c2);\n        double s2 = Math.sqrt(temp);\n        double d2 = 2 * s2 / a2;\n        if (d2 > a1) {\n            return false;\n        }\n        long endTime = System.currentTimeMillis();\n        long time = endTime - startTime;\n\n        if (d1 <= a1 && d2 <= a1) {\n            return true;\n        }\n\n        return false;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static boolean checkExtensions(final String path, String... extensions) {\n\t\tString pathLower = path.toLowerCase();\n\t\tfor (String ext : extensions) {\n\t\t\tif (!ext.startsWith(\".\"))\n\t\t\t\text = \".\" + ext;\n\t\t\tif (pathLower.endsWith(ext))\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .directModelSubstitute(LocalDate.class, java.sql.Date.class)\n                .directModelSubstitute(LocalDateTime.class, java.util.Date.class)\n                .select()\n                .apis(requestHandler -> {\n                    String packageName = requestHandler.getHandlerMethod().getMethod()\n                            .getDeclaringClass().getPackage().getName();\n                    return packageName.startsWith(\"com.akkafun.\") && packageName.contains(\".web\");\n                })\n                .paths(PathSelectors.any())\n                .build();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic ShortcutView(final Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t\tpm = context.getPackageManager();\n\t\t\n\t\tgetResources().getInteger(R.integer.shortcut_capacity);\n\t\t\n\t\tsec = PreferenceManager.getDefaultSharedPreferences(getContext());\n\n\t\tpkg = sec.getString(\"pkg\", \"\");\n\t\tpin = sec.getString(\"pin\", \"\");\t\t\n\t\t\n\t\t\n\t\tfor (int i = 0; i < CAPACITY; i++) {\n\t\t\tfinal int b = i;\n\t\t\tApplicationInfo ai = null;\n\t\t\tString sv = null;\n\t\t\tString s = Settings.System.getString(context.getContentResolver(), \"PiSC\" + i);\n\n\t\t\tif (s == null | s == \"\") {\n\n\t\t\t\tSettings.System.putString(context.getContentResolver(), \"PiSC\"+b, \"com.pilockerstable\");\n\t\t\t}\n\t\t\tsv = s;\n\n\t\t\ttry {\n\t\t\t\tai = pm.getApplicationInfo(sv, 0);\n\t\t\t} catch (NameNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tShortCut sc = new ShortCut(context, attrs);\n\t\t\tString App_Name = (String) pm.getApplicationLabel(ai);\n\t\t\tDrawable Icon = pm.getApplicationIcon(ai);\n\t\t\tShortcutter st = new Shortcutter(App_Name, Icon);\n\t\t\tsc.setName(st.getName());\n\t\t\tsc.setImage(st.getIcon());\n\n\t\t\taddView(sc);\n\t\t\tsc.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t\n\t\t\t\tString sv = Settings.System.getString( context.getContentResolver(), \"PiSC\" + b);\n\n\t\t\t\t@Override \n\t\t\t\tpublic void onClick(View arg0) {\n\n\t\t\t\t\tif( pin.equals(\"\") || pin.equals(null) || pin.isEmpty()) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t((Activity) context).finish();\n\t\t\t\t\t\tIntent i = new Intent();\n\t\t\t\t\t\ti.setClass(getContext(), LockerService.class);\n\t\t\t\t\t\tcontext.startService(i);\n\t\t\t\t\t\tIntent LaunchIntent = context.getPackageManager().getLaunchIntentForPackage(sv);\n\t\t\t\t\t\tcontext.startActivity(LaunchIntent);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t} else{\n\t\t\t\t\t\n\t\t\t\t\tsave(\"pkg\", \"true\");\n\t\t\t\t\tIntent x = new Intent(getContext(), PinActivity.class);\n\t\t\t\t\tx.putExtra(\"sv\", sv);\n\t\t\t\t\tcontext.startActivity(x);\n\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static Graph<ITestNGMethod> topologicalSort(ITestNGMethod[] methods,\n      List<ITestNGMethod> sequentialList, List<ITestNGMethod> parallelList) {\n    Graph<ITestNGMethod> result = new Graph<ITestNGMethod>();\n\n    if (methods.length == 0) {\n      return result;\n    }\n\n    for (ITestNGMethod m : methods) {\n      result.addNode(m);\n\n      List<ITestNGMethod> predecessors = Lists.newArrayList();\n\n      String[] methodsDependedUpon = m.getMethodsDependedUpon();\n      String[] groupsDependedUpon = m.getGroupsDependedUpon();\n      if (methodsDependedUpon.length > 0) {\n        ITestNGMethod[] methodsNamed =\n          MethodHelper.findDependedUponMethods(m, methods);\n        for (ITestNGMethod pred : methodsNamed) {\n          predecessors.add(pred);\n        }\n      }\n      if (groupsDependedUpon.length > 0) {\n        for (String group : groupsDependedUpon) {\n          ITestNGMethod[] methodsThatBelongToGroup =\n            MethodGroupsHelper.findMethodsThatBelongToGroup(m, methods, group);\n          for (ITestNGMethod pred : methodsThatBelongToGroup) {\n            predecessors.add(pred);\n          }\n        }\n      }\n\n      for (ITestNGMethod predecessor : predecessors) {\n        result.addPredecessor(m, predecessor);\n      }\n    }\n\n    result.topologicalSort();\n    sequentialList.addAll(result.getStrictlySortedNodes());\n    parallelList.addAll(result.getIndependentNodes());\n\n    return result;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        int sample(final RandomGenerator random) {\n            while(true) {\n\n                final double u = hIntegralNumberOfElements + random.nextDouble() * (hIntegralX1 - hIntegralNumberOfElements);\n\n                double x = hIntegralInverse(u);\n\n                int k = (int)(x + 0.5);\n\n                if (k < 1) {\n                    k = 1;\n                }\n                else if (k > numberOfElements) {\n                    k = numberOfElements;\n                }\n\n\n                if (k - x <= s || u >= hIntegral(k + 0.5) - h(k)) {\n\n\n                    return k;\n                }\n            }\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\n\n    \n\n\n    @Override\n    public DataInputStream getFileObject(URI fileUri, int start, int limit)\n            throws CatalogIOException {\n\n        Path objectPath = Paths.get(fileUri);\n\n        if (Files.isRegularFile(objectPath)) {\n            try {\n                if (start == -1 && limit == -1) {\n                    return new DataInputStream(Files.newInputStream(objectPath));\n                } else {\n                    return new DataInputStream(IOUtils.headOffset(objectPath, start, limit));\n                }\n            } catch (IOException e) {\n                throw new CatalogIOException(\"Unable to read file\", e);\n            }\n        } else {\n            throw new CatalogIOException(\"Not a regular file: \" + objectPath.toAbsolutePath().toString());\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static final void encodeRun(StringBuffer stringbuffer, short word0,\n\t\t\tint i) {\n\t\tif (i < 4) {\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tif (word0 == 42405)\n\t\t\t\t\tstringbuffer.append('\\uA5A5');\n\t\t\t\tstringbuffer.append((char) word0);\n\t\t\t}\n\n\t\t} else {\n\t\t\tif (i == 42405) {\n\t\t\t\tif (word0 == 42405)\n\t\t\t\t\tstringbuffer.append('\\uA5A5');\n\t\t\t\tstringbuffer.append((char) word0);\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tstringbuffer.append('\\uA5A5');\n\t\t\tstringbuffer.append((char) i);\n\t\t\tstringbuffer.append((char) word0);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tprotected void func_143011_b(NBTTagCompound par1NBTTagCompound) {\n\t\tsuper.func_143011_b(par1NBTTagCompound);\n\t\t\n\n        this.src = new ChunkCoordinates(par1NBTTagCompound.getInteger(\"srcPosX\"), par1NBTTagCompound.getInteger(\"srcPosY\"), par1NBTTagCompound.getInteger(\"srcPosZ\"));\n        this.dest = new ChunkCoordinates(par1NBTTagCompound.getInteger(\"destPosX\"), par1NBTTagCompound.getInteger(\"destPosY\"), par1NBTTagCompound.getInteger(\"destPosZ\"));\n        \n        this.length = par1NBTTagCompound.getDouble(\"branchLength\");\n        this.angle = par1NBTTagCompound.getDouble(\"branchAngle\");\n        this.tilt = par1NBTTagCompound.getDouble(\"branchTilt\");\n        this.leafy = par1NBTTagCompound.getBoolean(\"branchLeafy\");\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        return CharacterData.of(codePoint).isIdentifierIgnorable(codePoint);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void extractValues(List<Object> result, Node parent, String uri, String name, int type, boolean global) {\n            if(name.startsWith(\"@\")) {\n                if(parent.getNodeType()==Node.ELEMENT_NODE) {\n                    Element e = (Element)parent;\n                    String attrName = name.substring(1);\n                    Attr attr = (uri==null) ? e.getAttributeNode(attrName) : e.getAttributeNodeNS(uri,attrName);\n                    if(attr!=null) {\n                        Object v = convertTo(attr.getValue(),type);\n                        if(v!=null) {\n                            result.add(v);\n                        }\n                    }\n                }\n                return;\n            } else {\n                if(name.equals(\".\")) {\n                    if(parent.getNodeType()==Node.ELEMENT_NODE) {\n                        String text = DOMUtil.getText(parent);\n                        if(StringUtil.isNotEmpty(text)) {\n                            Object v = convertTo(text,type);\n                            result.add(v);\n                        }\n                    }\n                } else {\n                    NodeList children = parent.getChildNodes();\n                    for(int i=0; i<children.getLength(); i++) {\n                        Node node = children.item(i);\n                        if(node.getNodeType()==Node.ELEMENT_NODE && matches(node,uri,name)) {\n                            String text = DOMUtil.getText(node);\n                            if(StringUtil.isNotEmpty(text)) {\n                                Object v = convertTo(text,type);\n                                result.add(v);\n                            }\n                        }\n                    }\n                }\n            }\n            if(global) {\n                NodeList list = parent.getChildNodes();\n                for(int i=0; i<list.getLength(); i++) {\n                    Node node = list.item(i);\n                    if(node.getNodeType()==Node.ELEMENT_NODE) {\n                        extractValues(result, node, uri, name, type, global);\n                    }\n                }\n            }\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    <T> Variable<T> reserveSlot(String name, Type type, int slot) {\n        reserveSlot(type, slot);\n        return varScope.add(name, type, slot);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    protected XMLElement(HashMap entities,\n                         boolean skipLeadingWhitespace,\n                         boolean fillBasicConversionTable,\n                         boolean ignoreCase) {\n        this.ignoreWhitespace = skipLeadingWhitespace;\n        this.ignoreCase = ignoreCase;\n        this.name = null;\n        this.contents = \"\";\n        this.attributes = new HashMap();\n        this.children = new ArrayList();\n        this.entities = entities;\n        this.lineNr = 0;\n        Iterator iter = this.entities.keySet().iterator();\n        while (iter.hasNext()) {\n            Object key = iter.next();\n            Object value = this.entities.get(key);\n            if (value instanceof String) {\n                value = ((String) value).toCharArray();\n                this.entities.put(key, value);\n            }\n        }\n        if (fillBasicConversionTable) {\n            this.entities.put(\"amp\", new char[]{'&'});\n            this.entities.put(\"quot\", new char[]{'\"'});\n            this.entities.put(\"apos\", new char[]{'\\''});\n            this.entities.put(\"lt\", new char[]{'<'});\n            this.entities.put(\"gt\", new char[]{'>'});\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean putMapNotEmptyKeyAndValue(Map<String, String> map, String key, String value,\n                                                    String defaultValue) {\n        if (map == null || StringUtil.isEmpty(key)) {\n            return false;\n        }\n\n        map.put(key, StringUtil.isEmpty(value) ? defaultValue : value);\n        return true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testBlock() throws HyperLedgerException, IOException {\n        Block b1 =\n                Block.fromWireDump(\"\", formatter, BitcoinHeader.class);\n        assertTrue(b1.getID().equals(new BID(\"0000000000000449ee5b94ba7a051caffff5c23d6a03335f6e20e3985b5ffa61\")));\n        Block b2 = Block.fromWireDump(b1.toWireDump(), formatter, BitcoinHeader.class);\n        assertTrue(b1.getID().equals(b2.getID()));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Deprecated\n\tpublic ImageData getImageData() {\n\t\treturn getImageData(100);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tpublic void checkPrivileges(HiveOperationType         hiveOpType,\n\t\t\t\t\t\t\t\tList<HivePrivilegeObject> inputHObjs,\n\t\t\t\t\t\t\t    List<HivePrivilegeObject> outputHObjs,\n\t\t\t\t\t\t\t    HiveAuthzContext          context)\n\t\t      throws HiveAuthzPluginException, HiveAccessControlException {\n\t\tUserGroupInformation ugi = getCurrentUserGroupInfo();\n\n\t\tif(ugi == null) {\n\t\t\tthrow new HiveAccessControlException(\"Permission denied: user information not available\");\n\t\t}\n\n\t\tRangerHiveAuditHandler auditHandler = new RangerHiveAuditHandler();\n\n\t\tRangerPerfTracer perf = null;\n\n\t\ttry {\n\t\t\tHiveAuthzSessionContext sessionContext = getHiveAuthzSessionContext();\n\t\t\tString                  user           = ugi.getShortUserName();\n\t\t\tSet<String>             groups         = Sets.newHashSet(ugi.getGroupNames());\n\t\t\tString clusterName = hivePlugin.getClusterName();\n\n\t\t\tif(LOG.isDebugEnabled()) {\n\t\t\t\tLOG.debug(toString(hiveOpType, inputHObjs, outputHObjs, context, sessionContext));\n\t\t\t}\n\n\t\t\tif(hiveOpType == HiveOperationType.DFS) {\n\t\t\t\thandleDfsCommand(hiveOpType, inputHObjs, user, auditHandler);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif(RangerPerfTracer.isPerfTraceEnabled(PERF_HIVEAUTH_REQUEST_LOG)) {\n\t\t\t\tperf = RangerPerfTracer.getPerfTracer(PERF_HIVEAUTH_REQUEST_LOG, \"RangerHiveAuthorizer.checkPrivileges(hiveOpType=\" + hiveOpType + \")\");\n\t\t\t}\n\n\t\t\tList<RangerHiveAccessRequest> requests = new ArrayList<RangerHiveAccessRequest>();\n\n\t\t\tif(!CollectionUtils.isEmpty(inputHObjs)) {\n\t\t\t\tfor(HivePrivilegeObject hiveObj : inputHObjs) {\n\t\t\t\t\tRangerHiveResource resource = getHiveResource(hiveOpType, hiveObj);\n\n\t\t\t\t\tif (resource == null) { // possible if input object/object is of a kind that we don't currently authorize\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tString \tpath         \t\t= hiveObj.getObjectName();\n\t\t\t\t\tHiveObjectType hiveObjType  = resource.getObjectType();\n\n\t\t\t\t\tif(hiveObjType == HiveObjectType.URI && isPathInFSScheme(path)) {\n\t\t\t\t\t\tFsAction permission = getURIAccessType(hiveOpType);\n\n\t\t\t\t\t\tif(!isURIAccessAllowed(user, permission, path, getHiveConf())) {\n\t\t\t\t\t\t\tthrow new HiveAccessControlException(String.format(\"Permission denied: user [%s] does not have [%s] privilege on [%s]\", user, permission.name(), path));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tHiveAccessType accessType = getAccessType(hiveObj, hiveOpType, hiveObjType, true);\n\n\t\t\t\t\tif(accessType == HiveAccessType.NONE) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(!existsByResourceAndAccessType(requests, resource, accessType)) {\n\t\t\t\t\t\tRangerHiveAccessRequest request = new RangerHiveAccessRequest(resource, user, groups, hiveOpType, accessType, context, sessionContext, clusterName);\n\n\t\t\t\t\t\trequests.add(request);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (hiveOpType == HiveOperationType.SHOWDATABASES) {\n\t\t\t\t\tRangerHiveResource resource = new RangerHiveResource(HiveObjectType.DATABASE, null);\n\t\t\t\t\tRangerHiveAccessRequest request = new RangerHiveAccessRequest(resource, user, groups, hiveOpType.name(), HiveAccessType.USE, context, sessionContext, clusterName);\n\t\t\t\t\trequests.add(request);\n\t\t\t\t} else {\n\t\t\t\t\tif (LOG.isDebugEnabled()) {\n\t\t\t\t\t\tLOG.debug(\"RangerHiveAuthorizer.checkPrivileges: Unexpected operation type[\" + hiveOpType + \"] received with empty input objects list!\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!CollectionUtils.isEmpty(outputHObjs)) {\n\t\t\t\tfor(HivePrivilegeObject hiveObj : outputHObjs) {\n\t\t\t\t\tRangerHiveResource resource = getHiveResource(hiveOpType, hiveObj);\n\n\t\t\t\t\tif (resource == null) { // possible if input object/object is of a kind that we don't currently authorize\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tString   path       = hiveObj.getObjectName();\n\t\t\t\t\tHiveObjectType hiveObjType  = resource.getObjectType();\n\n\t\t\t\t\tif(hiveObjType == HiveObjectType.URI  && isPathInFSScheme(path)) {\n\t\t\t\t\t\tFsAction permission = getURIAccessType(hiveOpType);\n\n\t\t                if(!isURIAccessAllowed(user, permission, path, getHiveConf())) {\n\t\t    \t\t\t\tthrow new HiveAccessControlException(String.format(\"Permission denied: user [%s] does not have [%s] privilege on [%s]\", user, permission.name(), path));\n\t\t                }\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tHiveAccessType accessType = getAccessType(hiveObj, hiveOpType, hiveObjType, false);\n\n\t\t\t\t\tif(accessType == HiveAccessType.NONE) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(!existsByResourceAndAccessType(requests, resource, accessType)) {\n\t\t\t\t\t\tRangerHiveAccessRequest request = new RangerHiveAccessRequest(resource, user, groups, hiveOpType, accessType, context, sessionContext, clusterName);\n\n\t\t\t\t\t\trequests.add(request);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuildRequestContextWithAllAccessedResources(requests);\n\n\t\t\tfor(RangerHiveAccessRequest request : requests) {\n\t\t\t\tif (LOG.isDebugEnabled()) {\n\t\t\t\t\tLOG.debug(\"request: \" + request);\n\t\t\t\t}\n\t\t\t\tRangerHiveResource resource = (RangerHiveResource)request.getResource();\n\t\t\t\tRangerAccessResult result   = null;\n\n\t\t\t\tif(resource.getObjectType() == HiveObjectType.COLUMN && StringUtils.contains(resource.getColumn(), COLUMN_SEP)) {\n\t\t\t\t\tList<RangerAccessRequest> colRequests = new ArrayList<RangerAccessRequest>();\n\n\t\t\t\t\tString[] columns = StringUtils.split(resource.getColumn(), COLUMN_SEP);\n\n\t\t\t\t\tresource.setServiceDef(hivePlugin.getServiceDef());\n\n\t\t\t\t\tfor(String column : columns) {\n\t\t\t\t\t\tif (column != null) {\n\t\t\t\t\t\t\tcolumn = column.trim();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(StringUtils.isBlank(column)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tRangerHiveResource colResource = new RangerHiveResource(HiveObjectType.COLUMN, resource.getDatabase(), resource.getTable(), column);\n\n\t\t\t\t\t\tRangerHiveAccessRequest colRequest = request.copy();\n\t\t\t\t\t\tcolRequest.setResource(colResource);\n\n\t\t\t\t\t\tcolRequests.add(colRequest);\n\t\t\t\t\t}\n\n\t\t\t\t\tCollection<RangerAccessResult> colResults = hivePlugin.isAccessAllowed(colRequests, auditHandler);\n\n\t\t\t\t\tif(colResults != null) {\n\t\t\t\t\t\tfor(RangerAccessResult colResult : colResults) {\n\t\t\t\t\t\t\tresult = colResult;\n\n\t\t\t\t\t\t\tif(result != null && !result.getIsAllowed()) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresult = hivePlugin.isAccessAllowed(request, auditHandler);\n\t\t\t\t}\n\n\t\t\t\tif((result == null || result.getIsAllowed()) && isBlockAccessIfRowfilterColumnMaskSpecified(hiveOpType, request)) {\n\t\t\t\t\tHiveAccessType     savedAccessType = request.getHiveAccessType();\n\t\t\t\t\tRangerHiveResource tblResource     = new RangerHiveResource(HiveObjectType.TABLE, resource.getDatabase(), resource.getTable());\n\n\t\t\t\t\trequest.setHiveAccessType(HiveAccessType.SELECT); // filtering/masking policies are defined only for SELECT\n\t\t\t\t\trequest.setResource(tblResource);\n\n\t\t\t\t\tRangerRowFilterResult rowFilterResult = getRowFilterResult(request);\n\n\t\t\t\t\tif (isRowFilterEnabled(rowFilterResult)) {\n\t\t\t\t\t\tif(result == null) {\n\t\t\t\t\t\t\tresult = new RangerAccessResult(rowFilterResult.getServiceName(), rowFilterResult.getServiceDef(), request);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresult.setIsAllowed(false);\n\t\t\t\t\t\tresult.setPolicyId(rowFilterResult.getPolicyId());\n\t\t\t\t\t\tresult.setReason(\"User does not have acces to all rows of the table\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\trequest.setResourceMatchingScope(RangerAccessRequest.ResourceMatchingScope.SELF_OR_DESCENDANTS);\n\n\t\t\t\t\t\tRangerDataMaskResult dataMaskResult = getDataMaskResult(request);\n\n\t\t\t\t\t\tif (isDataMaskEnabled(dataMaskResult)) {\n\t\t\t\t\t\t\tif(result == null) {\n\t\t\t\t\t\t\t\tresult = new RangerAccessResult(dataMaskResult.getServiceName(), dataMaskResult.getServiceDef(), request);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tresult.setIsAllowed(false);\n\t\t\t\t\t\t\tresult.setPolicyId(dataMaskResult.getPolicyId());\n\t\t\t\t\t\t\tresult.setReason(\"User does not have acces to unmasked column values\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\trequest.setHiveAccessType(savedAccessType);\n\t\t\t\t\trequest.setResource(resource);\n\n\t\t\t\t\tif(result != null && !result.getIsAllowed()) {\n\t\t\t\t\t\tauditHandler.processResult(result);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(result == null || !result.getIsAllowed()) {\n\t\t\t\t\tString path = resource.getAsString();\n\t\t\t\t\tpath = (path == null) ? \"Unknown resource!!\" : buildPathForException(path, hiveOpType);\n\t\t\t\t\tthrow new HiveAccessControlException(String.format(\"Permission denied: user [%s] does not have [%s] privilege on [%s]\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t user, request.getHiveAccessType().name(), path));\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tauditHandler.flushAudit();\n\t\t\tRangerPerfTracer.log(perf);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private PooledConnection createPooledConnection (String user,\n        String password, boolean requestPassword) throws SQLException\n    {\n        \n        return findDriver().getNewPooledConnection(\n            this, user, password, requestPassword);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprivate void completeAddAppWidget(Intent data, CellLayout.CellInfo cellInfo) {\n\t\tBundle extras = data.getExtras();\n\t\tint appWidgetId = extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID, -1);\n\n\t\tLog.d(LOG_TAG, \"dumping extras content=\" + extras.toString());\n\n\t\tAppWidgetProviderInfo appWidgetInfo = appWidgetManager.getAppWidgetInfo(appWidgetId);\n\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        \n        byte[] byteArray = new byte[bytes.size()]; \n        bytes.getBytes(byteArray, 0);\n        return Utf8Utils.utf8BytesToString(byteArray);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" deltaNeutralOpenClose=\" + order.m_deltaNeutralOpenClose +\n        \" deltaNeutralShortSale=\" + order.m_deltaNeutralShortSale +\n        \" deltaNeutralShortSaleSlot=\" + order.m_deltaNeutralShortSaleSlot +\n        \" deltaNeutralDesignatedLocation=\" + order.m_deltaNeutralDesignatedLocation +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic ExecutionEvent(final Command command, @SuppressWarnings(\"rawtypes\") final Map parameters,\n\t\t\tfinal Object trigger, final Object applicationContext) {\n\t\tif (parameters == null) {\n\t\t\tthrow new NullPointerException(\"An execution event must have a non-null map of parameters\"); //$NON-NLS-1$\n\t\t}\n\n\t\tthis.command = command;\n\t\tthis.parameters = parameters;\n\t\tthis.trigger = trigger;\n\t\tthis.applicationContext = applicationContext;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void quadrantRotate(int numquadrants) {\n        switch (numquadrants & 3) {\n        case 0:\n            break;\n        case 1:\n            rotate90();\n            break;\n        case 2:\n            rotate180();\n            break;\n        case 3:\n            rotate270();\n            break;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void channelInactive(final ChannelHandlerContext ctx) throws Exception {\n        for (Attachment object : fileMap.values()) {\n            try {\n                object.outputStream.close();\n            } catch (IOException e) {\n                logger.log(Level.SEVERE, e.getLocalizedMessage(), e);\n            }\n        }\n\n        ctx.fireChannelInactive();    // forward to the next handler in the pipeline\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                col = (int)val[1];\n\n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            Float max = Float.MIN_VALUE;\n            for(int i = 0; i < table.data.size(); i++)\n            {\n                Object o = table.data.get(i)[col-1];\n                if (o instanceof Float)\n                    max = Math.max((Float)o, max);\n            }\n            if (max == Float.MIN_VALUE)\n            {\n                return 0f;\n            }\n            return max;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public PartitionLoad getLoad() throws IOException{\n        Map<ServerName, List<HRegionInfo>> serverToRegionMap=new HashMap<>();\n        try(RegionLocator rl=connection.getRegionLocator(tableName)){\n            List<HRegionLocation> locations=rl.getAllRegionLocations();\n            for(HRegionLocation location : locations){\n                List<HRegionInfo> info=serverToRegionMap.get(location.getServerName());\n                if(info==null){\n                    info = new LinkedList<>();\n                    serverToRegionMap.put(location.getServerName(),info);\n                }\n                info.add(location.getRegionInfo());\n            }\n        }\n        int totalStoreFileSizeMB = 0;\n        int totalMemstoreSieMB = 0;\n        int storefileIndexSizeMB = 0;\n        try(Admin admin=connection.getAdmin()){\n            ClusterStatus clusterStatus=admin.getClusterStatus();\n            for(Map.Entry<ServerName,List<HRegionInfo>> entry:serverToRegionMap.entrySet()){\n                ServerLoad load=clusterStatus.getLoad(entry.getKey());\n                Map<byte[], RegionLoad> regionsLoad=load.getRegionsLoad();\n                for(HRegionInfo info:entry.getValue()){\n                    RegionLoad rl = regionsLoad.get(info.getRegionName());\n                    totalStoreFileSizeMB+=rl.getStorefileSizeMB();\n                    totalMemstoreSieMB+=rl.getMemStoreSizeMB();\n                    storefileIndexSizeMB+=rl.getStorefileIndexSizeMB();\n                }\n            }\n        }\n        return new HPartitionLoad(getName(),totalStoreFileSizeMB,totalMemstoreSieMB,storefileIndexSizeMB);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.xrm._2011.metadata.CascadeConfiguration newInstance() {\n          return (com.microsoft.schemas.xrm._2011.metadata.CascadeConfiguration) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().newInstance( type, null ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\tChannelListener listener = this.listeners.remove(ctx.channel());\n\t\tif (listener != null) {\n\t\t\tLogManager.logDetail(LogConstants.CTX_TRANSPORT, \n\t\t\t        RuntimePlugin.Util.getString(\"SSLAwareChannelHandler.channel_closed\")); //$NON-NLS-1$\n\t\t\tlistener.disconnected();\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprotected void fireVetoableChange (String name, Object o, Object n)\n\t\tthrows PropertyVetoException\n\t{\n\t\tif (_vetoableSupport != null)\n\t\t\t_vetoableSupport.fireVetoableChange(name, o, n);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void actionPerformed(ActionEvent e) {\n                                                                                                final Element element = UIPool\n                                                                                                    .poll();\n                                                                                                if (null != element) {\n                                                                                                    Display\n                                                                                                        .getDefault()\n                                                                                                        .asyncExec(\n                                                                                                            new Runnable() {\n                                                                                                                public void run() {\n                                                                                                                    if (element\n                                                                                                                        .getElement()\n                                                                                                                        .equals(\n                                                                                                                            UIElement.TASK_PROGRESS_BAR)) {\n                                                                                                                        if (((Integer) element\n                                                                                                                            .getValue()) > 0)\n                                                                                                                            setProgressBarMax(\n                                                                                                                                element\n                                                                                                                                    .getSN(),\n                                                                                                                                element\n                                                                                                                                    .getTaskName(),\n                                                                                                                                element\n                                                                                                                                    .getScriptName());\n                                                                                                                        else\n                                                                                                                            setProgressBarCount(\n                                                                                                                                element\n                                                                                                                                    .getSN(),\n                                                                                                                                element\n                                                                                                                                    .getTaskName(),\n                                                                                                                                element\n                                                                                                                                    .getScriptName());\n                                                                                                                    } else if (element\n                                                                                                                        .getElement()\n                                                                                                                        .equals(\n                                                                                                                            UIElement.TASK_START_TIME)) {\n                                                                                                                        setBeginTime(\n                                                                                                                            element\n                                                                                                                                .getSN(),\n                                                                                                                            element\n                                                                                                                                .getTaskName(),\n                                                                                                                            element\n                                                                                                                                .getScriptName(),\n                                                                                                                            String\n                                                                                                                                .valueOf(element\n                                                                                                                                    .getValue()));\n                                                                                                                    } else if (element\n                                                                                                                        .getElement()\n                                                                                                                        .equals(\n                                                                                                                            UIElement.TASK_TEST_RESULT)) {\n                                                                                                                        setPassOrFailCount(\n                                                                                                                            element\n                                                                                                                                .getSN(),\n                                                                                                                            element\n                                                                                                                                .getTaskName(),\n                                                                                                                            element\n                                                                                                                                .getScriptName(),\n                                                                                                                            Boolean\n                                                                                                                                .parseBoolean((String) element\n                                                                                                                                    .getValue()));\n                                                                                                                    }\n                                                                                                                }\n                                                                                                            });\n\n                                                                                                }\n                                                                                            }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n   public static void printMethods(Class cl)\n   {\n      Method[] methods = cl.getDeclaredMethods();\n\n      for (Method m : methods)\n      {\n         Class retType = m.getReturnType();\n         String name = m.getName();\n\n         System.out.print(\"   \");\n         String modifiers = Modifier.toString(m.getModifiers());\n         if (modifiers.length() > 0) System.out.print(modifiers + \" \");         \n         System.out.print(retType.getName() + \" \" + name + \"(\");\n\n         Class[] paramTypes = m.getParameterTypes();\n         for (int j = 0; j < paramTypes.length; j++)\n         {\n            if (j > 0) System.out.print(\", \");\n            System.out.print(paramTypes[j].getName());\n         }\n         System.out.println(\");\");\n      }\n   }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Deprecated\n\tpublic ImageData getImageData() {\n\t\treturn getImageData(100);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n  public static <E> E argmax(Counter<E> c) {\n    double max = Double.NEGATIVE_INFINITY;\n    E argmax = null;\n    for (E key : c.keySet()) {\n      double count = c.getCount(key);\n      if (argmax == null || count > max) {// || (count == max && tieBreaker.compare(key, argmax) < 0)) {\n        max = count;\n        argmax = key;\n      }\n    }\n    return argmax;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, boolean isStatic, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            lineNumber = printMethod(mv, clazz, method, isStatic, lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static <N extends RootedDAGNode<N>> List<N> topologicalSort(N root) throws GraphException {\n\t\tList<N> queued = new ArrayList<N>();\n\t\tqueued.add(root);\n\t\tint i=0;\n\t\twhile (i<queued.size()) {\n\t\t\tN n = queued.get(i);\n\t\t\tfor (N c : n.getChildren()) {\n\t\t\t\tif (!queued.contains(c))\n\t\t\t\t\tqueued.add(c);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tCollections.reverse(queued);\n\t\tList<N> sorted = new ArrayList<N>();\n\t\ti = 0;\n\t\twhile (!queued.isEmpty()) {\n\t\t\ti = queued.size()-1;\n\t\t\twhile (i>=0) {\n\t\t\t\tN n = queued.get(i);\n\t\t\t\tboolean allParentsSorted = true;\n\t\t\t\tfor (N p : n.getParents()) {\n\t\t\t\t\tif (!sorted.contains(p)) {\n\t\t\t\t\t\tallParentsSorted = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (allParentsSorted) {\n\t\t\t\t\tsorted.add(queued.remove(i));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tif (i==-1)\n\t\t\t\tthrow new GraphException(\"Cannot produce a topological sort: not a DAG\");\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprotected static boolean isConstant(IModelElement modelElement) {\n\n\t\tif (modelElement instanceof IField && modelElement.getParent() instanceof ISourceModule) {\n\t\t\tint flags = 0;\n\t\t\ttry {\n\t\t\t\tflags = ((IField) modelElement).getFlags();\n\t\t\t} catch (ModelException e) {\n\t\t\t}\n\t\t\tif ((flags & Modifiers.AccConstant) != 0)\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Object getObject(int columnIndex) throws SQLException {\n        Object value;\n        Map<String, Class<?>> map;\n\n        checkIndex(columnIndex);\n        checkCursor();\n\n        setLastValueNull(false);\n        value = getCurrentRow().getColumnObject(columnIndex);\n\n        if (value == null) {\n            setLastValueNull(true);\n            return null;\n        }\n        if (value instanceof Struct) {\n            Struct s = (Struct)value;\n            map = getTypeMap();\n            Class c = (Class)map.get(s.getSQLTypeName());\n            if (c != null) {\n                SQLData obj = null;\n                try {\n                    obj = (SQLData)c.newInstance();\n                } catch (java.lang.InstantiationException ex) {\n                    throw new SQLException(MessageFormat.format(resBundle.handleGetObject(\"cachedrowsetimpl.unableins\").toString(),\n                    ex.getMessage()));\n                } catch (java.lang.IllegalAccessException ex) {\n                    throw new SQLException(MessageFormat.format(resBundle.handleGetObject(\"cachedrowsetimpl.unableins\").toString(),\n                    ex.getMessage()));\n                }\n                Object attribs[] = s.getAttributes(map);\n                SQLInputImpl sqlInput = new SQLInputImpl(attribs, map);\n                obj.readSQL(sqlInput, s.getSQLTypeName());\n                return (Object)obj;\n            }\n        }\n        return value;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        \n        byte[] byteArray = new byte[bytes.size()]; \n        bytes.getBytes(byteArray, 0);\n        return Utf8Utils.utf8BytesToString(byteArray);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void quadrantRotate(int numquadrants) {\n        switch (numquadrants & 3) {\n        case 0:\n            break;\n        case 1:\n            rotate90();\n            break;\n        case 2:\n            rotate180();\n            break;\n        case 3:\n            rotate270();\n            break;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, boolean isStatic, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            lineNumber = printMethod(mv, clazz, method, isStatic, lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@SuppressLint(\"NewApi\")\n\tpublic static Bitmap fastblur(Context context, Bitmap sentBitmap, int radius) {\n\n\t\tif (Build.VERSION.SDK_INT > 16) {\n\t\t\tBitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n\t\t\tfinal RenderScript rs = RenderScript.create(context);\n\t\t\tfinal Allocation input = Allocation.createFromBitmap(rs,\n\t\t\t\t\tsentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n\t\t\t\t\tAllocation.USAGE_SCRIPT);\n\t\t\tfinal Allocation output = Allocation.createTyped(rs,\n\t\t\t\t\tinput.getType());\n\t\t\tfinal ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs,\n\t\t\t\t\tElement.U8_4(rs));\n\t\t\tscript.setRadius(radius );\n\t\t\tscript.setInput(input);\n\t\t\tscript.forEach(output);\n\t\t\toutput.copyTo(bitmap);\n\t\t\treturn bitmap;\n\t\t}\n\n\t\tBitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n\t\tif (radius < 1) {\n\t\t\treturn (null);\n\t\t}\n\n\t\tint w = bitmap.getWidth();\n\t\tint h = bitmap.getHeight();\n\n\t\tint[] pix = new int[w * h];\n\t\tLog.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n\t\tbitmap.getPixels(pix, 0, w, 0, 0, w, h);\n\n\t\tint wm = w - 1;\n\t\tint hm = h - 1;\n\t\tint wh = w * h;\n\t\tint div = radius + radius + 1;\n\n\t\tint r[] = new int[wh];\n\t\tint g[] = new int[wh];\n\t\tint b[] = new int[wh];\n\t\tint rsum, gsum, bsum, x, y, i, p, yp, yi, yw;\n\t\tint vmin[] = new int[Math.max(w, h)];\n\n\t\tint divsum = (div + 1) >> 1;\n\t\tdivsum *= divsum;\n\t\tint dv[] = new int[256 * divsum];\n\t\tfor (i = 0; i < 256 * divsum; i++) {\n\t\t\tdv[i] = (i / divsum);\n\t\t}\n\n\t\tyw = yi = 0;\n\n\t\tint[][] stack = new int[div][3];\n\t\tint stackpointer;\n\t\tint stackstart;\n\t\tint[] sir;\n\t\tint rbs;\n\t\tint r1 = radius + 1;\n\t\tint routsum, goutsum, boutsum;\n\t\tint rinsum, ginsum, binsum;\n\n\t\tfor (y = 0; y < h; y++) {\n\t\t\trinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n\t\t\tfor (i = -radius; i <= radius; i++) {\n\t\t\t\tp = pix[yi + Math.min(wm, Math.max(i, 0))];\n\t\t\t\tsir = stack[i + radius];\n\t\t\t\tsir[0] = (p & 0xff0000) >> 16;\n\t\t\t\tsir[1] = (p & 0x00ff00) >> 8;\n\t\t\t\tsir[2] = (p & 0x0000ff);\n\t\t\t\trbs = r1 - Math.abs(i);\n\t\t\t\trsum += sir[0] * rbs;\n\t\t\t\tgsum += sir[1] * rbs;\n\t\t\t\tbsum += sir[2] * rbs;\n\t\t\t\tif (i > 0) {\n\t\t\t\t\trinsum += sir[0];\n\t\t\t\t\tginsum += sir[1];\n\t\t\t\t\tbinsum += sir[2];\n\t\t\t\t} else {\n\t\t\t\t\troutsum += sir[0];\n\t\t\t\t\tgoutsum += sir[1];\n\t\t\t\t\tboutsum += sir[2];\n\t\t\t\t}\n\t\t\t}\n\t\t\tstackpointer = radius;\n\n\t\t\tfor (x = 0; x < w; x++) {\n\n\t\t\t\tr[yi] = dv[rsum];\n\t\t\t\tg[yi] = dv[gsum];\n\t\t\t\tb[yi] = dv[bsum];\n\n\t\t\t\trsum -= routsum;\n\t\t\t\tgsum -= goutsum;\n\t\t\t\tbsum -= boutsum;\n\n\t\t\t\tstackstart = stackpointer - radius + div;\n\t\t\t\tsir = stack[stackstart % div];\n\n\t\t\t\troutsum -= sir[0];\n\t\t\t\tgoutsum -= sir[1];\n\t\t\t\tboutsum -= sir[2];\n\n\t\t\t\tif (y == 0) {\n\t\t\t\t\tvmin[x] = Math.min(x + radius + 1, wm);\n\t\t\t\t}\n\t\t\t\tp = pix[yw + vmin[x]];\n\n\t\t\t\tsir[0] = (p & 0xff0000) >> 16;\n\t\t\t\tsir[1] = (p & 0x00ff00) >> 8;\n\t\t\t\tsir[2] = (p & 0x0000ff);\n\n\t\t\t\trinsum += sir[0];\n\t\t\t\tginsum += sir[1];\n\t\t\t\tbinsum += sir[2];\n\n\t\t\t\trsum += rinsum;\n\t\t\t\tgsum += ginsum;\n\t\t\t\tbsum += binsum;\n\n\t\t\t\tstackpointer = (stackpointer + 1) % div;\n\t\t\t\tsir = stack[(stackpointer) % div];\n\n\t\t\t\troutsum += sir[0];\n\t\t\t\tgoutsum += sir[1];\n\t\t\t\tboutsum += sir[2];\n\n\t\t\t\trinsum -= sir[0];\n\t\t\t\tginsum -= sir[1];\n\t\t\t\tbinsum -= sir[2];\n\n\t\t\t\tyi++;\n\t\t\t}\n\t\t\tyw += w;\n\t\t}\n\t\tfor (x = 0; x < w; x++) {\n\t\t\trinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n\t\t\typ = -radius * w;\n\t\t\tfor (i = -radius; i <= radius; i++) {\n\t\t\t\tyi = Math.max(0, yp) + x;\n\n\t\t\t\tsir = stack[i + radius];\n\n\t\t\t\tsir[0] = r[yi];\n\t\t\t\tsir[1] = g[yi];\n\t\t\t\tsir[2] = b[yi];\n\n\t\t\t\trbs = r1 - Math.abs(i);\n\n\t\t\t\trsum += r[yi] * rbs;\n\t\t\t\tgsum += g[yi] * rbs;\n\t\t\t\tbsum += b[yi] * rbs;\n\n\t\t\t\tif (i > 0) {\n\t\t\t\t\trinsum += sir[0];\n\t\t\t\t\tginsum += sir[1];\n\t\t\t\t\tbinsum += sir[2];\n\t\t\t\t} else {\n\t\t\t\t\troutsum += sir[0];\n\t\t\t\t\tgoutsum += sir[1];\n\t\t\t\t\tboutsum += sir[2];\n\t\t\t\t}\n\n\t\t\t\tif (i < hm) {\n\t\t\t\t\typ += w;\n\t\t\t\t}\n\t\t\t}\n\t\t\tyi = x;\n\t\t\tstackpointer = radius;\n\t\t\tfor (y = 0; y < h; y++) {\n\t\t\t\tpix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16)\n\t\t\t\t\t\t| (dv[gsum] << 8) | dv[bsum];\n\n\t\t\t\trsum -= routsum;\n\t\t\t\tgsum -= goutsum;\n\t\t\t\tbsum -= boutsum;\n\n\t\t\t\tstackstart = stackpointer - radius + div;\n\t\t\t\tsir = stack[stackstart % div];\n\n\t\t\t\troutsum -= sir[0];\n\t\t\t\tgoutsum -= sir[1];\n\t\t\t\tboutsum -= sir[2];\n\n\t\t\t\tif (x == 0) {\n\t\t\t\t\tvmin[y] = Math.min(y + r1, hm) * w;\n\t\t\t\t}\n\t\t\t\tp = x + vmin[y];\n\n\t\t\t\tsir[0] = r[p];\n\t\t\t\tsir[1] = g[p];\n\t\t\t\tsir[2] = b[p];\n\n\t\t\t\trinsum += sir[0];\n\t\t\t\tginsum += sir[1];\n\t\t\t\tbinsum += sir[2];\n\n\t\t\t\trsum += rinsum;\n\t\t\t\tgsum += ginsum;\n\t\t\t\tbsum += binsum;\n\n\t\t\t\tstackpointer = (stackpointer + 1) % div;\n\t\t\t\tsir = stack[stackpointer];\n\n\t\t\t\troutsum += sir[0];\n\t\t\t\tgoutsum += sir[1];\n\t\t\t\tboutsum += sir[2];\n\n\t\t\t\trinsum -= sir[0];\n\t\t\t\tginsum -= sir[1];\n\t\t\t\tbinsum -= sir[2];\n\n\t\t\t\tyi += w;\n\t\t\t}\n\t\t}\n\n\t\tLog.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n\t\tbitmap.setPixels(pix, 0, w, 0, 0, w, h);\n\t\treturn (bitmap);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static <N extends RootedDAGNode<N>> List<N> topologicalSort(N root) throws GraphException {\n\t\tList<N> queued = new ArrayList<N>();\n\t\tqueued.add(root);\n\t\tint i=0;\n\t\twhile (i<queued.size()) {\n\t\t\tN n = queued.get(i);\n\t\t\tfor (N c : n.getChildren()) {\n\t\t\t\tif (!queued.contains(c))\n\t\t\t\t\tqueued.add(c);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tCollections.reverse(queued);\n\t\tList<N> sorted = new ArrayList<N>();\n\t\ti = 0;\n\t\twhile (!queued.isEmpty()) {\n\t\t\ti = queued.size()-1;\n\t\t\twhile (i>=0) {\n\t\t\t\tN n = queued.get(i);\n\t\t\t\tboolean allParentsSorted = true;\n\t\t\t\tfor (N p : n.getParents()) {\n\t\t\t\t\tif (!sorted.contains(p)) {\n\t\t\t\t\t\tallParentsSorted = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (allParentsSorted) {\n\t\t\t\t\tsorted.add(queued.remove(i));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tif (i==-1)\n\t\t\t\tthrow new GraphException(\"Cannot produce a topological sort: not a DAG\");\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic <A extends Closeable> A api(Class<A> apitype, final String provider, final String credId, final String url,\n            final String zones) {\n        return api(apitype, provider, credId, buildJcloudsOverrides(url, zones, false));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate <E> void buildElements(ReadableDocument<? super E, E, ?> doc, E e, List<E> els) {\n    E child = DocHelper.getFirstChildElement(doc, e);\n    while (child != null) {\n      els.add(child);\n      buildElements(doc, child, els);\n      child = DocHelper.getNextSiblingElement(doc, child);\n    }\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic BlameGenerator push(String description, RawText contents)\n\t\t\tthrows IOException {\n\t\tif (description == null)\n\t\t\tdescription = JGitText.get().blameNotCommittedYet;\n\t\tBlobCandidate c = new BlobCandidate(description, resultPath);\n\t\tc.sourceText = contents;\n\t\tc.regionList = new Region(0, 0, contents.size());\n\t\tremaining = contents.size();\n\t\tpush(c);\n\t\treturn this;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void drawLeadingMargin(Canvas c, Paint p, int x, int dir, int top, int baseline, int bottom, CharSequence text, int start, int end, boolean first, Layout layout) {\n        drawCalled = true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static Graph<ITestNGMethod> topologicalSort(ITestNGMethod[] methods,\n      List<ITestNGMethod> sequentialList, List<ITestNGMethod> parallelList) {\n    Graph<ITestNGMethod> result = new Graph<ITestNGMethod>();\n\n    if (methods.length == 0) {\n      return result;\n    }\n\n    for (ITestNGMethod m : methods) {\n      result.addNode(m);\n\n      List<ITestNGMethod> predecessors = Lists.newArrayList();\n\n      String[] methodsDependedUpon = m.getMethodsDependedUpon();\n      String[] groupsDependedUpon = m.getGroupsDependedUpon();\n      if (methodsDependedUpon.length > 0) {\n        ITestNGMethod[] methodsNamed =\n          MethodHelper.findDependedUponMethods(m, methods);\n        for (ITestNGMethod pred : methodsNamed) {\n          predecessors.add(pred);\n        }\n      }\n      if (groupsDependedUpon.length > 0) {\n        for (String group : groupsDependedUpon) {\n          ITestNGMethod[] methodsThatBelongToGroup =\n            MethodGroupsHelper.findMethodsThatBelongToGroup(m, methods, group);\n          for (ITestNGMethod pred : methodsThatBelongToGroup) {\n            predecessors.add(pred);\n          }\n        }\n      }\n\n      for (ITestNGMethod predecessor : predecessors) {\n        result.addPredecessor(m, predecessor);\n      }\n    }\n\n    result.topologicalSort();\n    sequentialList.addAll(result.getStrictlySortedNodes());\n    parallelList.addAll(result.getIndependentNodes());\n\n    return result;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public URI resolve(URI uri) {\n        return resolve(this, uri);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprotected void checkPrivileges(String user,\n\t\t\t\t\t\t\t\t   TableDescriptor td,\n\t\t\t\t\t\t\t\t   SchemaDescriptor sd,\n\t\t\t\t\t\t\t\t   DataDictionary dd,\n\t\t\t\t\t\t\t\t   LanguageConnectionContext lcc)\n\t\t\tthrows StandardException {\n\t\tif (user.equals(dd.getAuthorizationDatabaseOwner())) return;\n\n\t\tif (td == null) return;\n\t\tif (td.getTableType() == TableDescriptor.VIEW_TYPE) {\n\t\t\tif (descriptorList != null) {\n\t\t\t\tTransactionController tc = lcc.getTransactionExecute();\n\t\t\t\tint siz = descriptorList.size();\n                for (Object aDescriptorList : descriptorList) {\n                    TupleDescriptor p;\n                    SchemaDescriptor s = null;\n\n                    p = (TupleDescriptor) aDescriptorList;\n                    if (p instanceof TableDescriptor) {\n                        TableDescriptor t = (TableDescriptor) p;\n                        s = t.getSchemaDescriptor();\n                    } else if (p instanceof ViewDescriptor) {\n                        ViewDescriptor v = (ViewDescriptor) p;\n                        s = dd.getSchemaDescriptor(v.getCompSchemaId(), tc);\n                    } else if (p instanceof AliasDescriptor) {\n                        AliasDescriptor a = (AliasDescriptor) p;\n                        s = dd.getSchemaDescriptor(a.getSchemaUUID(), tc);\n                    }\n\n                    if (s != null && !user.equals(s.getAuthorizationId())) {\n                        throw StandardException.newException(\n                                SQLState.AUTH_NO_OBJECT_PERMISSION,\n                                user,\n                                \"grant\",\n                                sd.getSchemaName(),\n                                td.getName());\n                    }\n\n                }\n\t\t\t}\n\t\t}\n\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static String stringFromStream(InputStream inputStream) throws IOException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        byte[] buffer = new byte[1024];\n        while (true) {\n            int length = inputStream.read(buffer);\n            if (length == -1) {\n                return new String(baos.toByteArray(), \"UTF-8\");\n            }\n            baos.write(buffer, 0, length);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate PolicyDescriptions createPolicyDescriptions(Map<URI, PolicyDescription> policies) {\n        PolicyDescriptions pd = new PolicyDescriptions();\n        for(URI key : policies.keySet()) {\n            PolicyDescriptionsEntry entry = new PolicyDescriptionsEntry();\n            entry.setKey(key);\n            entry.setValue(policies.get(key));\n            pd.getEntry().add(entry);\n        }\n        return pd;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void setColumnWidth() {\n        int maxNameWidth = 0; // getViewer().getTable().getColumn(NAME_COLUMN_NUM).getWidth();\n        int maxCategoryWidth = 0; // getViewer().getTable().getColumn(CATEGORY_COLUMN_NUM).getWidth();\n        int maxDescriptionWidth = 0; // getViewer().getTable().getColumn(DESCRIPTION_COLUMN_NUM).getWidth();\n\n        final GC gc = new GC(getViewer().getTable());\n\n        for (final Object element : getElements()) {\n            maxNameWidth = Math.max(maxNameWidth, gc.stringExtent(getColumnText(element, NAME_COLUMN_ID)).x);\n            maxCategoryWidth =\n                Math.max(maxCategoryWidth, gc.stringExtent(getColumnText(element, CATEGORY_COLUMN_ID)).x);\n            maxDescriptionWidth =\n                Math.max(maxDescriptionWidth, gc.stringExtent(getColumnText(element, DESCRIPTION_COLUMN_ID)).x);\n        }\n\n        gc.dispose();\n\n        getViewer().getTable().getColumn(NAME_COLUMN_NUM).setWidth(maxNameWidth + 30);\n        getViewer().getTable().getColumn(CATEGORY_COLUMN_NUM).setWidth(maxCategoryWidth + 30);\n        getViewer().getTable().getColumn(DESCRIPTION_COLUMN_NUM).setWidth(maxDescriptionWidth + 30);\n        getViewer().getTable().layout();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; } \n        return retVal;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" deltaNeutralOpenClose=\" + order.m_deltaNeutralOpenClose +\n        \" deltaNeutralShortSale=\" + order.m_deltaNeutralShortSale +\n        \" deltaNeutralShortSaleSlot=\" + order.m_deltaNeutralShortSaleSlot +\n        \" deltaNeutralDesignatedLocation=\" + order.m_deltaNeutralDesignatedLocation +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic PsiBuilder.Marker parseAndDone(ShaderLabParserBuilder builder, PsiBuilder.Marker mark)\n\t\t{\n\n\t\t\tif(builder.getTokenType() == ShaderLabTokens.STRING_LITERAL)\n\t\t\t{\n\t\t\t\tPsiBuilder.Marker refMarker = builder.mark();\n\t\t\t\texpectWithError(builder, ShaderLabTokens.STRING_LITERAL, \"Editor type expected\");\n\t\t\t\trefMarker.done(ShaderLabElements.REFERENCE);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdoneWithErrorSafe(builder, \"Editor type expected\");\n\t\t\t}\n\n\t\t\tmark.done(ShaderLabElements.SIMPLE_VALUE);\n\t\t\treturn mark;\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic ExternalCarrierBillingInstrumentProto(String instrumentKey, String subscriberIdentifier, String accountType, String subscriberCurrency, Long transactionLimit, String subscriberName, String address1, String address2, String city, String state, String postalCode, String country, EncryptedSubscriberInfo encryptedSubscriberInfo) {\n    this.instrumentKey = instrumentKey;\n    this.subscriberIdentifier = subscriberIdentifier;\n    this.accountType = accountType;\n    this.subscriberCurrency = subscriberCurrency;\n    this.transactionLimit = transactionLimit;\n    this.subscriberName = subscriberName;\n    this.address1 = address1;\n    this.address2 = address2;\n    this.city = city;\n    this.state = state;\n    this.postalCode = postalCode;\n    this.country = country;\n    this.encryptedSubscriberInfo = encryptedSubscriberInfo;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker, boolean showDirection) {\n        this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic WebSocketServer( InetSocketAddress address , int decodercount , List<Draft> drafts , Collection<WebSocket> connectionscontainer ) {\n\t\tif( address == null || decodercount < 1 || connectionscontainer == null ) {\n\t\t\tthrow new IllegalArgumentException( \"address and connectionscontainer must not be null and you need at least 1 decoder\" );\n\t\t}\n\n\t\tif( drafts == null )\n\t\t\tthis.drafts = Collections.emptyList();\n\t\telse\n\t\t\tthis.drafts = drafts;\n\n\t\tthis.address = address;\n\t\tthis.connections = connectionscontainer;\n\t\tsetTcpNoDelay(false);\n\t\tiqueue = new LinkedList<WebSocketImpl>();\n\n\t\tdecoders = new ArrayList<WebSocketWorker>( decodercount );\n\t\tbuffers = new LinkedBlockingQueue<ByteBuffer>();\n\t\tfor( int i = 0 ; i < decodercount ; i++ ) {\n\t\t\tWebSocketWorker ex = new WebSocketWorker();\n\t\t\tdecoders.add( ex );\n\t\t\tex.start();\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    @SideOnly(Side.CLIENT)\n    public void addInformation(ItemStack stack, EntityPlayer player, List list, boolean par4) {\n        list.add(TooltipLocalizer.rangedDam(damage));\n        list.add(\"Returns to sender\");\n        list.add(TooltipLocalizer.vethean());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        int sample(final RandomGenerator random) {\n            while(true) {\n\n                final double u = hIntegralNumberOfElements + random.nextDouble() * (hIntegralX1 - hIntegralNumberOfElements);\n\n                double x = hIntegralInverse(u);\n\n                int k = (int)(x + 0.5);\n\n                if (k < 1) {\n                    k = 1;\n                }\n                else if (k > numberOfElements) {\n                    k = numberOfElements;\n                }\n\n\n                if (k - x <= s || u >= hIntegral(k + 0.5) - h(k)) {\n\n\n                    return k;\n                }\n            }\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public void changeSelection(int row, int column, boolean toggle, boolean extend) {\n        lastRow = currentRow;\n        int lastColumn = currentColumn;\n        currentRow = row;\n        currentColumn = column;\n\n        super.changeSelection(row, column, toggle, extend);\n\n        if (getSelectedRow() == lastSelectedRow && getSelectedColumn() == lastSelectedCol) {\n            lastSelectedEqCnt++;\n\n            if (lastSelectedEqCnt == 10) {\n                System.out.println(\"Sticky cursor!\");\n                throw new RuntimeException(\"Sticky cursor!\");\n               \n            }\n        } else {\n            lastSelectedEqCnt = 0;\n            lastSelectedRow = row;\n            lastSelectedCol = column;\n        }\n        if (currentRow != lastRow || (currentColumn != lastColumn && viewMode != TableViewMode.FULL)) {\n            selectionChangedTimestamp = System.currentTimeMillis();\n            fireSelectedFileChangedEvent();\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public FluidTankInfo[] getTankInfo() {\n    \tFluidTankInfo[] infos = new FluidTankInfo[tanks.length];\n    \tfor(int i = 0; i < tanks.length; i++) {\n    \t\tinfos[i] = tanks[i].getInfo();\n    \t}\n    \t\n    \treturn infos;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate boolean r_standard_suffix() {\n            int among_var;\n            int v_1;\n            int v_2;\n            int v_3;\n            int v_4;\n            int v_5;\n            int v_6;\n            int v_7;\n            int v_8;\n            int v_9;\n                    v_1 = limit - cursor;\n                    lab0: do {\n                        ket = cursor;\n                        among_var = find_among_b(a_1, 7);\n                        if (among_var == 0)\n                        {\n                            break lab0;\n                        }\n                        bra = cursor;\n                        if (!r_R1())\n                        {\n                            break lab0;\n                        }\n                        switch(among_var) {\n                            case 0:\n                                break lab0;\n                            case 1:\n                                slice_del();\n                                break;\n                            case 2:\n                                if (!(in_grouping_b(g_s_ending, 98, 116)))\n                                {\n                                    break lab0;\n                                }\n                                slice_del();\n                                break;\n                        }\n                    } while (false);\n                    cursor = limit - v_1;\n                    v_2 = limit - cursor;\n                    lab1: do {\n                        ket = cursor;\n                        among_var = find_among_b(a_2, 4);\n                        if (among_var == 0)\n                        {\n                            break lab1;\n                        }\n                        bra = cursor;\n                        if (!r_R1())\n                        {\n                            break lab1;\n                        }\n                        switch(among_var) {\n                            case 0:\n                                break lab1;\n                            case 1:\n                                slice_del();\n                                break;\n                            case 2:\n                                if (!(in_grouping_b(g_st_ending, 98, 116)))\n                                {\n                                    break lab1;\n                                }\n                                {\n                                    int c = cursor - 3;\n                                    if (limit_backward > c || c > limit)\n                                    {\n                                        break lab1;\n                                    }\n                                    cursor = c;\n                                }\n                                slice_del();\n                                break;\n                        }\n                    } while (false);\n                    cursor = limit - v_2;\n                    v_3 = limit - cursor;\n                    lab2: do {\n                        ket = cursor;\n                        among_var = find_among_b(a_4, 8);\n                        if (among_var == 0)\n                        {\n                            break lab2;\n                        }\n                        bra = cursor;\n                        if (!r_R2())\n                        {\n                            break lab2;\n                        }\n                        switch(among_var) {\n                            case 0:\n                                break lab2;\n                            case 1:\n                                slice_del();\n                                v_4 = limit - cursor;\n                                lab3: do {\n                                    ket = cursor;\n                                    if (!(eq_s_b(2, \"ig\")))\n                                    {\n                                        cursor = limit - v_4;\n                                        break lab3;\n                                    }\n                                    bra = cursor;\n                                    {\n                                        v_5 = limit - cursor;\n                                        lab4: do {\n                                            if (!(eq_s_b(1, \"e\")))\n                                            {\n                                                break lab4;\n                                            }\n                                            cursor = limit - v_4;\n                                            break lab3;\n                                        } while (false);\n                                        cursor = limit - v_5;\n                                    }\n                                    if (!r_R2())\n                                    {\n                                        cursor = limit - v_4;\n                                        break lab3;\n                                    }\n                                    slice_del();\n                                } while (false);\n                                break;\n                            case 2:\n                                {\n                                    v_6 = limit - cursor;\n                                    lab5: do {\n                                        if (!(eq_s_b(1, \"e\")))\n                                        {\n                                            break lab5;\n                                        }\n                                        break lab2;\n                                    } while (false);\n                                    cursor = limit - v_6;\n                                }\n                                slice_del();\n                                break;\n                            case 3:\n                                slice_del();\n                                v_7 = limit - cursor;\n                                lab6: do {\n                                    ket = cursor;\n                                    lab7: do {\n                                        v_8 = limit - cursor;\n                                        lab8: do {\n                                            if (!(eq_s_b(2, \"er\")))\n                                            {\n                                                break lab8;\n                                            }\n                                            break lab7;\n                                        } while (false);\n                                        cursor = limit - v_8;\n                                        if (!(eq_s_b(2, \"en\")))\n                                        {\n                                            cursor = limit - v_7;\n                                            break lab6;\n                                        }\n                                    } while (false);\n                                    bra = cursor;\n                                    if (!r_R1())\n                                    {\n                                        cursor = limit - v_7;\n                                        break lab6;\n                                    }\n                                    slice_del();\n                                } while (false);\n                                break;\n                            case 4:\n                                slice_del();\n                                v_9 = limit - cursor;\n                                lab9: do {\n                                    ket = cursor;\n                                    among_var = find_among_b(a_3, 2);\n                                    if (among_var == 0)\n                                    {\n                                        cursor = limit - v_9;\n                                        break lab9;\n                                    }\n                                    bra = cursor;\n                                    if (!r_R2())\n                                    {\n                                        cursor = limit - v_9;\n                                        break lab9;\n                                    }\n                                    switch(among_var) {\n                                        case 0:\n                                            cursor = limit - v_9;\n                                            break lab9;\n                                        case 1:\n                                            slice_del();\n                                            break;\n                                    }\n                                } while (false);\n                                break;\n                        }\n                    } while (false);\n                    cursor = limit - v_3;\n                    return true;\n                }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        return CharacterData.of(codePoint).isIdentifierIgnorable(codePoint);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public Value<Integer> run(String userEmail) {\n      PromisedValue<Integer> x = newPromise();\n      PromisedValue<Integer> y = newPromise();\n      PromisedValue<Integer> z = newPromise();\n      FutureValue<Integer> intermediate = futureCall(new ComplexJob(), x, y, z);\n\n      getIntFromUser(\"Please give 1st int\", userEmail, x.getHandle());\n      getIntFromUser(\"Please give 2nd int\", userEmail, y.getHandle());\n      getIntFromUser(\"Please give 3rd int\", userEmail, z.getHandle());\n\n      FutureValue<Integer> oneMoreInt =\n        futureCall(new PromptJob(), intermediate, immediate(userEmail));\n\n      return futureCall(new MultJob(), intermediate, oneMoreInt);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void updateHighOrderDerivativesPhase2(final double[] start,\n                                                 final double[] end,\n                                                 final Array2DRowRealMatrix highOrder) {\n        final double[][] data = highOrder.getDataRef();\n        for (int i = 0; i < data.length; ++i) {\n            final double[] dataI = data[i];\n            final double c1I = c1[i];\n            for (int j = 0; j < dataI.length; ++j) {\n                dataI[j] += c1I * (start[j] - end[j]);\n            }\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testNotEquals() {\n        Version builtVersion1 = new Version.Builder().major(MAJOR).minor(MINOR).build(BUILD);\n        Version builtVersion2 = new Version.Builder().major(BUILD).minor(MAJOR).build(MINOR);\n\n        Assert.assertFalse(builtVersion1.equals(builtVersion2));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; } \n        return retVal;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n  public static <E> E argmax(Counter<E> c, Comparator<E> tieBreaker) {\n    double max = Double.NEGATIVE_INFINITY;\n    E argmax = null;\n    for (E key : c.keySet()) {\n      double count = c.getCount(key);\n      if (argmax == null || count > max || (count == max && tieBreaker.compare(key, argmax) < 0)) {\n        max = count;\n        argmax = key;\n      }\n    }\n    return argmax;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@NotNull\n    @Parameterized.Parameters\n    public static Collection<Object[]> combinations() {\n        @NotNull List<Object[]> list = new ArrayList<>();\n        @NotNull Marshallable[] objects = {\n                new Nested(new ScalarValues(), Collections.emptyList(), Collections.emptySet(), Collections.emptyMap(), \"\".split(\"\")),\n                new ScalarValues(1),\n        };\n        @NotNull String[] fields = {\n                \"[!FieldInfo {\\n\" +\n                        \"  name: values,\\n\" +\n                        \"  type: !type net.openhft.chronicle.wire.marshallable.ScalarValues,\\n\" +\n                        \"  bracketType: MAP,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: strings,\\n\" +\n                        \"  type: !type !seq,\\n\" +\n                        \"  bracketType: SEQ,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: ints,\\n\" +\n                        \"  type: !type !set,\\n\" +\n                        \"  bracketType: SEQ,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: map,\\n\" +\n                        \"  type: !type !map,\\n\" +\n                        \"  bracketType: MAP,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: array,\\n\" +\n                        \"  type: !type String[],\\n\" +\n                        \"  bracketType: SEQ,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \"]\",\n                \"[!FieldInfo {\\n\" +\n                        \"  name: flag,\\n\" +\n                        \"  type: !type boolean,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: b,\\n\" +\n                        \"  type: !type byte,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: s,\\n\" +\n                        \"  type: !type short,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: ch,\\n\" +\n                        \"  type: !type char,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: i,\\n\" +\n                        \"  type: !type int,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: f,\\n\" +\n                        \"  type: !type float,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: l,\\n\" +\n                        \"  type: !type long,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: d,\\n\" +\n                        \"  type: !type double,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: flag2,\\n\" +\n                        \"  type: !type java.lang.Boolean,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: b2,\\n\" +\n                        \"  type: !type byte,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: s2,\\n\" +\n                        \"  type: !type short,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: ch2,\\n\" +\n                        \"  type: !type Char,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: i2,\\n\" +\n                        \"  type: !type int,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: f2,\\n\" +\n                        \"  type: !type Float32,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: l2,\\n\" +\n                        \"  type: !type long,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: d2,\\n\" +\n                        \"  type: !type Float64,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: aClass,\\n\" +\n                        \"  type: !type type,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: policy,\\n\" +\n                        \"  type: !type java.lang.annotation.RetentionPolicy,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: text,\\n\" +\n                        \"  type: !type String,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: date,\\n\" +\n                        \"  type: !type Date,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: time,\\n\" +\n                        \"  type: !type Time,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: dateTime,\\n\" +\n                        \"  type: !type DateTime,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: zonedDateTime,\\n\" +\n                        \"  type: !type ZonedDateTime,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: uuid,\\n\" +\n                        \"  type: !type java.util.UUID,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: bi,\\n\" +\n                        \"  type: !type java.math.BigInteger,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: bd,\\n\" +\n                        \"  type: !type java.math.BigDecimal,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: file,\\n\" +\n                        \"  type: !type java.io.File,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \"]\",\n        };\n        for (int i = 0; i < objects.length; i++) {\n            Marshallable object = objects[i];\n            String fi = fields[i];\n            @NotNull Object[] test = {object, fi};\n            list.add(test);\n        }\n        return list;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic SmoothStreamingRendererBuilder(Context context, String userAgent, String url,\n      MediaDrmCallback drmCallback) {\n    this.context = context;\n    this.userAgent = userAgent;\n    this.url = Util.toLowerInvariant(url).endsWith(\"/manifest\") ? url : url + \"/Manifest\";\n    this.drmCallback = drmCallback;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Object getObject(int columnIndex) throws SQLException {\n        Object value;\n        Map<String, Class<?>> map;\n\n        checkIndex(columnIndex);\n        checkCursor();\n\n        setLastValueNull(false);\n        value = getCurrentRow().getColumnObject(columnIndex);\n\n        if (value == null) {\n            setLastValueNull(true);\n            return null;\n        }\n        if (value instanceof Struct) {\n            Struct s = (Struct)value;\n            map = getTypeMap();\n            Class c = (Class)map.get(s.getSQLTypeName());\n            if (c != null) {\n                SQLData obj = null;\n                try {\n                    obj = (SQLData)c.newInstance();\n                } catch (java.lang.InstantiationException ex) {\n                    throw new SQLException(MessageFormat.format(resBundle.handleGetObject(\"cachedrowsetimpl.unableins\").toString(),\n                    ex.getMessage()));\n                } catch (java.lang.IllegalAccessException ex) {\n                    throw new SQLException(MessageFormat.format(resBundle.handleGetObject(\"cachedrowsetimpl.unableins\").toString(),\n                    ex.getMessage()));\n                }\n                Object attribs[] = s.getAttributes(map);\n                SQLInputImpl sqlInput = new SQLInputImpl(attribs, map);\n                obj.readSQL(sqlInput, s.getSQLTypeName());\n                return (Object)obj;\n            }\n        }\n        return value;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void registerReceiver(Context c,\n                                        BroadcastReceiver receiver,\n                                        IntentFilter f, boolean local) {\n        String hashString = receiver.toString();\n        if (!isRegistered(receiver)) {\n            try {\n                if (local)\n                    LocalBroadcastManager.getInstance(c).registerReceiver(receiver, f);\n                else\n                    c.registerReceiver(receiver, f);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            getMap().put(hashString, local);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic SmoothStreamingRendererBuilder(Context context, String userAgent, String url,\n      MediaDrmCallback drmCallback) {\n    this.context = context;\n    this.userAgent = userAgent;\n    this.url = Util.toLowerInvariant(url).endsWith(\"/manifest\") ? url : url + \"/Manifest\";\n    this.drmCallback = drmCallback;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr adjacencyList) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), adjacencyList});\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n   public static void printMethods(Class cl)\n   {\n      Method[] methods = cl.getDeclaredMethods();\n\n      for (Method m : methods)\n      {\n         Class retType = m.getReturnType();\n         String name = m.getName();\n\n         System.out.print(\"   \");\n         String modifiers = Modifier.toString(m.getModifiers());\n         if (modifiers.length() > 0) System.out.print(modifiers + \" \");         \n         System.out.print(retType.getName() + \" \" + name + \"(\");\n\n         Class[] paramTypes = m.getParameterTypes();\n         for (int j = 0; j < paramTypes.length; j++)\n         {\n            if (j > 0) System.out.print(\", \");\n            System.out.print(paramTypes[j].getName());\n         }\n         System.out.println(\");\");\n      }\n   }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void doGenerate(IProgressMonitor monitor) throws IOException {\n\t\tif (!targetFolder.getLocation().toFile().exists()) {\n\t\t\ttargetFolder.getLocation().toFile().mkdirs();\n\t\t}\n\t\t\n\t\tmonitor.subTask(\"Loading...\");\n\t\tcom.github.lbroudoux.dsl.eip.gen.camel.main.GenerateXmlRoutes gen0 = new com.github.lbroudoux.dsl.eip.gen.camel.main.GenerateXmlRoutes(modelURI, targetFolder.getLocation().toFile(), arguments);\n\t\tmonitor.worked(1);\n\t\tString generationID = org.eclipse.acceleo.engine.utils.AcceleoLaunchingUtil.computeUIProjectID(\"com.github.lbroudoux.dsl.eip.gen.camel\", \"com.github.lbroudoux.dsl.eip.gen.camel.main.GenerateJavaRoutes\", modelURI.toString(), targetFolder.getFullPath().toString(), new ArrayList<String>());\n\t\tgen0.setGenerationID(generationID);\n\t\tgen0.doGenerate(BasicMonitor.toMonitor(monitor));\n\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(java.lang.String xmlAsString, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( xmlAsString, type, options ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static List<Integer> topologicalSort(List<Integer>[] graph) {\n\t\tint n = graph.length;\n\t\tboolean[] used = new boolean[n];\n\t\tLinkedList<Integer> res = new LinkedList<>();\n\t\tused = new boolean[n];\n\t\tfor (int i = 0; i < n; i++){\n\t\t\tif (!used[i])\n\t\t\t\tdfs(graph, used, res, i);\n\t\t}\n\t\t\t\t\n\t\tCollections.reverse(res);\n\t\treturn res;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void quadrantRotate(int numquadrants,\n                               double anchorx, double anchory)\n    {\n        switch (numquadrants & 3) {\n        case 0:\n            return;\n        case 1:\n            m02 += anchorx * (m00 - m01) + anchory * (m01 + m00);\n            m12 += anchorx * (m10 - m11) + anchory * (m11 + m10);\n            rotate90();\n            break;\n        case 2:\n            m02 += anchorx * (m00 + m00) + anchory * (m01 + m01);\n            m12 += anchorx * (m10 + m10) + anchory * (m11 + m11);\n            rotate180();\n            break;\n        case 3:\n            m02 += anchorx * (m00 + m01) + anchory * (m01 - m00);\n            m12 += anchorx * (m10 + m11) + anchory * (m11 - m10);\n            rotate270();\n            break;\n        }\n        if (m02 == 0.0 && m12 == 0.0) {\n            state &= ~APPLY_TRANSLATE;\n        } else {\n            state |= APPLY_TRANSLATE;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean putMapNotEmptyKeyAndValue(Map<String, String> map, String key, String value,\n            String defaultValue) {\n        if (map == null || StringUtils.isEmpty(key)) {\n            return false;\n        }\n\n        map.put(key, StringUtils.isEmpty(value) ? defaultValue : value);\n        return true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public View getView(final int position, View convertView, final ViewGroup parent) {\n            ViewHolder holder = null;\n            if (convertView == null) {\n                convertView = layoutInflater.inflate(R.layout.item_marray, null);\n            } else {\n                convertView.getTag();\n            }\n            holder = new ViewHolder(convertView);\n            holder.tv_name.setText(news.get(position).getName());\n            holder.tv_phone.setText(news.get(position).getPhone());\n            if (news.get(position).isShow) {\n                holder.ly_a.setVisibility(VISIBLE);\n                holder.ly_b.setVisibility(View.GONE);\n            } else {\n                holder.ly_a.setVisibility(View.GONE);\n                holder.ly_b.setVisibility(VISIBLE);\n            }\n            final ViewHolder finalHolder = holder;\n            holder.tv_unrepeat.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(final View v) {\n\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_unrepeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_unrepeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_repeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_repeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_invalid.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_invalid.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_valid.getId() +\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \"+ \"\" + (finalHolder.tv_valid.isShown()));\n\n                    infoList.get(position).isShow = false;\n                    notifyDataSetChanged();\n                }\n            });\n\n            holder.tv_repeat.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(final View v) {\n\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_unrepeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_unrepeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_repeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_repeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_invalid.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_invalid.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_valid.getId() +\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \"+ \"\" + (finalHolder.tv_valid.isShown()));\n\n                    infoList.get(position).isShow = false;\n                    notifyDataSetChanged();\n                }\n            });\n            holder.tv_valid.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(final View v) {\n\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_unrepeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_unrepeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_repeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_repeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_invalid.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_invalid.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_valid.getId() +\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \"+ \"\" + (finalHolder.tv_valid.isShown()));\n\n                    infoList.get(position).isShow = true;\n                    notifyDataSetChanged();\n                }\n            });\n            holder.tv_invalid.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(final View v) {\n\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_unrepeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_unrepeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_repeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_repeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_invalid.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_invalid.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_valid.getId() +\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \"+ \"\" + (finalHolder.tv_valid.isShown()));\n\n                    infoList.get(position).isShow = true;\n                    notifyDataSetChanged();\n                }\n            });\n\n\n            return convertView;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static <N extends RootedDAGNode<N>> List<N> topologicalSort(N root) throws GraphException {\n\t\tList<N> queued = new ArrayList<N>();\n\t\tqueued.add(root);\n\t\tint i=0;\n\t\twhile (i<queued.size()) {\n\t\t\tN n = queued.get(i);\n\t\t\tfor (N c : n.getChildren()) {\n\t\t\t\tif (!queued.contains(c))\n\t\t\t\t\tqueued.add(c);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tCollections.reverse(queued);\n\t\tList<N> sorted = new ArrayList<N>();\n\t\ti = 0;\n\t\twhile (!queued.isEmpty()) {\n\t\t\ti = queued.size()-1;\n\t\t\twhile (i>=0) {\n\t\t\t\tN n = queued.get(i);\n\t\t\t\tboolean allParentsSorted = true;\n\t\t\t\tfor (N p : n.getParents()) {\n\t\t\t\t\tif (!sorted.contains(p)) {\n\t\t\t\t\t\tallParentsSorted = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (allParentsSorted) {\n\t\t\t\t\tsorted.add(queued.remove(i));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tif (i==-1)\n\t\t\t\tthrow new GraphException(\"Cannot produce a topological sort: not a DAG\");\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void updateHighOrderDerivativesPhase2(final double[] start,\n                                                 final double[] end,\n                                                 final Array2DRowRealMatrix highOrder) {\n        final double[][] data = highOrder.getDataRef();\n        for (int i = 0; i < data.length; ++i) {\n            final double[] dataI = data[i];\n            final double c1I = c1[i];\n            for (int j = 0; j < dataI.length; ++j) {\n                dataI[j] += c1I * (start[j] - end[j]);\n            }\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps,\n                boolean isUserGenerated) {\n            Validate.notNull(objectProperty, \"objectProperty\");\n            Validate.containsNoNulls(bitmaps, \"bitmaps\");\n            if (action == null) {\n                throw new FacebookException(\"Can not set attachments prior to setting action.\");\n            }\n\n            List<String> attachmentUrls = addImageAttachments(bitmaps);\n            updateObjectAttachmentUrls(objectProperty, attachmentUrls, isUserGenerated);\n\n            return this;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static Endpoint create(Object implementor, WebServiceFeature ... features) {\n        return create(null, implementor, features);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(java.lang.String xmlAsString, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( xmlAsString, type, options ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean putMapNotEmptyKeyAndValue(Map<String, String> map, String key, String value,\n                                                    String defaultValue) {\n        if (map == null || StringUtil.isEmpty(key)) {\n            return false;\n        }\n\n        map.put(key, StringUtil.isEmpty(value) ? defaultValue : value);\n        return true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n        NetworkUtil.releaseMsgCompletely(initialLineBuf);\n        if (!decodeFinished) {\n            String msg = \"Server channel inactive while decoding response header\";\n            LOGGER.debug(msg);\n            NetworkUtil.releaseMsgCompletely(headerBuf);\n            listener.onThrowable(msg, ServerChannelInactiveException.INSTANCE);\n        }\n        super.channelInactive(ctx);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private boolean isInContent(float x, float y, Sticker currentSticker) {\n\n\n\n        float[] pointsDst = currentSticker.getMapPointsDst();\n        if (x > pointsDst[0] && x < pointsDst[2] && y > pointsDst[3] && y < pointsDst[5])\n            return true;\n        return false;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" deltaNeutralOpenClose=\" + order.m_deltaNeutralOpenClose +\n        \" deltaNeutralShortSale=\" + order.m_deltaNeutralShortSale +\n        \" deltaNeutralShortSaleSlot=\" + order.m_deltaNeutralShortSaleSlot +\n        \" deltaNeutralDesignatedLocation=\" + order.m_deltaNeutralDesignatedLocation +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static LuaFunction gsub() {\n\t\treturn GSUB;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static Filter methodFilter(java.lang.reflect.Method m, Object[] extraArgs,\n            Object falseResult) {\n        return methodFilter(m, false, extraArgs, falseResult);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void addFooterView(View v, Object data, boolean isSelectable) {\n\n\n\t\tFixedViewInfo info = new FixedViewInfo();\n\t\tinfo.view = v;\n\t\tinfo.data = data;\n\t\tinfo.isSelectable = isSelectable;\n\t\tmFooterViewInfos.add(info);\n\n\t\tif (mAdapter != null && mObserver != null) {\n\t\t\tmObserver.onChanged();\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n  public static double interpolateZ(Coordinate p, Coordinate v0, Coordinate v1,\n      Coordinate v2)\n  {\n    double x0 = v0.x;\n    double y0 = v0.y;\n    double a = v1.x - x0;\n    double b = v2.x - x0;\n    double c = v1.y - y0;\n    double d = v2.y - y0;\n    double det = a * d - b * c;\n    double dx = p.x - x0;\n    double dy = p.y - y0;\n    double t = (d * dx - b * dy) / det;\n    double u = (-c * dx + a * dy) / det;\n    double z = v0.z + t * (v1.z - v0.z) + u * (v2.z - v0.z);\n    return z;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void drawQuad( FloatBuffer vertices ) {\n\t\t\n\t\tvertices.position( 0 );\n\t\taXY.vertexPointer( 2, 4, vertices );\n\t\t\n\t\tvertices.position( 2 );\n\t\taUV.vertexPointer( 2, 4, vertices );\n\n\t\tGdx.gl.glDrawElements( GL20.GL_TRIANGLES, Quad.SIZE, GL20.GL_UNSIGNED_SHORT, Quad.INDICES_1 );\n\t\t\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static <N extends RootedDAGNode<N>> List<N> topologicalSort(N root) throws GraphException {\n\t\tList<N> queued = new ArrayList<N>();\n\t\tqueued.add(root);\n\t\tint i=0;\n\t\twhile (i<queued.size()) {\n\t\t\tN n = queued.get(i);\n\t\t\tfor (N c : n.getChildren()) {\n\t\t\t\tif (!queued.contains(c))\n\t\t\t\t\tqueued.add(c);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tCollections.reverse(queued);\n\t\tList<N> sorted = new ArrayList<N>();\n\t\ti = 0;\n\t\twhile (!queued.isEmpty()) {\n\t\t\ti = queued.size()-1;\n\t\t\twhile (i>=0) {\n\t\t\t\tN n = queued.get(i);\n\t\t\t\tboolean allParentsSorted = true;\n\t\t\t\tfor (N p : n.getParents()) {\n\t\t\t\t\tif (!sorted.contains(p)) {\n\t\t\t\t\t\tallParentsSorted = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (allParentsSorted) {\n\t\t\t\t\tsorted.add(queued.remove(i));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tif (i==-1)\n\t\t\t\tthrow new GraphException(\"Cannot produce a topological sort: not a DAG\");\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void systemLoader()\n\t\t{\n\t\t\t\n\t\t\tlong loginCount = mXPref.getUseTotalCount();\n\t\t\tmXPref.putUseTotalCount(loginCount + 1); // Login count++\n\t\t\t\n\t\t\tmXPref.putUseDayCount(mXPref.getUseDayCount() + 1);\t\t\t\n\t\t\t\n\t\t\tLog.I(TAG, String.format(\"Entry %1s %2s Times.\", getString(R.string.app_name), loginCount));\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static String getMsgWithLineNumber(String msg) {\n        try {\n            for (StackTraceElement st : (new Throwable()).getStackTrace()) {\n                if (mClassname.equals(st.getClassName()) || mMethods.contains(st.getMethodName())) {\n                    continue;\n                } else {\n                    int b = st.getClassName().lastIndexOf(\".\") + 1;\n                    String message = new StringBuilder(st.getClassName().substring(b)).append(\"->\").append(st.getMethodName())\n                            .append(\"():\").append(st.getLineNumber()).append(msg).toString();\n                    return message;\n                }\n\n            }\n        } catch (Exception e) {\n\n        }\n        return msg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\n\t\tCIMSession cimSession =new  CIMSession(ctx.channel());\n\t\t\n\t\tlogger.warn(\"sessionClosed()... from \"+ctx.channel().remoteAddress()+\" nid:\"+cimSession.getNid() +\",isConnected:\"+ctx.channel().isActive());\n\t\tCIMRequestHandler handler = handlers.get(CIMSESSION_CLOSED_HANDLER_KEY);\n\t\tif(handler!=null)\n\t\t{\n\t\t\thandler.process(cimSession, null);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic boolean isLinked(ParaObject obj, String type2, String id2) {\n\t\t\tif (type2 == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn getDao().read(obj.getAppid(), new Linker(obj.getType(), type2, obj.getId(), id2).getId()) != null;\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void onDownloadError(int index, String message) {\n    for (int i = 0; i < mDownloadStatus.length; i++) {\n        if (mDownloadStatus[i] != Constants.DOWNLOAD_STATE_FINISH && mDownloadStatus[i] != Constants.DOWNLOAD_STATE_ERROR) {\n            mDownloadThreads[i].cancel();\n        }\n    }\n    notifyError(message);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n        logger.trace(\"Start handling inactive event for client {}\", this.clientId);\n\n        if (this.connected) {\n\n            logger.debug(\"Connection closed: Connection lost from client {} user {}\", this.clientId, this.userName);\n\n            boolean redirect = handleConnectLost(ctx);\n\n            if (redirect)\n                logger.trace(\"Send a copy of DISCONNECT message from client {} to 3rd party application\", this.clientId);\n            this.cluster.sendToApplication(new Message<>(\n                    new MqttFixedHeader(MqttMessageType.DISCONNECT, false, MqttQoS.AT_MOST_ONCE, false, 0),\n                    new MqttAdditionalHeader(this.version, this.clientId, this.userName, this.brokerId), null, null));\n\n            if (this.willMessage != null) {\n\n                MqttQoS willQos = this.willMessage.fixedHeader().qos();\n                String willTopic = this.willMessage.variableHeader().topicName();\n                boolean willRetain = this.willMessage.fixedHeader().retain();\n\n                AuthorizeResult result = this.authenticator.authPublish(this.clientId, this.userName, willTopic, willQos.value(), willRetain);\n                if (result == AuthorizeResult.OK) {\n                    logger.trace(\"Authorization WILL message succeeded on topic {} for client {}\", willTopic, this.clientId);\n\n                    onwardRecipients(this.willMessage, Message.fromMqttMessage(this.willMessage, this.version, this.clientId, this.userName, this.brokerId).payload());\n                }\n                else {\n                    logger.trace(\"Authorization WILL message failed on topic {} for client {}\", willTopic, this.clientId);\n                }\n            }\n        }\n\n        logger.trace(\"Finish handling inactive event for client {}\", this.clientId);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic SmoothStreamingRendererBuilder(String userAgent, String url, String contentId,\n      MediaDrmCallback drmCallback, TextView debugTextView) {\n    this.userAgent = userAgent;\n    this.url = url;\n    this.contentId = contentId;\n    this.drmCallback = drmCallback;\n    this.debugTextView = debugTextView;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n        if (headerWrite.compareAndSet(false, true)) {\n            NetworkUtil.releaseMsgCompletely(initBuf);\n        }\n        if (!decodeFinished) {\n            String msg = \"Server channel inactive while decoding response body\";\n            LOGGER.info(msg);\n            listener.onThrowable(msg, ServerChannelInactiveException.INSTANCE);\n        }\n        super.channelInactive(ctx);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n  public static <E> E argmax(Counter<E> c) {\n    double max = Double.NEGATIVE_INFINITY;\n    E argmax = null;\n    for (E key : c.keySet()) {\n      double count = c.getCount(key);\n      if (argmax == null || count > max) {// || (count == max && tieBreaker.compare(key, argmax) < 0)) {\n        max = count;\n        argmax = key;\n      }\n    }\n    return argmax;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate Expression readCondition() {\n        if (readIf(\"NOT\")) {\n            return new ConditionNot(readCondition());\n        }\n        if (readIf(\"EXISTS\")) {\n            read(\"(\");\n            Query query = parseSelect();\n            read(\")\");\n            return new ConditionExists(query);\n        }\n        Expression r = readConcat();\n        while (true) {\n            int backup = parseIndex;\n            boolean not = false;\n            if (readIf(\"NOT\")) {\n                not = true;\n                if (isToken(\"NULL\")) {\n                    parseIndex = backup;\n                    currentToken = \"NOT\";\n                    break;\n                }\n            }\n            if (readIf(\"LIKE\")) {\n                Expression b = readConcat();\n                Expression esc = null;\n                if (readIf(\"ESCAPE\")) {\n                    esc = readConcat();\n                }\n                recompileAlways = true;\n                r = new CompareLike(database, r, b, esc, false);\n            } else if (readIf(\"REGEXP\")) {\n                Expression b = readConcat();\n                r = new CompareLike(database, r, b, null, true);\n            } else if (readIf(\"IS\")) {\n                if (readIf(\"NOT\")) {\n                    if (readIf(\"NULL\")) {\n                        r = new Comparison(session, Comparison.IS_NOT_NULL, r,\n                                null);\n                    } else if (readIf(\"DISTINCT\")) {\n                        read(\"FROM\");\n                        r = new Comparison(session, Comparison.EQUAL_NULL_SAFE,\n                                r, readConcat());\n                    } else {\n                        r = new Comparison(session,\n                                Comparison.NOT_EQUAL_NULL_SAFE, r, readConcat());\n                    }\n                } else if (readIf(\"NULL\")) {\n                    r = new Comparison(session, Comparison.IS_NULL, r, null);\n                } else if (readIf(\"DISTINCT\")) {\n                    read(\"FROM\");\n                    r = new Comparison(session, Comparison.NOT_EQUAL_NULL_SAFE,\n                            r, readConcat());\n                } else {\n                    r = new Comparison(session, Comparison.EQUAL_NULL_SAFE, r,\n                            readConcat());\n                }\n            } else if (readIf(\"IN\")) {\n                read(\"(\");\n                if (readIf(\")\")) {\n                    r = ValueExpression.get(ValueBoolean.get(false));\n                } else {\n                    if (isSelect()) {\n                        Query query = parseSelect();\n                        r = new ConditionInSelect(database, r, query, false,\n                                Comparison.EQUAL);\n                    } else {\n                        ArrayList<Expression> v = New.arrayList();\n                        Expression last;\n                        do {\n                            last = readExpression();\n                            v.add(last);\n                        } while (readIf(\",\"));\n                        if (v.size() == 1 && (last instanceof Subquery)) {\n                            Subquery s = (Subquery) last;\n                            Query q = s.getQuery();\n                            r = new ConditionInSelect(database, r, q, false,\n                                    Comparison.EQUAL);\n                        } else {\n                            r = new ConditionIn(database, r, v);\n                        }\n                    }\n                    read(\")\");\n                }\n            } else if (readIf(\"BETWEEN\")) {\n                Expression low = readConcat();\n                read(\"AND\");\n                Expression high = readConcat();\n                Expression condLow = new Comparison(session,\n                        Comparison.SMALLER_EQUAL, low, r);\n                Expression condHigh = new Comparison(session,\n                        Comparison.BIGGER_EQUAL, high, r);\n                r = new ConditionAndOr(ConditionAndOr.AND, condLow, condHigh);\n            } else {\n                int compareType = getCompareType(currentTokenType);\n                if (compareType < 0) {\n                    break;\n                }\n                read();\n                if (readIf(\"ALL\")) {\n                    read(\"(\");\n                    Query query = parseSelect();\n                    r = new ConditionInSelect(database, r, query, true,\n                            compareType);\n                    read(\")\");\n                } else if (readIf(\"ANY\") || readIf(\"SOME\")) {\n                    read(\"(\");\n                    Query query = parseSelect();\n                    r = new ConditionInSelect(database, r, query, false,\n                            compareType);\n                    read(\")\");\n                } else {\n                    Expression right = readConcat();\n                    if (SysProperties.OLD_STYLE_OUTER_JOIN &&\n                            readIf(\"(\") && readIf(\"+\") && readIf(\")\")) {\n                        if (r instanceof ExpressionColumn &&\n                                right instanceof ExpressionColumn) {\n                            ExpressionColumn leftCol = (ExpressionColumn) r;\n                            ExpressionColumn rightCol = (ExpressionColumn) right;\n                            ArrayList<TableFilter> filters = currentSelect\n                                    .getTopFilters();\n                            for (TableFilter f : filters) {\n                                while (f != null) {\n                                    leftCol.mapColumns(f, 0);\n                                    rightCol.mapColumns(f, 0);\n                                    f = f.getJoin();\n                                }\n                            }\n                            TableFilter leftFilter = leftCol.getTableFilter();\n                            TableFilter rightFilter = rightCol.getTableFilter();\n                            r = new Comparison(session, compareType, r, right);\n                            if (leftFilter != null && rightFilter != null) {\n                                int idx = filters.indexOf(rightFilter);\n                                if (idx >= 0) {\n                                    filters.remove(idx);\n                                    leftFilter.addJoin(rightFilter, true,\n                                            false, r);\n                                } else {\n                                    rightFilter.mapAndAddFilter(r);\n                                }\n                                r = ValueExpression.get(ValueBoolean.get(true));\n                            }\n                        }\n                    } else {\n                        r = new Comparison(session, compareType, r, right);\n                    }\n                }\n            }\n            if (not) {\n                r = new ConditionNot(r);\n            }\n        }\n        return r;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic List<Instance<String>> createInstances() {\n    List<Instance<String>> instances = new ArrayList<Instance<String>>();\n    instances.add(createInstance(\"O Word_Three LCWord_three CapitalType_INITIAL_UPPERCASE L0OOB1 L1OOB2 R0_sequence R0_TypePath_Pos_NN R0_TypePath_Stem_sequenc R1_elements R1_TypePath_Pos_NNS R1_TypePath_Stem_element TypePath_Pos_CD TypePath_Stem_Three PrevNEMTokenLabel_L0OOB1 PrevNEMTokenLabel_L1OOB2\"));\n    instances.add(createInstance(\"O Word_sequence LCWord_sequence CapitalType_ALL_LOWERCASE Prefix3_seq Suffix3_nce Suffix4_ence Suffix5_uence L0_Three L0_TypePath_Pos_CD L0_TypePath_Stem_Three L1OOB1 R0_elements R0_TypePath_Pos_NNS R0_TypePath_Stem_element R1_are R1_TypePath_Pos_VBP R1_TypePath_Stem_are TypePath_Pos_NN TypePath_Stem_sequenc PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1OOB1\"));\n    instances.add(createInstance(\"O Word_elements LCWord_elements CapitalType_ALL_LOWERCASE Prefix3_ele Suffix3_nts Suffix4_ents Suffix5_ments L0_sequence L0_TypePath_Pos_NN L0_TypePath_Stem_sequenc L1_Three L1_TypePath_Pos_CD L1_TypePath_Stem_Three R0_are R0_TypePath_Pos_VBP R0_TypePath_Stem_are R1_shown R1_TypePath_Pos_VBN R1_TypePath_Stem_shown TypePath_Pos_NNS TypePath_Stem_element PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_are LCWord_are CapitalType_ALL_LOWERCASE L0_elements L0_TypePath_Pos_NNS L0_TypePath_Stem_element L1_sequence L1_TypePath_Pos_NN L1_TypePath_Stem_sequenc R0_shown R0_TypePath_Pos_VBN R0_TypePath_Stem_shown R1_to R1_TypePath_Pos_TO R1_TypePath_Stem_to TypePath_Pos_VBP TypePath_Stem_are PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_shown LCWord_shown CapitalType_ALL_LOWERCASE L0_are L0_TypePath_Pos_VBP L0_TypePath_Stem_are L1_elements L1_TypePath_Pos_NNS L1_TypePath_Stem_element R0_to R0_TypePath_Pos_TO R0_TypePath_Stem_to R1_be R1_TypePath_Pos_VB R1_TypePath_Stem_be TypePath_Pos_VBN TypePath_Stem_shown PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_to LCWord_to CapitalType_ALL_LOWERCASE L0_shown L0_TypePath_Pos_VBN L0_TypePath_Stem_shown L1_are L1_TypePath_Pos_VBP L1_TypePath_Stem_are R0_be R0_TypePath_Pos_VB R0_TypePath_Stem_be R1_required R1_TypePath_Pos_VBN R1_TypePath_Stem_requir TypePath_Pos_TO TypePath_Stem_to PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_be LCWord_be CapitalType_ALL_LOWERCASE L0_to L0_TypePath_Pos_TO L0_TypePath_Stem_to L1_shown L1_TypePath_Pos_VBN L1_TypePath_Stem_shown R0_required R0_TypePath_Pos_VBN R0_TypePath_Stem_requir R1_for R1_TypePath_Pos_IN R1_TypePath_Stem_for TypePath_Pos_VB TypePath_Stem_be PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_required LCWord_required CapitalType_ALL_LOWERCASE Prefix3_req Suffix3_red Suffix4_ired Suffix5_uired L0_be L0_TypePath_Pos_VB L0_TypePath_Stem_be L1_to L1_TypePath_Pos_TO L1_TypePath_Stem_to R0_for R0_TypePath_Pos_IN R0_TypePath_Stem_for R1_accurate R1_TypePath_Pos_JJ R1_TypePath_Stem_accur TypePath_Pos_VBN TypePath_Stem_requir PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_for LCWord_for CapitalType_ALL_LOWERCASE L0_required L0_TypePath_Pos_VBN L0_TypePath_Stem_requir L1_be L1_TypePath_Pos_VB L1_TypePath_Stem_be R0_accurate R0_TypePath_Pos_JJ R0_TypePath_Stem_accur R1_and R1_TypePath_Pos_CC R1_TypePath_Stem_and TypePath_Pos_IN TypePath_Stem_for PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_accurate LCWord_accurate CapitalType_ALL_LOWERCASE Prefix3_acc Suffix3_ate Suffix4_rate Suffix5_urate L0_for L0_TypePath_Pos_IN L0_TypePath_Stem_for L1_required L1_TypePath_Pos_VBN L1_TypePath_Stem_requir R0_and R0_TypePath_Pos_CC R0_TypePath_Stem_and R1_efficient R1_TypePath_Pos_JJ R1_TypePath_Stem_effici TypePath_Pos_JJ TypePath_Stem_accur PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_and LCWord_and CapitalType_ALL_LOWERCASE L0_accurate L0_TypePath_Pos_JJ L0_TypePath_Stem_accur L1_for L1_TypePath_Pos_IN L1_TypePath_Stem_for R0_efficient R0_TypePath_Pos_JJ R0_TypePath_Stem_effici R1_transcription R1_TypePath_Pos_NN R1_TypePath_Stem_transcript TypePath_Pos_CC TypePath_Stem_and PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_efficient LCWord_efficient CapitalType_ALL_LOWERCASE Prefix3_eff Suffix3_ent Suffix4_ient Suffix5_cient L0_and L0_TypePath_Pos_CC L0_TypePath_Stem_and L1_accurate L1_TypePath_Pos_JJ L1_TypePath_Stem_accur R0_transcription R0_TypePath_Pos_NN R0_TypePath_Stem_transcript R1_termination R1_TypePath_Pos_NN R1_TypePath_Stem_termin TypePath_Pos_JJ TypePath_Stem_effici PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_transcription LCWord_transcription CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ption L0_efficient L0_TypePath_Pos_JJ L0_TypePath_Stem_effici L1_and L1_TypePath_Pos_CC L1_TypePath_Stem_and R0_termination R0_TypePath_Pos_NN R0_TypePath_Stem_termin R1_by R1_TypePath_Pos_IN R1_TypePath_Stem_by TypePath_Pos_NN TypePath_Stem_transcript PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_termination LCWord_termination CapitalType_ALL_LOWERCASE Prefix3_ter Suffix3_ion Suffix4_tion Suffix5_ation L0_transcription L0_TypePath_Pos_NN L0_TypePath_Stem_transcript L1_efficient L1_TypePath_Pos_JJ L1_TypePath_Stem_effici R0_by R0_TypePath_Pos_IN R0_TypePath_Stem_by R1_RNA R1_TypePath_Pos_NNP R1_TypePath_Stem_RNA TypePath_Pos_NN TypePath_Stem_termin PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_by LCWord_by CapitalType_ALL_LOWERCASE L0_termination L0_TypePath_Pos_NN L0_TypePath_Stem_termin L1_transcription L1_TypePath_Pos_NN L1_TypePath_Stem_transcript R0_RNA R0_TypePath_Pos_NNP R0_TypePath_Stem_RNA R1_polymerase R1_TypePath_Pos_NN R1_TypePath_Stem_polymeras TypePath_Pos_IN TypePath_Stem_by PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"B-GENE Word_RNA LCWord_rna CapitalType_ALL_UPPERCASE L0_by L0_TypePath_Pos_IN L0_TypePath_Stem_by L1_termination L1_TypePath_Pos_NN L1_TypePath_Stem_termin R0_polymerase R0_TypePath_Pos_NN R0_TypePath_Stem_polymeras R1_I R1_TypePath_Pos_PRP R1_TypePath_Stem_I TypePath_Pos_NNP TypePath_Stem_RNA PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"I-GENE Word_polymerase LCWord_polymerase CapitalType_ALL_LOWERCASE Prefix3_pol Suffix3_ase Suffix4_rase Suffix5_erase L0_RNA L0_TypePath_Pos_NNP L0_TypePath_Stem_RNA L1_by L1_TypePath_Pos_IN L1_TypePath_Stem_by R0_I R0_TypePath_Pos_PRP R0_TypePath_Stem_I R1_( R1_TypePath_Pos_-LRB- R1_TypePath_Stem_( TypePath_Pos_NN TypePath_Stem_polymeras PrevNEMTokenLabel_L0_B-GENE PrevNEMTokenLabel_L1_O Gazetteer_entrez_genes.txt Gazetteer_entrez_genes.txt\"));\n    instances.add(createInstance(\"I-GENE Word_I LCWord_i CapitalType_ALL_UPPERCASE NumericType_ROMAN_NUMERAL L0_polymerase L0_TypePath_Pos_NN L0_TypePath_Stem_polymeras L1_RNA L1_TypePath_Pos_NNP L1_TypePath_Stem_RNA R0_( R0_TypePath_Pos_-LRB- R0_TypePath_Stem_( R1_pol R1_TypePath_Pos_NN R1_TypePath_Stem_pol TypePath_Pos_PRP TypePath_Stem_I PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_B-GENE\"));\n    instances.add(createInstance(\"O Word_( LCWord_( L0_I L0_TypePath_Pos_PRP L0_TypePath_Stem_I L1_polymerase L1_TypePath_Pos_NN L1_TypePath_Stem_polymeras R0_pol R0_TypePath_Pos_NN R0_TypePath_Stem_pol R1_I R1_TypePath_Pos_PRP R1_TypePath_Stem_I TypePath_Pos_-LRB- TypePath_Stem_( PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_I-GENE\"));\n    instances.add(createInstance(\"B-GENE Word_pol LCWord_pol CapitalType_ALL_LOWERCASE L0_( L0_TypePath_Pos_-LRB- L0_TypePath_Stem_( L1_I L1_TypePath_Pos_PRP L1_TypePath_Stem_I R0_I R0_TypePath_Pos_PRP R0_TypePath_Stem_I R1_) R1_TypePath_Pos_-RRB- R1_TypePath_Stem_) TypePath_Pos_NN TypePath_Stem_pol PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_I-GENE Gazetteer_entrez_genes.txt\"));\n    instances.add(createInstance(\"I-GENE Word_I LCWord_i CapitalType_ALL_UPPERCASE NumericType_ROMAN_NUMERAL L0_pol L0_TypePath_Pos_NN L0_TypePath_Stem_pol L1_( L1_TypePath_Pos_-LRB- L1_TypePath_Stem_( R0_) R0_TypePath_Pos_-RRB- R0_TypePath_Stem_) R1_assayed R1_TypePath_Pos_VBD R1_TypePath_Stem_assay TypePath_Pos_PRP TypePath_Stem_I PrevNEMTokenLabel_L0_B-GENE PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_) LCWord_) L0_I L0_TypePath_Pos_PRP L0_TypePath_Stem_I L1_pol L1_TypePath_Pos_NN L1_TypePath_Stem_pol R0_assayed R0_TypePath_Pos_VBD R0_TypePath_Stem_assay R1_both R1_TypePath_Pos_DT R1_TypePath_Stem_both TypePath_Pos_-RRB- TypePath_Stem_) PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_B-GENE\"));\n    instances.add(createInstance(\"O Word_assayed LCWord_assayed CapitalType_ALL_LOWERCASE Prefix3_ass Suffix3_yed Suffix4_ayed L0_) L0_TypePath_Pos_-RRB- L0_TypePath_Stem_) L1_I L1_TypePath_Pos_PRP L1_TypePath_Stem_I R0_both R0_TypePath_Pos_DT R0_TypePath_Stem_both R1_in R1_TypePath_Pos_IN R1_TypePath_Stem_in TypePath_Pos_VBD TypePath_Stem_assay PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_I-GENE\"));\n    instances.add(createInstance(\"O Word_both LCWord_both CapitalType_ALL_LOWERCASE L0_assayed L0_TypePath_Pos_VBD L0_TypePath_Stem_assay L1_) L1_TypePath_Pos_-RRB- L1_TypePath_Stem_) R0_in R0_TypePath_Pos_IN R0_TypePath_Stem_in R1_a R1_TypePath_Pos_DT R1_TypePath_Stem_a TypePath_Pos_DT TypePath_Stem_both PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_in LCWord_in CapitalType_ALL_LOWERCASE L0_both L0_TypePath_Pos_DT L0_TypePath_Stem_both L1_assayed L1_TypePath_Pos_VBD L1_TypePath_Stem_assay R0_a R0_TypePath_Pos_DT R0_TypePath_Stem_a R1_cell-free R1_TypePath_Pos_JJ R1_TypePath_Stem_cell-fre TypePath_Pos_IN TypePath_Stem_in PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_a LCWord_a CapitalType_ALL_LOWERCASE L0_in L0_TypePath_Pos_IN L0_TypePath_Stem_in L1_both L1_TypePath_Pos_DT L1_TypePath_Stem_both R0_cell-free R0_TypePath_Pos_JJ R0_TypePath_Stem_cell-fre R1_transcription R1_TypePath_Pos_NN R1_TypePath_Stem_transcript TypePath_Pos_DT TypePath_Stem_a PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_cell-free LCWord_cell-free CapitalType_ALL_LOWERCASE ContainsHyphen_CONTAINS_HYPHEN Prefix3_cel Suffix3_ree Suffix4_free Suffix5_-free L0_a L0_TypePath_Pos_DT L0_TypePath_Stem_a L1_in L1_TypePath_Pos_IN L1_TypePath_Stem_in R0_transcription R0_TypePath_Pos_NN R0_TypePath_Stem_transcript R1_system R1_TypePath_Pos_NN R1_TypePath_Stem_system TypePath_Pos_JJ TypePath_Stem_cell-fre PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_transcription LCWord_transcription CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ption L0_cell-free L0_TypePath_Pos_JJ L0_TypePath_Stem_cell-fre L1_a L1_TypePath_Pos_DT L1_TypePath_Stem_a R0_system R0_TypePath_Pos_NN R0_TypePath_Stem_system R1_and R1_TypePath_Pos_CC R1_TypePath_Stem_and TypePath_Pos_NN TypePath_Stem_transcript PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_system LCWord_system CapitalType_ALL_LOWERCASE Prefix3_sys Suffix3_tem L0_transcription L0_TypePath_Pos_NN L0_TypePath_Stem_transcript L1_cell-free L1_TypePath_Pos_JJ L1_TypePath_Stem_cell-fre R0_and R0_TypePath_Pos_CC R0_TypePath_Stem_and R1_in R1_TypePath_Pos_IN R1_TypePath_Stem_in TypePath_Pos_NN TypePath_Stem_system PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_and LCWord_and CapitalType_ALL_LOWERCASE L0_system L0_TypePath_Pos_NN L0_TypePath_Stem_system L1_transcription L1_TypePath_Pos_NN L1_TypePath_Stem_transcript R0_in R0_TypePath_Pos_IN R0_TypePath_Stem_in R1_vivo R1_TypePath_Pos_RB R1_TypePath_Stem_vivo TypePath_Pos_CC TypePath_Stem_and PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_in LCWord_in CapitalType_ALL_LOWERCASE L0_and L0_TypePath_Pos_CC L0_TypePath_Stem_and L1_system L1_TypePath_Pos_NN L1_TypePath_Stem_system R0_vivo R0_TypePath_Pos_RB R0_TypePath_Stem_vivo R1_after R1_TypePath_Pos_IN R1_TypePath_Stem_after TypePath_Pos_IN TypePath_Stem_in PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_vivo LCWord_vivo CapitalType_ALL_LOWERCASE L0_in L0_TypePath_Pos_IN L0_TypePath_Stem_in L1_and L1_TypePath_Pos_CC L1_TypePath_Stem_and R0_after R0_TypePath_Pos_IN R0_TypePath_Stem_after R1_transfection R1_TypePath_Pos_NN R1_TypePath_Stem_transfect TypePath_Pos_RB TypePath_Stem_vivo PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_after LCWord_after CapitalType_ALL_LOWERCASE L0_vivo L0_TypePath_Pos_RB L0_TypePath_Stem_vivo L1_in L1_TypePath_Pos_IN L1_TypePath_Stem_in R0_transfection R0_TypePath_Pos_NN R0_TypePath_Stem_transfect R1_of R1_TypePath_Pos_IN R1_TypePath_Stem_of TypePath_Pos_IN TypePath_Stem_after PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_transfection LCWord_transfection CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ction L0_after L0_TypePath_Pos_IN L0_TypePath_Stem_after L1_vivo L1_TypePath_Pos_RB L1_TypePath_Stem_vivo R0_of R0_TypePath_Pos_IN R0_TypePath_Stem_of R1_rDNA R1_TypePath_Pos_NNP R1_TypePath_Stem_rDNA TypePath_Pos_NN TypePath_Stem_transfect PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_of LCWord_of CapitalType_ALL_LOWERCASE L0_transfection L0_TypePath_Pos_NN L0_TypePath_Stem_transfect L1_after L1_TypePath_Pos_IN L1_TypePath_Stem_after R0_rDNA R0_TypePath_Pos_NNP R0_TypePath_Stem_rDNA R1_minigene R1_TypePath_Pos_NN R1_TypePath_Stem_minigen TypePath_Pos_IN TypePath_Stem_of PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_rDNA LCWord_rdna CapitalType_MIXED_CASE L0_of L0_TypePath_Pos_IN L0_TypePath_Stem_of L1_transfection L1_TypePath_Pos_NN L1_TypePath_Stem_transfect R0_minigene R0_TypePath_Pos_NN R0_TypePath_Stem_minigen R1_constructs R1_TypePath_Pos_NNS R1_TypePath_Stem_construct TypePath_Pos_NNP TypePath_Stem_rDNA PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_minigene LCWord_minigene CapitalType_ALL_LOWERCASE Prefix3_min Suffix3_ene Suffix4_gene Suffix5_igene L0_rDNA L0_TypePath_Pos_NNP L0_TypePath_Stem_rDNA L1_of L1_TypePath_Pos_IN L1_TypePath_Stem_of R0_constructs R0_TypePath_Pos_NNS R0_TypePath_Stem_construct R1_into R1_TypePath_Pos_IN R1_TypePath_Stem_into TypePath_Pos_NN TypePath_Stem_minigen PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_constructs LCWord_constructs CapitalType_ALL_LOWERCASE Prefix3_con Suffix3_cts Suffix4_ucts Suffix5_ructs L0_minigene L0_TypePath_Pos_NN L0_TypePath_Stem_minigen L1_rDNA L1_TypePath_Pos_NNP L1_TypePath_Stem_rDNA R0_into R0_TypePath_Pos_IN R0_TypePath_Stem_into R1_3T6 R1_TypePath_Pos_CD R1_TypePath_Stem_3T6 TypePath_Pos_NNS TypePath_Stem_construct PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_into LCWord_into CapitalType_ALL_LOWERCASE L0_constructs L0_TypePath_Pos_NNS L0_TypePath_Stem_construct L1_minigene L1_TypePath_Pos_NN L1_TypePath_Stem_minigen R0_3T6 R0_TypePath_Pos_CD R0_TypePath_Stem_3T6 R1_cells R1_TypePath_Pos_NNS R1_TypePath_Stem_cell TypePath_Pos_IN TypePath_Stem_into PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_3T6 LCWord_3t6 CapitalType_ALL_UPPERCASE NumericType_ALPHANUMERIC L0_into L0_TypePath_Pos_IN L0_TypePath_Stem_into L1_constructs L1_TypePath_Pos_NNS L1_TypePath_Stem_construct R0_cells R0_TypePath_Pos_NNS R0_TypePath_Stem_cell R1_. R1_TypePath_Pos_. R1_TypePath_Stem_. TypePath_Pos_CD TypePath_Stem_3T6 PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_cells LCWord_cells CapitalType_ALL_LOWERCASE L0_3T6 L0_TypePath_Pos_CD L0_TypePath_Stem_3T6 L1_into L1_TypePath_Pos_IN L1_TypePath_Stem_into R0_. R0_TypePath_Pos_. R0_TypePath_Stem_. R1OOB1 TypePath_Pos_NNS TypePath_Stem_cell PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_. LCWord_. L0_cells L0_TypePath_Pos_NNS L0_TypePath_Stem_cell L1_3T6 L1_TypePath_Pos_CD L1_TypePath_Stem_3T6 R0OOB1 R1OOB2 TypePath_Pos_. TypePath_Stem_. PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    return instances;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static boolean isEmptyOrWhitespace(String str) {\n\t\tif (TextUtils.isEmpty(str)) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (int i = 0; i < str.length(); i++) {\n\t\t\tif (!Character.isWhitespace(str.charAt(i))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic <A extends Closeable> A api(Class<A> apitype, final String provider, final String credId, final String url,\n            final String zones) {\n        return api(apitype, provider, credId, buildJcloudsOverrides(url, zones, false));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nOutput(boolean isDefault, String name, OutputFormat outputFormat, Class keyClass, Class valueClass,\n\t\t    Map<String, String> specificContext) {\n\t\t\tthis.isDefault = isDefault;\n\t\t\tthis.outputFormat = outputFormat;\n\t\t\tthis.keyClass = keyClass;\n\t\t\tthis.valueClass = valueClass;\n\t\t\tthis.name = name;\n\t\t\tif(specificContext != null) {\n\t\t\t\tthis.specificContext = specificContext;\n\t\t\t}\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void printMethods(Class<?> cls) {\n\t\tMethod[] methods = cls.getDeclaredMethods();\n\t\tfor (Method method : methods) {\n\t\t\tString name = method.getName();\n\t\t\tClass<?>[] parameterType = method.getParameterTypes();\n\t\t\tClass<?> returnType = method.getReturnType();\n\t\t\tSystem.out.println(name);\n\t\t\tSystem.out.println(returnType.getName());\n\t\t\tfor (Class<?> class1 : parameterType)\n\t\t\t\tSystem.out.println(class1);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic final boolean platformRequest( String URL) throws ConnectionNotFoundException\n\t{\n\t\tthrow new ConnectionNotFoundException();\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,\n            boolean serializeType) throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {\n\n        java.lang.String prefix = null;\n        java.lang.String namespace = null;\n\n        prefix = parentQName.getPrefix();\n        namespace = parentQName.getNamespaceURI();\n        writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);\n\n        if (serializeType) {\n\n            java.lang.String namespacePrefix = registerPrefix(xmlWriter, \"urn:partner.soap.sforce.com\");\n            if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {\n                writeAttribute(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\", \"type\", namespacePrefix + \":DescribeIcon\",\n                        xmlWriter);\n            } else {\n                writeAttribute(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\", \"type\", \"DescribeIcon\", xmlWriter);\n            }\n\n        }\n\n        namespace = \"urn:partner.soap.sforce.com\";\n        writeStartElement(null, namespace, \"contentType\", xmlWriter);\n\n        if (localContentType == null) {\n\n            throw new org.apache.axis2.databinding.ADBException(\"contentType cannot be null!!\");\n\n        } else {\n\n            xmlWriter.writeCharacters(localContentType);\n\n        }\n\n        xmlWriter.writeEndElement();\n\n        namespace = \"urn:partner.soap.sforce.com\";\n        writeStartElement(null, namespace, \"height\", xmlWriter);\n\n        if (localHeight == java.lang.Integer.MIN_VALUE) {\n\n            writeAttribute(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\", \"nil\", \"1\", xmlWriter);\n\n        } else {\n            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHeight));\n        }\n\n        xmlWriter.writeEndElement();\n\n        namespace = \"urn:partner.soap.sforce.com\";\n        writeStartElement(null, namespace, \"theme\", xmlWriter);\n\n        if (localTheme == null) {\n\n            throw new org.apache.axis2.databinding.ADBException(\"theme cannot be null!!\");\n\n        } else {\n\n            xmlWriter.writeCharacters(localTheme);\n\n        }\n\n        xmlWriter.writeEndElement();\n\n        namespace = \"urn:partner.soap.sforce.com\";\n        writeStartElement(null, namespace, \"url\", xmlWriter);\n\n        if (localUrl == null) {\n\n            throw new org.apache.axis2.databinding.ADBException(\"url cannot be null!!\");\n\n        } else {\n\n            xmlWriter.writeCharacters(localUrl);\n\n        }\n\n        xmlWriter.writeEndElement();\n\n        namespace = \"urn:partner.soap.sforce.com\";\n        writeStartElement(null, namespace, \"width\", xmlWriter);\n\n        if (localWidth == java.lang.Integer.MIN_VALUE) {\n\n            writeAttribute(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\", \"nil\", \"1\", xmlWriter);\n\n        } else {\n            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWidth));\n        }\n\n        xmlWriter.writeEndElement();\n\n        xmlWriter.writeEndElement();\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    void sampleValueAboveMaximumExpectedValue() {\n        TimeWindowLatencyHistogram histogram = new TimeWindowLatencyHistogram(Clock.SYSTEM, HistogramConfig.builder()\n            .maximumExpectedValue(2L)\n            .build()\n            .merge(HistogramConfig.DEFAULT));\n        histogram.record(3);\n        assertThat(histogram.histogramCountAtValue(3)).isEqualTo(1);\n        assertThat(histogram.histogramCountAtValue(Long.MAX_VALUE)).isEqualTo(1);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        \n        byte[] byteArray = new byte[bytes.size()]; \n        bytes.getBytes(byteArray, 0);\n        return Utf8Utils.utf8BytesToString(byteArray);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static void escapeCssIdentifier(final Reader reader, final Writer writer,\n                                           final CssIdentifierEscapeType type, final CssIdentifierEscapeLevel level)\n            throws IOException {\n\n        if (writer == null) {\n            throw new IllegalArgumentException(\"Argument 'writer' cannot be null\");\n        }\n\n        if (type == null) {\n            throw new IllegalArgumentException(\"The 'type' argument cannot be null\");\n        }\n\n        if (level == null) {\n            throw new IllegalArgumentException(\"The 'level' argument cannot be null\");\n        }\n\n        CssIdentifierEscapeUtil.escape(reader, writer, type, level);\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tpublic UUID getGuid(String fieldName) throws DecodingException\n\t{\n\t\tString guidString = null;\n\t\tif (beginFieldSafe(fieldName, true))\n\t\t{\n\t\t\tguidString = getString(\"String\");\n\n\t\t\tendField(fieldName);\n\t\t}\n\n\t\treturn UUID.fromString(guidString);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@RequestMapping(\"/\")\n    public void api(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        String reqUrl = request.getRequestURL().toString();\n        reqUrl = reqUrl.replace(\"api\", \"api\") + \"index.html\";\n        HttpClient client = new HttpClient();\n        HttpMethod method = new GetMethod(reqUrl);\n        client.executeMethod(method);\n        String apiUrl = request.getServerName() + COLON + request.getServerPort() + API_DOC;\n \n        String html = method.getResponseBodyAsString();\n        String body = html.replace(\"petstore.swagger.io/v2/swagger.json\", apiUrl)\n                .replace(\"css/\", \"/api/css/\")\n                .replace(\"lib/\", \"/api/lib/\")\n                .replace(\"swagger-ui.js\", \"/api/swagger-ui.js\");\n        response.getWriter().write(body);\n        response.getWriter().flush();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private PooledConnection createPooledConnection (String user,\n        String password, boolean requestPassword) throws SQLException\n    {\n        \n        return findDriver().getNewPooledConnection(\n            this, user, password, requestPassword);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static Bitmap fastblur(Context context, Bitmap sentBitmap, int radius) {\n        Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n        if (radius < 1) {\n            return (null);\n        }\n        int w = bitmap.getWidth();\n        int h = bitmap.getHeight();\n        int[] pix = new int[w * h];\n        bitmap.getPixels(pix, 0, w, 0, 0, w, h);\n        int wm = w - 1;\n        int hm = h - 1;\n        int wh = w * h;\n        int div = radius + radius + 1;\n        int r[] = new int[wh];\n        int g[] = new int[wh];\n        int b[] = new int[wh];\n        int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;\n        int vmin[] = new int[Math.max(w, h)];\n        int divsum = (div + 1) >> 1;\n        divsum *= divsum;\n        int temp = 256 * divsum;\n        int dv[] = new int[temp];\n        for (i = 0; i < temp; i++) {\n            dv[i] = (i / divsum);\n        }\n        yw = yi = 0;\n        int[][] stack = new int[div][3];\n        int stackpointer;\n        int stackstart;\n        int[] sir;\n        int rbs;\n        int r1 = radius + 1;\n        int routsum, goutsum, boutsum;\n        int rinsum, ginsum, binsum;\n        for (y = 0; y < h; y++) {\n            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n            for (i = -radius; i <= radius; i++) {\n                p = pix[yi + Math.min(wm, Math.max(i, 0))];\n                sir = stack[i + radius];\n                sir[0] = (p & 0xff0000) >> 16;\n                sir[1] = (p & 0x00ff00) >> 8;\n                sir[2] = (p & 0x0000ff);\n                rbs = r1 - Math.abs(i);\n                rsum += sir[0] * rbs;\n                gsum += sir[1] * rbs;\n                bsum += sir[2] * rbs;\n                if (i > 0) {\n                    rinsum += sir[0];\n                    ginsum += sir[1];\n                    binsum += sir[2];\n                } else {\n                    routsum += sir[0];\n                    goutsum += sir[1];\n                    boutsum += sir[2];\n                }\n            }\n            stackpointer = radius;\n            for (x = 0; x < w; x++) {\n                r[yi] = dv[rsum];\n                g[yi] = dv[gsum];\n                b[yi] = dv[bsum];\n                rsum -= routsum;\n                gsum -= goutsum;\n                bsum -= boutsum;\n                stackstart = stackpointer - radius + div;\n                sir = stack[stackstart % div];\n                routsum -= sir[0];\n                goutsum -= sir[1];\n                boutsum -= sir[2];\n                if (y == 0) {\n                    vmin[x] = Math.min(x + radius + 1, wm);\n                }\n                p = pix[yw + vmin[x]];\n                sir[0] = (p & 0xff0000) >> 16;\n                sir[1] = (p & 0x00ff00) >> 8;\n                sir[2] = (p & 0x0000ff);\n                rinsum += sir[0];\n                ginsum += sir[1];\n                binsum += sir[2];\n                rsum += rinsum;\n                gsum += ginsum;\n                bsum += binsum;\n                stackpointer = (stackpointer + 1) % div;\n                sir = stack[(stackpointer) % div];\n                routsum += sir[0];\n                goutsum += sir[1];\n                boutsum += sir[2];\n                rinsum -= sir[0];\n                ginsum -= sir[1];\n                binsum -= sir[2];\n                yi++;\n            }\n            yw += w;\n        }\n        for (x = 0; x < w; x++) {\n            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n            yp = -radius * w;\n            for (i = -radius; i <= radius; i++) {\n                yi = Math.max(0, yp) + x;\n                sir = stack[i + radius];\n                sir[0] = r[yi];\n                sir[1] = g[yi];\n                sir[2] = b[yi];\n                rbs = r1 - Math.abs(i);\n                rsum += r[yi] * rbs;\n                gsum += g[yi] * rbs;\n                bsum += b[yi] * rbs;\n                if (i > 0) {\n                    rinsum += sir[0];\n                    ginsum += sir[1];\n                    binsum += sir[2];\n                } else {\n                    routsum += sir[0];\n                    goutsum += sir[1];\n                    boutsum += sir[2];\n                }\n                if (i < hm) {\n                    yp += w;\n               }\n            }\n            yi = x;\n            stackpointer = radius;\n            for (y = 0; y < h; y++) {\n                pix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16)\n                        | (dv[gsum] << 8) | dv[bsum];\n                rsum -= routsum;\n                gsum -= goutsum;\n                bsum -= boutsum;\n                stackstart = stackpointer - radius + div;\n                sir = stack[stackstart % div];\n                routsum -= sir[0];\n                goutsum -= sir[1];\n                boutsum -= sir[2];\n                if (x == 0) {\n                    vmin[y] = Math.min(y + r1, hm) * w;\n                }\n                p = x + vmin[y];\n                sir[0] = r[p];\n                sir[1] = g[p];\n                sir[2] = b[p];\n                rinsum += sir[0];\n                ginsum += sir[1];\n                binsum += sir[2];\n                rsum += rinsum;\n                gsum += ginsum;\n                bsum += binsum;\n                stackpointer = (stackpointer + 1) % div;\n                sir = stack[stackpointer];\n                routsum += sir[0];\n                goutsum += sir[1];\n                boutsum += sir[2];\n                rinsum -= sir[0];\n                ginsum -= sir[1];\n                binsum -= sir[2];\n                yi += w;\n            }\n        }\n        bitmap.setPixels(pix, 0, w, 0, 0, w, h);\n        return (bitmap);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void defaultAction(HttpServletRequest req, HttpServletResponse res)\n                   throws ServletException, IOException\n    {\n     bmsample3home home = null;\n     bmsample3 remote = null;\n     res.setContentType(\"text/plain\");\n     PrintWriter out = res.getWriter();\n     Context ctx;\n\t       \n     try\n      {\n      Hashtable env = new Hashtable(1);\n      env.put(\"javax.naming.factory.initial\", \"com.netscape.server.jndi.RootContextFactory\");\n      ctx = new InitialContext(env);\n\n      Object objref = ctx.lookup(\"ejb/bmsamplebean3\");\n      home = (bmsample3home)PortableRemoteObject.narrow(objref, bmsample3home.class);\n      remote = home.create();\n      out.println(\"calling  bean1 \");\n      out.println(\" the result of invoking the ejb method is \" + remote.performDBOps());\n\t   }\n       catch (Exception e)\n       {\n\t   System.out.println(\" ERROR: \" + e);\n       }\n        try\n        {\n    \n        }catch(Exception e){}\t\t\t      \n\t\t\t\t\t\t\t\t      \n\t  \n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1],\n                col = (int)val[2];\n            float toAdd = val[3];\n            \n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            table.setVal(row-1, col-1, (Float)table.value(row-1, col-1) + toAdd);\n            return toAdd;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean performAction(ActionParameters actionParameters, MainFrame mainFrame) {\n        MuAction action = getActionInstance(actionParameters, mainFrame);\n\n        if (action == null) {\n            return false;\n        }\n\n        action.performAction();\n\n        return true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps,\n                boolean isUserGenerated) {\n            Validate.notNull(objectProperty, \"objectProperty\");\n            Validate.containsNoNulls(bitmaps, \"bitmaps\");\n            if (action == null) {\n                throw new FacebookException(\"Can not set attachments prior to setting action.\");\n            }\n\n            List<String> attachmentUrls = addImageAttachments(bitmaps);\n            updateObjectAttachmentUrls(objectProperty, attachmentUrls, isUserGenerated);\n\n            return this;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n        logger.trace(\"Start handling inactive event for client {}\", this.clientId);\n\n        if (this.connected) {\n\n            logger.debug(\"Connection closed: Connection lost from client {} user {}\", this.clientId, this.userName);\n\n            boolean redirect = handleConnectLost(ctx);\n\n            if (redirect)\n                logger.trace(\"Send a copy of DISCONNECT message from client {} to 3rd party application\", this.clientId);\n            this.cluster.sendToApplication(new Message<>(\n                    new MqttFixedHeader(MqttMessageType.DISCONNECT, false, MqttQoS.AT_MOST_ONCE, false, 0),\n                    new MqttAdditionalHeader(this.version, this.clientId, this.userName, this.brokerId), null, null));\n\n            if (this.willMessage != null) {\n\n                MqttQoS willQos = this.willMessage.fixedHeader().qos();\n                String willTopic = this.willMessage.variableHeader().topicName();\n                boolean willRetain = this.willMessage.fixedHeader().retain();\n\n                AuthorizeResult result = this.authenticator.authPublish(this.clientId, this.userName, willTopic, willQos.value(), willRetain);\n                if (result == AuthorizeResult.OK) {\n                    logger.trace(\"Authorization WILL message succeeded on topic {} for client {}\", willTopic, this.clientId);\n\n                    onwardRecipients(this.willMessage, Message.fromMqttMessage(this.willMessage, this.version, this.clientId, this.userName, this.brokerId).payload());\n                }\n                else {\n                    logger.trace(\"Authorization WILL message failed on topic {} for client {}\", willTopic, this.clientId);\n                }\n            }\n        }\n\n        logger.trace(\"Finish handling inactive event for client {}\", this.clientId);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void channelActive(ChannelHandlerContext ctx) {\n        ProxyRule proxyRule = new ProxyRule();\n        long serverId = 1;\n        String host = \"127.0.0.1\";\n        int port = 7090;\n        proxyRule.setServerId(serverId);\n        proxyRule.setRemoteHost(host);\n        proxyRule.setRemotePort(port);\n\n        this.proxySession = connectProxyRule(ctx, proxyRule);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic MockUnit<Character> from(char[] alphabet) {\n        notEmpty(alphabet, \"alphabet\");\n        Supplier<Character> supp = () -> {\n            int idx = mock.getRandom().nextInt(alphabet.length);\n            return alphabet[idx];\n        };\n        return () -> supp;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1],\n                col = (int)val[2];\n            float multiplier = val[3];\n            \n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            table.setVal(row-1, col-1, (Float)table.value(row-1, col-1) * multiplier);\n            return multiplier;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@SuppressLint(\"NewApi\")\n\tpublic static Bitmap fastblur(Context context, Bitmap sentBitmap, int radius) {\n\n\n\n\n\t\tBitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\t\tif (radius < 1) {\n\t\t\treturn (null);\n\t\t}\n\t\tint w = bitmap.getWidth();\n\t\tint h = bitmap.getHeight();\n\n\t\tint[] pix = new int[w * h];\n\t\tLog.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n\t\tbitmap.getPixels(pix, 0, w, 0, 0, w, h);\n\n\t\tint wm = w - 1;\n\t\tint hm = h - 1;\n\t\tint wh = w * h;\n\t\tint div = radius + radius + 1;\n\n\t\tint r[] = new int[wh];\n\t\tint g[] = new int[wh];\n\t\tint b[] = new int[wh];\n\t\tint rsum, gsum, bsum, x, y, i, p, yp, yi, yw;\n\t\tint vmin[] = new int[Math.max(w, h)];\n\n\t\tint divsum = (div + 1) >> 1;\n\t\tdivsum *= divsum;\n\t\tint dv[] = new int[256 * divsum];\n\t\tfor (i = 0; i < 256 * divsum; i++) {\n\t\t\tdv[i] = (i / divsum);\n\t\t}\n\n\t\tyw = yi = 0;\n\n\t\tint[][] stack = new int[div][3];\n\t\tint stackpointer;\n\t\tint stackstart;\n\t\tint[] sir;\n\t\tint rbs;\n\t\tint r1 = radius + 1;\n\t\tint routsum, goutsum, boutsum;\n\t\tint rinsum, ginsum, binsum;\n\n\t\tfor (y = 0; y < h; y++) {\n\t\t\trinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n\t\t\tfor (i = -radius; i <= radius; i++) {\n\t\t\t\tp = pix[yi + Math.min(wm, Math.max(i, 0))];\n\t\t\t\tsir = stack[i + radius];\n\t\t\t\tsir[0] = (p & 0xff0000) >> 16;\n\t\t\t\tsir[1] = (p & 0x00ff00) >> 8;\n\t\t\t\tsir[2] = (p & 0x0000ff);\n\t\t\t\trbs = r1 - Math.abs(i);\n\t\t\t\trsum += sir[0] * rbs;\n\t\t\t\tgsum += sir[1] * rbs;\n\t\t\t\tbsum += sir[2] * rbs;\n\t\t\t\tif (i > 0) {\n\t\t\t\t\trinsum += sir[0];\n\t\t\t\t\tginsum += sir[1];\n\t\t\t\t\tbinsum += sir[2];\n\t\t\t\t} else {\n\t\t\t\t\troutsum += sir[0];\n\t\t\t\t\tgoutsum += sir[1];\n\t\t\t\t\tboutsum += sir[2];\n\t\t\t\t}\n\t\t\t}\n\t\t\tstackpointer = radius;\n\n\t\t\tfor (x = 0; x < w; x++) {\n\n\t\t\t\tr[yi] = dv[rsum];\n\t\t\t\tg[yi] = dv[gsum];\n\t\t\t\tb[yi] = dv[bsum];\n\n\t\t\t\trsum -= routsum;\n\t\t\t\tgsum -= goutsum;\n\t\t\t\tbsum -= boutsum;\n\n\t\t\t\tstackstart = stackpointer - radius + div;\n\t\t\t\tsir = stack[stackstart % div];\n\n\t\t\t\troutsum -= sir[0];\n\t\t\t\tgoutsum -= sir[1];\n\t\t\t\tboutsum -= sir[2];\n\n\t\t\t\tif (y == 0) {\n\t\t\t\t\tvmin[x] = Math.min(x + radius + 1, wm);\n\t\t\t\t}\n\t\t\t\tp = pix[yw + vmin[x]];\n\n\t\t\t\tsir[0] = (p & 0xff0000) >> 16;\n\t\t\t\tsir[1] = (p & 0x00ff00) >> 8;\n\t\t\t\tsir[2] = (p & 0x0000ff);\n\n\t\t\t\trinsum += sir[0];\n\t\t\t\tginsum += sir[1];\n\t\t\t\tbinsum += sir[2];\n\n\t\t\t\trsum += rinsum;\n\t\t\t\tgsum += ginsum;\n\t\t\t\tbsum += binsum;\n\n\t\t\t\tstackpointer = (stackpointer + 1) % div;\n\t\t\t\tsir = stack[(stackpointer) % div];\n\n\t\t\t\troutsum += sir[0];\n\t\t\t\tgoutsum += sir[1];\n\t\t\t\tboutsum += sir[2];\n\n\t\t\t\trinsum -= sir[0];\n\t\t\t\tginsum -= sir[1];\n\t\t\t\tbinsum -= sir[2];\n\n\t\t\t\tyi++;\n\t\t\t}\n\t\t\tyw += w;\n\t\t}\n\t\tfor (x = 0; x < w; x++) {\n\t\t\trinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n\t\t\typ = -radius * w;\n\t\t\tfor (i = -radius; i <= radius; i++) {\n\t\t\t\tyi = Math.max(0, yp) + x;\n\n\t\t\t\tsir = stack[i + radius];\n\n\t\t\t\tsir[0] = r[yi];\n\t\t\t\tsir[1] = g[yi];\n\t\t\t\tsir[2] = b[yi];\n\n\t\t\t\trbs = r1 - Math.abs(i);\n\n\t\t\t\trsum += r[yi] * rbs;\n\t\t\t\tgsum += g[yi] * rbs;\n\t\t\t\tbsum += b[yi] * rbs;\n\n\t\t\t\tif (i > 0) {\n\t\t\t\t\trinsum += sir[0];\n\t\t\t\t\tginsum += sir[1];\n\t\t\t\t\tbinsum += sir[2];\n\t\t\t\t} else {\n\t\t\t\t\troutsum += sir[0];\n\t\t\t\t\tgoutsum += sir[1];\n\t\t\t\t\tboutsum += sir[2];\n\t\t\t\t}\n\n\t\t\t\tif (i < hm) {\n\t\t\t\t\typ += w;\n\t\t\t\t}\n\t\t\t}\n\t\t\tyi = x;\n\t\t\tstackpointer = radius;\n\t\t\tfor (y = 0; y < h; y++) {\n\t\t\t\tpix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8) | dv[bsum];\n\n\t\t\t\trsum -= routsum;\n\t\t\t\tgsum -= goutsum;\n\t\t\t\tbsum -= boutsum;\n\n\t\t\t\tstackstart = stackpointer - radius + div;\n\t\t\t\tsir = stack[stackstart % div];\n\n\t\t\t\troutsum -= sir[0];\n\t\t\t\tgoutsum -= sir[1];\n\t\t\t\tboutsum -= sir[2];\n\n\t\t\t\tif (x == 0) {\n\t\t\t\t\tvmin[y] = Math.min(y + r1, hm) * w;\n\t\t\t\t}\n\t\t\t\tp = x + vmin[y];\n\n\t\t\t\tsir[0] = r[p];\n\t\t\t\tsir[1] = g[p];\n\t\t\t\tsir[2] = b[p];\n\n\t\t\t\trinsum += sir[0];\n\t\t\t\tginsum += sir[1];\n\t\t\t\tbinsum += sir[2];\n\n\t\t\t\trsum += rinsum;\n\t\t\t\tgsum += ginsum;\n\t\t\t\tbsum += binsum;\n\n\t\t\t\tstackpointer = (stackpointer + 1) % div;\n\t\t\t\tsir = stack[stackpointer];\n\n\t\t\t\troutsum += sir[0];\n\t\t\t\tgoutsum += sir[1];\n\t\t\t\tboutsum += sir[2];\n\n\t\t\t\trinsum -= sir[0];\n\t\t\t\tginsum -= sir[1];\n\t\t\t\tbinsum -= sir[2];\n\n\t\t\t\tyi += w;\n\t\t\t}\n\t\t}\n\n\t\tLog.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n\t\tbitmap.setPixels(pix, 0, w, 0, 0, w, h);\n\t\treturn (bitmap);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        protected void execute2() {\n            versionTo = 24;\n\n            sql = \"DROP TABLE IF EXISTS newuser\";\n            DbUtils.execSQL(db, sql);\n\n            sql = \"UPDATE user SET user_created_date = 0 WHERE user_created_date IS NULL\";\n            DbUtils.execSQL(db, sql);\n            sql = \"UPDATE user SET user_oid = ('andstatustemp:' || _id) WHERE user_oid IS NULL\";\n            DbUtils.execSQL(db, sql);\n\n            sql = \"CREATE TABLE newuser (_id INTEGER PRIMARY KEY AUTOINCREMENT,origin_id INTEGER NOT NULL,user_oid TEXT,username TEXT NOT NULL,webfinger_id TEXT NOT NULL,real_name TEXT,user_description TEXT,location TEXT,profile_url TEXT,homepage TEXT,avatar_url TEXT,banner_url TEXT,msg_count INTEGER DEFAULT 0 NOT NULL,favorited_count INTEGER DEFAULT 0 NOT NULL,following_count INTEGER DEFAULT 0 NOT NULL,followers_count INTEGER DEFAULT 0 NOT NULL,user_created_date INTEGER,user_updated_date INTEGER,user_ins_date INTEGER NOT NULL,home_timeline_position TEXT DEFAULT '' NOT NULL,home_timeline_item_date INTEGER DEFAULT 0 NOT NULL,home_timeline_date INTEGER DEFAULT 0 NOT NULL,favorites_timeline_position TEXT DEFAULT '' NOT NULL,favorites_timeline_item_date INTEGER DEFAULT 0 NOT NULL,favorites_timeline_date INTEGER DEFAULT 0 NOT NULL,direct_timeline_position TEXT DEFAULT '' NOT NULL,direct_timeline_item_date INTEGER DEFAULT 0 NOT NULL,direct_timeline_date INTEGER DEFAULT 0 NOT NULL,mentions_timeline_position TEXT DEFAULT '' NOT NULL,mentions_timeline_item_date INTEGER DEFAULT 0 NOT NULL,mentions_timeline_date INTEGER DEFAULT 0 NOT NULL,user_timeline_position TEXT DEFAULT '' NOT NULL,user_timeline_item_date INTEGER DEFAULT 0 NOT NULL,user_timeline_date INTEGER DEFAULT 0 NOT NULL,following_user_date INTEGER DEFAULT 0 NOT NULL,followers_user_date INTEGER DEFAULT 0 NOT NULL,user_msg_id INTEGER DEFAULT 0 NOT NULL,user_msg_date INTEGER DEFAULT 0 NOT NULL)\";\n            DbUtils.execSQL(db, sql);\n            sql = \"INSERT INTO newuser (\" +\n                    \" _id, origin_id, user_oid, username, webfinger_id, real_name, user_description, location,\" +\n                    \" profile_url, homepage, avatar_url, banner_url,\" +\n                    \" msg_count, favorited_count, following_count, followers_count,\" +\n                    \" user_created_date, user_updated_date, user_ins_date,\" +\n                    \" home_timeline_position, home_timeline_item_date, home_timeline_date, favorites_timeline_position, favorites_timeline_item_date, favorites_timeline_date, direct_timeline_position, direct_timeline_item_date, direct_timeline_date, mentions_timeline_position, mentions_timeline_item_date, mentions_timeline_date, user_timeline_position, user_timeline_item_date, user_timeline_date,\" +\n                    \" following_user_date, followers_user_date, user_msg_id, user_msg_date\" +\n                    \") SELECT \" +\n                    \" _id, origin_id, user_oid, username, webfinger_id, real_name, user_description, NULL,\" +\n                    \" url,         homepage, avatar_url, NULL,\" +\n                    \"         0,               0,               0,               0,\" +\n                    \" user_created_date,                 0, user_ins_date,\" +\n                    \" home_timeline_position, home_timeline_item_date, home_timeline_date, favorites_timeline_position, favorites_timeline_item_date, favorites_timeline_date, direct_timeline_position, direct_timeline_item_date, direct_timeline_date, mentions_timeline_position, mentions_timeline_item_date, mentions_timeline_date, user_timeline_position, user_timeline_item_date, user_timeline_date,\" +\n                    \" following_user_date,                   0, user_msg_id, user_msg_date\" +\n                    \" FROM user\";\n            DbUtils.execSQL(db, sql);\n\n            sql = \"DROP INDEX idx_user_origin\";\n            DbUtils.execSQL(db, sql);\n            sql = \"DROP TABLE user\";\n            DbUtils.execSQL(db, sql);\n\n            sql = \"ALTER TABLE newuser RENAME TO user\";\n            DbUtils.execSQL(db, sql);\n            try {\n                sql = \"CREATE UNIQUE INDEX idx_user_origin ON user (origin_id, user_oid)\";\n                DbUtils.execSQL(db, sql);\n            } catch (Exception e) {\n                MyLog.i(this, \"Couldn't create unique constraint\", e);\n                sql = \"CREATE INDEX idx_user_origin ON user (origin_id, user_oid)\";\n                DbUtils.execSQL(db, sql);\n            }\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String[] appendSelectionArgs(String[] originalValues, String[] newValues) {\n        if (originalValues == null || originalValues.length == 0) {\n            return newValues;\n        }\n        String[] result = new String[originalValues.length + newValues.length ];\n        System.arraycopy(originalValues, 0, result, 0, originalValues.length);\n        System.arraycopy(newValues, 0, result, originalValues.length, newValues.length);\n        return result;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@RequestMapping(\"/\")\n    public void api(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        String reqUrl = request.getRequestURL().toString();\n        reqUrl = reqUrl.replace(\"api\", \"api\") + \"index.html\";\n        HttpClient client = new HttpClient();\n        HttpMethod method = new GetMethod(reqUrl);\n        client.executeMethod(method);\n        String apiUrl = request.getServerName() + COLON + request.getServerPort() + API_DOC;\n \n        String html = method.getResponseBodyAsString();\n        String body = html.replace(\"petstore.swagger.io/v2/swagger.json\", apiUrl)\n                .replace(\"css/\", \"/api/css/\")\n                .replace(\"lib/\", \"/api/lib/\")\n                .replace(\"swagger-ui.js\", \"/api/swagger-ui.js\");\n        response.getWriter().write(body);\n        response.getWriter().flush();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic final boolean platformRequest( String URL) throws ConnectionNotFoundException\n\t{\n\t\tthrow new ConnectionNotFoundException();\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private double readDecimalLiteral(int c) {\n        return readDecimalLiteral(c, true);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n        \n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n        \n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n        \n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, boolean isStatic, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            lineNumber = printMethod(mv, clazz, method, isStatic, lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        int sample(final RandomGenerator random) {\n            while(true) {\n\n                final double u = hIntegralNumberOfElements + random.nextDouble() * (hIntegralX1 - hIntegralNumberOfElements);\n\n                double x = hIntegralInverse(u);\n\n                int k = (int)(x + 0.5);\n\n                if (k < 1) {\n                    k = 1;\n                }\n                else if (k > numberOfElements) {\n                    k = numberOfElements;\n                }\n\n\n                if (k - x <= s || u >= hIntegral(k + 0.5) - h(k)) {\n\n\n                    return k;\n                }\n            }\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n      public com.google.protobuf.ByteString\n          getSendInfoBytes() {\n        java.lang.Object ref = sendInfo_;\n        if (ref instanceof String) {\n          com.google.protobuf.ByteString b = \n              com.google.protobuf.ByteString.copyFromUtf8(\n                  (java.lang.String) ref);\n          sendInfo_ = b;\n          return b;\n        } else {\n          return (com.google.protobuf.ByteString) ref;\n        }\n      }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate Token operatorName()\n    {\n        Token token = null;\n    \n        switch ( LA(1) )\n        {\n            case 'a':\n            {\n                token = and();\n                break;\n            }\n    \n            case 'o':\n            {\n                token = or();\n                break;\n            }\n    \n            case 'm':\n            {\n                token = mod();\n                break;\n            }\n    \n            case 'd':\n            {\n                token = div();\n                break;\n            }\n        }\n    \n        return token;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nboolean resolveBundle(boolean resolve, HashSet<BundleClassLoader> hashSet) throws BundleException {\n\n        if (Framework.DEBUG_CLASSLOADING && log.isInfoEnabled()) {\n            log.info(\"BundleClassLoader: Resolving \" + this.bundle + (resolve ? \" (critical)\" : \" (not critical)\"));\n        }\n        List<String> pkgs=BundleInfoList.getInstance().\n                getDependencyForBundle(bundle.getLocation());\n        dependencyClsLoaders=new ArrayList<BundleClassLoader>(pkgs.size());\n        for (int i=0;i<pkgs.size();i++){\n            dependencyClsLoaders.add((BundleClassLoader) ACDD.getInstance().getBundleClassLoader(pkgs.get(i)));\n        }\n\n        return true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void addFooterView(View v, Object data, boolean isSelectable) {\n\t\tFixedViewInfo info = new FixedViewInfo();\n\t\tinfo.view = v;\n\t\tinfo.data = data;\n\t\tinfo.isSelectable = isSelectable;\n\t\tmFooterViewInfos.add(info);\n\n\t\tif (mDataSetObserver != null) {\n\t\t\tmDataSetObserver.onChanged();\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tpublic synchronized void clearContexts(Resource... contexts)\n\t\tthrows IOException\n\t{\n\n\n\t\tlogger.debug(\"deleting contexts: {}\", Arrays.toString(contexts));\n\n\t\tfor (Resource context : contexts) {\n\t\t\tString contextString = SearchFields.getContextID(context);\n\n\n\t\t\tclient.prepareDeleteByQuery(indexName).setQuery(QueryBuilders.termQuery(\n\t\t\t\t\tSearchFields.CONTEXT_FIELD_NAME, contextString)).execute().actionGet();\n\t\t}\n\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        \n        byte[] byteArray = new byte[bytes.size()]; \n        bytes.getBytes(byteArray, 0);\n        return Utf8Utils.utf8BytesToString(byteArray);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void drawQuad() {\n        \n        if (!Debug.noVBO) {\n            vertex_VBO.bindWithFormat(3, Format.FLOAT, 0, 0); \n    \n            texture_VBO.bindWithFormat(2, Format.FLOAT, 0, 0); \n            \n            index_VBO.bindAsIndex();\n            \n            VBO.render(6, Format.UNSIGNED_SHORT);\n        } else {\n            vertex_VBO.bindImmediate(3, Format.FLOAT, 0); \n    \n            texture_VBO.bindImmediate(2, Format.FLOAT, 0); \n            \n            index_VBO.renderImmediate(6, Format.UNSIGNED_SHORT);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic <A extends Closeable> A api(Class<A> apitype, final String provider, final String credId, final String url,\n            final String zones, final boolean trustAll) {\n        return api(apitype, provider, credId, buildJcloudsOverrides(url, zones, trustAll));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void main(String[] args) {\n        Looper.prepare();\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (sPower) {\n                    String cmd = String.format(\"am startservice%s-n com.aigestudio.daemon/\" +\n                                    \"com.aigestudio.daemon.services.DaemonService\",\n                            SysUtil.isAfter17() ? \" --user 0 \" : \" \");\n                    LogUtil.i(\"CMD exec \" + cmd);\n                    try {\n                        Runtime.getRuntime().exec(cmd);\n                    } catch (IOException e) {\n                    }\n                    try {\n                        Thread.sleep(1500);\n                    } catch (InterruptedException e) {\n                        LogUtil.w(\"Thread sleep failed:\" + e.toString());\n                    }\n                }\n            }\n        }).start();\n        Looper.loop();\n        LogUtil.i(\"====================Daemon exit with error====================\");\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Override\n\t@SideOnly(Side.CLIENT)\n\tpublic void addInformation(ItemStack par1ItemStack, EntityPlayer par2EntityPlayer, List par3List, boolean par4) {\n\t\tsuper.addInformation(par1ItemStack, par2EntityPlayer, par3List, par4);\n\t\tpar3List.add(StatCollector.translateToLocal(getUnlocalizedName() + \".tooltip\"));\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static List<Integer> topologicalSort(List<Integer>[] graph) {\n\t\tint n = graph.length;\n\t\tboolean[] used = new boolean[n];\n\t\tLinkedList<Integer> res = new LinkedList<>();\n\t\tused = new boolean[n];\n\t\tfor (int i = 0; i < n; i++){\n\t\t\tif (!used[i])\n\t\t\t\tdfs(graph, used, res, i);\n\t\t}\n\t\t\t\t\n\t\tCollections.reverse(res);\n\t\treturn res;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static LuaFunction gsub() {\n\t\treturn GSUB;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void setText(CharSequence text, BufferType type,\n            boolean notifyBefore, int oldlen) {\n        int n = mFilters.length;\n        \n        for (int i = 0; i < n; i++) {\n            CharSequence out = mFilters[i].filter(text, 0, text.length(), EMPTY_SPANNED, 0, 0);\n            text = out;\n        }\n\n        oldlen += mText.length();\n        sendBeforeTextChanged(mText, 0, oldlen, text.length());\n\n\n        type = BufferType.EDITABLE;\n\n\n        mBufferType = type;\n        mText = text;\n\n        mTransformed = mTransformation.getTransformation(text, this);\n\n        final int textLength = text.length();\n\n        if (mEditor != null) mEditor.addSpanWatchers((Spannable) text);\n\n        mMovement.initialize(this, (Spannable) text);\n\n        checkForRelayout();\n\n        sendOnTextChanged(text, 0, oldlen, textLength);\n        onTextChanged(text, 0, oldlen, textLength);\n        sendAfterTextChanged((Editable) text);\n\n        mEditor.prepareCursorControllers();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic WebSocketServer(InetSocketAddress address, int decodercount,\n\t\t\tList<Draft> drafts, Collection<WebSocket> connectionscontainer) {\n\t\tif (address == null || decodercount < 1 || connectionscontainer == null) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"address and connectionscontainer must not be null and you need at least 1 decoder\");\n\t\t}\n\n\t\tif (drafts == null)\n\t\t\tthis.drafts = Collections.emptyList();\n\t\telse\n\t\t\tthis.drafts = drafts;\n\n\t\tthis.address = address;\n\t\tthis.connections = connectionscontainer;\n\n\t\tiqueue = new LinkedList<WebSocketImpl>();\n\n\t\tdecoders = new ArrayList<WebSocketWorker>(decodercount);\n\t\tbuffers = new LinkedBlockingQueue<ByteBuffer>();\n\t\tfor (int i = 0; i < decodercount; i++) {\n\t\t\tWebSocketWorker ex = new WebSocketWorker();\n\t\t\tdecoders.add(ex);\n\t\t\tex.start();\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker, boolean showDirection) {\n        this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        PartialSufficientSatistics partialSufficientSatistics = PartialSufficientSatistics.createZeroPartialSufficientStatistics(efBayesianNetwork);\n        partialSufficientSatistics.copy(this.sumSS);\n        partialSufficientSatistics.normalize();\n        SufficientStatistics finalSS = efBayesianNetwork.createZeroSufficientStatistics();\n        finalSS.sum(partialSufficientSatistics.getCompoundVector());\n\n        efBayesianNetwork.setMomentParameters(finalSS);\n        return efBayesianNetwork.toBayesianNetwork(dag);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\n\n    \n\n\n    @Override\n    public DataInputStream getFileObject(URI fileUri, int start, int limit)\n            throws CatalogIOException {\n\n        Path objectPath = Paths.get(fileUri);\n\n        if (Files.isRegularFile(objectPath)) {\n            try {\n                if (start == -1 && limit == -1) {\n                    return new DataInputStream(Files.newInputStream(objectPath));\n                } else {\n                    return new DataInputStream(IOUtils.headOffset(objectPath, start, limit));\n                }\n            } catch (IOException e) {\n                throw new CatalogIOException(\"Unable to read file\", e);\n            }\n        } else {\n            throw new CatalogIOException(\"Not a regular file: \" + objectPath.toAbsolutePath().toString());\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public View getView(final int position, View convertView, final ViewGroup parent) {\n            ViewHolder holder = null;\n            if (convertView == null) {\n                convertView = layoutInflater.inflate(R.layout.item_marray, null);\n            } else {\n                convertView.getTag();\n            }\n            holder = new ViewHolder(convertView);\n            holder.tv_name.setText(news.get(position).getName());\n            holder.tv_phone.setText(news.get(position).getPhone());\n            if (news.get(position).isShow) {\n                holder.ly_a.setVisibility(VISIBLE);\n                holder.ly_b.setVisibility(View.GONE);\n            } else {\n                holder.ly_a.setVisibility(View.GONE);\n                holder.ly_b.setVisibility(VISIBLE);\n            }\n            final ViewHolder finalHolder = holder;\n            holder.tv_unrepeat.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(final View v) {\n\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_unrepeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_unrepeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_repeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_repeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_invalid.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_invalid.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_valid.getId() +\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \"+ \"\" + (finalHolder.tv_valid.isShown()));\n\n                    infoList.get(position).isShow = false;\n                    notifyDataSetChanged();\n                }\n            });\n\n            holder.tv_repeat.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(final View v) {\n\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_unrepeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_unrepeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_repeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_repeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_invalid.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_invalid.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_valid.getId() +\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \"+ \"\" + (finalHolder.tv_valid.isShown()));\n\n                    infoList.get(position).isShow = false;\n                    notifyDataSetChanged();\n                }\n            });\n            holder.tv_valid.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(final View v) {\n\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_unrepeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_unrepeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_repeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_repeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_invalid.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_invalid.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_valid.getId() +\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \"+ \"\" + (finalHolder.tv_valid.isShown()));\n\n                    infoList.get(position).isShow = true;\n                    notifyDataSetChanged();\n                }\n            });\n            holder.tv_invalid.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(final View v) {\n\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_unrepeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_unrepeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_repeat.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_repeat.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_invalid.getId()+\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \" + \"\" + (finalHolder.tv_invalid.isShown()));\n                    Logger.e(TAG, \"onClick: \" + finalHolder.tv_valid.getId() +\"\u9359\ue21d\ue746\u935a\u694b\u7d35 \"+ \"\" + (finalHolder.tv_valid.isShown()));\n\n                    infoList.get(position).isShow = true;\n                    notifyDataSetChanged();\n                }\n            });\n\n\n            return convertView;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@SuppressLint(\"NewApi\")\n    public static Bitmap fastblur(Context context, Bitmap sentBitmap, int radius) {\n\n        if (VERSION.SDK_INT > 16) {\n            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n            final RenderScript rs = RenderScript.create(context);\n            final Allocation input = Allocation.createFromBitmap(rs,\n                    sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n                    Allocation.USAGE_SCRIPT);\n            final Allocation output = Allocation.createTyped(rs,\n                    input.getType());\n            final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs,\n                    Element.U8_4(rs));\n            script.setRadius(radius );\n            script.setInput(input);\n            script.forEach(output);\n            output.copyTo(bitmap);\n            return bitmap;\n        }\n\n\n\n        Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n        if (radius < 1) {\n            return (null);\n        }\n\n        int w = bitmap.getWidth();\n        int h = bitmap.getHeight();\n\n        int[] pix = new int[w * h];\n        Log.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n        bitmap.getPixels(pix, 0, w, 0, 0, w, h);\n\n        int wm = w - 1;\n        int hm = h - 1;\n        int wh = w * h;\n        int div = radius + radius + 1;\n\n        int r[] = new int[wh];\n        int g[] = new int[wh];\n        int b[] = new int[wh];\n        int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;\n        int vmin[] = new int[Math.max(w, h)];\n\n        int divsum = (div + 1) >> 1;\n        divsum *= divsum;\n        int dv[] = new int[256 * divsum];\n        for (i = 0; i < 256 * divsum; i++) {\n            dv[i] = (i / divsum);\n        }\n\n        yw = yi = 0;\n\n        int[][] stack = new int[div][3];\n        int stackpointer;\n        int stackstart;\n        int[] sir;\n        int rbs;\n        int r1 = radius + 1;\n        int routsum, goutsum, boutsum;\n        int rinsum, ginsum, binsum;\n\n        for (y = 0; y < h; y++) {\n            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n            for (i = -radius; i <= radius; i++) {\n                p = pix[yi + Math.min(wm, Math.max(i, 0))];\n                sir = stack[i + radius];\n                sir[0] = (p & 0xff0000) >> 16;\n                sir[1] = (p & 0x00ff00) >> 8;\n                sir[2] = (p & 0x0000ff);\n                rbs = r1 - Math.abs(i);\n                rsum += sir[0] * rbs;\n                gsum += sir[1] * rbs;\n                bsum += sir[2] * rbs;\n                if (i > 0) {\n                    rinsum += sir[0];\n                    ginsum += sir[1];\n                    binsum += sir[2];\n                } else {\n                    routsum += sir[0];\n                    goutsum += sir[1];\n                    boutsum += sir[2];\n                }\n            }\n            stackpointer = radius;\n\n            for (x = 0; x < w; x++) {\n\n                r[yi] = dv[rsum];\n                g[yi] = dv[gsum];\n                b[yi] = dv[bsum];\n\n                rsum -= routsum;\n                gsum -= goutsum;\n                bsum -= boutsum;\n\n                stackstart = stackpointer - radius + div;\n                sir = stack[stackstart % div];\n\n                routsum -= sir[0];\n                goutsum -= sir[1];\n                boutsum -= sir[2];\n\n                if (y == 0) {\n                    vmin[x] = Math.min(x + radius + 1, wm);\n                }\n                p = pix[yw + vmin[x]];\n\n                sir[0] = (p & 0xff0000) >> 16;\n                sir[1] = (p & 0x00ff00) >> 8;\n                sir[2] = (p & 0x0000ff);\n\n                rinsum += sir[0];\n                ginsum += sir[1];\n                binsum += sir[2];\n\n                rsum += rinsum;\n                gsum += ginsum;\n                bsum += binsum;\n\n                stackpointer = (stackpointer + 1) % div;\n                sir = stack[(stackpointer) % div];\n\n                routsum += sir[0];\n                goutsum += sir[1];\n                boutsum += sir[2];\n\n                rinsum -= sir[0];\n                ginsum -= sir[1];\n                binsum -= sir[2];\n\n                yi++;\n            }\n            yw += w;\n        }\n        for (x = 0; x < w; x++) {\n            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n            yp = -radius * w;\n            for (i = -radius; i <= radius; i++) {\n                yi = Math.max(0, yp) + x;\n\n                sir = stack[i + radius];\n\n                sir[0] = r[yi];\n                sir[1] = g[yi];\n                sir[2] = b[yi];\n\n                rbs = r1 - Math.abs(i);\n\n                rsum += r[yi] * rbs;\n                gsum += g[yi] * rbs;\n                bsum += b[yi] * rbs;\n\n                if (i > 0) {\n                    rinsum += sir[0];\n                    ginsum += sir[1];\n                    binsum += sir[2];\n                } else {\n                    routsum += sir[0];\n                    goutsum += sir[1];\n                    boutsum += sir[2];\n                }\n\n                if (i < hm) {\n                    yp += w;\n                }\n            }\n            yi = x;\n            stackpointer = radius;\n            for (y = 0; y < h; y++) {\n                pix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16)\n                        | (dv[gsum] << 8) | dv[bsum];\n\n                rsum -= routsum;\n                gsum -= goutsum;\n                bsum -= boutsum;\n\n                stackstart = stackpointer - radius + div;\n                sir = stack[stackstart % div];\n\n                routsum -= sir[0];\n                goutsum -= sir[1];\n                boutsum -= sir[2];\n\n                if (x == 0) {\n                    vmin[y] = Math.min(y + r1, hm) * w;\n                }\n                p = x + vmin[y];\n\n                sir[0] = r[p];\n                sir[1] = g[p];\n                sir[2] = b[p];\n\n                rinsum += sir[0];\n                ginsum += sir[1];\n                binsum += sir[2];\n\n                rsum += rinsum;\n                gsum += ginsum;\n                bsum += binsum;\n\n                stackpointer = (stackpointer + 1) % div;\n                sir = stack[stackpointer];\n\n                routsum += sir[0];\n                goutsum += sir[1];\n                boutsum += sir[2];\n\n                rinsum -= sir[0];\n                ginsum -= sir[1];\n                binsum -= sir[2];\n\n                yi += w;\n            }\n        }\n\n        Log.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n        bitmap.setPixels(pix, 0, w, 0, 0, w, h);\n        return (bitmap);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .directModelSubstitute(LocalDate.class, java.sql.Date.class)\n                .directModelSubstitute(LocalDateTime.class, java.util.Date.class)\n                .select()\n                .apis(requestHandler -> {\n                    String packageName = requestHandler.getHandlerMethod().getMethod()\n                            .getDeclaringClass().getPackage().getName();\n                    return packageName.startsWith(\"com.akkafun.\") && packageName.contains(\".web\");\n                })\n                .paths(PathSelectors.any())\n                .build();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Deprecated\n    public static boolean isJavaLetterOrDigit(char ch) {\n        return isJavaIdentifierPart(ch);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void onDownloadError(int index, String message) {\n    for (int i = 0; i < mDownloadStatus.length; i++) {\n        if (mDownloadStatus[i] != DownFile.DownloadStatus.FINISH && mDownloadStatus[i] != DownFile.DownloadStatus.ERROR) {\n            mDownloadThreads[i].cancel();\n        }\n    }\n        notifyUpdate(downFile, Constants.WHAT_ERROR);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic GradientRadialBackground( int innerColor, int outerColor, Dimension start, Dimension end, Dimension centerX, Dimension centerY ) {\n\t\tthis.innerColor = innerColor;\n\t\tthis.outerColor = outerColor;\n\t\tif (start != null && end != null && start.getValue(100) != end.getValue( 100)) {\n\t\t\tthis.start = start;\n\t\t\tthis.end = end;\n\t\t}\n\t\tthis.centerX = centerX;\n\t\tthis.centerY = centerY;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Transient\n    public String[] getFieldNames() {\n        return new String[] {\n                \"id\",\n                \"userName\",\n                \"password\",\n                \"status\",\n                \"subscriberStatus\",\n                \"deleted\",\n                \"accountExpired\",\n                \"accountLocked\",\n                \"passwordExpired\",\n                \"lastLogin\",\n                \"lastStatusChange\",\n                \"createdDateTime\",\n                \"language\",\n                \"currency\",\n\n                \"invoiceDeliveryMethod\",\n                \"autoPaymentType\",\n                \"notes\",\n                \"parentUserId\",\n                \"isParent\",\n                \"invoiceIfChild\",\n                \"excludeAging\",\n                \"balanceType\",\n                \"dynamicBalance\",\n                \"creditLimit\",\n                \"autoRecharge\",\n\n                \"organizationName\",\n                \"title\",\n                \"firstName\",\n                \"lastName\",\n                \"initial\",\n                \"address1\",\n                \"address2\",\n                \"city\",\n                \"stateProvince\",\n                \"postalCode\",\n                \"countryCode\",\n                \"phoneNumber\",\n                \"faxNumber\",\n                \"email\"\n        };\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private PooledConnection createPooledConnection (String user,\n        String password, boolean requestPassword) throws SQLException\n    {\n        \n        return findDriver().getNewPooledConnection(\n            this, user, password, requestPassword);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate PolicyDescriptions createPolicyDescriptions(Map<URI, PolicyDescription> policies) {\n        PolicyDescriptions pd = new PolicyDescriptions();\n        for(URI key : policies.keySet()) {\n            PolicyDescriptionsEntry entry = new PolicyDescriptionsEntry();\n            entry.setKey(key);\n            entry.setValue(policies.get(key));\n            pd.getEntry().add(entry);\n        }\n        return pd;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static final void writeIntLittleEndian(byte[] array, int pos,int value) {\n\t\tarray[pos+3] = (byte) (value >>>24); \n\t\tarray[pos+2] = (byte) (value >>>16);\n\t\tarray[pos+1] = (byte) (value >>>8);\n\t\tarray[pos] = (byte) (value &0xFF);\n\t\t\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintWriter writer, boolean suppressLogin, char eolMarker, boolean showDirection)\n    {\n        __writer = writer;\n        __nologin = suppressLogin;\n        __eolMarker = eolMarker;\n        __directionMarker = showDirection;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic Params(@NotNull String path,\n                  @NotNull int[] rev,\n                  boolean wantProps,\n                  boolean wantContents,\n                  \n                  @SuppressWarnings(\"UnusedParameters\")\n                  @NotNull String[] fields,\n                  boolean wantIProps) {\n      this.path = path;\n      this.rev = rev;\n      this.wantProps = wantProps;\n      this.wantContents = wantContents;\n      this.wantIProps = wantIProps;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"net.chrisrichardson.eventstore.examples.customersandorders\"))\n                .build()\n                .pathMapping(\"/\")\n                .genericModelSubstitutes(ResponseEntity.class, CompletableFuture.class)\n                .alternateTypeRules(\n                        newRule(typeResolver.resolve(DeferredResult.class,\n                                        typeResolver.resolve(ResponseEntity.class, WildcardType.class)),\n                                typeResolver.resolve(WildcardType.class))\n                )\n                .useDefaultResponseMessages(false)\n                ;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void setJoinType(Player player, int joinType)\n\t{\n\t\tLegion legion = player.getLegion();\n\t\t\n\t\tif (legion == null)\n\t\t\treturn;\n\n\t\tif (legionRestrictions.canChangeLegionJoinSetting(player))\n\t\t{\n\t\t\tlegion.setJoinType(joinType);\n\t\t\tPacketSendUtility.sendPacket(player, new SM_LEGION_EDIT(0x0D , legion));\n\t\t\tDAOManager.getDAO(LegionDAO.class).updateLegionDescription(legion);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static <P extends IUnlistedProperty<T>, T> T getStatePropertySafely(@Nullable TileEntity te, Class<? extends Block> block, P property, T defaultVal) {\n\t\treturn getStatePropertySafely(te, block, property, defaultVal, false, false);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic KeyFrameMeta analyzeKeyFrames() {\n\t\tif (keyframeMeta != null) {\n\t\t\treturn keyframeMeta;\n\t\t}\n\t\ttry {\n\t\t\tlock.acquire();\n\t\tif (keyframeCache != null) {\n\t\t\tkeyframeMeta = keyframeCache.loadKeyFrameMeta(file);\n\t\t\tif (keyframeMeta != null) {\n\t\t\t\tduration = keyframeMeta.duration;\n\t\t\t\tposTimeMap = new HashMap<Long, Long>();\n\t\t\t\tfor (int i = 0; i < keyframeMeta.positions.length; i++) {\n\t\t\t\t\tposTimeMap.put(keyframeMeta.positions[i], (long) keyframeMeta.timestamps[i]);\n\t\t\t\t}\n\t\t\t\treturn keyframeMeta;\n\t\t\t}\n\t\t}\n\t\tkeyframeMeta = new KeyFrameMeta();\n\t\tList<Long> positionList = new ArrayList<Long>();\n\t\tList<Integer> timestampList = new ArrayList<Integer>();\n\t\tList<Long> audioPositionList = new ArrayList<Long>();\n\t\tList<Integer> audioTimestampList = new ArrayList<Integer>();\n\t\tlong origPos = getCurrentPosition();\n\t\tsetCurrentPosition(9);\n\t\tint totalValidTags = 0;\n\t\tboolean audioOnly = true;\n\t\twhile (hasMoreTags()) {\n\t\t\tlong pos = getCurrentPosition();\n\t\t\tITag tmpTag = this.readTagHeader();\n\t\t\tif (tmpTag != null) {\n\t\t\t\ttotalValidTags++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tduration = tmpTag.getTimestamp();\n\t\t\tif (tmpTag.getDataType() == IoConstants.TYPE_VIDEO) {\n\t\t\t\tif (audioOnly) {\n\t\t\t\t\taudioOnly = false;\n\t\t\t\t\taudioPositionList.clear();\n\t\t\t\t\taudioTimestampList.clear();\n\t\t\t\t}\n\t\t\t\tif (firstVideoTag == -1) {\n\t\t\t\t\tfirstVideoTag = pos;\n\t\t\t\t}\n\t\t\t\tfillBuffer(1);\n\t\t\t\tbyte frametype = in.get();\n\t\t\t\tif (keyframeMeta.videoCodecId == -1) {\n\t\t\t\t\tkeyframeMeta.videoCodecId = frametype & MASK_VIDEO_CODEC;\n\t\t\t\t}\n\t\t\t\tif (((frametype & MASK_VIDEO_FRAMETYPE) >> 4) == FLAG_FRAMETYPE_KEYFRAME) {\n\t\t\t\t\tpositionList.add(pos);\n\t\t\t\t\ttimestampList.add(tmpTag.getTimestamp());\n\t\t\t\t}\n\t\t\t} else if (tmpTag.getDataType() == IoConstants.TYPE_AUDIO) {\n\t\t\t\tif (firstAudioTag == -1) {\n\t\t\t\t\tfirstAudioTag = pos;\n\t\t\t\t}\n\t\t\t\tfillBuffer(1);\n\t\t\t\tbyte frametype = in.get();\n\t\t\t\tif (keyframeMeta.audioCodecId == -1) {\n\t\t\t\t\tkeyframeMeta.audioCodecId = frametype & MASK_SOUND_FORMAT;\n\t\t\t\t}\n\t\t\t\tif (audioOnly) {\n\t\t\t\t\taudioPositionList.add(pos);\n\t\t\t\t\taudioTimestampList.add(tmpTag.getTimestamp());\n\t\t\t\t}\n\t\t\t}\n\t\t\tlong newPosition = pos + tmpTag.getBodySize() + 15;\n\t\t\tif (newPosition >= getTotalBytes()) {\n\t\t\t\tlog.error(\"New position exceeds limit\");\n\t\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\t\tlog.debug(\"-----\");\n\t\t\t\t\tlog.debug(\"Keyframe analysis\");\n\t\t\t\t\tlog.debug(\" data type=\" + tmpTag.getDataType() + \" bodysize=\" + tmpTag.getBodySize());\n\t\t\t\t\tlog.debug(\" remaining=\" + getRemainingBytes() + \" limit=\" + getTotalBytes() + \" new pos=\" + newPosition);\n\t\t\t\t\tlog.debug(\" pos=\" + pos);\n\t\t\t\t\tlog.debug(\"-----\");\n\t\t\t\t}\n\t\t\t\tlog.info(\"New position {} exceeds limit {}\", newPosition, getTotalBytes());\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tsetCurrentPosition(newPosition);\n\t\t\t}\n\t\t}\n\t\tsetCurrentPosition(origPos);\n\t\tlog.debug(\"Total valid tags found: {}\", totalValidTags);\n\t\tkeyframeMeta.duration = duration;\n\t\tposTimeMap = new HashMap<Long, Long>();\n\t\tif (audioOnly) {\n\t\t\tpositionList = audioPositionList;\n\t\t\ttimestampList = audioTimestampList;\n\t\t}\n\t\tkeyframeMeta.audioOnly = audioOnly;\n\t\tkeyframeMeta.positions = new long[positionList.size()];\n\t\tkeyframeMeta.timestamps = new int[timestampList.size()];\n\t\tfor (int i = 0; i < keyframeMeta.positions.length; i++) {\n\t\t\tkeyframeMeta.positions[i] = positionList.get(i);\n\t\t\tkeyframeMeta.timestamps[i] = timestampList.get(i);\n\t\t\tposTimeMap.put((long) positionList.get(i), (long) timestampList.get(i));\n\t\t}\n\t\tif (keyframeCache != null) {\n\t\t\tkeyframeCache.saveKeyFrameMeta(file, keyframeMeta);\n\t\t}\n\t} catch (InterruptedException e) {\n\t\tlog.warn(\"Exception acquiring lock\", e);\n\t} finally {\n\t\tlock.release();\n\t}\n\t\treturn keyframeMeta;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static float convertDpToPixel(float dp, Context context) {\n        Resources resources = context.getResources();\n        DisplayMetrics metrics = resources.getDisplayMetrics();\n        float px = dp * ((float) metrics.densityDpi / DisplayMetrics.DENSITY_DEFAULT);\n        return px;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void addShaped(RecipeDifficulty difficulty, ItemStack result, Object... recipe) {\n        if (difficulty != ALL && RecipeDifficulty.getDifficulty() != difficulty) {\n            return;\n        }\n\n        boolean isOre = false;\n\n        if (!isEnabled(result)) {\n            return;\n        }\n\n        for (int i = 3; i < recipe.length; i++) {\n            if (recipe[i] instanceof String) {\n                isOre = true;\n            }\n\n            if (!isEnabled(recipe[i])) {\n                return;\n            }\n        }\n\n        if (isOre) {\n            IRecipe iRecipe = new ShapedOreRecipe(result, recipe);\n            activeCrafting.add(iRecipe);\n            GameRegistry.addRecipe(iRecipe);\n        }\n        else {\n            activeCrafting.add(GameRegistry.addShapedRecipe(result, recipe));\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public PartitionLoad getLoad() throws IOException{\n        Map<ServerName, List<HRegionInfo>> serverToRegionMap=new HashMap<>();\n        try(RegionLocator rl=connection.getRegionLocator(tableName)){\n            List<HRegionLocation> locations=rl.getAllRegionLocations();\n            for(HRegionLocation location : locations){\n                List<HRegionInfo> info=serverToRegionMap.get(location.getServerName());\n                if(info==null){\n                    info = new LinkedList<>();\n                    serverToRegionMap.put(location.getServerName(),info);\n                }\n                info.add(location.getRegionInfo());\n            }\n        }\n        int totalStoreFileSizeMB = 0;\n        int totalMemstoreSieMB = 0;\n        int storefileIndexSizeMB = 0;\n        try(Admin admin=connection.getAdmin()){\n            ClusterStatus clusterStatus=admin.getClusterStatus();\n            for(Map.Entry<ServerName,List<HRegionInfo>> entry:serverToRegionMap.entrySet()){\n                ServerLoad load=clusterStatus.getLoad(entry.getKey());\n                Map<byte[], RegionLoad> regionsLoad=load.getRegionsLoad();\n                for(HRegionInfo info:entry.getValue()){\n                    RegionLoad rl = regionsLoad.get(info.getRegionName());\n                    totalStoreFileSizeMB+=rl.getStorefileSizeMB();\n                    totalMemstoreSieMB+=rl.getMemStoreSizeMB();\n                    storefileIndexSizeMB+=rl.getStorefileIndexSizeMB();\n                }\n            }\n        }\n        return new HPartitionLoad(getName(),totalStoreFileSizeMB,totalMemstoreSieMB,storefileIndexSizeMB);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void writeLength() throws IOException {\n        if (inputStream == null)\n            throw new UnsupportedOperationException(\"writeLength() can only be called in a contructed PdfStream(InputStream,PdfWriter).\");\n        if (inputStreamLength == -1)\n            throw new IOException(\"writeLength() can only be called after output of the stream body.\");\n        writer.addToBody(new PdfNumber(inputStreamLength), ref, false);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void useProxyIndirection(Class targetInterface) {\n        Class[] targetInterfaces = new Class[] { targetInterface };\n        setIndirectionPolicy(new ProxyIndirectionPolicy(targetInterfaces));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n\tpublic void testBlock() throws IOException {\n\t\tBlock b = new Block(BlockCompressionMethod.GZIP.ordinal(),\n\t\t\t\tBlockContentType.CORE, 0, \"123457890\".getBytes(), null);\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tb.write(baos);\n\n\t\tByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n\t\tBlock b2 = new Block(bais, true, true);\n\n\t\tassertArrayEquals(b.getRawContent(), b2.getRawContent());\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps,\n                boolean isUserGenerated) {\n            Validate.notNull(objectProperty, \"objectProperty\");\n            Validate.containsNoNulls(bitmaps, \"bitmaps\");\n            if (action == null) {\n                throw new FacebookException(\"Can not set attachments prior to setting action.\");\n            }\n\n            List<String> attachmentUrls = addImageAttachments(bitmaps);\n            updateObjectAttachmentUrls(objectProperty, attachmentUrls, isUserGenerated);\n\n            return this;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void ensureScopeSetup() {\n\t\tif (scopeSetup) return; // don't do it again\n\t\tMethodScope scope = this.scope;\n\t\t\n\t\tTypeReference ot = onType;\n\t\tReferenceBinding rb = null;\n\t\t\n\t\tif (ot instanceof ParameterizedQualifiedTypeReference) { // pr132349\n\t\t\tParameterizedQualifiedTypeReference pref = (ParameterizedQualifiedTypeReference) ot;\n\t\t\tif (pref.typeArguments!=null && pref.typeArguments.length!=0) {\n\t\t\t\tboolean usingNonTypeVariableInITD = false;\n\t\t\t\tfor (int i = 0; i < pref.typeArguments.length; i++) {\n\t\t\t\t\tTypeReference[] refs = pref.typeArguments[i];\n\t\t\t\t\tfor (int j = 0; refs!=null && j < refs.length; j++) {\n\t\t\t\t\t\tTypeBinding tb = refs[j].getTypeBindingPublic(scope.parent);\n\t\t\t\t\t\tif (!tb.isTypeVariable() && !(tb instanceof ProblemReferenceBinding)) {\n\t\t\t\t\t\t\tusingNonTypeVariableInITD = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (usingNonTypeVariableInITD) {\n\t\t\t\t\tscope.problemReporter().signalError(sourceStart,sourceEnd,\n\t\t\t\t\t  \"Cannot make inter-type declarations on parameterized types\");\n\t\t\t\t\tthis.arguments=null;\n\t\t\t\t\tthis.returnType=new SingleTypeReference(TypeReference.VOID,0L);\n\t\t\t\t\t\n\t\t\t\t\tthis.ignoreFurtherInvestigation=true;\n\t\t\t\t\tReferenceBinding closestMatch = null;\n\t\t\t\t\trb = new ProblemReferenceBinding(ot.getParameterizedTypeName(),closestMatch,0);\t\t\n\t\t\t\t\tonType=null;\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t}\n\n\t\tif (ot instanceof ParameterizedSingleTypeReference) {\n\t\t\tParameterizedSingleTypeReference pref = (ParameterizedSingleTypeReference) ot;\n\t\t\tlong pos = (((long)pref.sourceStart) << 32) | pref.sourceEnd;\n\t\t\tot = new SingleTypeReference(pref.token,pos);\n\t\t} else if (ot instanceof ParameterizedQualifiedTypeReference) {\n\t\t\tParameterizedQualifiedTypeReference pref = (ParameterizedQualifiedTypeReference) ot;\n\t\t\tlong pos = (((long)pref.sourceStart) << 32) | pref.sourceEnd;\n\t\t\tot = new QualifiedTypeReference(pref.tokens,new long[]{pos});//SingleTypeReference(pref.Quatoken,pos);\n\t\t}\n\t\t\n\t\tif (rb==null) {\n\t\t  rb = (ReferenceBinding)ot.getTypeBindingPublic(scope.parent);\n\t\t}\n\t\t\n\t\tif (rb.isRawType() && rb.isMemberType()) {\n\t\t\trb = ((RawTypeBinding)rb).type;\n\t\t}\n\t\t\n\t\tif (rb instanceof TypeVariableBinding) {\n\t\t\tscope.problemReporter().signalError(sourceStart,sourceEnd,\n\t\t\t\t\t  \"Cannot make inter-type declarations on type variables, use an interface and declare parents\");\n\t\t\tthis.arguments=null;\n\t\t\tthis.returnType=new SingleTypeReference(TypeReference.VOID,0L);\n\t\t\t\n\t\t\tthis.ignoreFurtherInvestigation=true;\n\t\t\tReferenceBinding closestMatch = null;\n\t\t\tif (((TypeVariableBinding)rb).firstBound!=null) {\n\t\t\t\tclosestMatch = ((TypeVariableBinding)rb).firstBound.enclosingType();\n\t\t\t}\n\t\t\trb = new ProblemReferenceBinding(rb.compoundName,closestMatch,0);\n\t\t}\n\n\t\t\n\t\tif (rb instanceof ProblemReferenceBinding) return;\n\t\t\n\t\tinterTypeScope = new InterTypeScope(scope.parent, rb, typeVariableAliases);\n\t\tscope.isStatic = (typeVariableAliases!=null?false:Modifier.isStatic(declaredModifiers));\n\t\tscope.parent = interTypeScope;\n\t    scopeSetup = true;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; } \n        return retVal;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void handlePatch(final PatchParam patchParam) throws Throwable {\n        {\n            Class<?> cls = null;\n            try {\n                cls= patchParam.context.getClass().getClassLoader().loadClass(\"com.taobao.dexposed.TestFragment\");\n            } catch (Exception e) {\n                e.printStackTrace();\n                return;\n            }\n            Log.e(TAG, \"cls:\" + cls);\n            DexposedBridge.findAndHookMethod(cls, \"getText\", new XC_MethodReplacement() {\n                @Override\n                protected Object replaceHookedMethod(MethodHookParam methodHookParam) throws Throwable {\n                    Log.e(TAG, \"methodHookParam:\" + methodHookParam.method.getName());\n                    return \"from patch\";\n                }\n            });\n\n            DexposedBridge.findAndHookMethod(cls, \"onCreateView\", LayoutInflater.class, ViewGroup.class, Bundle.class, new XC_MethodReplacement() {\n                @Override\n                protected Object replaceHookedMethod(MethodHookParam methodHookParam) throws Throwable {\n                    ViewGroup view = (ViewGroup) methodHookParam.args[1];\n                    TextView tv = new TextView(view.getContext());\n                    tv.setText(\"replace onCreateView\");\n                    return tv;\n                }\n            });\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprotected void printMethods (       IndentingWriter writer,\n                                        boolean useQualifiedNames,\n                                        boolean useIDLNames,\n                                        boolean globalIDLNames) throws IOException {\n\n        CompoundType.Method[] methods = getMethods();\n\n        for (int m = 0; m < methods.length; m++) {\n            CompoundType.Method theMethod = methods[m];\n            printMethod(theMethod,writer,useQualifiedNames,useIDLNames,globalIDLNames);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic List<List<String>> toClass(InputEvent event) throws IOException {\n        List<List<String>> output = new ArrayList<>();\n        String[] items;\n        try {\n            items = super.getItems(event);\n\n            for (String s : items) {\n                List<String> elements = new ArrayList<>();\n\n                if (m == null) {\n                    m = p.matcher(s);\n                } else {\n                    m.reset(s);\n                }\n                if (m.find() && m.groupCount() > 0) {\n                    for (int i = 1; i < m.groupCount() + 1; i++) {\n                        elements.add(m.group(i));\n                    }\n\n                    output.add(elements);\n                }\n            }\n\n            return output;\n        } catch (Exception e) {\n            throw new IOException(e);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public URI resolve(URI uri) {\n        return resolve(this, uri);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static boolean isTrue(Object o) {\n        if (o == null) return false;\n\n        Class<?> cls = o.getClass();\n        if (cls == Boolean.class) return (Boolean) o;\n        if (o instanceof Collection) return !((Collection<?>) o).isEmpty();\n        if (o instanceof Map) return !((Map<?, ?>) o).isEmpty();\n        if (o instanceof CharSequence) return ((CharSequence) o).length() > 0;\n        if (o instanceof Number) return ((Number) o).intValue() != 0;\n        if (cls.isArray()) return Array.getLength(o) > 0;\n        if (cls == Character.class) return ((Character) o) != '\\0';\n        if (o instanceof Enumeration) return ((Enumeration<?>) o).hasMoreElements();\n        if (o instanceof Iterator) return ((Iterator<?>) o).hasNext();\n        if (o instanceof Iterable) return ((Iterable<?>) o).iterator().hasNext();\n\n        return true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void load() {\n        List<ListItemViewModel> viewModels = new ArrayList<>(DUMMY_MODEL_COUNT);\n        for (int i = 0; i < DUMMY_MODEL_COUNT; i++) {\n            ListItemViewModel vm = new ListItemViewModel();\n            if (i % 10 == 0 && isAddingHeaders) {\n                vm.primary = \"Heading \" + i;\n                vm.layout = R.layout.list_group_heading;\n            } else {\n                vm.primary = \"Primary \" + i;\n                vm.secondary = \"Secondary \" + i;\n                vm.tertiary = \"Tertiary \" + i;\n                vm.imageUrl = \"http://rdiodynimages0-a.akamaihd.net/?l=a\" + (i + 100000) + \"-0\";\n            }\n            viewModels.add(vm);\n            if (vm.layout == R.layout.list_group_heading) {\n                onHeaderAdded(vm, i);\n            } else {\n                onItemAdded(vm, i);\n            }\n        }\n        setViewModels(viewModels);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nOutput(boolean isDefault, String name, OutputFormat outputFormat, Class keyClass, Class valueClass,\n\t\t    Map<String, String> specificContext) {\n\t\t\tthis.isDefault = isDefault;\n\t\t\tthis.outputFormat = outputFormat;\n\t\t\tthis.keyClass = keyClass;\n\t\t\tthis.valueClass = valueClass;\n\t\t\tthis.name = name;\n\t\t\tif(specificContext != null) {\n\t\t\t\tthis.specificContext = specificContext;\n\t\t\t}\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        public static String getActionName(ActionListener listener)\n        {\n                Enumeration en = getActions();\n                while(en.hasMoreElements())\n                {\n                        String name = (String)en.nextElement();\n                        ActionListener _listener = getAction(name);\n                        if(_listener == listener) {\n                                return name;\n                        }\n                }\n                return null;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n\n\n        Debug.v(\"onCreate here!\");\n        Debug.d(1, 2, 3, 4, 5);\n        Debug.i(\"0\", \"1\", \"2\", \"3\"); // will just enumerate strings\n        Debug.w(\"%s %s %s\", null, null, null); // will call String.format\n        Debug.e(true, null, Integer.MAX_VALUE, Long.MIN_VALUE);\n        Debug.wtf(\"No, really, WTF?!\");\n\n\n        if (savedInstanceState == null) {\n            getSupportFragmentManager()\n                    .beginTransaction()\n                    .add(R.id.content, new MainFragment())\n                    .commit();\n        }\n\n        Debug.trace(100);\n\n\n\n\n\n\n\n\n\n        final UnknownHostException exception = new UnknownHostException();\n        exception.initCause(new Throwable());\n        Debug.e(exception, \"Hello this is a message for exception\");\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private void reqBaiduPaymentViaAPP(final Map<String, Object> responseMap) {\n        String orderInfo = (String) responseMap.get(\"orderInfo\");\n\n\n        Map<String, String> map = new HashMap<String, String>();\n        baiduPay = BaiduPay.getInstance();\n        baiduPay.doPay(mContextActivity, orderInfo, new PayCallBack() {\n            public void onPayResult(int stateCode, String payDesc) {\n\n                String result;\n                int errCode;\n                String errMsg;\n                String errDetail;\n\n                switch (stateCode) {\n                    case PayCallBackManager.PayStateModle.PAY_STATUS_SUCCESS:// \u95c7\u7455\u4f78\u57cc\u93c8\u5d85\u59df\u7ed4\ue21e\u7359\u7487\u4f79\u656e\u6d60\u6a3c\u7ca8\u93cb\n\n                        result = BCPayResult.RESULT_SUCCESS;\n                        errCode = BCPayResult.APP_PAY_SUCC_CODE;\n                        errMsg = BCPayResult.RESULT_SUCCESS;\n                        errDetail = errMsg;\n                        break;\n                    case PayCallBackManager.PayStateModle.PAY_STATUS_PAYING:// \u95c7\u7455\u4f78\u57cc\u93c8\u5d85\u59df\u7ed4\ue21e\u7359\u7487\u4f79\u656e\u6d60\u6a3c\u7ca8\u93cb\n                        result = BCPayResult.RESULT_UNKNOWN;\n                        errCode = BCPayResult.APP_INTERNAL_THIRD_CHANNEL_ERR_CODE;\n                        errMsg = BCPayResult.RESULT_PAYING_UNCONFIRMED;\n                        errDetail = \"\u7481\u3220\u5d1f\u59dd\uff45\u6e6a\u6fb6\u52ed\u608a\u6d93\ue168\u7d1d\u93c3\u72b3\u7876\u947e\u5cf0\u5f47\u93b4\u612c\u59db\u7ead\ue1bf\ue17b\u6dc7\u2103\u4f05\";\n                        break;\n                    case PayCallBackManager.PayStateModle.PAY_STATUS_CANCEL:\n                        result = BCPayResult.RESULT_CANCEL;\n                        errCode = BCPayResult.APP_PAY_CANCEL_CODE;\n                        errDetail = errMsg = BCPayResult.RESULT_CANCEL;\n                        break;\n                    case PayCallBackManager.PayStateModle.PAY_STATUS_NOSUPPORT:\n                        result = BCPayResult.RESULT_FAIL;\n                        errCode = BCPayResult.APP_INTERNAL_THIRD_CHANNEL_ERR_CODE;\n                        errMsg = BCPayResult.FAIL_ERR_FROM_CHANNEL;\n                        errDetail = \"\u6d93\u5d86\u656e\u93b8\u4f7d\ue1da\u7ec9\u5d86\u656e\u6d60\u6a3b\u67df\u5bee\";\n                        break;\n                    case PayCallBackManager.PayStateModle.PAY_STATUS_TOKEN_INVALID:\n                        result = BCPayResult.RESULT_FAIL;\n                        errCode = BCPayResult.APP_INTERNAL_THIRD_CHANNEL_ERR_CODE;\n                        errMsg = BCPayResult.FAIL_ERR_FROM_CHANNEL;\n                        errDetail = \"\u93c3\u72b3\u6665\u9428\u52ed\u6ae5\u95c4\u55d9\u59f8\u93ac\";\n                        break;\n                    case PayCallBackManager.PayStateModle.PAY_STATUS_LOGIN_ERROR:\n                        result = BCPayResult.RESULT_FAIL;\n                        errCode = BCPayResult.APP_INTERNAL_THIRD_CHANNEL_ERR_CODE;\n                        errMsg = BCPayResult.FAIL_ERR_FROM_CHANNEL;\n                        errDetail = \"\u9427\u5a5a\u6ab0\u6fb6\u8fab\u89e6\";\n                        break;\n                    case PayCallBackManager.PayStateModle.PAY_STATUS_ERROR:\n                        result = BCPayResult.RESULT_FAIL;\n                        errCode = BCPayResult.APP_INTERNAL_THIRD_CHANNEL_ERR_CODE;\n                        errMsg = BCPayResult.FAIL_ERR_FROM_CHANNEL;\n                        errDetail = \"\u93c0\ue219\u7caf\u6fb6\u8fab\u89e6\";\n                        break;\n                    case PayCallBackManager.PayStateModle.PAY_STATUS_LOGIN_OUT:\n                        result = BCPayResult.RESULT_FAIL;\n                        errCode = BCPayResult.APP_INTERNAL_THIRD_CHANNEL_ERR_CODE;\n                        errMsg = BCPayResult.FAIL_ERR_FROM_CHANNEL;\n                        errDetail = \"\u95ab\u9351\u8679\u6ae5\u8930\";\n                        break;\n                    default:\n                        result = BCPayResult.RESULT_FAIL;\n                        errCode = BCPayResult.APP_INTERNAL_THIRD_CHANNEL_ERR_CODE;\n                        errMsg = BCPayResult.FAIL_ERR_FROM_CHANNEL;\n                        errDetail = \"\u93c0\ue219\u7caf\u6fb6\u8fab\u89e6\";\n                        break;\n                }\n\n                if (payCallback != null) {\n                    payCallback.done(new BCPayResult(result, errCode, errMsg,\n                            errDetail + \"#result=\" + stateCode + \"#desc=\" + payDesc,\n                            BCCache.getInstance().billID));\n                }\n            }\n\n            public boolean isHideLoadingDialog() {\n                return true;\n            }\n        }, map);\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        \n        byte[] byteArray = new byte[bytes.size()]; \n        bytes.getBytes(byteArray, 0);\n        return Utf8Utils.utf8BytesToString(byteArray);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic int\n    normalizeMe() throws IllegalArgumentException {\n        int src;\n        int wordcount = 0;\n        int bitcount  = 0;\n        int v = 0;\n        for ( src= nWords-1 ; src >= 0 && (v=data[src]) == 0 ; src--){\n            wordcount += 1;\n        }\n        if ( src < 0 ){\n            throw new IllegalArgumentException(\"zero value\");\n        }\n        \n        nWords -= wordcount;\n        \n        if ( (v & 0xf0000000) != 0 ){\n            for( bitcount = 32 ; (v & 0xf0000000) != 0 ; bitcount-- )\n                v >>>= 1;\n        } else {\n            while ( v <= 0x000fffff ){\n                v <<= 8;\n                bitcount += 8;\n            }\n            while ( v <= 0x07ffffff ){\n                v <<= 1;\n                bitcount += 1;\n            }\n        }\n        if ( bitcount != 0 )\n            lshiftMe( bitcount );\n        return bitcount;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void printMethods(Class<?> cls) {\n\t\tMethod[] methods = cls.getDeclaredMethods();\n\t\tfor (Method method : methods) {\n\t\t\tString name = method.getName();\n\t\t\tClass<?>[] parameterType = method.getParameterTypes();\n\t\t\tClass<?> returnType = method.getReturnType();\n\t\t\tSystem.out.println(name);\n\t\t\tSystem.out.println(returnType.getName());\n\t\t\tfor (Class<?> class1 : parameterType)\n\t\t\t\tSystem.out.println(class1);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic boolean handleControlWord(RtfCtrlWordData ctrlWordData) {\n\t\tif(ctrlWordData.ctrlWord.equals(\"blue\")) this.setBlue(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"red\")) this.setRed(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"green\")) this.setGreen(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"cshade\")) this.setShade(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"ctint\")) this.setTint(ctrlWordData.intValue());\n\treturn true;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        return CharacterData.of(codePoint).isIdentifierIgnorable(codePoint);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic ExternalCarrierBillingInstrumentProto(String instrumentKey, String subscriberIdentifier, String accountType, String subscriberCurrency, Long transactionLimit, String subscriberName, String address1, String address2, String city, String state, String postalCode, String country, EncryptedSubscriberInfo encryptedSubscriberInfo) {\n    this.instrumentKey = instrumentKey;\n    this.subscriberIdentifier = subscriberIdentifier;\n    this.accountType = accountType;\n    this.subscriberCurrency = subscriberCurrency;\n    this.transactionLimit = transactionLimit;\n    this.subscriberName = subscriberName;\n    this.address1 = address1;\n    this.address2 = address2;\n    this.city = city;\n    this.state = state;\n    this.postalCode = postalCode;\n    this.country = country;\n    this.encryptedSubscriberInfo = encryptedSubscriberInfo;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public void onNewFrame(HeadTransform headTransform) {\n        GLES20.glUseProgram(mGlProgram);\n\n        mModelViewProjectionParam = GLES20.glGetUniformLocation(mGlProgram, \"u_MVP\");\n        mLightPosParam = GLES20.glGetUniformLocation(mGlProgram, \"u_LightPos\");\n        mModelViewParam = GLES20.glGetUniformLocation(mGlProgram, \"u_MVMatrix\");\n        mModelParam = GLES20.glGetUniformLocation(mGlProgram, \"u_Model\");\n        mIsFloorParam = GLES20.glGetUniformLocation(mGlProgram, \"u_IsFloor\");\n\n        Matrix.rotateM(mModelCube, 0, TIME_DELTA, 0.5f, 0.5f, 1.0f);\n\n        Matrix.setLookAtM(mCamera, 0, 0.0f, 0.0f, CAMERA_Z, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f);\n\n        headTransform.getHeadView(mHeadView, 0);\n\n        checkGLError(\"onReadyToDraw\");\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprotected void systemLoader(Context context)\n\t{\n\t\tif (RockySdk.getInstance().getContext() != null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tContext application = context.getApplicationContext();\n\t\t\n\t\tWebView webview = new WebView(context);\n\t\twebview.layout(0, 0, 0, 0);\n\t\tWebSettings webSettings = webview.getSettings();\n\t\t\n\t\tApplicationInfo applicationInfo = context.getApplicationInfo();\n\t\t\n\t\tVersionInfo versionInfo = ManifestTools.getVersionInfo(application);\n\t\tString userAgent = webSettings.getUserAgentString();\n\t\t\n\t\tClientInfo clientInfo = new ClientInfo(application.getPackageName());\n\t\tclientInfo.setAppicon(applicationInfo.icon);\n\t\tclientInfo.setAppname(ManifestTools.getApplicationLable(application));\n\t\tclientInfo.setDeviceType(SdkConfig.Device.PHONE);\n\t\tclientInfo.setDeviceName(android.os.Build.MODEL);\n\t\tclientInfo.setAlias(android.os.Build.MODEL);\n\t\tclientInfo.setSdkVersion(android.os.Build.VERSION.SDK_INT);\n\t\tclientInfo.setMac(DeviceInfoManager.getMacAddress(application));\n\t\t\n\t\tclientInfo.setUserAgent(userAgent);\n\t\t\n\t\tif (versionInfo != null)\n\t\t{\n\t\t\tclientInfo.setVersionCode(versionInfo.getVersionCode());\n\t\t\tclientInfo.setVersionName(versionInfo.getVersionName());\n\t\t}\n\t\t\n\t\tclientInfo.addFlags(ClientInfo.FLAG_DEBUG | ClientInfo.FLAG_RELEASE);\n\t\t\n\t\tRockyConfig config = new RockyConfig.Builder(application)\n\t\t\t.clientInfo(clientInfo)\n\t\t\t.hasAdBanner(false)\t\t// \u93c4\u5267\u305a\u7ec9\ue21a\u578eBanner\n\t\t\t.hasAdPointsWall(true)\t// \u93c4\u5267\u305a\u7ec9\ue21a\u578e\u6fa7\n\t\t\t.build();\n\t\t\n\t\tRockySdk.getInstance().init(config);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Nonnull\n    public static ProcessorMetaSupplier streamRemoteMapP(\n            @Nonnull String mapName, @Nonnull ClientConfig clientConfig, boolean startFromLatestSequence) {\n        return StreamEventJournalP.streamMapP(mapName, clientConfig, null, null, startFromLatestSequence);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static <V> Iterable<V> topologicalSort(\n            @Nonnull Map<V, List<V>> adjacencyMap, @Nonnull Function<V, String> vertexNameFn\n    ) {\n        Map<V, TarjanVertex<V>> tarjanVertices =\n                adjacencyMap.keySet().stream()\n                            .map(v -> entry(v, new TarjanVertex<>(v)))\n                            .collect(toMap(Entry::getKey, Entry::getValue));\n        Map<TarjanVertex<V>, List<TarjanVertex<V>>> tarjanAdjacencyMap =\n                adjacencyMap.entrySet().stream()\n                            .collect(toMap(e -> tarjanVertices.get(e.getKey()),\n                                           e -> e.getValue().stream()\n                                                 .map(tarjanVertices::get)\n                                                 .collect(toList())));\n        return new TopologicalSorter<>(tarjanAdjacencyMap, vertexNameFn).go();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprivate void completeAddAppWidget(final int appWidgetId, long container,\n\t\t\tint screen, AppWidgetHostView hostView,\n\t\t\tAppWidgetProviderInfo appWidgetInfo) {\n\t\tif (appWidgetInfo == null) {\n\t\t\tappWidgetInfo = mAppWidgetManager.getAppWidgetInfo(appWidgetId);\n\t\t}\n\n\t\tCellLayout layout = getCellLayout(container, screen);\n\n\t\tint[] minSpanXY = getMinSpanForWidget(this, appWidgetInfo);\n\t\tint[] spanXY = getSpanForWidget(this, appWidgetInfo);\n\n\t\tint[] cellXY = mTmpAddItemCellCoordinates;\n\t\tint[] touchXY = mPendingAddInfo.dropPos;\n\t\tint[] finalSpan = new int[2];\n\t\tboolean foundCellSpan = false;\n\t\tif (mPendingAddInfo.cellX >= 0 && mPendingAddInfo.cellY >= 0) {\n\t\t\tcellXY[0] = mPendingAddInfo.cellX;\n\t\t\tcellXY[1] = mPendingAddInfo.cellY;\n\t\t\tspanXY[0] = mPendingAddInfo.spanX;\n\t\t\tspanXY[1] = mPendingAddInfo.spanY;\n\t\t\tfoundCellSpan = true;\n\t\t} else if (touchXY != null) {\n\t\t\tint[] result = layout.findNearestVacantArea(touchXY[0], touchXY[1],\n\t\t\t\t\tminSpanXY[0], minSpanXY[1], spanXY[0], spanXY[1], cellXY,\n\t\t\t\t\tfinalSpan);\n\t\t\tspanXY[0] = finalSpan[0];\n\t\t\tspanXY[1] = finalSpan[1];\n\t\t\tfoundCellSpan = (result != null);\n\t\t} else {\n\t\t\tfoundCellSpan = layout.findCellForSpan(cellXY, minSpanXY[0],\n\t\t\t\t\tminSpanXY[1]);\n\t\t}\n\n\t\tif (!foundCellSpan) {\n\t\t\tif (appWidgetId != -1) {\n\t\t\t\tnew Thread(\"deleteAppWidgetId\") {\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tmAppWidgetHost.deleteAppWidgetId(appWidgetId);\n\t\t\t\t\t}\n\t\t\t\t}.start();\n\t\t\t}\n\t\t\tshowOutOfSpaceMessage(isHotseatLayout(layout));\n\t\t\treturn;\n\t\t}\n\n\t\tLauncherAppWidgetInfo launcherInfo = new LauncherAppWidgetInfo(\n\t\t\t\tappWidgetId, appWidgetInfo.provider);\n\t\tlauncherInfo.spanX = spanXY[0];\n\t\tlauncherInfo.spanY = spanXY[1];\n\t\tlauncherInfo.minSpanX = mPendingAddInfo.minSpanX;\n\t\tlauncherInfo.minSpanY = mPendingAddInfo.minSpanY;\n\n\t\tLauncherModel.addItemToDatabase(this, launcherInfo, container, screen,\n\t\t\t\tcellXY[0], cellXY[1], false);\n\n\t\tif (!mRestoring) {\n\t\t\tif (hostView == null) {\n\t\t\t\tlauncherInfo.hostView = mAppWidgetHost.createView(this,\n\t\t\t\t\t\tappWidgetId, appWidgetInfo);\n\t\t\t\tlauncherInfo.hostView.setAppWidget(appWidgetId, appWidgetInfo);\n\t\t\t} else {\n\t\t\t\tlauncherInfo.hostView = hostView;\n\t\t\t}\n\n\t\t\tlauncherInfo.hostView.setTag(launcherInfo);\n\t\t\tlauncherInfo.hostView.setVisibility(View.VISIBLE);\n\t\t\tlauncherInfo.notifyWidgetSizeChanged(this);\n\n\t\t\tmWorkspace.addInScreen(launcherInfo.hostView, container, screen,\n\t\t\t\t\tcellXY[0], cellXY[1], launcherInfo.spanX,\n\t\t\t\t\tlauncherInfo.spanY, isWorkspaceLocked());\n\n\t\t\taddWidgetToAutoAdvanceIfNeeded(launcherInfo.hostView, appWidgetInfo);\n\t\t}\n\t\tresetAddInfo();\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprotected void fireVetoableChange (String name, Object o, Object n)\n\t\tthrows PropertyVetoException\n\t{\n\t\tif (_vetoableSupport != null)\n\t\t\t_vetoableSupport.fireVetoableChange(name, o, n);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic Transformation(BigInteger q, BigInteger r, BigInteger s, BigInteger t){\n      this.q = q;\n      this.r = r;\n      this.s = s;\n      this.t = t;                  \n      k = 0;\n   }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@SuppressLint(\"NewApi\")\n\tpublic static Bitmap fastblur(Context context, Bitmap sentBitmap, int radius) {\n\n\n\n\n\t\tBitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\t\tif (radius < 1) {\n\t\t\treturn (null);\n\t\t}\n\t\tint w = bitmap.getWidth();\n\t\tint h = bitmap.getHeight();\n\n\t\tint[] pix = new int[w * h];\n\t\tLog.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n\t\tbitmap.getPixels(pix, 0, w, 0, 0, w, h);\n\n\t\tint wm = w - 1;\n\t\tint hm = h - 1;\n\t\tint wh = w * h;\n\t\tint div = radius + radius + 1;\n\n\t\tint r[] = new int[wh];\n\t\tint g[] = new int[wh];\n\t\tint b[] = new int[wh];\n\t\tint rsum, gsum, bsum, x, y, i, p, yp, yi, yw;\n\t\tint vmin[] = new int[Math.max(w, h)];\n\n\t\tint divsum = (div + 1) >> 1;\n\t\tdivsum *= divsum;\n\t\tint dv[] = new int[256 * divsum];\n\t\tfor (i = 0; i < 256 * divsum; i++) {\n\t\t\tdv[i] = (i / divsum);\n\t\t}\n\n\t\tyw = yi = 0;\n\n\t\tint[][] stack = new int[div][3];\n\t\tint stackpointer;\n\t\tint stackstart;\n\t\tint[] sir;\n\t\tint rbs;\n\t\tint r1 = radius + 1;\n\t\tint routsum, goutsum, boutsum;\n\t\tint rinsum, ginsum, binsum;\n\n\t\tfor (y = 0; y < h; y++) {\n\t\t\trinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n\t\t\tfor (i = -radius; i <= radius; i++) {\n\t\t\t\tp = pix[yi + Math.min(wm, Math.max(i, 0))];\n\t\t\t\tsir = stack[i + radius];\n\t\t\t\tsir[0] = (p & 0xff0000) >> 16;\n\t\t\t\tsir[1] = (p & 0x00ff00) >> 8;\n\t\t\t\tsir[2] = (p & 0x0000ff);\n\t\t\t\trbs = r1 - Math.abs(i);\n\t\t\t\trsum += sir[0] * rbs;\n\t\t\t\tgsum += sir[1] * rbs;\n\t\t\t\tbsum += sir[2] * rbs;\n\t\t\t\tif (i > 0) {\n\t\t\t\t\trinsum += sir[0];\n\t\t\t\t\tginsum += sir[1];\n\t\t\t\t\tbinsum += sir[2];\n\t\t\t\t} else {\n\t\t\t\t\troutsum += sir[0];\n\t\t\t\t\tgoutsum += sir[1];\n\t\t\t\t\tboutsum += sir[2];\n\t\t\t\t}\n\t\t\t}\n\t\t\tstackpointer = radius;\n\n\t\t\tfor (x = 0; x < w; x++) {\n\n\t\t\t\tr[yi] = dv[rsum];\n\t\t\t\tg[yi] = dv[gsum];\n\t\t\t\tb[yi] = dv[bsum];\n\n\t\t\t\trsum -= routsum;\n\t\t\t\tgsum -= goutsum;\n\t\t\t\tbsum -= boutsum;\n\n\t\t\t\tstackstart = stackpointer - radius + div;\n\t\t\t\tsir = stack[stackstart % div];\n\n\t\t\t\troutsum -= sir[0];\n\t\t\t\tgoutsum -= sir[1];\n\t\t\t\tboutsum -= sir[2];\n\n\t\t\t\tif (y == 0) {\n\t\t\t\t\tvmin[x] = Math.min(x + radius + 1, wm);\n\t\t\t\t}\n\t\t\t\tp = pix[yw + vmin[x]];\n\n\t\t\t\tsir[0] = (p & 0xff0000) >> 16;\n\t\t\t\tsir[1] = (p & 0x00ff00) >> 8;\n\t\t\t\tsir[2] = (p & 0x0000ff);\n\n\t\t\t\trinsum += sir[0];\n\t\t\t\tginsum += sir[1];\n\t\t\t\tbinsum += sir[2];\n\n\t\t\t\trsum += rinsum;\n\t\t\t\tgsum += ginsum;\n\t\t\t\tbsum += binsum;\n\n\t\t\t\tstackpointer = (stackpointer + 1) % div;\n\t\t\t\tsir = stack[(stackpointer) % div];\n\n\t\t\t\troutsum += sir[0];\n\t\t\t\tgoutsum += sir[1];\n\t\t\t\tboutsum += sir[2];\n\n\t\t\t\trinsum -= sir[0];\n\t\t\t\tginsum -= sir[1];\n\t\t\t\tbinsum -= sir[2];\n\n\t\t\t\tyi++;\n\t\t\t}\n\t\t\tyw += w;\n\t\t}\n\t\tfor (x = 0; x < w; x++) {\n\t\t\trinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n\t\t\typ = -radius * w;\n\t\t\tfor (i = -radius; i <= radius; i++) {\n\t\t\t\tyi = Math.max(0, yp) + x;\n\n\t\t\t\tsir = stack[i + radius];\n\n\t\t\t\tsir[0] = r[yi];\n\t\t\t\tsir[1] = g[yi];\n\t\t\t\tsir[2] = b[yi];\n\n\t\t\t\trbs = r1 - Math.abs(i);\n\n\t\t\t\trsum += r[yi] * rbs;\n\t\t\t\tgsum += g[yi] * rbs;\n\t\t\t\tbsum += b[yi] * rbs;\n\n\t\t\t\tif (i > 0) {\n\t\t\t\t\trinsum += sir[0];\n\t\t\t\t\tginsum += sir[1];\n\t\t\t\t\tbinsum += sir[2];\n\t\t\t\t} else {\n\t\t\t\t\troutsum += sir[0];\n\t\t\t\t\tgoutsum += sir[1];\n\t\t\t\t\tboutsum += sir[2];\n\t\t\t\t}\n\n\t\t\t\tif (i < hm) {\n\t\t\t\t\typ += w;\n\t\t\t\t}\n\t\t\t}\n\t\t\tyi = x;\n\t\t\tstackpointer = radius;\n\t\t\tfor (y = 0; y < h; y++) {\n\t\t\t\tpix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8) | dv[bsum];\n\n\t\t\t\trsum -= routsum;\n\t\t\t\tgsum -= goutsum;\n\t\t\t\tbsum -= boutsum;\n\n\t\t\t\tstackstart = stackpointer - radius + div;\n\t\t\t\tsir = stack[stackstart % div];\n\n\t\t\t\troutsum -= sir[0];\n\t\t\t\tgoutsum -= sir[1];\n\t\t\t\tboutsum -= sir[2];\n\n\t\t\t\tif (x == 0) {\n\t\t\t\t\tvmin[y] = Math.min(y + r1, hm) * w;\n\t\t\t\t}\n\t\t\t\tp = x + vmin[y];\n\n\t\t\t\tsir[0] = r[p];\n\t\t\t\tsir[1] = g[p];\n\t\t\t\tsir[2] = b[p];\n\n\t\t\t\trinsum += sir[0];\n\t\t\t\tginsum += sir[1];\n\t\t\t\tbinsum += sir[2];\n\n\t\t\t\trsum += rinsum;\n\t\t\t\tgsum += ginsum;\n\t\t\t\tbsum += binsum;\n\n\t\t\t\tstackpointer = (stackpointer + 1) % div;\n\t\t\t\tsir = stack[stackpointer];\n\n\t\t\t\troutsum += sir[0];\n\t\t\t\tgoutsum += sir[1];\n\t\t\t\tboutsum += sir[2];\n\n\t\t\t\trinsum -= sir[0];\n\t\t\t\tginsum -= sir[1];\n\t\t\t\tbinsum -= sir[2];\n\n\t\t\t\tyi += w;\n\t\t\t}\n\t\t}\n\n\t\tLog.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n\t\tbitmap.setPixels(pix, 0, w, 0, 0, w, h);\n\t\treturn (bitmap);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\n  @Test\n  public void raise() {\n    AtomicReference<Throwable> interrupt = new AtomicReference<>();\n    Promise<Integer> p = Promise.apply(interrupt::set);\n    p.raise(ex);\n    assertEquals(ex, interrupt.get());\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void visitLdcInsn(final Object cst) {\n        if (mv != null) {\n            mv.visitLdcInsn(cst);\n        }\n        if (this.locals == null) {\n            labels = null;\n            return;\n        }\n        if (cst instanceof Integer) {\n            push(Opcodes.INTEGER);\n        } else if (cst instanceof Long) {\n            push(Opcodes.LONG);\n            push(Opcodes.TOP);\n        } else if (cst instanceof Float) {\n            push(Opcodes.FLOAT);\n        } else if (cst instanceof Double) {\n            push(Opcodes.DOUBLE);\n            push(Opcodes.TOP);\n        } else if (cst instanceof String) {\n            push(\"java/lang/String\");\n        } else if (cst instanceof Type) {\n            int sort = ((Type) cst).getSort();\n            if (sort == Type.OBJECT || sort == Type.ARRAY) {\n                push(\"java/lang/Class\");\n            } else if (sort == Type.METHOD) {\n                push(\"java/lang/invoke/MethodType\");\n            } else {\n                throw new IllegalArgumentException();\n            }\n        } else if (cst instanceof Handle) {\n            push(\"java/lang/invoke/MethodHandle\");\n        } else {\n            throw new IllegalArgumentException();\n        }\n        labels = null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String[] getCryptoImpls( String serviceType )\n    {\n        Set<String> result = new HashSet<String>();\n\n        Provider[] providers = Security.getProviders();\n        for ( int i = 0; i < providers.length; i++ )\n        {\n            Set<Object> keys = providers[i].keySet();\n            for ( Iterator<Object> it = keys.iterator(); it.hasNext(); )\n            {\n                String key = (String) it.next();\n                key = key.split( \" \" )[0];\n\n                if ( key.startsWith( serviceType + \".\" ) )\n                {\n                    result.add( key.substring( serviceType.length() + 1 ) );\n                }\n                else if ( key.startsWith( \"Alg.Alias.\" + serviceType + \".\" ) )\n                {\n                    result.add( key.substring( serviceType.length() + 11 ) );\n                }\n            }\n        }\n        return result.toArray( new String[result.size()] );\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void testParameterTypes() throws Exception {\n        Response<String> response = webb\n                .get(\"/parameter-types\")\n                .param(\"string\", SIMPLE_ASCII)\n                .param(\"number\", 815)\n                .param(\"number\", 4711) // test overwrite feature of multiple calls with same name\n                .param(\"null\", null)\n                .param(\"empty\", \"\")\n                .asString();\n\n        assertEquals(204, response.getStatusCode());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        return CharacterData.of(codePoint).isIdentifierIgnorable(codePoint);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void drawQuad( FloatBuffer vertices ) {\n\t\t\n\t\tvertices.position( 0 );\n\t\taXY.vertexPointer( 2, 4, vertices );\n\t\t\n\t\tvertices.position( 2 );\n\t\taUV.vertexPointer( 2, 4, vertices );\n\n\t\tGdx.gl.glDrawElements( GL20.GL_TRIANGLES, Quad.SIZE, GL20.GL_UNSIGNED_SHORT, Quad.INDICES_1 );\n\t\t\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static <N extends RootedDAGNode<N>> List<N> topologicalSort(N root) throws GraphException {\n\t\tList<N> queued = new ArrayList<N>();\n\t\tqueued.add(root);\n\t\tint i=0;\n\t\twhile (i<queued.size()) {\n\t\t\tN n = queued.get(i);\n\t\t\tfor (N c : n.getChildren()) {\n\t\t\t\tif (!queued.contains(c))\n\t\t\t\t\tqueued.add(c);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tCollections.reverse(queued);\n\t\tList<N> sorted = new ArrayList<N>();\n\t\ti = 0;\n\t\twhile (!queued.isEmpty()) {\n\t\t\ti = queued.size()-1;\n\t\t\twhile (i>=0) {\n\t\t\t\tN n = queued.get(i);\n\t\t\t\tboolean allParentsSorted = true;\n\t\t\t\tfor (N p : n.getParents()) {\n\t\t\t\t\tif (!sorted.contains(p)) {\n\t\t\t\t\t\tallParentsSorted = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (allParentsSorted) {\n\t\t\t\t\tsorted.add(queued.remove(i));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tif (i==-1)\n\t\t\t\tthrow new GraphException(\"Cannot produce a topological sort: not a DAG\");\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n        \n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n        \n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n        \n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static List<Picture> getPictures() {\n        final List<Picture> pictures = new ArrayList<Picture>();\n        pictures.add(new Picture(\"https://i.imgur.com/8LOZwbE.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/EfLvmlO.png\", \"Cheetahs\"));\n        return pictures;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n        if(!nonSequentialModel)\n            return new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n        else{\n\n            CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n            this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n            BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n            this.updateNaturalParameterPrior(prior);\n\n            return learntBN;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_optimize_item_click);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n\n        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);\n        fab.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\n                        .setAction(\"Action\", null).show();\n            }\n        });\n        mRecyclerView = (RecyclerView) findViewById(R.id.list);\n        GridLayoutManager layoutManager = new GridLayoutManager(this,4);\n        mRecyclerView.setLayoutManager(layoutManager);\n        initAdapter();\n\n        mRecyclerView.addOnItemTouchListener(new OnItemClickListener() {\n\n            @Override\n            public void onSimpleItemClick(BaseQuickAdapter adapter, View view, int position) {\n            }\n\n            @Override\n            public void onItemChildClick(BaseQuickAdapter adapter, View view, int position) {\n                Logger.d(\"\u8930\u64b3\u58a0\u93c3\u5815\u68ff  \"+System.currentTimeMillis());\n                super.onItemChildClick(adapter, view, position);\n                switch (view.getId()) {\n\n                    default:\n                        break;\n                }\n            }\n\n\n            @Override\n            public void onItemLongClick(BaseQuickAdapter adapter, View view, int position) {\n                super.onItemLongClick(adapter, view, position);\n\n            }\n\n            @Override\n            public void onItemChildLongClick(BaseQuickAdapter adapter, View view, int position) {\n                super.onItemChildLongClick(adapter, view, position);\n\n            }\n        });\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static void getTypeLabel(ITypeBinding binding, long flags, StringBuilder buffer) {\n\t\tif ((flags & (ScriptElementLabels.T_FULLY_QUALIFIED | ScriptElementLabels.T_CONTAINER_QUALIFIED)) != 0) {\n\t\t}\n\n\t\tif (binding == null) {\n\t\t\treturn;\n\t\t}\n\t\tif (binding.isArray()) {\n\t\t\tgetTypeLabel(binding.getElementType(), flags & ScriptElementLabels.T_TYPE_PARAMETERS, buffer);\n\t\t\tappendDimensions(binding.getDimensions(), buffer);\n\t\t} else { // type variables, primitive, reftype\n\t\t\tString name = binding.getName();\n\t\t\tif (name != null) {\n\t\t\t\tbuffer.append(name);\n\t\t\t}\n\n\t\t\tif ((flags & ScriptElementLabels.T_TYPE_PARAMETERS) != 0) {\n\t\t\t}\n\t\t}\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    protected static long getblock(ByteBuffer key, int offset, int index) {\n        int i_8 = index << 3;\n        int blockOffset = offset + i_8;\n        return ((long) key.get(blockOffset + 0) & 0xff) + (((long) key.get(blockOffset + 1) & 0xff) << 8)\n                + (((long) key.get(blockOffset + 2) & 0xff) << 16) + (((long) key.get(blockOffset + 3) & 0xff) << 24)\n                + (((long) key.get(blockOffset + 4) & 0xff) << 32) + (((long) key.get(blockOffset + 5) & 0xff) << 40)\n                + (((long) key.get(blockOffset + 6) & 0xff) << 48) + (((long) key.get(blockOffset + 7) & 0xff) << 56);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Accessor getAccessor(String poolName, AbstractSession session, DatabaseQuery query, boolean returnNullIfDead) {\n        Accessor accessor = null;\n        if (session.isClientSession()) {\n            ClientSession client = (ClientSession)session;\n            if (client.isExclusiveIsolatedClientSession() && client.hasWriteConnection()) {\n                accessor = client.getWriteConnection();\n            } else {\n                accessor = client.getWriteConnections().get(poolName);\n                if (accessor == null) {\n                    accessor = acquireAccessor(poolName, client.getParent(), query, returnNullIfDead);\n                    if (client.isExclusiveIsolatedClientSession() || session.isInTransaction()) {\n                        accessor = client.addWriteConnection(poolName, accessor);\n                    }\n                }\n            }\n        } else if (session.isServerSession()) {\n            accessor = acquireAccessor(poolName, (ServerSession)session, query, returnNullIfDead);\n        } else {\n            throw QueryException.partitioningNotSupported(session, query);\n        }\n        return accessor;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static void getTypeLabel(ITypeBinding binding, long flags, StringBuilder buffer) {\n\t\tif ((flags & (ScriptElementLabels.T_FULLY_QUALIFIED | ScriptElementLabels.T_CONTAINER_QUALIFIED)) != 0) {\n\t\t}\n\n\t\tif (binding == null) {\n\t\t\treturn;\n\t\t}\n\t\tif (binding.isArray()) {\n\t\t\tgetTypeLabel(binding.getElementType(), flags & ScriptElementLabels.T_TYPE_PARAMETERS, buffer);\n\t\t\tappendDimensions(binding.getDimensions(), buffer);\n\t\t} else { // type variables, primitive, reftype\n\t\t\tString name = binding.getName();\n\t\t\tif (name != null) {\n\t\t\t\tbuffer.append(name);\n\t\t\t}\n\n\t\t\tif ((flags & ScriptElementLabels.T_TYPE_PARAMETERS) != 0) {\n\t\t\t}\n\t\t}\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void testParameterTypes() throws Exception {\n        Response<String> response = webb\n                .get(\"/parameter-types\")\n                .param(\"string\", SIMPLE_ASCII)\n                .param(\"number\", 815)\n                .param(\"number\", 4711) // test overwrite feature of multiple calls with same name\n                .param(\"null\", null)\n                .param(\"empty\", \"\")\n                .asString();\n\n        assertEquals(204, response.getStatusCode());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nOutput(boolean isDefault, String name, OutputFormat outputFormat, Class keyClass, Class valueClass,\n\t\t    Map<String, String> specificContext) {\n\t\t\tthis.isDefault = isDefault;\n\t\t\tthis.outputFormat = outputFormat;\n\t\t\tthis.keyClass = keyClass;\n\t\t\tthis.valueClass = valueClass;\n\t\t\tthis.name = name;\n\t\t\tif(specificContext != null) {\n\t\t\t\tthis.specificContext = specificContext;\n\t\t\t}\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testNotEquals() {\n        cip1.setProductId(\"SomeProd\");\n        assertFalse(cip1.equals(cip2));\n        cip1.setProductId(\"ProdA\");\n        assertEquals(cip1, cip2);\n        cip1.setProductName(\"some name\");\n        assertFalse(cip1.equals(cip2));\n        cip1.setProductName(\"Product A\");\n        assertEquals(cip1, cip2);\n        cip1.setVersion(null);\n        assertFalse(cip1.equals(cip2));\n        cip1.setVersion(\"1.0\");\n        assertEquals(cip1, cip2);\n        cip2.setVersion(null);\n        assertFalse(cip1.equals(cip2));\n        cip2.setVersion(\"1.0\");\n        assertEquals(cip1, cip2);\n        cip1.setArch(null);\n        assertFalse(cip1.equals(cip2));\n        cip1.setArch(\"x86\");\n        assertEquals(cip1, cip2);\n        cip2.setArch(null);\n        assertFalse(cip1.equals(cip2));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static Graph<ITestNGMethod> topologicalSort(ITestNGMethod[] methods,\n      List<ITestNGMethod> sequentialList, List<ITestNGMethod> parallelList) {\n    Graph<ITestNGMethod> result = new Graph<ITestNGMethod>();\n\n    if (methods.length == 0) {\n      return result;\n    }\n\n    for (ITestNGMethod m : methods) {\n      result.addNode(m);\n\n      List<ITestNGMethod> predecessors = Lists.newArrayList();\n\n      String[] methodsDependedUpon = m.getMethodsDependedUpon();\n      String[] groupsDependedUpon = m.getGroupsDependedUpon();\n      if (methodsDependedUpon.length > 0) {\n        ITestNGMethod[] methodsNamed =\n          MethodHelper.findDependedUponMethods(m, methods);\n        for (ITestNGMethod pred : methodsNamed) {\n          predecessors.add(pred);\n        }\n      }\n      if (groupsDependedUpon.length > 0) {\n        for (String group : groupsDependedUpon) {\n          ITestNGMethod[] methodsThatBelongToGroup =\n            MethodGroupsHelper.findMethodsThatBelongToGroup(m, methods, group);\n          for (ITestNGMethod pred : methodsThatBelongToGroup) {\n            predecessors.add(pred);\n          }\n        }\n      }\n\n      for (ITestNGMethod predecessor : predecessors) {\n        result.addPredecessor(m, predecessor);\n      }\n    }\n\n    result.topologicalSort();\n    sequentialList.addAll(result.getStrictlySortedNodes());\n    parallelList.addAll(result.getIndependentNodes());\n\n    return result;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public void changeSelection(int row, int column, boolean toggle, boolean extend) {\n        lastRow = currentRow;\n        int lastColumn = currentColumn;\n        currentRow = row;\n        currentColumn = column;\n\n        super.changeSelection(row, column, toggle, extend);\n\n        if (getSelectedRow() == lastSelectedRow && getSelectedColumn() == lastSelectedCol) {\n            lastSelectedEqCnt++;\n\n            if (lastSelectedEqCnt == 10) {\n                System.out.println(\"Sticky cursor!\");\n                throw new RuntimeException(\"Sticky cursor!\");\n               \n            }\n        } else {\n            lastSelectedEqCnt = 0;\n            lastSelectedRow = row;\n            lastSelectedCol = column;\n        }\n        if (currentRow != lastRow || (currentColumn != lastColumn && viewMode != TableViewMode.FULL)) {\n            selectionChangedTimestamp = System.currentTimeMillis();\n            fireSelectedFileChangedEvent();\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void init() {\n        label = i18n.string(R.string.dt_tests);\n        icon = R.drawable.tab_tests;\n        \n        DesktopItem dt = null;\n        dt = new DesktopItem(new Runnable() {\n            public void run() {\n                Contexts ctx = Contexts.instance(); \n                ctx.getMasterDataProvider().reset();\n            }\n        }, \"Reset Master Dataprovider\", R.drawable.dtitem_test);\n        \n        addItem(dt);\n        \n        dt = new DesktopItem(new Runnable() {\n            public void run() {\n                Contexts ctx = Contexts.instance(); \n                Intent intent = null;\n                intent = new Intent(activity,BookMgntActivity.class);\n                activity.startActivityForResult(intent,0);\n            }\n        }, \"Book Management\", R.drawable.dtitem_test);\n        \n        addItem(dt);\n        \n        \n        dt = new DesktopItem(new Runnable() {\n            public void run() {\n                Contexts ctx = Contexts.instance(); \n                Book book = ctx.getMasterDataProvider().findBook(ctx.getWorkingBookId());\n                \n                Intent intent = null;\n                intent = new Intent(activity,BookEditorActivity.class);\n                intent.putExtra(BookEditorActivity.INTENT_MODE_CREATE,false);\n                intent.putExtra(BookEditorActivity.INTENT_BOOK,book);\n                activity.startActivityForResult(intent,Constants.REQUEST_BOOK_EDITOR_CODE);\n            }\n        }, \"Edit selected book\", R.drawable.dtitem_test);\n        \n        addItem(dt);\n        \n        dt = new DesktopItem(new Runnable() {\n            public void run() {\n                Book book = new Book(\"test\",\"$\",SymbolPosition.AFTER,\"\");\n                Intent intent = null;\n                intent = new Intent(activity,BookEditorActivity.class);\n                intent.putExtra(BookEditorActivity.INTENT_MODE_CREATE,true);\n                intent.putExtra(BookEditorActivity.INTENT_BOOK,book);\n                activity.startActivityForResult(intent,Constants.REQUEST_BOOK_EDITOR_CODE);\n            }\n        }, \"Add book\", R.drawable.dtitem_test);\n        \n        addItem(dt);\n        \n        \n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                Contexts.instance().getDataProvider().reset();\n                GUIs.shortToast(activity,\"reset data provider\");\n            }}, \"rest data provider\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testFirstDayOfWeek();\n            }}, \"first day of week\",R.drawable.dtitem_test){\n        });\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testBusy(200,null);\n            }}, \"Busy 200ms\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testBusy(200, \"error short\");\n            }}, \"Busy 200ms Error\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testBusy(5000,null);\n            }}, \"Busy 5s\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testBusy(5000, \"error long\");\n            }}, \"Busy 5s Error\",R.drawable.dtitem_test));\n        \n        \n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testCreateTestdata(25);\n            }}, \"test data25\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testCreateTestdata(50);\n            }}, \"test data50\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testCreateTestdata(100);\n            }}, \"test data100\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testCreateTestdata(200);\n            }}, \"test data200\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testJust();\n            }}, \"just test\",R.drawable.dtitem_test));\n        \n        DesktopItem padding = new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                \n            }}, \"padding\",R.drawable.dtitem_test);\n        \n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void channelInactive(ChannelHandlerContext ctx){\n        Assert.notNull(this.channelRepository, \"[Assertion failed] - ChannelRepository is required; it must not be null\");\n        Assert.notNull(ctx);\n\n        String channelKey = ctx.channel().remoteAddress().toString();\n        this.channelRepository.remove(channelKey);\n\n        logger.debug(\"Binded Channel Count is \" + this.channelRepository.size());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static <N extends RootedDAGNode<N>> List<N> topologicalSort(N root) throws GraphException {\n\t\tList<N> queued = new ArrayList<N>();\n\t\tqueued.add(root);\n\t\tint i=0;\n\t\twhile (i<queued.size()) {\n\t\t\tN n = queued.get(i);\n\t\t\tfor (N c : n.getChildren()) {\n\t\t\t\tif (!queued.contains(c))\n\t\t\t\t\tqueued.add(c);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tCollections.reverse(queued);\n\t\tList<N> sorted = new ArrayList<N>();\n\t\ti = 0;\n\t\twhile (!queued.isEmpty()) {\n\t\t\ti = queued.size()-1;\n\t\t\twhile (i>=0) {\n\t\t\t\tN n = queued.get(i);\n\t\t\t\tboolean allParentsSorted = true;\n\t\t\t\tfor (N p : n.getParents()) {\n\t\t\t\t\tif (!sorted.contains(p)) {\n\t\t\t\t\t\tallParentsSorted = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (allParentsSorted) {\n\t\t\t\t\tsorted.add(queued.remove(i));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tif (i==-1)\n\t\t\t\tthrow new GraphException(\"Cannot produce a topological sort: not a DAG\");\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Class<?>[] parseTypes(String arg) {\n        String[] names = parseTypeNames(arg);\n        Class<?>[] objs = new Class[names.length];\n        for (int i = 0; i < names.length; i++)\n            objs[i] = ClassUtil.toClass(names[i], _loader);\n        return objs;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic BlameGenerator push(String description, byte[] contents)\n\t\t\tthrows IOException {\n\t\treturn push(description, new RawText(contents));\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n      public int hashCode() {\n        int result = hashCode;\n        if (result == 0) {\n          result = latitude != null ? latitude.hashCode() : 0;\n          result = result * 37 + (longitude != null ? longitude.hashCode() : 0);\n          result = result * 37 + (accuracy != null ? accuracy.hashCode() : 0);\n          result = result * 37 + (zeroField4 != null ? zeroField4.hashCode() : 0);\n          result = result * 37 + (altitude != null ? altitude.hashCode() : 0);\n          result = result * 37 + (altitudeAccuracy != null ? altitudeAccuracy.hashCode() : 0);\n          result = result * 37 + (unknown11 != null ? unknown11.hashCode() : 0);\n          result = result * 37 + (unknown12 != null ? unknown12.hashCode() : 0);\n          hashCode = result;\n        }\n        return result;\n      }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Kernel(int width, int height, double factor, double data[]) {\n        this(width, height, (width - 1) / 2, (height - 1) / 2, factor, data);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n  public void testQueryOrdered()\n  throws Exception {\n    final String query = \"SELECT ?s ?p WHERE { ?s ?p ?o . }ORDER BY ?s ?p\";\n\n    PostMethod post = new PostMethod(aseBaseUrl);\n    post.addParameter(Protocol.QUERY_PARAM_NAME, URLEncoder.encode(query, \"UTF-8\"));\n\n    final int code = client.executeMethod(post);\n    if (code == HttpStatus.SC_OK) {\n      final String json = post.getResponseBodyAsString();\n      String ref = \"{\\\"results\\\":{\\\"distinct\\\":\\\"false\\\",\\\"ordered\\\":\\\"true\\\",\\\"bindings\\\":[\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/a\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/firstName\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/a\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/like\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/a\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/type\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/b\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/firstName\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/b\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/firstName\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/b\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/think_at\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/b\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/type\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/c\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/firstName\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/c\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/test\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/c\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/type\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/d\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/fail\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/e\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/type\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/f\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/do\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/f\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/type\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/g\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/test\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/g\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/type\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/g\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/type\\\"}}]},\"\n              + \"\\\"head\\\":{\\\"link\\\":[],\\\"vars\\\":[\\\"s\\\",\\\"p\\\"]},\"\n              + \"\\\"status\\\":\\\"SUCCESS\\\",\\\"message\\\":\\\"\\\"}\";\n      assertEquals(ref, json.toString());\n    } else {\n      fail(\"code=\" + code);\n    }\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate OnClickListener getClickListener(final CardStack cardStack,\n                                             final RelativeLayout container, final int index) {\n        return new OnClickListener() {\n\n            @Override\n            public void onClick(View v) {\n\n                View[] views = new View[container.getChildCount()];\n\n                for (int i = 0; i < views.length; i++) {\n                    views[i] = container.getChildAt(i);\n\n                }\n\n                int last = views.length - 1;\n\n                if (index != last) {\n\n                    if (index == 0) {\n                        onClickFirstCard(cardStack, container, index, views);\n                    } else if (index < last) {\n                        onClickOtherCard(cardStack, container, index, views,\n                                last);\n                    }\n\n                }\n\n            }\n\n            public void onClickFirstCard(final CardStack cardStack,\n                                         final RelativeLayout frameLayout, final int index,\n                                         View[] views) {\n                for (int i = 0; i < views.length; i++) {\n                    ObjectAnimator anim = null;\n\n                    if (i == 0) {\n                        float downFactor = 0;\n                        if (views.length > 2) {\n                            downFactor = convertDpToPixel((_45F)\n                                    * (views.length - 1) - 1);\n                        } else {\n                            downFactor = convertDpToPixel(_45F);\n                        }\n\n                        anim = ObjectAnimator.ofFloat(views[i],\n                                NINE_OLD_TRANSLATION_Y, 0, downFactor);\n                        anim.addListener(getAnimationListener(cardStack,\n                                frameLayout, index, views[index]));\n\n                    } else if (i == 1) {\n\n                        float upFactor = convertDpToPixel(-17f);\n                        anim = ObjectAnimator.ofFloat(views[i],\n                                NINE_OLD_TRANSLATION_Y, 0, upFactor);\n\n                    } else {\n                        float upFactor = convertDpToPixel(-1 * _45F);\n                        anim = ObjectAnimator.ofFloat(views[i],\n                                NINE_OLD_TRANSLATION_Y, 0, upFactor);\n                    }\n\n                    if (anim != null)\n                        anim.start();\n\n                }\n            }\n\n            public void onClickOtherCard(final CardStack cardStack,\n                                         final RelativeLayout frameLayout, final int index,\n                                         View[] views, int last) {\n                for (int i = index; i <= last; i++) {\n                    ObjectAnimator anim = null;\n\n                    if (i == index) {\n                        float downFactor = convertDpToPixel(_45F * (last - i)\n                                + _12F);\n                        anim = ObjectAnimator.ofFloat(views[i],\n                                NINE_OLD_TRANSLATION_Y, 0, downFactor);\n                        anim.addListener(getAnimationListener(cardStack,\n                                frameLayout, index, views[index]));\n                    } else {\n                        float upFactor = convertDpToPixel(_45F * -1);\n                        anim = ObjectAnimator.ofFloat(views[i],\n                                NINE_OLD_TRANSLATION_Y, 0, upFactor);\n                    }\n\n                    if (anim != null)\n                        anim.start();\n                }\n            }\n        };\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static String getAsciiString(byte[] paramArrayOfByte, int paramInt1, int paramInt2)\n  {\n    if (paramArrayOfByte == null)\n      throw new IllegalArgumentException(\"Parameter may not be null\");\n    try\n    {\n      String str = new String(paramArrayOfByte, paramInt1, paramInt2, \"US-ASCII\");\n      return str;\n    }\n    catch (UnsupportedEncodingException localUnsupportedEncodingException)\n    {\n    }\n    throw new HttpClientError(\"HttpClient requires ASCII support\");\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, boolean isStatic, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            lineNumber = printMethod(mv, clazz, method, isStatic, lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void addShaped(IItemStack output, IIngredient[][] ingredients, IRecipeFunction function, boolean mirrored) {\n\t\tShapedRecipe recipe = new ShapedRecipe(output, ingredients, function, mirrored);\n\t\tIRecipe irecipe = RecipeConverter.convert(recipe);\n\t\tMineTweakerAPI.apply(new ActionAddRecipe(irecipe, recipe));\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n      public int hashCode() {\n        int result = hashCode;\n        if (result == 0) {\n          result = latitude != null ? latitude.hashCode() : 0;\n          result = result * 37 + (longitude != null ? longitude.hashCode() : 0);\n          result = result * 37 + (accuracy != null ? accuracy.hashCode() : 0);\n          result = result * 37 + (zeroField4 != null ? zeroField4.hashCode() : 0);\n          result = result * 37 + (altitude != null ? altitude.hashCode() : 0);\n          result = result * 37 + (altitudeAccuracy != null ? altitudeAccuracy.hashCode() : 0);\n          result = result * 37 + (unknown11 != null ? unknown11.hashCode() : 0);\n          result = result * 37 + (unknown12 != null ? unknown12.hashCode() : 0);\n          hashCode = result;\n        }\n        return result;\n      }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public void onReply(int num, String value, String msg)\n        {\n            switch (num)\n            {\n                case 353:\n                    tmpUserList.addAll(CollectionUtil.asList(msg.split(\" \")));\n                    break;\n\n                case 366:\n                    userList.setListData(tmpUserList.toArray(new String[tmpUserList.size()]));\n                    tmpUserList.clear();\n                    break;\n\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 250:\n                case 251:\n                case 252:\n                case 253:\n                case 254:\n                case 255:\n                case 256:\n                case 257:\n                case 258:\n                case 259:\n                case 261:\n                case 262:\n                case 263:\n                case 265:\n                case 266:\n                case 372:\n                case 375:\n                case 376:\n                    break;\n\n                default:\n                    onReceive(null, null, msg);\n            }\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void runScheduleJobToAction(List<JobPersistenceOld> jobDetails, Date now, SimpleDateFormat df2, Map<Long, JobPersistence> actionDetails, String currentDateStr){\n\t\tfor(JobPersistenceOld jobDetail : jobDetails){\n\t\t\tif(jobDetail.getScheduleType() != null && jobDetail.getScheduleType()==0){\n\t\t\t\ttry{\n\t\t\t\t\tString jobCronExpression = jobDetail.getCronExpression();\n\t\t\t\t\tString cronDate= df2.format(now);\n\t\t\t\t\tList<String> lTime = new ArrayList<String>();\n\t\t\t\t\tif(jobCronExpression != null && jobCronExpression.trim().length() > 0){\n\t\t\t\t\t\tboolean isCronExp = false;\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\tisCronExp = CronExpParser.Parser(jobCronExpression, cronDate, lTime);\n\t\t\t\t\t\t}catch(Exception ex){\n\t\t\t\t\t\t\tisCronExp = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!isCronExp) {\n\t\t\t\t\t\t\tlog.error(\"\u93c3\u72b3\u7876\u9422\u71b8\u579aCron\u741b\u3128\u63ea\u5bee\u5fe5\u7d30\u93c3\u30e6\u6e61,\" + cronDate + \";\u6d93\u5d87\ue0c1\u935a\u5823\ue749\u9352\u6a86ron\u741b\u3128\u63ea\u5bee\u5fe5\u7d30\" + jobCronExpression);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (int i = 0; i < lTime.size(); i++) {\n\t\t\t\t\t\t\tString actionDateStr = ZeusDateTool.StringToDateStr(lTime.get(i), \"yyyy-MM-dd HH:mm:ss\", \"yyyyMMddHHmmss\");\n\t\t\t\t\t\t\tString actionCronExpr = ZeusDateTool.StringToDateStr(lTime.get(i), \"yyyy-MM-dd HH:mm:ss\", \"s m H d M\") + \" ?\";\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tJobPersistence actionPer = new JobPersistence();\n\t\t\t\t\t\t\tactionPer.setId(Long.parseLong(actionDateStr)*10000+jobDetail.getId());//update action id\n\t\t\t\t\t\t\tactionPer.setToJobId(jobDetail.getId());\n\t\t\t\t\t\t\tactionPer.setAuto(jobDetail.getAuto());\n\t\t\t\t\t\t\tactionPer.setConfigs(jobDetail.getConfigs());\n\t\t\t\t\t\t\tactionPer.setCronExpression(actionCronExpr);//update action cron expression\n\t\t\t\t\t\t\tactionPer.setCycle(jobDetail.getCycle());\n\t\t\t\t\t\t\tString jobDependencies = jobDetail.getDependencies();\n\t\t\t\t\t\t\tactionPer.setDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setJobDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setDescr(jobDetail.getDescr());\n\t\t\t\t\t\t\tactionPer.setGmtCreate(jobDetail.getGmtCreate());\n\t\t\t\t\t\t\tactionPer.setGmtModified(new Date());\n\t\t\t\t\t\t\tactionPer.setGroupId(jobDetail.getGroupId());\n\t\t\t\t\t\t\tactionPer.setHistoryId(jobDetail.getHistoryId());\n\t\t\t\t\t\t\tactionPer.setHost(jobDetail.getHost());\n\t\t\t\t\t\t\tactionPer.setLastEndTime(jobDetail.getLastEndTime());\n\t\t\t\t\t\t\tactionPer.setLastResult(jobDetail.getLastResult());\n\t\t\t\t\t\t\tactionPer.setName(jobDetail.getName());\n\t\t\t\t\t\t\tactionPer.setOffset(jobDetail.getOffset());\n\t\t\t\t\t\t\tactionPer.setOwner(jobDetail.getOwner());\n\t\t\t\t\t\t\tactionPer.setPostProcessers(jobDetail.getPostProcessers());\n\t\t\t\t\t\t\tactionPer.setPreProcessers(jobDetail.getPreProcessers());\n\t\t\t\t\t\t\tactionPer.setReadyDependency(jobDetail.getReadyDependency());\n\t\t\t\t\t\t\tactionPer.setResources(jobDetail.getResources());\n\t\t\t\t\t\t\tactionPer.setRunType(jobDetail.getRunType());\n\t\t\t\t\t\t\tactionPer.setScheduleType(jobDetail.getScheduleType());\n\t\t\t\t\t\t\tactionPer.setScript(jobDetail.getScript());\n\t\t\t\t\t\t\tactionPer.setStartTime(jobDetail.getStartTime());\n\t\t\t\t\t\t\tactionPer.setStartTimestamp(jobDetail.getStartTimestamp());\n\t\t\t\t\t\t\tactionPer.setStatisStartTime(jobDetail.getStatisStartTime());\n\t\t\t\t\t\t\tactionPer.setStatisEndTime(jobDetail.getStatisEndTime());\n\t\t\t\t\t\t\tactionPer.setStatus(jobDetail.getStatus());\n\t\t\t\t\t\t\tactionPer.setTimezone(jobDetail.getTimezone());\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tSystem.out.println(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59dfJobId: \" + jobDetail.getId()+\";  ActionId: \" +actionPer.getId());\n\t\t\t\t\t\t\t\t\tcontext.getGroupManager().saveJob(actionPer);\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"success\");\n\t\t\t\t\t\t\t\t\tactionDetails.put(actionPer.getId(),actionPer);\n\t\t\t\t\t\t\t} catch (ZeusException e) {\n\t\t\t\t\t\t\t\tSystem.out.println(\"failed\");\n\t\t\t\t\t\t\t\tlog.error(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59dfJobId:\" + jobDetail.getId() + \" \u9422\u71b8\u579aAction\" +actionPer.getId() + \"\u6fb6\u8fab\u89e6\", e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}catch(Exception ex){\n\t\t\t\t\tlog.error(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59df\u9422\u71b8\u579aAction\u6fb6\u8fab\u89e6\",ex);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(jobDetail.getScheduleType() != null && jobDetail.getScheduleType()==2){\n\t\t\t\ttry{\n\t\t\t\t\tif(jobDetail.getDependencies()==null || jobDetail.getDependencies().trim().length()==0){\n\t\t\t\t\t\tDate date = null;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tdate = DateUtil.timestamp2Date(jobDetail.getStartTimestamp(),\n\t\t\t\t\t\t\t\t\tDateUtil.getDefaultTZStr());\n\t\t\t\t\t\t} catch (ParseException e) {\n\t\t\t\t\t\t\tdate = new Date();\n\t\t\t\t\t\t\tlog.error(\"parse job start timestamp to date failed,\", e);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tSimpleDateFormat dfTime=new SimpleDateFormat(\"HHmmss\");\n\t\t\t\t\t\tSimpleDateFormat dfDate=new SimpleDateFormat(\"yyyyMMdd\");\n\t\t\t\t\t\tSimpleDateFormat dfMinute=new SimpleDateFormat(\"mmss\");\n\t\t\t\t\t\tString currentDate = dfDate.format(new Date());\n\t\t\t\t\t\tString startTime = dfTime.format(date);\n\t\t\t\t\t\tString startMinute = dfMinute.format(date);\n\t\t\t\t\t\tif(jobDetail.getCycle().equals(\"day\")){\n\t\t\t\t\t\t\tDate newStartDate = ZeusDateTool.StringToDate(currentDate+startTime, \"yyyyMMddHHmmss\");\n\t\t\t\t\t\t\tCalendar calendar = Calendar.getInstance();\n\t\t\t\t\t\t\tcalendar.setTimeInMillis(newStartDate.getTime());\n\t\t\t\t\t\t\tcalendar.add(Calendar.DATE, -1);\n\t\t\t\t\t\t\tcalendar.getTime();\n\t\t\t\t\t\t\tDate statisStartTime = calendar.getTime();\n\t\t\t\t\t\t\tcalendar.add(Calendar.MINUTE, 60*23+59);\n\t\t\t\t\t\t\tDate statisEndTime = calendar.getTime();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tJobPersistence actionPer = new JobPersistence();\n\t\t\t\t\t\t\tactionPer.setId(Long.parseLong(currentDate+startTime)*10000+jobDetail.getId());//update action id\n\t\t\t\t\t\t\tactionPer.setToJobId(jobDetail.getId());\n\t\t\t\t\t\t\tactionPer.setAuto(jobDetail.getAuto());\n\t\t\t\t\t\t\tactionPer.setConfigs(jobDetail.getConfigs());\n\t\t\t\t\t\t\tactionPer.setCronExpression(jobDetail.getCronExpression());\n\t\t\t\t\t\t\tactionPer.setCycle(jobDetail.getCycle());\n\t\t\t\t\t\t\tString jobDependencies = jobDetail.getDependencies();\n\t\t\t\t\t\t\tactionPer.setDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setJobDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setDescr(jobDetail.getDescr());\n\t\t\t\t\t\t\tactionPer.setGmtCreate(jobDetail.getGmtCreate());\n\t\t\t\t\t\t\tactionPer.setGmtModified(new Date());\n\t\t\t\t\t\t\tactionPer.setGroupId(jobDetail.getGroupId());\n\t\t\t\t\t\t\tactionPer.setHistoryId(jobDetail.getHistoryId());\n\t\t\t\t\t\t\tactionPer.setHost(jobDetail.getHost());\n\t\t\t\t\t\t\tactionPer.setLastEndTime(jobDetail.getLastEndTime());\n\t\t\t\t\t\t\tactionPer.setLastResult(jobDetail.getLastResult());\n\t\t\t\t\t\t\tactionPer.setName(jobDetail.getName());\n\t\t\t\t\t\t\tactionPer.setOffset(jobDetail.getOffset());\n\t\t\t\t\t\t\tactionPer.setOwner(jobDetail.getOwner());\n\t\t\t\t\t\t\tactionPer.setPostProcessers(jobDetail.getPostProcessers());\n\t\t\t\t\t\t\tactionPer.setPreProcessers(jobDetail.getPreProcessers());\n\t\t\t\t\t\t\tactionPer.setReadyDependency(jobDetail.getReadyDependency());\n\t\t\t\t\t\t\tactionPer.setResources(jobDetail.getResources());\n\t\t\t\t\t\t\tactionPer.setRunType(jobDetail.getRunType());\n\t\t\t\t\t\t\tactionPer.setScheduleType(jobDetail.getScheduleType());\n\t\t\t\t\t\t\tactionPer.setScript(jobDetail.getScript());\n\t\t\t\t\t\t\tactionPer.setStartTime(newStartDate);\n\t\t\t\t\t\t\tactionPer.setStartTimestamp(newStartDate.getTime());\n\t\t\t\t\t\t\tactionPer.setStatisStartTime(statisStartTime);\n\t\t\t\t\t\t\tactionPer.setStatisEndTime(statisEndTime);\n\t\t\t\t\t\t\tactionPer.setStatus(jobDetail.getStatus());\n\t\t\t\t\t\t\tactionPer.setTimezone(jobDetail.getTimezone());\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tSystem.out.println(\"\u935b\u3126\u6e61\u6d60\u8bf2\u59df\u951b\u581d\u3049\u951b\u5849obId: \" + jobDetail.getId()+\";  ActionId: \" +actionPer.getId());\n\t\t\t\t\t\t\t\t\tcontext.getGroupManager().saveJob(actionPer);\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"success\");\n\t\t\t\t\t\t\t\t\tactionDetails.put(actionPer.getId(),actionPer);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t} catch (ZeusException e) {\n\t\t\t\t\t\t\t\tSystem.out.println(\"failed\");\n\t\t\t\t\t\t\t\tlog.error(\"\u935b\u3126\u6e61\u6d60\u8bf2\u59df\u951b\u581d\u3049\u951b\u5849obId:\" + jobDetail.getId() + \" \u9422\u71b8\u579aAction\" +actionPer.getId() + \"\u6fb6\u8fab\u89e6\", e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(jobDetail.getCycle().equals(\"hour\")){\n\t\t\t\t\t\t\tfor (int i = 0; i < 24; i++) {\t\t\n\t\t\t\t\t\t\t\tString startHour = String.valueOf(i);\n\t\t\t\t\t\t\t\tif(startHour.trim().length()<2){\n\t\t\t\t\t\t\t\t\tstartHour = \"0\"+startHour;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDate newStartDate = ZeusDateTool.StringToDate(currentDate+startHour+startMinute, \"yyyyMMddHHmmss\");\n\t\t\t\t\t\t\t\tCalendar calendar = Calendar.getInstance();\n\t\t\t\t\t\t\t\tcalendar.setTimeInMillis(newStartDate.getTime());\n\t\t\t\t\t\t\t\tcalendar.add(Calendar.HOUR, -1);\n\t\t\t\t\t\t\t\tcalendar.getTime();\n\t\t\t\t\t\t\t\tDate statisStartTime = calendar.getTime();\n\t\t\t\t\t\t\t\tcalendar.add(Calendar.MINUTE, 59);\n\t\t\t\t\t\t\t\tDate statisEndTime = calendar.getTime();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tJobPersistence actionPer = new JobPersistence();\n\t\t\t\t\t\t\t\tactionPer.setId(Long.parseLong(currentDate+startHour+startMinute)*10000+jobDetail.getId());//update action id\n\t\t\t\t\t\t\t\tactionPer.setToJobId(jobDetail.getId());\n\t\t\t\t\t\t\t\tactionPer.setAuto(jobDetail.getAuto());\n\t\t\t\t\t\t\t\tactionPer.setConfigs(jobDetail.getConfigs());\n\t\t\t\t\t\t\t\tactionPer.setCronExpression(jobDetail.getCronExpression());\n\t\t\t\t\t\t\t\tactionPer.setCycle(jobDetail.getCycle());\n\t\t\t\t\t\t\t\tString jobDependencies = jobDetail.getDependencies();\n\t\t\t\t\t\t\t\tactionPer.setDependencies(jobDependencies);\n\t\t\t\t\t\t\t\tactionPer.setJobDependencies(jobDependencies);\n\t\t\t\t\t\t\t\tactionPer.setDescr(jobDetail.getDescr());\n\t\t\t\t\t\t\t\tactionPer.setGmtCreate(jobDetail.getGmtCreate());\n\t\t\t\t\t\t\t\tactionPer.setGmtModified(new Date());\n\t\t\t\t\t\t\t\tactionPer.setGroupId(jobDetail.getGroupId());\n\t\t\t\t\t\t\t\tactionPer.setHistoryId(jobDetail.getHistoryId());\n\t\t\t\t\t\t\t\tactionPer.setHost(jobDetail.getHost());\n\t\t\t\t\t\t\t\tactionPer.setLastEndTime(jobDetail.getLastEndTime());\n\t\t\t\t\t\t\t\tactionPer.setLastResult(jobDetail.getLastResult());\n\t\t\t\t\t\t\t\tactionPer.setName(jobDetail.getName());\n\t\t\t\t\t\t\t\tactionPer.setOffset(jobDetail.getOffset());\n\t\t\t\t\t\t\t\tactionPer.setOwner(jobDetail.getOwner());\n\t\t\t\t\t\t\t\tactionPer.setPostProcessers(jobDetail.getPostProcessers());\n\t\t\t\t\t\t\t\tactionPer.setPreProcessers(jobDetail.getPreProcessers());\n\t\t\t\t\t\t\t\tactionPer.setReadyDependency(jobDetail.getReadyDependency());\n\t\t\t\t\t\t\t\tactionPer.setResources(jobDetail.getResources());\n\t\t\t\t\t\t\t\tactionPer.setRunType(jobDetail.getRunType());\n\t\t\t\t\t\t\t\tactionPer.setScheduleType(jobDetail.getScheduleType());\n\t\t\t\t\t\t\t\tactionPer.setScript(jobDetail.getScript());\n\t\t\t\t\t\t\t\tactionPer.setStartTime(newStartDate);\n\t\t\t\t\t\t\t\tactionPer.setStartTimestamp(newStartDate.getTime());\n\t\t\t\t\t\t\t\tactionPer.setStatisStartTime(statisStartTime);\n\t\t\t\t\t\t\t\tactionPer.setStatisEndTime(statisEndTime);\n\t\t\t\t\t\t\t\tactionPer.setStatus(jobDetail.getStatus());\n\t\t\t\t\t\t\t\tactionPer.setTimezone(jobDetail.getTimezone());\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"\u935b\u3126\u6e61\u6d60\u8bf2\u59df\u951b\u581f\u6902\u951b\u5849obId: \" + jobDetail.getId()+\";  ActionId: \" +actionPer.getId());\n\t\t\t\t\t\t\t\t\t\tcontext.getGroupManager().saveJob(actionPer);\n\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"success\");\n\t\t\t\t\t\t\t\t\t\tactionDetails.put(actionPer.getId(),actionPer);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t} catch (ZeusException e) {\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"failed\");\n\t\t\t\t\t\t\t\t\tlog.error(\"\u935b\u3126\u6e61\u6d60\u8bf2\u59df\u951b\u581f\u6902\u951b\u5849obId:\" + jobDetail.getId() + \" \u9422\u71b8\u579aAction\" +actionPer.getId() + \"\u6fb6\u8fab\u89e6\", e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}catch(Exception ex){\n\t\t\t\t\tlog.error(\"\u935b\u3126\u6e61\u6d60\u8bf2\u59df\u9422\u71b8\u579aAction\u6fb6\u8fab\u89e6\",ex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static <N extends RootedDAGNode<N>> List<N> topologicalSort(N root) throws GraphException {\n\t\tList<N> queued = new ArrayList<N>();\n\t\tqueued.add(root);\n\t\tint i=0;\n\t\twhile (i<queued.size()) {\n\t\t\tN n = queued.get(i);\n\t\t\tfor (N c : n.getChildren()) {\n\t\t\t\tif (!queued.contains(c))\n\t\t\t\t\tqueued.add(c);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tCollections.reverse(queued);\n\t\tList<N> sorted = new ArrayList<N>();\n\t\ti = 0;\n\t\twhile (!queued.isEmpty()) {\n\t\t\ti = queued.size()-1;\n\t\t\twhile (i>=0) {\n\t\t\t\tN n = queued.get(i);\n\t\t\t\tboolean allParentsSorted = true;\n\t\t\t\tfor (N p : n.getParents()) {\n\t\t\t\t\tif (!sorted.contains(p)) {\n\t\t\t\t\t\tallParentsSorted = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (allParentsSorted) {\n\t\t\t\t\tsorted.add(queued.remove(i));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tif (i==-1)\n\t\t\t\tthrow new GraphException(\"Cannot produce a topological sort: not a DAG\");\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public Value<Integer> run(String userEmail) {\n      PromisedValue<Integer> x = newPromise();\n      PromisedValue<Integer> y = newPromise();\n      PromisedValue<Integer> z = newPromise();\n      FutureValue<Integer> intermediate = futureCall(new ComplexJob(), x, y, z);\n\n      getIntFromUser(\"Please give 1st int\", userEmail, x.getHandle());\n      getIntFromUser(\"Please give 2nd int\", userEmail, y.getHandle());\n      getIntFromUser(\"Please give 3rd int\", userEmail, z.getHandle());\n\n      FutureValue<Integer> oneMoreInt =\n        futureCall(new PromptJob(), intermediate, immediate(userEmail));\n\n      return futureCall(new MultJob(), intermediate, oneMoreInt);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void handlePatch(final PatchParam patchParam) throws Throwable {\n        {\n            Class<?> cls = null;\n            try {\n                cls= patchParam.context.getClass().getClassLoader().loadClass(\"com.taobao.dexposed.TestFragment\");\n            } catch (Exception e) {\n                e.printStackTrace();\n                return;\n            }\n            Log.e(TAG, \"cls:\" + cls);\n            DexposedBridge.findAndHookMethod(cls, \"getText\", new XC_MethodReplacement() {\n                @Override\n                protected Object replaceHookedMethod(MethodHookParam methodHookParam) throws Throwable {\n                    Log.e(TAG, \"methodHookParam:\" + methodHookParam.method.getName());\n                    return \"from patch\";\n                }\n            });\n\n            DexposedBridge.findAndHookMethod(cls, \"onCreateView\", LayoutInflater.class, ViewGroup.class, Bundle.class, new XC_MethodReplacement() {\n                @Override\n                protected Object replaceHookedMethod(MethodHookParam methodHookParam) throws Throwable {\n                    ViewGroup view = (ViewGroup) methodHookParam.args[1];\n                    TextView tv = new TextView(view.getContext());\n                    tv.setText(\"replace onCreateView\");\n                    return tv;\n                }\n            });\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic void registerResources() {\n        if (sInitialized) {\n            return;\n        }\n\n        org.chromium.content.R.attr.select_dialog_multichoice =\n                R.attr.select_dialog_multichoice;\n        org.chromium.content.R.attr.select_dialog_singlechoice =\n                R.attr.select_dialog_singlechoice;\n        org.chromium.ui.R.color.dropdown_dark_divider_color =\n                R.color.dropdown_dark_divider_color;\n        org.chromium.ui.R.color.dropdown_divider_color =\n                R.color.dropdown_divider_color;\n        org.chromium.ui.R.color.color_picker_border_color =\n                R.color.color_picker_border_color;\n        org.chromium.content.R.dimen.link_preview_overlay_radius =\n                R.dimen.link_preview_overlay_radius;\n        org.chromium.ui.R.dimen.dropdown_item_height =\n                R.dimen.dropdown_item_height;\n        org.chromium.ui.R.dimen.dropdown_item_divider_height =\n                R.dimen.dropdown_item_divider_height;\n        org.chromium.ui.R.dimen.color_button_height =\n                R.dimen.color_button_height;\n        org.chromium.ui.R.dimen.config_min_scaling_span =\n                R.dimen.config_min_scaling_span;\n        org.chromium.ui.R.dimen.config_min_scaling_touch_major =\n                R.dimen.config_min_scaling_touch_major;\n        org.chromium.content.R.drawable.ondemand_overlay =\n                R.drawable.ondemand_overlay;\n        org.chromium.ui.R.drawable.color_button_background =\n                R.drawable.color_button_background;\n        org.chromium.ui.R.drawable.color_picker_advanced_select_handle =\n                R.drawable.color_picker_advanced_select_handle;\n        org.chromium.content.R.id.ampm = R.id.ampm;\n        org.chromium.content.R.id.date_picker =\n                R.id.date_picker;\n        org.chromium.content.R.id.date_time_suggestion_value =\n                R.id.date_time_suggestion_value;\n        org.chromium.content.R.id.date_time_suggestion_label =\n                R.id.date_time_suggestion_label;\n        org.chromium.content.R.id.hour = R.id.hour;\n        org.chromium.content.R.id.milli = R.id.milli;\n        org.chromium.content.R.id.minute = R.id.minute;\n        org.chromium.content.R.id.pickers = R.id.pickers;\n        org.chromium.content.R.id.position_in_year =\n                R.id.position_in_year;\n        org.chromium.content.R.id.second = R.id.second;\n        org.chromium.content.R.id.second_colon =\n                R.id.second_colon;\n        org.chromium.content.R.id.second_dot =\n                R.id.second_dot;\n        org.chromium.content.R.id.select_action_menu_select_all =\n                R.id.select_action_menu_select_all;\n        org.chromium.content.R.id.select_action_menu_cut =\n                R.id.select_action_menu_cut;\n        org.chromium.content.R.id.select_action_menu_copy =\n                R.id.select_action_menu_copy;\n        org.chromium.content.R.id.select_action_menu_paste =\n                R.id.select_action_menu_paste;\n        org.chromium.content.R.id.select_action_menu_share =\n                R.id.select_action_menu_share;\n        org.chromium.content.R.id.select_action_menu_web_search =\n                R.id.select_action_menu_web_search;\n        org.chromium.content.R.id.time_picker =\n                R.id.time_picker;\n        org.chromium.content.R.id.year = R.id.year;\n        org.chromium.content.R.id.main_text =\n                R.id.main_text;\n        org.chromium.content.R.id.sub_text =\n                R.id.sub_text;\n        org.chromium.content.R.id.arrow_image =\n                R.id.arrow_image;\n        org.chromium.ui.R.id.selected_color_view =\n                R.id.selected_color_view;\n        org.chromium.ui.R.id.title =\n                R.id.title;\n        org.chromium.ui.R.id.more_colors_button =\n                R.id.more_colors_button;\n        org.chromium.ui.R.id.color_picker_advanced =\n                R.id.color_picker_advanced;\n        org.chromium.ui.R.id.color_picker_simple =\n                R.id.color_picker_simple;\n        org.chromium.ui.R.id.color_button_swatch =\n                R.id.color_button_swatch;\n        org.chromium.ui.R.id.more_colors_button_border =\n                R.id.more_colors_button_border;\n        org.chromium.ui.R.id.gradient =\n                R.id.gradient;\n        org.chromium.ui.R.id.text =\n                R.id.text;\n        org.chromium.ui.R.id.seek_bar =\n                R.id.seek_bar;\n        org.chromium.ui.R.id.dropdown_label =\n                R.id.dropdown_label;\n        org.chromium.ui.R.id.dropdown_popup_window =\n                R.id.dropdown_popup_window;\n        org.chromium.ui.R.id.dropdown_sublabel =\n                R.id.dropdown_sublabel;\n        org.chromium.content.R.layout.date_time_picker_dialog =\n                R.layout.date_time_picker_dialog;\n        org.chromium.content.R.layout.date_time_suggestion =\n                R.layout.date_time_suggestion;\n        org.chromium.content.R.layout.two_field_date_picker =\n                R.layout.two_field_date_picker;\n        org.chromium.content.R.layout.multi_field_time_picker_dialog =\n                R.layout.multi_field_time_picker_dialog;\n        org.chromium.content.R.layout.validation_message_bubble =\n                R.layout.validation_message_bubble;\n        org.chromium.ui.R.layout.color_picker_dialog_title =\n                R.layout.color_picker_dialog_title;\n        org.chromium.ui.R.layout.color_picker_dialog_content =\n                R.layout.color_picker_dialog_content;\n        org.chromium.ui.R.layout.color_picker_advanced_component =\n                R.layout.color_picker_advanced_component;\n        org.chromium.ui.R.layout.dropdown_item =\n                R.layout.dropdown_item;\n        org.chromium.content.R.menu.select_action_menu =\n                R.menu.select_action_menu;\n        org.chromium.content.R.string.accessibility_content_view =\n                R.string.accessibility_content_view;\n        org.chromium.content.R.string.accessibility_date_picker_month =\n                R.string.accessibility_date_picker_month;\n        org.chromium.content.R.string.accessibility_date_picker_week =\n                R.string.accessibility_date_picker_week;\n        org.chromium.content.R.string.accessibility_date_picker_year =\n                R.string.accessibility_date_picker_year;\n        org.chromium.content.R.string.accessibility_datetime_picker_date =\n                R.string.accessibility_datetime_picker_date;\n        org.chromium.content.R.string.accessibility_datetime_picker_time =\n                R.string.accessibility_datetime_picker_time;\n        org.chromium.content.R.string.actionbar_share =\n                R.string.actionbar_share;\n        org.chromium.content.R.string.actionbar_web_search =\n                R.string.actionbar_web_search;\n        org.chromium.content.R.string.date_picker_dialog_clear =\n                R.string.date_picker_dialog_clear;\n        org.chromium.content.R.string.date_picker_dialog_set =\n                R.string.date_picker_dialog_set;\n        org.chromium.content.R.string.date_picker_dialog_title =\n                R.string.date_picker_dialog_title;\n        org.chromium.content.R.string.date_picker_dialog_other_button_label =\n                R.string.date_picker_dialog_other_button_label;\n        org.chromium.content.R.string.date_time_picker_dialog_title =\n                R.string.date_time_picker_dialog_title;\n        org.chromium.content.R.string.media_player_error_button =\n                R.string.media_player_error_button;\n        org.chromium.content.R.string.media_player_error_text_invalid_progressive_playback =\n                R.string.media_player_error_text_invalid_progressive_playback;\n        org.chromium.content.R.string.media_player_error_text_unknown =\n                R.string.media_player_error_text_unknown;\n        org.chromium.content.R.string.media_player_error_title =\n                R.string.media_player_error_title;\n        org.chromium.content.R.string.media_player_loading_video =\n                R.string.media_player_loading_video;\n        org.chromium.content.R.string.month_picker_dialog_title =\n                R.string.month_picker_dialog_title;\n        org.chromium.content.R.string.profiler_error_toast =\n                R.string.profiler_error_toast;\n        org.chromium.content.R.string.profiler_no_storage_toast =\n                R.string.profiler_no_storage_toast;\n        org.chromium.content.R.string.profiler_started_toast =\n                R.string.profiler_started_toast;\n        org.chromium.content.R.string.profiler_stopped_toast =\n                R.string.profiler_stopped_toast;\n        org.chromium.content.R.string.time_picker_dialog_am =\n                R.string.time_picker_dialog_am;\n        org.chromium.content.R.string.time_picker_dialog_pm =\n                R.string.time_picker_dialog_pm;\n        org.chromium.content.R.string.time_picker_dialog_hour_minute_separator =\n                R.string.time_picker_dialog_hour_minute_separator;\n        org.chromium.content.R.string.time_picker_dialog_hour_minute_separator =\n                R.string.time_picker_dialog_hour_minute_separator;\n        org.chromium.content.R.string.time_picker_dialog_minute_second_separator =\n                R.string.time_picker_dialog_minute_second_separator;\n        org.chromium.content.R.string.time_picker_dialog_second_subsecond_separator =\n                R.string.time_picker_dialog_second_subsecond_separator;\n        org.chromium.content.R.string.time_picker_dialog_title =\n                R.string.time_picker_dialog_title;\n        org.chromium.content.R.string.week_picker_dialog_title =\n                R.string.week_picker_dialog_title;\n        org.chromium.ui.R.string.copy_to_clipboard_failure_message =\n                R.string.copy_to_clipboard_failure_message;\n        org.chromium.ui.R.string.low_memory_error =\n                R.string.low_memory_error;\n        org.chromium.ui.R.string.opening_file_error =\n                R.string.opening_file_error;\n        org.chromium.ui.R.string.color_picker_button_more =\n                R.string.color_picker_button_more;\n        org.chromium.ui.R.string.color_picker_hue =\n                R.string.color_picker_hue;\n        org.chromium.ui.R.string.color_picker_saturation =\n                R.string.color_picker_saturation;\n        org.chromium.ui.R.string.color_picker_value =\n                R.string.color_picker_value;\n        org.chromium.ui.R.string.color_picker_button_set =\n                R.string.color_picker_button_set;\n        org.chromium.ui.R.string.color_picker_button_cancel =\n                R.string.color_picker_button_cancel;\n        org.chromium.ui.R.string.color_picker_dialog_title =\n                R.string.color_picker_dialog_title;\n        org.chromium.ui.R.string.color_picker_button_red =\n                R.string.color_picker_button_red;\n        org.chromium.ui.R.string.color_picker_button_cyan =\n                R.string.color_picker_button_cyan;\n        org.chromium.ui.R.string.color_picker_button_blue =\n                R.string.color_picker_button_blue;\n        org.chromium.ui.R.string.color_picker_button_green =\n                R.string.color_picker_button_green;\n        org.chromium.ui.R.string.color_picker_button_magenta =\n                R.string.color_picker_button_magenta;\n        org.chromium.ui.R.string.color_picker_button_yellow =\n                R.string.color_picker_button_yellow;\n        org.chromium.ui.R.string.color_picker_button_black =\n                R.string.color_picker_button_black;\n        org.chromium.ui.R.string.color_picker_button_white =\n                R.string.color_picker_button_white;\n        org.chromium.content.R.style.SelectPopupDialog =\n                R.style.SelectPopupDialog;\n        org.chromium.ui.R.style.DropdownPopupWindow =\n                R.style.DropdownPopupWindow;\n\n\n        if (false) {\n            verifyFields(org.chromium.content.R.class);\n            verifyFields(org.chromium.ui.R.class);\n        }\n\n\n        \n\n        sInitialized = true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static List<Picture> getPictures() {\n        final List<Picture> pictures = new ArrayList<Picture>();\n        pictures.add(new Picture(\"https://i.imgur.com/8LOZwbE.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/EfLvmlO.png\", \"Cheetahs\"));\n        return pictures;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintWriter writer, boolean suppressLogin, char eolMarker, boolean showDirection)\n    {\n        __writer = writer;\n        __nologin = suppressLogin;\n        __eolMarker = eolMarker;\n        __directionMarker = showDirection;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_optimize_item_click);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n\n        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);\n        fab.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\n                        .setAction(\"Action\", null).show();\n            }\n        });\n        mRecyclerView = (RecyclerView) findViewById(R.id.list);\n        GridLayoutManager layoutManager = new GridLayoutManager(this,4);\n        mRecyclerView.setLayoutManager(layoutManager);\n        initAdapter();\n\n        mRecyclerView.addOnItemTouchListener(new OnItemClickListener() {\n\n            @Override\n            public void onSimpleItemClick(BaseQuickAdapter adapter, View view, int position) {\n            }\n\n            @Override\n            public void onItemChildClick(BaseQuickAdapter adapter, View view, int position) {\n                Logger.d(\"\u8930\u64b3\u58a0\u93c3\u5815\u68ff  \"+System.currentTimeMillis());\n                super.onItemChildClick(adapter, view, position);\n                switch (view.getId()) {\n\n                    default:\n                        break;\n                }\n            }\n\n\n            @Override\n            public void onItemLongClick(BaseQuickAdapter adapter, View view, int position) {\n                super.onItemLongClick(adapter, view, position);\n\n            }\n\n            @Override\n            public void onItemChildLongClick(BaseQuickAdapter adapter, View view, int position) {\n                super.onItemChildLongClick(adapter, view, position);\n\n            }\n        });\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate Path computeBootClassPath() {\n        bootClassPathRtJar = null;\n        String optionValue;\n        Path path = new Path();\n\n        Map<String,String> envs = System.getenv();\n\n        path.addFiles(envs.get(\"BOOTCLASSPATH\"));\n\n        \n        \n        return path;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@SuppressLint(\"NewApi\")\n\tpublic static Bitmap fastblur(Context context, Bitmap sentBitmap, int radius) {\n\n\t\tif (VERSION.SDK_INT > 16) {\n\t\t\tBitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n\t\t\tfinal RenderScript rs = RenderScript.create(context);\n\t\t\tfinal Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n\t\t\t\t\tAllocation.USAGE_SCRIPT);\n\t\t\tfinal Allocation output = Allocation.createTyped(rs, input.getType());\n\t\t\tfinal ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n\t\t\tscript.setRadius(radius );\n\t\t\tscript.setInput(input);\n\t\t\tscript.forEach(output);\n\t\t\toutput.copyTo(bitmap);\n\t\t\treturn bitmap;\n\t\t}\n\n\n\n\t\tBitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n\t\tif (radius < 1) {\n\t\t\treturn (null);\n\t\t}\n\n\t\tint w = bitmap.getWidth();\n\t\tint h = bitmap.getHeight();\n\n\t\tint[] pix = new int[w * h];\n\t\tLog.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n\t\tbitmap.getPixels(pix, 0, w, 0, 0, w, h);\n\n\t\tint wm = w - 1;\n\t\tint hm = h - 1;\n\t\tint wh = w * h;\n\t\tint div = radius + radius + 1;\n\n\t\tint r[] = new int[wh];\n\t\tint g[] = new int[wh];\n\t\tint b[] = new int[wh];\n\t\tint rsum, gsum, bsum, x, y, i, p, yp, yi, yw;\n\t\tint vmin[] = new int[Math.max(w, h)];\n\n\t\tint divsum = (div + 1) >> 1;\n\t\tdivsum *= divsum;\n\t\tint dv[] = new int[256 * divsum];\n\t\tfor (i = 0; i < 256 * divsum; i++) {\n\t\t\tdv[i] = (i / divsum);\n\t\t}\n\n\t\tyw = yi = 0;\n\n\t\tint[][] stack = new int[div][3];\n\t\tint stackpointer;\n\t\tint stackstart;\n\t\tint[] sir;\n\t\tint rbs;\n\t\tint r1 = radius + 1;\n\t\tint routsum, goutsum, boutsum;\n\t\tint rinsum, ginsum, binsum;\n\n\t\tfor (y = 0; y < h; y++) {\n\t\t\trinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n\t\t\tfor (i = -radius; i <= radius; i++) {\n\t\t\t\tp = pix[yi + Math.min(wm, Math.max(i, 0))];\n\t\t\t\tsir = stack[i + radius];\n\t\t\t\tsir[0] = (p & 0xff0000) >> 16;\n\t\t\t\tsir[1] = (p & 0x00ff00) >> 8;\n\t\t\t\tsir[2] = (p & 0x0000ff);\n\t\t\t\trbs = r1 - Math.abs(i);\n\t\t\t\trsum += sir[0] * rbs;\n\t\t\t\tgsum += sir[1] * rbs;\n\t\t\t\tbsum += sir[2] * rbs;\n\t\t\t\tif (i > 0) {\n\t\t\t\t\trinsum += sir[0];\n\t\t\t\t\tginsum += sir[1];\n\t\t\t\t\tbinsum += sir[2];\n\t\t\t\t} else {\n\t\t\t\t\troutsum += sir[0];\n\t\t\t\t\tgoutsum += sir[1];\n\t\t\t\t\tboutsum += sir[2];\n\t\t\t\t}\n\t\t\t}\n\t\t\tstackpointer = radius;\n\n\t\t\tfor (x = 0; x < w; x++) {\n\n\t\t\t\tr[yi] = dv[rsum];\n\t\t\t\tg[yi] = dv[gsum];\n\t\t\t\tb[yi] = dv[bsum];\n\n\t\t\t\trsum -= routsum;\n\t\t\t\tgsum -= goutsum;\n\t\t\t\tbsum -= boutsum;\n\n\t\t\t\tstackstart = stackpointer - radius + div;\n\t\t\t\tsir = stack[stackstart % div];\n\n\t\t\t\troutsum -= sir[0];\n\t\t\t\tgoutsum -= sir[1];\n\t\t\t\tboutsum -= sir[2];\n\n\t\t\t\tif (y == 0) {\n\t\t\t\t\tvmin[x] = Math.min(x + radius + 1, wm);\n\t\t\t\t}\n\t\t\t\tp = pix[yw + vmin[x]];\n\n\t\t\t\tsir[0] = (p & 0xff0000) >> 16;\n\t\t\t\tsir[1] = (p & 0x00ff00) >> 8;\n\t\t\t\tsir[2] = (p & 0x0000ff);\n\n\t\t\t\trinsum += sir[0];\n\t\t\t\tginsum += sir[1];\n\t\t\t\tbinsum += sir[2];\n\n\t\t\t\trsum += rinsum;\n\t\t\t\tgsum += ginsum;\n\t\t\t\tbsum += binsum;\n\n\t\t\t\tstackpointer = (stackpointer + 1) % div;\n\t\t\t\tsir = stack[(stackpointer) % div];\n\n\t\t\t\troutsum += sir[0];\n\t\t\t\tgoutsum += sir[1];\n\t\t\t\tboutsum += sir[2];\n\n\t\t\t\trinsum -= sir[0];\n\t\t\t\tginsum -= sir[1];\n\t\t\t\tbinsum -= sir[2];\n\n\t\t\t\tyi++;\n\t\t\t}\n\t\t\tyw += w;\n\t\t}\n\t\tfor (x = 0; x < w; x++) {\n\t\t\trinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n\t\t\typ = -radius * w;\n\t\t\tfor (i = -radius; i <= radius; i++) {\n\t\t\t\tyi = Math.max(0, yp) + x;\n\n\t\t\t\tsir = stack[i + radius];\n\n\t\t\t\tsir[0] = r[yi];\n\t\t\t\tsir[1] = g[yi];\n\t\t\t\tsir[2] = b[yi];\n\n\t\t\t\trbs = r1 - Math.abs(i);\n\n\t\t\t\trsum += r[yi] * rbs;\n\t\t\t\tgsum += g[yi] * rbs;\n\t\t\t\tbsum += b[yi] * rbs;\n\n\t\t\t\tif (i > 0) {\n\t\t\t\t\trinsum += sir[0];\n\t\t\t\t\tginsum += sir[1];\n\t\t\t\t\tbinsum += sir[2];\n\t\t\t\t} else {\n\t\t\t\t\troutsum += sir[0];\n\t\t\t\t\tgoutsum += sir[1];\n\t\t\t\t\tboutsum += sir[2];\n\t\t\t\t}\n\n\t\t\t\tif (i < hm) {\n\t\t\t\t\typ += w;\n\t\t\t\t}\n\t\t\t}\n\t\t\tyi = x;\n\t\t\tstackpointer = radius;\n\t\t\tfor (y = 0; y < h; y++) {\n\t\t\t\tpix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8) | dv[bsum];\n\n\t\t\t\trsum -= routsum;\n\t\t\t\tgsum -= goutsum;\n\t\t\t\tbsum -= boutsum;\n\n\t\t\t\tstackstart = stackpointer - radius + div;\n\t\t\t\tsir = stack[stackstart % div];\n\n\t\t\t\troutsum -= sir[0];\n\t\t\t\tgoutsum -= sir[1];\n\t\t\t\tboutsum -= sir[2];\n\n\t\t\t\tif (x == 0) {\n\t\t\t\t\tvmin[y] = Math.min(y + r1, hm) * w;\n\t\t\t\t}\n\t\t\t\tp = x + vmin[y];\n\n\t\t\t\tsir[0] = r[p];\n\t\t\t\tsir[1] = g[p];\n\t\t\t\tsir[2] = b[p];\n\n\t\t\t\trinsum += sir[0];\n\t\t\t\tginsum += sir[1];\n\t\t\t\tbinsum += sir[2];\n\n\t\t\t\trsum += rinsum;\n\t\t\t\tgsum += ginsum;\n\t\t\t\tbsum += binsum;\n\n\t\t\t\tstackpointer = (stackpointer + 1) % div;\n\t\t\t\tsir = stack[stackpointer];\n\n\t\t\t\troutsum += sir[0];\n\t\t\t\tgoutsum += sir[1];\n\t\t\t\tboutsum += sir[2];\n\n\t\t\t\trinsum -= sir[0];\n\t\t\t\tginsum -= sir[1];\n\t\t\t\tbinsum -= sir[2];\n\n\t\t\t\tyi += w;\n\t\t\t}\n\t\t}\n\n\t\tLog.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n\t\tbitmap.setPixels(pix, 0, w, 0, 0, w, h);\n\t\treturn (bitmap);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void visitLdcInsn(final Object cst) {\n        if (cst instanceof Integer) {\n            int val = ((Integer) cst).intValue();\n            iconst(val);\n        } else if (cst instanceof Byte) {\n            int val = ((Byte) cst).intValue();\n            iconst(val);\n        } else if (cst instanceof Character) {\n            int val = ((Character) cst).charValue();\n            iconst(val);\n        } else if (cst instanceof Short) {\n            int val = ((Short) cst).intValue();\n            iconst(val);\n        } else if (cst instanceof Boolean) {\n            int val = ((Boolean) cst).booleanValue() ? 1 : 0;\n            iconst(val);\n        } else if (cst instanceof Float) {\n            float val = ((Float) cst).floatValue();\n            fconst(val);\n        } else if (cst instanceof Long) {\n            long val = ((Long) cst).longValue();\n            lconst(val);\n        } else if (cst instanceof Double) {\n            double val = ((Double) cst).doubleValue();\n            dconst(val);\n        } else if (cst instanceof String) {\n            aconst(cst);\n        } else if (cst instanceof Type) {\n            tconst((Type) cst);\n        } else if (cst instanceof Handle) {\n            hconst((Handle) cst);\n        } else {\n            throw new IllegalArgumentException();\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic <A extends Closeable> A api(Class<A> apitype, final String provider, final String credId, final String url,\n            final String zones, final boolean trustAll) {\n        return api(apitype, provider, credId, buildJcloudsOverrides(url, zones, trustAll));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void visitLdcInsn(final Object cst) {\n        if (mv != null) {\n            mv.visitLdcInsn(cst);\n        }\n        if (this.locals == null) {\n            labels = null;\n            return;\n        }\n        if (cst instanceof Integer) {\n            push(Opcodes.INTEGER);\n        } else if (cst instanceof Long) {\n            push(Opcodes.LONG);\n            push(Opcodes.TOP);\n        } else if (cst instanceof Float) {\n            push(Opcodes.FLOAT);\n        } else if (cst instanceof Double) {\n            push(Opcodes.DOUBLE);\n            push(Opcodes.TOP);\n        } else if (cst instanceof String) {\n            push(\"java/lang/String\");\n        } else if (cst instanceof Type) {\n            int sort = ((Type) cst).getSort();\n            if (sort == Type.OBJECT || sort == Type.ARRAY) {\n                push(\"java/lang/Class\");\n            } else if (sort == Type.METHOD) {\n                push(\"java/lang/invoke/MethodType\");\n            } else {\n                throw new IllegalArgumentException();\n            }\n        } else if (cst instanceof Handle) {\n            push(\"java/lang/invoke/MethodHandle\");\n        } else {\n            throw new IllegalArgumentException();\n        }\n        labels = null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void process(JCas cas) throws AnalysisEngineProcessException {\n      if (this.isTraining()) {\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_Three LCWord_three CapitalType_INITIAL_UPPERCASE L0OOB1 L1OOB2 R0_sequence R0_TypePath_Pos_NN R0_TypePath_Stem_sequenc R1_elements R1_TypePath_Pos_NNS R1_TypePath_Stem_element TypePath_Pos_CD TypePath_Stem_Three PrevNEMTokenLabel_L0OOB1 PrevNEMTokenLabel_L1OOB2\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_sequence LCWord_sequence CapitalType_ALL_LOWERCASE Prefix3_seq Suffix3_nce Suffix4_ence Suffix5_uence L0_Three L0_TypePath_Pos_CD L0_TypePath_Stem_Three L1OOB1 R0_elements R0_TypePath_Pos_NNS R0_TypePath_Stem_element R1_are R1_TypePath_Pos_VBP R1_TypePath_Stem_are TypePath_Pos_NN TypePath_Stem_sequenc PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1OOB1\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_elements LCWord_elements CapitalType_ALL_LOWERCASE Prefix3_ele Suffix3_nts Suffix4_ents Suffix5_ments L0_sequence L0_TypePath_Pos_NN L0_TypePath_Stem_sequenc L1_Three L1_TypePath_Pos_CD L1_TypePath_Stem_Three R0_are R0_TypePath_Pos_VBP R0_TypePath_Stem_are R1_shown R1_TypePath_Pos_VBN R1_TypePath_Stem_shown TypePath_Pos_NNS TypePath_Stem_element PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_are LCWord_are CapitalType_ALL_LOWERCASE L0_elements L0_TypePath_Pos_NNS L0_TypePath_Stem_element L1_sequence L1_TypePath_Pos_NN L1_TypePath_Stem_sequenc R0_shown R0_TypePath_Pos_VBN R0_TypePath_Stem_shown R1_to R1_TypePath_Pos_TO R1_TypePath_Stem_to TypePath_Pos_VBP TypePath_Stem_are PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_shown LCWord_shown CapitalType_ALL_LOWERCASE L0_are L0_TypePath_Pos_VBP L0_TypePath_Stem_are L1_elements L1_TypePath_Pos_NNS L1_TypePath_Stem_element R0_to R0_TypePath_Pos_TO R0_TypePath_Stem_to R1_be R1_TypePath_Pos_VB R1_TypePath_Stem_be TypePath_Pos_VBN TypePath_Stem_shown PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_to LCWord_to CapitalType_ALL_LOWERCASE L0_shown L0_TypePath_Pos_VBN L0_TypePath_Stem_shown L1_are L1_TypePath_Pos_VBP L1_TypePath_Stem_are R0_be R0_TypePath_Pos_VB R0_TypePath_Stem_be R1_required R1_TypePath_Pos_VBN R1_TypePath_Stem_requir TypePath_Pos_TO TypePath_Stem_to PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_be LCWord_be CapitalType_ALL_LOWERCASE L0_to L0_TypePath_Pos_TO L0_TypePath_Stem_to L1_shown L1_TypePath_Pos_VBN L1_TypePath_Stem_shown R0_required R0_TypePath_Pos_VBN R0_TypePath_Stem_requir R1_for R1_TypePath_Pos_IN R1_TypePath_Stem_for TypePath_Pos_VB TypePath_Stem_be PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_required LCWord_required CapitalType_ALL_LOWERCASE Prefix3_req Suffix3_red Suffix4_ired Suffix5_uired L0_be L0_TypePath_Pos_VB L0_TypePath_Stem_be L1_to L1_TypePath_Pos_TO L1_TypePath_Stem_to R0_for R0_TypePath_Pos_IN R0_TypePath_Stem_for R1_accurate R1_TypePath_Pos_JJ R1_TypePath_Stem_accur TypePath_Pos_VBN TypePath_Stem_requir PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_for LCWord_for CapitalType_ALL_LOWERCASE L0_required L0_TypePath_Pos_VBN L0_TypePath_Stem_requir L1_be L1_TypePath_Pos_VB L1_TypePath_Stem_be R0_accurate R0_TypePath_Pos_JJ R0_TypePath_Stem_accur R1_and R1_TypePath_Pos_CC R1_TypePath_Stem_and TypePath_Pos_IN TypePath_Stem_for PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_accurate LCWord_accurate CapitalType_ALL_LOWERCASE Prefix3_acc Suffix3_ate Suffix4_rate Suffix5_urate L0_for L0_TypePath_Pos_IN L0_TypePath_Stem_for L1_required L1_TypePath_Pos_VBN L1_TypePath_Stem_requir R0_and R0_TypePath_Pos_CC R0_TypePath_Stem_and R1_efficient R1_TypePath_Pos_JJ R1_TypePath_Stem_effici TypePath_Pos_JJ TypePath_Stem_accur PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_and LCWord_and CapitalType_ALL_LOWERCASE L0_accurate L0_TypePath_Pos_JJ L0_TypePath_Stem_accur L1_for L1_TypePath_Pos_IN L1_TypePath_Stem_for R0_efficient R0_TypePath_Pos_JJ R0_TypePath_Stem_effici R1_transcription R1_TypePath_Pos_NN R1_TypePath_Stem_transcript TypePath_Pos_CC TypePath_Stem_and PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_efficient LCWord_efficient CapitalType_ALL_LOWERCASE Prefix3_eff Suffix3_ent Suffix4_ient Suffix5_cient L0_and L0_TypePath_Pos_CC L0_TypePath_Stem_and L1_accurate L1_TypePath_Pos_JJ L1_TypePath_Stem_accur R0_transcription R0_TypePath_Pos_NN R0_TypePath_Stem_transcript R1_termination R1_TypePath_Pos_NN R1_TypePath_Stem_termin TypePath_Pos_JJ TypePath_Stem_effici PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_transcription LCWord_transcription CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ption L0_efficient L0_TypePath_Pos_JJ L0_TypePath_Stem_effici L1_and L1_TypePath_Pos_CC L1_TypePath_Stem_and R0_termination R0_TypePath_Pos_NN R0_TypePath_Stem_termin R1_by R1_TypePath_Pos_IN R1_TypePath_Stem_by TypePath_Pos_NN TypePath_Stem_transcript PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_termination LCWord_termination CapitalType_ALL_LOWERCASE Prefix3_ter Suffix3_ion Suffix4_tion Suffix5_ation L0_transcription L0_TypePath_Pos_NN L0_TypePath_Stem_transcript L1_efficient L1_TypePath_Pos_JJ L1_TypePath_Stem_effici R0_by R0_TypePath_Pos_IN R0_TypePath_Stem_by R1_RNA R1_TypePath_Pos_NNP R1_TypePath_Stem_RNA TypePath_Pos_NN TypePath_Stem_termin PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_by LCWord_by CapitalType_ALL_LOWERCASE L0_termination L0_TypePath_Pos_NN L0_TypePath_Stem_termin L1_transcription L1_TypePath_Pos_NN L1_TypePath_Stem_transcript R0_RNA R0_TypePath_Pos_NNP R0_TypePath_Stem_RNA R1_polymerase R1_TypePath_Pos_NN R1_TypePath_Stem_polymeras TypePath_Pos_IN TypePath_Stem_by PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"B-GENE\",\n            \"Word_RNA LCWord_rna CapitalType_ALL_UPPERCASE L0_by L0_TypePath_Pos_IN L0_TypePath_Stem_by L1_termination L1_TypePath_Pos_NN L1_TypePath_Stem_termin R0_polymerase R0_TypePath_Pos_NN R0_TypePath_Stem_polymeras R1_I R1_TypePath_Pos_PRP R1_TypePath_Stem_I TypePath_Pos_NNP TypePath_Stem_RNA PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"I-GENE\",\n            \"Word_polymerase LCWord_polymerase CapitalType_ALL_LOWERCASE Prefix3_pol Suffix3_ase Suffix4_rase Suffix5_erase L0_RNA L0_TypePath_Pos_NNP L0_TypePath_Stem_RNA L1_by L1_TypePath_Pos_IN L1_TypePath_Stem_by R0_I R0_TypePath_Pos_PRP R0_TypePath_Stem_I R1_( R1_TypePath_Pos_-LRB- R1_TypePath_Stem_( TypePath_Pos_NN TypePath_Stem_polymeras PrevNEMTokenLabel_L0_B-GENE PrevNEMTokenLabel_L1_O Gazetteer_entrez_genes.txt Gazetteer_entrez_genes.txt\"));\n        this.dataWriter.write(createInstance(\n            \"I-GENE\",\n            \"Word_I LCWord_i CapitalType_ALL_UPPERCASE NumericType_ROMAN_NUMERAL L0_polymerase L0_TypePath_Pos_NN L0_TypePath_Stem_polymeras L1_RNA L1_TypePath_Pos_NNP L1_TypePath_Stem_RNA R0_( R0_TypePath_Pos_-LRB- R0_TypePath_Stem_( R1_pol R1_TypePath_Pos_NN R1_TypePath_Stem_pol TypePath_Pos_PRP TypePath_Stem_I PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_B-GENE\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_( LCWord_( L0_I L0_TypePath_Pos_PRP L0_TypePath_Stem_I L1_polymerase L1_TypePath_Pos_NN L1_TypePath_Stem_polymeras R0_pol R0_TypePath_Pos_NN R0_TypePath_Stem_pol R1_I R1_TypePath_Pos_PRP R1_TypePath_Stem_I TypePath_Pos_-LRB- TypePath_Stem_( PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_I-GENE\"));\n        this.dataWriter.write(createInstance(\n            \"B-GENE\",\n            \"Word_pol LCWord_pol CapitalType_ALL_LOWERCASE L0_( L0_TypePath_Pos_-LRB- L0_TypePath_Stem_( L1_I L1_TypePath_Pos_PRP L1_TypePath_Stem_I R0_I R0_TypePath_Pos_PRP R0_TypePath_Stem_I R1_) R1_TypePath_Pos_-RRB- R1_TypePath_Stem_) TypePath_Pos_NN TypePath_Stem_pol PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_I-GENE Gazetteer_entrez_genes.txt\"));\n        this.dataWriter.write(createInstance(\n            \"I-GENE\",\n            \"Word_I LCWord_i CapitalType_ALL_UPPERCASE NumericType_ROMAN_NUMERAL L0_pol L0_TypePath_Pos_NN L0_TypePath_Stem_pol L1_( L1_TypePath_Pos_-LRB- L1_TypePath_Stem_( R0_) R0_TypePath_Pos_-RRB- R0_TypePath_Stem_) R1_assayed R1_TypePath_Pos_VBD R1_TypePath_Stem_assay TypePath_Pos_PRP TypePath_Stem_I PrevNEMTokenLabel_L0_B-GENE PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_) LCWord_) L0_I L0_TypePath_Pos_PRP L0_TypePath_Stem_I L1_pol L1_TypePath_Pos_NN L1_TypePath_Stem_pol R0_assayed R0_TypePath_Pos_VBD R0_TypePath_Stem_assay R1_both R1_TypePath_Pos_DT R1_TypePath_Stem_both TypePath_Pos_-RRB- TypePath_Stem_) PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_B-GENE\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_assayed LCWord_assayed CapitalType_ALL_LOWERCASE Prefix3_ass Suffix3_yed Suffix4_ayed L0_) L0_TypePath_Pos_-RRB- L0_TypePath_Stem_) L1_I L1_TypePath_Pos_PRP L1_TypePath_Stem_I R0_both R0_TypePath_Pos_DT R0_TypePath_Stem_both R1_in R1_TypePath_Pos_IN R1_TypePath_Stem_in TypePath_Pos_VBD TypePath_Stem_assay PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_I-GENE\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_both LCWord_both CapitalType_ALL_LOWERCASE L0_assayed L0_TypePath_Pos_VBD L0_TypePath_Stem_assay L1_) L1_TypePath_Pos_-RRB- L1_TypePath_Stem_) R0_in R0_TypePath_Pos_IN R0_TypePath_Stem_in R1_a R1_TypePath_Pos_DT R1_TypePath_Stem_a TypePath_Pos_DT TypePath_Stem_both PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_in LCWord_in CapitalType_ALL_LOWERCASE L0_both L0_TypePath_Pos_DT L0_TypePath_Stem_both L1_assayed L1_TypePath_Pos_VBD L1_TypePath_Stem_assay R0_a R0_TypePath_Pos_DT R0_TypePath_Stem_a R1_cell-free R1_TypePath_Pos_JJ R1_TypePath_Stem_cell-fre TypePath_Pos_IN TypePath_Stem_in PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_a LCWord_a CapitalType_ALL_LOWERCASE L0_in L0_TypePath_Pos_IN L0_TypePath_Stem_in L1_both L1_TypePath_Pos_DT L1_TypePath_Stem_both R0_cell-free R0_TypePath_Pos_JJ R0_TypePath_Stem_cell-fre R1_transcription R1_TypePath_Pos_NN R1_TypePath_Stem_transcript TypePath_Pos_DT TypePath_Stem_a PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_cell-free LCWord_cell-free CapitalType_ALL_LOWERCASE ContainsHyphen_CONTAINS_HYPHEN Prefix3_cel Suffix3_ree Suffix4_free Suffix5_-free L0_a L0_TypePath_Pos_DT L0_TypePath_Stem_a L1_in L1_TypePath_Pos_IN L1_TypePath_Stem_in R0_transcription R0_TypePath_Pos_NN R0_TypePath_Stem_transcript R1_system R1_TypePath_Pos_NN R1_TypePath_Stem_system TypePath_Pos_JJ TypePath_Stem_cell-fre PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_transcription LCWord_transcription CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ption L0_cell-free L0_TypePath_Pos_JJ L0_TypePath_Stem_cell-fre L1_a L1_TypePath_Pos_DT L1_TypePath_Stem_a R0_system R0_TypePath_Pos_NN R0_TypePath_Stem_system R1_and R1_TypePath_Pos_CC R1_TypePath_Stem_and TypePath_Pos_NN TypePath_Stem_transcript PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_system LCWord_system CapitalType_ALL_LOWERCASE Prefix3_sys Suffix3_tem L0_transcription L0_TypePath_Pos_NN L0_TypePath_Stem_transcript L1_cell-free L1_TypePath_Pos_JJ L1_TypePath_Stem_cell-fre R0_and R0_TypePath_Pos_CC R0_TypePath_Stem_and R1_in R1_TypePath_Pos_IN R1_TypePath_Stem_in TypePath_Pos_NN TypePath_Stem_system PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_and LCWord_and CapitalType_ALL_LOWERCASE L0_system L0_TypePath_Pos_NN L0_TypePath_Stem_system L1_transcription L1_TypePath_Pos_NN L1_TypePath_Stem_transcript R0_in R0_TypePath_Pos_IN R0_TypePath_Stem_in R1_vivo R1_TypePath_Pos_RB R1_TypePath_Stem_vivo TypePath_Pos_CC TypePath_Stem_and PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_in LCWord_in CapitalType_ALL_LOWERCASE L0_and L0_TypePath_Pos_CC L0_TypePath_Stem_and L1_system L1_TypePath_Pos_NN L1_TypePath_Stem_system R0_vivo R0_TypePath_Pos_RB R0_TypePath_Stem_vivo R1_after R1_TypePath_Pos_IN R1_TypePath_Stem_after TypePath_Pos_IN TypePath_Stem_in PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_vivo LCWord_vivo CapitalType_ALL_LOWERCASE L0_in L0_TypePath_Pos_IN L0_TypePath_Stem_in L1_and L1_TypePath_Pos_CC L1_TypePath_Stem_and R0_after R0_TypePath_Pos_IN R0_TypePath_Stem_after R1_transfection R1_TypePath_Pos_NN R1_TypePath_Stem_transfect TypePath_Pos_RB TypePath_Stem_vivo PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_after LCWord_after CapitalType_ALL_LOWERCASE L0_vivo L0_TypePath_Pos_RB L0_TypePath_Stem_vivo L1_in L1_TypePath_Pos_IN L1_TypePath_Stem_in R0_transfection R0_TypePath_Pos_NN R0_TypePath_Stem_transfect R1_of R1_TypePath_Pos_IN R1_TypePath_Stem_of TypePath_Pos_IN TypePath_Stem_after PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_transfection LCWord_transfection CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ction L0_after L0_TypePath_Pos_IN L0_TypePath_Stem_after L1_vivo L1_TypePath_Pos_RB L1_TypePath_Stem_vivo R0_of R0_TypePath_Pos_IN R0_TypePath_Stem_of R1_rDNA R1_TypePath_Pos_NNP R1_TypePath_Stem_rDNA TypePath_Pos_NN TypePath_Stem_transfect PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_of LCWord_of CapitalType_ALL_LOWERCASE L0_transfection L0_TypePath_Pos_NN L0_TypePath_Stem_transfect L1_after L1_TypePath_Pos_IN L1_TypePath_Stem_after R0_rDNA R0_TypePath_Pos_NNP R0_TypePath_Stem_rDNA R1_minigene R1_TypePath_Pos_NN R1_TypePath_Stem_minigen TypePath_Pos_IN TypePath_Stem_of PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_rDNA LCWord_rdna CapitalType_MIXED_CASE L0_of L0_TypePath_Pos_IN L0_TypePath_Stem_of L1_transfection L1_TypePath_Pos_NN L1_TypePath_Stem_transfect R0_minigene R0_TypePath_Pos_NN R0_TypePath_Stem_minigen R1_constructs R1_TypePath_Pos_NNS R1_TypePath_Stem_construct TypePath_Pos_NNP TypePath_Stem_rDNA PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_minigene LCWord_minigene CapitalType_ALL_LOWERCASE Prefix3_min Suffix3_ene Suffix4_gene Suffix5_igene L0_rDNA L0_TypePath_Pos_NNP L0_TypePath_Stem_rDNA L1_of L1_TypePath_Pos_IN L1_TypePath_Stem_of R0_constructs R0_TypePath_Pos_NNS R0_TypePath_Stem_construct R1_into R1_TypePath_Pos_IN R1_TypePath_Stem_into TypePath_Pos_NN TypePath_Stem_minigen PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_constructs LCWord_constructs CapitalType_ALL_LOWERCASE Prefix3_con Suffix3_cts Suffix4_ucts Suffix5_ructs L0_minigene L0_TypePath_Pos_NN L0_TypePath_Stem_minigen L1_rDNA L1_TypePath_Pos_NNP L1_TypePath_Stem_rDNA R0_into R0_TypePath_Pos_IN R0_TypePath_Stem_into R1_3T6 R1_TypePath_Pos_CD R1_TypePath_Stem_3T6 TypePath_Pos_NNS TypePath_Stem_construct PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_into LCWord_into CapitalType_ALL_LOWERCASE L0_constructs L0_TypePath_Pos_NNS L0_TypePath_Stem_construct L1_minigene L1_TypePath_Pos_NN L1_TypePath_Stem_minigen R0_3T6 R0_TypePath_Pos_CD R0_TypePath_Stem_3T6 R1_cells R1_TypePath_Pos_NNS R1_TypePath_Stem_cell TypePath_Pos_IN TypePath_Stem_into PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_3T6 LCWord_3t6 CapitalType_ALL_UPPERCASE NumericType_ALPHANUMERIC L0_into L0_TypePath_Pos_IN L0_TypePath_Stem_into L1_constructs L1_TypePath_Pos_NNS L1_TypePath_Stem_construct R0_cells R0_TypePath_Pos_NNS R0_TypePath_Stem_cell R1_. R1_TypePath_Pos_. R1_TypePath_Stem_. TypePath_Pos_CD TypePath_Stem_3T6 PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_cells LCWord_cells CapitalType_ALL_LOWERCASE L0_3T6 L0_TypePath_Pos_CD L0_TypePath_Stem_3T6 L1_into L1_TypePath_Pos_IN L1_TypePath_Stem_into R0_. R0_TypePath_Pos_. R0_TypePath_Stem_. R1OOB1 TypePath_Pos_NNS TypePath_Stem_cell PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n        this.dataWriter.write(createInstance(\n            \"O\",\n            \"Word_. LCWord_. L0_cells L0_TypePath_Pos_NNS L0_TypePath_Stem_cell L1_3T6 L1_TypePath_Pos_CD L1_TypePath_Stem_3T6 R0OOB1 R1OOB2 TypePath_Pos_. TypePath_Stem_. PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n      } else {\n        Instance<String> instance = createInstance(\n            \"B-GENE\",\n            \"Word_pol LCWord_pol CapitalType_ALL_LOWERCASE L0_( L0_TypePath_Pos_-LRB- L0_TypePath_Stem_( L1_I L1_TypePath_Pos_PRP L1_TypePath_Stem_I R0_I R0_TypePath_Pos_PRP R0_TypePath_Stem_I R1_) R1_TypePath_Pos_-RRB- R1_TypePath_Stem_) TypePath_Pos_NN TypePath_Stem_pol PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_I-GENE Gazetteer_entrez_genes.txt\");\n        String outcome = this.classifier.classify(instance.getFeatures());\n        assertEquals(\"B-GENE\", outcome);\n\n        instance = createInstance(\n            \"O\",\n            \"Word_cells LCWord_cells CapitalType_ALL_LOWERCASE L0_3T6 L0_TypePath_Pos_CD L0_TypePath_Stem_3T6 L1_into L1_TypePath_Pos_IN L1_TypePath_Stem_into R0_. R0_TypePath_Pos_. R0_TypePath_Stem_. R1OOB1 TypePath_Pos_NNS TypePath_Stem_cell PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\");\n        outcome = this.classifier.classify(instance.getFeatures());\n        assertEquals(\"O\", outcome);\n      }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\n\n    \n\n\n    @Override\n    public DataInputStream getFileObject(URI fileUri, int start, int limit)\n            throws CatalogIOException {\n\n        Path objectPath = Paths.get(fileUri);\n\n        if (Files.isRegularFile(objectPath)) {\n            try {\n                if (start == -1 && limit == -1) {\n                    return new DataInputStream(Files.newInputStream(objectPath));\n                } else {\n                    return new DataInputStream(IOUtils.headOffset(objectPath, start, limit));\n                }\n            } catch (IOException e) {\n                throw new CatalogIOException(\"Unable to read file\", e);\n            }\n        } else {\n            throw new CatalogIOException(\"Not a regular file: \" + objectPath.toAbsolutePath().toString());\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker, boolean showDirection) {\n        this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprotected static boolean isConstant(IModelElement modelElement) {\n\n\t\tif (modelElement instanceof IField && modelElement.getParent() instanceof ISourceModule) {\n\t\t\tint flags = 0;\n\t\t\ttry {\n\t\t\t\tflags = ((IField) modelElement).getFlags();\n\t\t\t} catch (ModelException e) {\n\t\t\t}\n\t\t\tif ((flags & Modifiers.AccConstant) != 0)\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\tsuper.channelActive(ctx);\n\t\tlong passed = System.currentTimeMillis() - connected;\n\t\tSystem.out.print(c * 1000 / passed);\n\t\tsynchronized (clients) {\n\t\t\tclients.remove(this);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic Object toClass(InputEvent event) throws IOException {\n        ByteArrayInputStream bis = new ByteArrayInputStream(event.getData());\n        ObjectInput in = null;\n        try {\n            in = new ObjectInputStream(bis);\n            return in.readObject();\n        } catch (ClassNotFoundException e) {\n            throw new IOException(e);\n        } finally {\n            try {\n                bis.close();\n            } catch (IOException ex) {\n                ;\n            }\n            try {\n                if (in != null) {\n                    in.close();\n                }\n            } catch (IOException ex) {\n            }\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic TabbedPane(String title, Displayable[] tabs, Image[] tabIcons, boolean useTabTitle)\n\t{\n\t\tthis( title, tabs, tabIcons, useTabTitle, null );\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    protected void initEnablementBehaviours( List<EnablementBehaviour> enablementBehaviours ) {\n\t\tenablementBehaviours.add(new WithinLegalLayerBoundsBehaviour());\n\t\tenablementBehaviours.add(new ValidToolDetectionActivator(new Class[] {\n\t\t\t\tGeometry.class,\n\t\t\t\tPolygon.class,\n\t\t\t\tMultiPolygon.class,\n\t\t\t\tLineString.class,\n\t\t\t\tMultiLineString.class }));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        protected PreparedStatement initStatement(String sql, Object... parameters) throws SQLException\n        {\n            preparedStatement = getConnection().prepareStatement(sql);\n\n            for (int i = 0; i < parameters.length; i++)\n            {\n                preparedStatement.setObject(i + 1, parameters[i]);\n            }\n\n            return preparedStatement;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static float convertDpToPixel(float dp, Context context) {\n\t\tResources resources = context.getResources();\n\t\tDisplayMetrics metrics = resources.getDisplayMetrics();\n\t\tfloat px = dp * (metrics.densityDpi / 160f);\n\t\treturn px;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic WebSocketServer( InetSocketAddress address , int decodercount , List<Draft> drafts , Collection<WebSocket> connectionscontainer ) {\n\t\tif( address == null || decodercount < 1 || connectionscontainer == null ) {\n\t\t\tthrow new IllegalArgumentException( \"address and connectionscontainer must not be null and you need at least 1 decoder\" );\n\t\t}\n\n\t\tif( drafts == null )\n\t\t\tthis.drafts = Collections.emptyList();\n\t\telse\n\t\t\tthis.drafts = drafts;\n\n\t\tthis.address = address;\n\t\tthis.connections = connectionscontainer;\n\t\tsetTcpNoDelay(false);\n\t\tiqueue = new LinkedList<WebSocketImpl>();\n\n\t\tdecoders = new ArrayList<WebSocketWorker>( decodercount );\n\t\tbuffers = new LinkedBlockingQueue<ByteBuffer>();\n\t\tfor( int i = 0 ; i < decodercount ; i++ ) {\n\t\t\tWebSocketWorker ex = new WebSocketWorker();\n\t\t\tdecoders.add( ex );\n\t\t\tex.start();\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void setColumnWidth() {\n        int maxNameWidth = 0; // getViewer().getTable().getColumn(NAME_COLUMN_NUM).getWidth();\n        int maxCategoryWidth = 0; // getViewer().getTable().getColumn(CATEGORY_COLUMN_NUM).getWidth();\n        int maxDescriptionWidth = 0; // getViewer().getTable().getColumn(DESCRIPTION_COLUMN_NUM).getWidth();\n\n        final GC gc = new GC(getViewer().getTable());\n\n        for (final Object element : getElements()) {\n            maxNameWidth = Math.max(maxNameWidth, gc.stringExtent(getColumnText(element, NAME_COLUMN_ID)).x);\n            maxCategoryWidth =\n                Math.max(maxCategoryWidth, gc.stringExtent(getColumnText(element, CATEGORY_COLUMN_ID)).x);\n            maxDescriptionWidth =\n                Math.max(maxDescriptionWidth, gc.stringExtent(getColumnText(element, DESCRIPTION_COLUMN_ID)).x);\n        }\n\n        gc.dispose();\n\n        getViewer().getTable().getColumn(NAME_COLUMN_NUM).setWidth(maxNameWidth + 30);\n        getViewer().getTable().getColumn(CATEGORY_COLUMN_NUM).setWidth(maxCategoryWidth + 30);\n        getViewer().getTable().getColumn(DESCRIPTION_COLUMN_NUM).setWidth(maxDescriptionWidth + 30);\n        getViewer().getTable().layout();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        public void onReply(int num, String value, String msg) {\n            logger.debug(\"A numeric reply with identifier {} and value {} was received.\", num, value);\n            headers.put(IRCConstants.HEADER_TYPE, \"reply\");\n            send(msg, headers);\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic SmoothStreamingRendererBuilder(String userAgent, String url, String contentId,\n      MediaDrmCallback drmCallback, TextView debugTextView) {\n    this.userAgent = userAgent;\n    this.url = url;\n    this.contentId = contentId;\n    this.drmCallback = drmCallback;\n    this.debugTextView = debugTextView;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testExamples() throws EncoderException {\n        final String[][] data = {\n            {\"m\\u00DCller\", \"657\"}, // m\u813aller - why upper case U-umlaut?\n            {\"schmidt\", \"862\"},\n            {\"schneider\", \"8627\"},\n            {\"fischer\", \"387\"},\n            {\"weber\", \"317\"},\n            {\"wagner\", \"3467\"},\n            {\"becker\", \"147\"},\n            {\"hoffmann\", \"0366\"},\n            {\"sch\\u00C4fer\", \"837\"}, // sch\u811bfer - why upper case A-umlaut ?\n            {\"Breschnew\", \"17863\"},\n            {\"Wikipedia\", \"3412\"},\n            {\"peter\", \"127\"},\n            {\"pharma\", \"376\"},\n            {\"m\\u00f6nchengladbach\", \"664645214\"}, // m\u679anchengladbach\n            {\"deutsch\", \"28\"},\n            {\"deutz\", \"28\"},\n            {\"hamburg\", \"06174\"},\n            {\"hannover\", \"0637\"},\n            {\"christstollen\", \"478256\"},\n            {\"Xanthippe\", \"48621\"},\n            {\"Zacharias\", \"8478\"},\n            {\"Holzbau\", \"0581\"},\n            {\"matsch\", \"68\"},\n            {\"matz\", \"68\"},\n            {\"Arbeitsamt\", \"071862\"},\n            {\"Eberhard\", \"01772\"},\n            {\"Eberhardt\", \"01772\"},\n            {\"heithabu\", \"021\"}};\n        this.checkEncodings(data);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@SuppressLint(\"NewApi\")\n    public static Bitmap fastblur(Context context, Bitmap sentBitmap, int radius) {\n\n        if (VERSION.SDK_INT > 16) {\n            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n            final RenderScript rs = RenderScript.create(context);\n            final Allocation input = Allocation.createFromBitmap(rs,\n                    sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n                    Allocation.USAGE_SCRIPT);\n            final Allocation output = Allocation.createTyped(rs,\n                    input.getType());\n            final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs,\n                    Element.U8_4(rs));\n            script.setRadius(radius );\n            script.setInput(input);\n            script.forEach(output);\n            output.copyTo(bitmap);\n            return bitmap;\n        }\n\n\n\n        Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n        if (radius < 1) {\n            return (null);\n        }\n\n        int w = bitmap.getWidth();\n        int h = bitmap.getHeight();\n\n        int[] pix = new int[w * h];\n        Log.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n        bitmap.getPixels(pix, 0, w, 0, 0, w, h);\n\n        int wm = w - 1;\n        int hm = h - 1;\n        int wh = w * h;\n        int div = radius + radius + 1;\n\n        int r[] = new int[wh];\n        int g[] = new int[wh];\n        int b[] = new int[wh];\n        int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;\n        int vmin[] = new int[Math.max(w, h)];\n\n        int divsum = (div + 1) >> 1;\n        divsum *= divsum;\n        int dv[] = new int[256 * divsum];\n        for (i = 0; i < 256 * divsum; i++) {\n            dv[i] = (i / divsum);\n        }\n\n        yw = yi = 0;\n\n        int[][] stack = new int[div][3];\n        int stackpointer;\n        int stackstart;\n        int[] sir;\n        int rbs;\n        int r1 = radius + 1;\n        int routsum, goutsum, boutsum;\n        int rinsum, ginsum, binsum;\n\n        for (y = 0; y < h; y++) {\n            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n            for (i = -radius; i <= radius; i++) {\n                p = pix[yi + Math.min(wm, Math.max(i, 0))];\n                sir = stack[i + radius];\n                sir[0] = (p & 0xff0000) >> 16;\n                sir[1] = (p & 0x00ff00) >> 8;\n                sir[2] = (p & 0x0000ff);\n                rbs = r1 - Math.abs(i);\n                rsum += sir[0] * rbs;\n                gsum += sir[1] * rbs;\n                bsum += sir[2] * rbs;\n                if (i > 0) {\n                    rinsum += sir[0];\n                    ginsum += sir[1];\n                    binsum += sir[2];\n                } else {\n                    routsum += sir[0];\n                    goutsum += sir[1];\n                    boutsum += sir[2];\n                }\n            }\n            stackpointer = radius;\n\n            for (x = 0; x < w; x++) {\n\n                r[yi] = dv[rsum];\n                g[yi] = dv[gsum];\n                b[yi] = dv[bsum];\n\n                rsum -= routsum;\n                gsum -= goutsum;\n                bsum -= boutsum;\n\n                stackstart = stackpointer - radius + div;\n                sir = stack[stackstart % div];\n\n                routsum -= sir[0];\n                goutsum -= sir[1];\n                boutsum -= sir[2];\n\n                if (y == 0) {\n                    vmin[x] = Math.min(x + radius + 1, wm);\n                }\n                p = pix[yw + vmin[x]];\n\n                sir[0] = (p & 0xff0000) >> 16;\n                sir[1] = (p & 0x00ff00) >> 8;\n                sir[2] = (p & 0x0000ff);\n\n                rinsum += sir[0];\n                ginsum += sir[1];\n                binsum += sir[2];\n\n                rsum += rinsum;\n                gsum += ginsum;\n                bsum += binsum;\n\n                stackpointer = (stackpointer + 1) % div;\n                sir = stack[(stackpointer) % div];\n\n                routsum += sir[0];\n                goutsum += sir[1];\n                boutsum += sir[2];\n\n                rinsum -= sir[0];\n                ginsum -= sir[1];\n                binsum -= sir[2];\n\n                yi++;\n            }\n            yw += w;\n        }\n        for (x = 0; x < w; x++) {\n            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n            yp = -radius * w;\n            for (i = -radius; i <= radius; i++) {\n                yi = Math.max(0, yp) + x;\n\n                sir = stack[i + radius];\n\n                sir[0] = r[yi];\n                sir[1] = g[yi];\n                sir[2] = b[yi];\n\n                rbs = r1 - Math.abs(i);\n\n                rsum += r[yi] * rbs;\n                gsum += g[yi] * rbs;\n                bsum += b[yi] * rbs;\n\n                if (i > 0) {\n                    rinsum += sir[0];\n                    ginsum += sir[1];\n                    binsum += sir[2];\n                } else {\n                    routsum += sir[0];\n                    goutsum += sir[1];\n                    boutsum += sir[2];\n                }\n\n                if (i < hm) {\n                    yp += w;\n                }\n            }\n            yi = x;\n            stackpointer = radius;\n            for (y = 0; y < h; y++) {\n                pix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16)\n                        | (dv[gsum] << 8) | dv[bsum];\n\n                rsum -= routsum;\n                gsum -= goutsum;\n                bsum -= boutsum;\n\n                stackstart = stackpointer - radius + div;\n                sir = stack[stackstart % div];\n\n                routsum -= sir[0];\n                goutsum -= sir[1];\n                boutsum -= sir[2];\n\n                if (x == 0) {\n                    vmin[y] = Math.min(y + r1, hm) * w;\n                }\n                p = x + vmin[y];\n\n                sir[0] = r[p];\n                sir[1] = g[p];\n                sir[2] = b[p];\n\n                rinsum += sir[0];\n                ginsum += sir[1];\n                binsum += sir[2];\n\n                rsum += rinsum;\n                gsum += ginsum;\n                bsum += binsum;\n\n                stackpointer = (stackpointer + 1) % div;\n                sir = stack[stackpointer];\n\n                routsum += sir[0];\n                goutsum += sir[1];\n                boutsum += sir[2];\n\n                rinsum -= sir[0];\n                ginsum -= sir[1];\n                binsum -= sir[2];\n\n                yi += w;\n            }\n        }\n\n        Log.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n        bitmap.setPixels(pix, 0, w, 0, 0, w, h);\n        return (bitmap);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void quickSendFail( int classHandle, Map<Integer,byte[]> parameters, byte[] tag )\n\t{\n\t\ttry\n\t\t{\n\t\t\tSuppliedParameters toSend = TestSetup.getRTIFactory().createSuppliedParameters();\n\t\t\tif( parameters != null )\n\t\t\t{\n\t\t\t\tfor( Integer key : parameters.keySet() )\n\t\t\t\t\ttoSend.add( key, parameters.get(key) );\n\t\t\t}\n\t\t\t\n\t\t\trtiamb.sendInteraction( classHandle, toSend, tag );\n\t\t\t\n\t\t\tAssert.fail( \"Was expecting the sending of interaction [\" + classHandle + \"] to fail\" );\n\t\t}\n\t\tcatch( Exception e )\n\t\t{\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, Predicate<String> isStatic, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            lineNumber = printMethod(mv, clazz, method, isStatic.test(method), lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n        NetworkUtil.releaseMsgCompletely(initialLineBuf);\n        if (!decodeFinished) {\n            String msg = \"Server channel inactive while decoding response header\";\n            LOGGER.debug(msg);\n            NetworkUtil.releaseMsgCompletely(headerBuf);\n            listener.onThrowable(msg, ServerChannelInactiveException.INSTANCE);\n        }\n        super.channelInactive(ctx);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tpublic void draw(float x,float y,float width,float height) {\n\t\tinit();\n\t\tdraw(x,y,width,height,Color.white);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static List<Integer> topologicalSort(List<Integer>[] graph) {\n\t\tint n = graph.length;\n\t\tboolean[] used = new boolean[n];\n\t\tLinkedList<Integer> res = new LinkedList<>();\n\t\tused = new boolean[n];\n\t\tfor (int i = 0; i < n; i++){\n\t\t\tif (!used[i])\n\t\t\t\tdfs(graph, used, res, i);\n\t\t}\n\t\t\t\t\n\t\tCollections.reverse(res);\n\t\treturn res;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@BeforeClass\n    public static void setUp(){\n    \tfinal Properties props = new Properties();\n    \ttry {\n    \tprops.load(new FileInputStream(PATH_TO_TEST_PROPERTIES));\n    \t} catch (Exception e) {\n    \t\tlog.error(\"Error occured while reading mule.test.properties\", e);\n    \t}    \t\n\t\tSystem.setProperty(\"https.protocols\", \"TLSv1.1,TLSv1.2\");\n\t\tSystem.setProperty(\"sfdc.key\", props.getProperty(\"sfdc.key\"));\n    \tSystem.setProperty(\"sfdc.secret\", props.getProperty(\"sfdc.secret\"));\n    \tUSERNAME = props.getProperty(\"sfdc.user\");\n    \tPASSWORD = props.getProperty(\"sfdc.password\");\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic List<Instance<String>> createInstances() {\n    List<Instance<String>> instances = new ArrayList<Instance<String>>();\n    instances.add(createInstance(\"O Word_Three LCWord_three CapitalType_INITIAL_UPPERCASE L0OOB1 L1OOB2 R0_sequence R0_TypePath_Pos_NN R0_TypePath_Stem_sequenc R1_elements R1_TypePath_Pos_NNS R1_TypePath_Stem_element TypePath_Pos_CD TypePath_Stem_Three PrevNEMTokenLabel_L0OOB1 PrevNEMTokenLabel_L1OOB2\"));\n    instances.add(createInstance(\"O Word_sequence LCWord_sequence CapitalType_ALL_LOWERCASE Prefix3_seq Suffix3_nce Suffix4_ence Suffix5_uence L0_Three L0_TypePath_Pos_CD L0_TypePath_Stem_Three L1OOB1 R0_elements R0_TypePath_Pos_NNS R0_TypePath_Stem_element R1_are R1_TypePath_Pos_VBP R1_TypePath_Stem_are TypePath_Pos_NN TypePath_Stem_sequenc PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1OOB1\"));\n    instances.add(createInstance(\"O Word_elements LCWord_elements CapitalType_ALL_LOWERCASE Prefix3_ele Suffix3_nts Suffix4_ents Suffix5_ments L0_sequence L0_TypePath_Pos_NN L0_TypePath_Stem_sequenc L1_Three L1_TypePath_Pos_CD L1_TypePath_Stem_Three R0_are R0_TypePath_Pos_VBP R0_TypePath_Stem_are R1_shown R1_TypePath_Pos_VBN R1_TypePath_Stem_shown TypePath_Pos_NNS TypePath_Stem_element PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_are LCWord_are CapitalType_ALL_LOWERCASE L0_elements L0_TypePath_Pos_NNS L0_TypePath_Stem_element L1_sequence L1_TypePath_Pos_NN L1_TypePath_Stem_sequenc R0_shown R0_TypePath_Pos_VBN R0_TypePath_Stem_shown R1_to R1_TypePath_Pos_TO R1_TypePath_Stem_to TypePath_Pos_VBP TypePath_Stem_are PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_shown LCWord_shown CapitalType_ALL_LOWERCASE L0_are L0_TypePath_Pos_VBP L0_TypePath_Stem_are L1_elements L1_TypePath_Pos_NNS L1_TypePath_Stem_element R0_to R0_TypePath_Pos_TO R0_TypePath_Stem_to R1_be R1_TypePath_Pos_VB R1_TypePath_Stem_be TypePath_Pos_VBN TypePath_Stem_shown PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_to LCWord_to CapitalType_ALL_LOWERCASE L0_shown L0_TypePath_Pos_VBN L0_TypePath_Stem_shown L1_are L1_TypePath_Pos_VBP L1_TypePath_Stem_are R0_be R0_TypePath_Pos_VB R0_TypePath_Stem_be R1_required R1_TypePath_Pos_VBN R1_TypePath_Stem_requir TypePath_Pos_TO TypePath_Stem_to PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_be LCWord_be CapitalType_ALL_LOWERCASE L0_to L0_TypePath_Pos_TO L0_TypePath_Stem_to L1_shown L1_TypePath_Pos_VBN L1_TypePath_Stem_shown R0_required R0_TypePath_Pos_VBN R0_TypePath_Stem_requir R1_for R1_TypePath_Pos_IN R1_TypePath_Stem_for TypePath_Pos_VB TypePath_Stem_be PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_required LCWord_required CapitalType_ALL_LOWERCASE Prefix3_req Suffix3_red Suffix4_ired Suffix5_uired L0_be L0_TypePath_Pos_VB L0_TypePath_Stem_be L1_to L1_TypePath_Pos_TO L1_TypePath_Stem_to R0_for R0_TypePath_Pos_IN R0_TypePath_Stem_for R1_accurate R1_TypePath_Pos_JJ R1_TypePath_Stem_accur TypePath_Pos_VBN TypePath_Stem_requir PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_for LCWord_for CapitalType_ALL_LOWERCASE L0_required L0_TypePath_Pos_VBN L0_TypePath_Stem_requir L1_be L1_TypePath_Pos_VB L1_TypePath_Stem_be R0_accurate R0_TypePath_Pos_JJ R0_TypePath_Stem_accur R1_and R1_TypePath_Pos_CC R1_TypePath_Stem_and TypePath_Pos_IN TypePath_Stem_for PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_accurate LCWord_accurate CapitalType_ALL_LOWERCASE Prefix3_acc Suffix3_ate Suffix4_rate Suffix5_urate L0_for L0_TypePath_Pos_IN L0_TypePath_Stem_for L1_required L1_TypePath_Pos_VBN L1_TypePath_Stem_requir R0_and R0_TypePath_Pos_CC R0_TypePath_Stem_and R1_efficient R1_TypePath_Pos_JJ R1_TypePath_Stem_effici TypePath_Pos_JJ TypePath_Stem_accur PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_and LCWord_and CapitalType_ALL_LOWERCASE L0_accurate L0_TypePath_Pos_JJ L0_TypePath_Stem_accur L1_for L1_TypePath_Pos_IN L1_TypePath_Stem_for R0_efficient R0_TypePath_Pos_JJ R0_TypePath_Stem_effici R1_transcription R1_TypePath_Pos_NN R1_TypePath_Stem_transcript TypePath_Pos_CC TypePath_Stem_and PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_efficient LCWord_efficient CapitalType_ALL_LOWERCASE Prefix3_eff Suffix3_ent Suffix4_ient Suffix5_cient L0_and L0_TypePath_Pos_CC L0_TypePath_Stem_and L1_accurate L1_TypePath_Pos_JJ L1_TypePath_Stem_accur R0_transcription R0_TypePath_Pos_NN R0_TypePath_Stem_transcript R1_termination R1_TypePath_Pos_NN R1_TypePath_Stem_termin TypePath_Pos_JJ TypePath_Stem_effici PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_transcription LCWord_transcription CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ption L0_efficient L0_TypePath_Pos_JJ L0_TypePath_Stem_effici L1_and L1_TypePath_Pos_CC L1_TypePath_Stem_and R0_termination R0_TypePath_Pos_NN R0_TypePath_Stem_termin R1_by R1_TypePath_Pos_IN R1_TypePath_Stem_by TypePath_Pos_NN TypePath_Stem_transcript PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_termination LCWord_termination CapitalType_ALL_LOWERCASE Prefix3_ter Suffix3_ion Suffix4_tion Suffix5_ation L0_transcription L0_TypePath_Pos_NN L0_TypePath_Stem_transcript L1_efficient L1_TypePath_Pos_JJ L1_TypePath_Stem_effici R0_by R0_TypePath_Pos_IN R0_TypePath_Stem_by R1_RNA R1_TypePath_Pos_NNP R1_TypePath_Stem_RNA TypePath_Pos_NN TypePath_Stem_termin PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_by LCWord_by CapitalType_ALL_LOWERCASE L0_termination L0_TypePath_Pos_NN L0_TypePath_Stem_termin L1_transcription L1_TypePath_Pos_NN L1_TypePath_Stem_transcript R0_RNA R0_TypePath_Pos_NNP R0_TypePath_Stem_RNA R1_polymerase R1_TypePath_Pos_NN R1_TypePath_Stem_polymeras TypePath_Pos_IN TypePath_Stem_by PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"B-GENE Word_RNA LCWord_rna CapitalType_ALL_UPPERCASE L0_by L0_TypePath_Pos_IN L0_TypePath_Stem_by L1_termination L1_TypePath_Pos_NN L1_TypePath_Stem_termin R0_polymerase R0_TypePath_Pos_NN R0_TypePath_Stem_polymeras R1_I R1_TypePath_Pos_PRP R1_TypePath_Stem_I TypePath_Pos_NNP TypePath_Stem_RNA PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"I-GENE Word_polymerase LCWord_polymerase CapitalType_ALL_LOWERCASE Prefix3_pol Suffix3_ase Suffix4_rase Suffix5_erase L0_RNA L0_TypePath_Pos_NNP L0_TypePath_Stem_RNA L1_by L1_TypePath_Pos_IN L1_TypePath_Stem_by R0_I R0_TypePath_Pos_PRP R0_TypePath_Stem_I R1_( R1_TypePath_Pos_-LRB- R1_TypePath_Stem_( TypePath_Pos_NN TypePath_Stem_polymeras PrevNEMTokenLabel_L0_B-GENE PrevNEMTokenLabel_L1_O Gazetteer_entrez_genes.txt Gazetteer_entrez_genes.txt\"));\n    instances.add(createInstance(\"I-GENE Word_I LCWord_i CapitalType_ALL_UPPERCASE NumericType_ROMAN_NUMERAL L0_polymerase L0_TypePath_Pos_NN L0_TypePath_Stem_polymeras L1_RNA L1_TypePath_Pos_NNP L1_TypePath_Stem_RNA R0_( R0_TypePath_Pos_-LRB- R0_TypePath_Stem_( R1_pol R1_TypePath_Pos_NN R1_TypePath_Stem_pol TypePath_Pos_PRP TypePath_Stem_I PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_B-GENE\"));\n    instances.add(createInstance(\"O Word_( LCWord_( L0_I L0_TypePath_Pos_PRP L0_TypePath_Stem_I L1_polymerase L1_TypePath_Pos_NN L1_TypePath_Stem_polymeras R0_pol R0_TypePath_Pos_NN R0_TypePath_Stem_pol R1_I R1_TypePath_Pos_PRP R1_TypePath_Stem_I TypePath_Pos_-LRB- TypePath_Stem_( PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_I-GENE\"));\n    instances.add(createInstance(\"B-GENE Word_pol LCWord_pol CapitalType_ALL_LOWERCASE L0_( L0_TypePath_Pos_-LRB- L0_TypePath_Stem_( L1_I L1_TypePath_Pos_PRP L1_TypePath_Stem_I R0_I R0_TypePath_Pos_PRP R0_TypePath_Stem_I R1_) R1_TypePath_Pos_-RRB- R1_TypePath_Stem_) TypePath_Pos_NN TypePath_Stem_pol PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_I-GENE Gazetteer_entrez_genes.txt\"));\n    instances.add(createInstance(\"I-GENE Word_I LCWord_i CapitalType_ALL_UPPERCASE NumericType_ROMAN_NUMERAL L0_pol L0_TypePath_Pos_NN L0_TypePath_Stem_pol L1_( L1_TypePath_Pos_-LRB- L1_TypePath_Stem_( R0_) R0_TypePath_Pos_-RRB- R0_TypePath_Stem_) R1_assayed R1_TypePath_Pos_VBD R1_TypePath_Stem_assay TypePath_Pos_PRP TypePath_Stem_I PrevNEMTokenLabel_L0_B-GENE PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_) LCWord_) L0_I L0_TypePath_Pos_PRP L0_TypePath_Stem_I L1_pol L1_TypePath_Pos_NN L1_TypePath_Stem_pol R0_assayed R0_TypePath_Pos_VBD R0_TypePath_Stem_assay R1_both R1_TypePath_Pos_DT R1_TypePath_Stem_both TypePath_Pos_-RRB- TypePath_Stem_) PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_B-GENE\"));\n    instances.add(createInstance(\"O Word_assayed LCWord_assayed CapitalType_ALL_LOWERCASE Prefix3_ass Suffix3_yed Suffix4_ayed L0_) L0_TypePath_Pos_-RRB- L0_TypePath_Stem_) L1_I L1_TypePath_Pos_PRP L1_TypePath_Stem_I R0_both R0_TypePath_Pos_DT R0_TypePath_Stem_both R1_in R1_TypePath_Pos_IN R1_TypePath_Stem_in TypePath_Pos_VBD TypePath_Stem_assay PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_I-GENE\"));\n    instances.add(createInstance(\"O Word_both LCWord_both CapitalType_ALL_LOWERCASE L0_assayed L0_TypePath_Pos_VBD L0_TypePath_Stem_assay L1_) L1_TypePath_Pos_-RRB- L1_TypePath_Stem_) R0_in R0_TypePath_Pos_IN R0_TypePath_Stem_in R1_a R1_TypePath_Pos_DT R1_TypePath_Stem_a TypePath_Pos_DT TypePath_Stem_both PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_in LCWord_in CapitalType_ALL_LOWERCASE L0_both L0_TypePath_Pos_DT L0_TypePath_Stem_both L1_assayed L1_TypePath_Pos_VBD L1_TypePath_Stem_assay R0_a R0_TypePath_Pos_DT R0_TypePath_Stem_a R1_cell-free R1_TypePath_Pos_JJ R1_TypePath_Stem_cell-fre TypePath_Pos_IN TypePath_Stem_in PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_a LCWord_a CapitalType_ALL_LOWERCASE L0_in L0_TypePath_Pos_IN L0_TypePath_Stem_in L1_both L1_TypePath_Pos_DT L1_TypePath_Stem_both R0_cell-free R0_TypePath_Pos_JJ R0_TypePath_Stem_cell-fre R1_transcription R1_TypePath_Pos_NN R1_TypePath_Stem_transcript TypePath_Pos_DT TypePath_Stem_a PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_cell-free LCWord_cell-free CapitalType_ALL_LOWERCASE ContainsHyphen_CONTAINS_HYPHEN Prefix3_cel Suffix3_ree Suffix4_free Suffix5_-free L0_a L0_TypePath_Pos_DT L0_TypePath_Stem_a L1_in L1_TypePath_Pos_IN L1_TypePath_Stem_in R0_transcription R0_TypePath_Pos_NN R0_TypePath_Stem_transcript R1_system R1_TypePath_Pos_NN R1_TypePath_Stem_system TypePath_Pos_JJ TypePath_Stem_cell-fre PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_transcription LCWord_transcription CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ption L0_cell-free L0_TypePath_Pos_JJ L0_TypePath_Stem_cell-fre L1_a L1_TypePath_Pos_DT L1_TypePath_Stem_a R0_system R0_TypePath_Pos_NN R0_TypePath_Stem_system R1_and R1_TypePath_Pos_CC R1_TypePath_Stem_and TypePath_Pos_NN TypePath_Stem_transcript PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_system LCWord_system CapitalType_ALL_LOWERCASE Prefix3_sys Suffix3_tem L0_transcription L0_TypePath_Pos_NN L0_TypePath_Stem_transcript L1_cell-free L1_TypePath_Pos_JJ L1_TypePath_Stem_cell-fre R0_and R0_TypePath_Pos_CC R0_TypePath_Stem_and R1_in R1_TypePath_Pos_IN R1_TypePath_Stem_in TypePath_Pos_NN TypePath_Stem_system PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_and LCWord_and CapitalType_ALL_LOWERCASE L0_system L0_TypePath_Pos_NN L0_TypePath_Stem_system L1_transcription L1_TypePath_Pos_NN L1_TypePath_Stem_transcript R0_in R0_TypePath_Pos_IN R0_TypePath_Stem_in R1_vivo R1_TypePath_Pos_RB R1_TypePath_Stem_vivo TypePath_Pos_CC TypePath_Stem_and PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_in LCWord_in CapitalType_ALL_LOWERCASE L0_and L0_TypePath_Pos_CC L0_TypePath_Stem_and L1_system L1_TypePath_Pos_NN L1_TypePath_Stem_system R0_vivo R0_TypePath_Pos_RB R0_TypePath_Stem_vivo R1_after R1_TypePath_Pos_IN R1_TypePath_Stem_after TypePath_Pos_IN TypePath_Stem_in PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_vivo LCWord_vivo CapitalType_ALL_LOWERCASE L0_in L0_TypePath_Pos_IN L0_TypePath_Stem_in L1_and L1_TypePath_Pos_CC L1_TypePath_Stem_and R0_after R0_TypePath_Pos_IN R0_TypePath_Stem_after R1_transfection R1_TypePath_Pos_NN R1_TypePath_Stem_transfect TypePath_Pos_RB TypePath_Stem_vivo PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_after LCWord_after CapitalType_ALL_LOWERCASE L0_vivo L0_TypePath_Pos_RB L0_TypePath_Stem_vivo L1_in L1_TypePath_Pos_IN L1_TypePath_Stem_in R0_transfection R0_TypePath_Pos_NN R0_TypePath_Stem_transfect R1_of R1_TypePath_Pos_IN R1_TypePath_Stem_of TypePath_Pos_IN TypePath_Stem_after PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_transfection LCWord_transfection CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ction L0_after L0_TypePath_Pos_IN L0_TypePath_Stem_after L1_vivo L1_TypePath_Pos_RB L1_TypePath_Stem_vivo R0_of R0_TypePath_Pos_IN R0_TypePath_Stem_of R1_rDNA R1_TypePath_Pos_NNP R1_TypePath_Stem_rDNA TypePath_Pos_NN TypePath_Stem_transfect PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_of LCWord_of CapitalType_ALL_LOWERCASE L0_transfection L0_TypePath_Pos_NN L0_TypePath_Stem_transfect L1_after L1_TypePath_Pos_IN L1_TypePath_Stem_after R0_rDNA R0_TypePath_Pos_NNP R0_TypePath_Stem_rDNA R1_minigene R1_TypePath_Pos_NN R1_TypePath_Stem_minigen TypePath_Pos_IN TypePath_Stem_of PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_rDNA LCWord_rdna CapitalType_MIXED_CASE L0_of L0_TypePath_Pos_IN L0_TypePath_Stem_of L1_transfection L1_TypePath_Pos_NN L1_TypePath_Stem_transfect R0_minigene R0_TypePath_Pos_NN R0_TypePath_Stem_minigen R1_constructs R1_TypePath_Pos_NNS R1_TypePath_Stem_construct TypePath_Pos_NNP TypePath_Stem_rDNA PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_minigene LCWord_minigene CapitalType_ALL_LOWERCASE Prefix3_min Suffix3_ene Suffix4_gene Suffix5_igene L0_rDNA L0_TypePath_Pos_NNP L0_TypePath_Stem_rDNA L1_of L1_TypePath_Pos_IN L1_TypePath_Stem_of R0_constructs R0_TypePath_Pos_NNS R0_TypePath_Stem_construct R1_into R1_TypePath_Pos_IN R1_TypePath_Stem_into TypePath_Pos_NN TypePath_Stem_minigen PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_constructs LCWord_constructs CapitalType_ALL_LOWERCASE Prefix3_con Suffix3_cts Suffix4_ucts Suffix5_ructs L0_minigene L0_TypePath_Pos_NN L0_TypePath_Stem_minigen L1_rDNA L1_TypePath_Pos_NNP L1_TypePath_Stem_rDNA R0_into R0_TypePath_Pos_IN R0_TypePath_Stem_into R1_3T6 R1_TypePath_Pos_CD R1_TypePath_Stem_3T6 TypePath_Pos_NNS TypePath_Stem_construct PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_into LCWord_into CapitalType_ALL_LOWERCASE L0_constructs L0_TypePath_Pos_NNS L0_TypePath_Stem_construct L1_minigene L1_TypePath_Pos_NN L1_TypePath_Stem_minigen R0_3T6 R0_TypePath_Pos_CD R0_TypePath_Stem_3T6 R1_cells R1_TypePath_Pos_NNS R1_TypePath_Stem_cell TypePath_Pos_IN TypePath_Stem_into PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_3T6 LCWord_3t6 CapitalType_ALL_UPPERCASE NumericType_ALPHANUMERIC L0_into L0_TypePath_Pos_IN L0_TypePath_Stem_into L1_constructs L1_TypePath_Pos_NNS L1_TypePath_Stem_construct R0_cells R0_TypePath_Pos_NNS R0_TypePath_Stem_cell R1_. R1_TypePath_Pos_. R1_TypePath_Stem_. TypePath_Pos_CD TypePath_Stem_3T6 PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_cells LCWord_cells CapitalType_ALL_LOWERCASE L0_3T6 L0_TypePath_Pos_CD L0_TypePath_Stem_3T6 L1_into L1_TypePath_Pos_IN L1_TypePath_Stem_into R0_. R0_TypePath_Pos_. R0_TypePath_Stem_. R1OOB1 TypePath_Pos_NNS TypePath_Stem_cell PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_. LCWord_. L0_cells L0_TypePath_Pos_NNS L0_TypePath_Stem_cell L1_3T6 L1_TypePath_Pos_CD L1_TypePath_Stem_3T6 R0OOB1 R1OOB2 TypePath_Pos_. TypePath_Stem_. PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    return instances;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void removePropertyChangeListener(\n                                                          PropertyChangeListener listener) {\n        synchronized (getObjectLock()) {\n            if (listener == null || changeSupport == null) {\n                return;\n            }\n            changeSupport.removePropertyChangeListener(listener);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public BeanConnector(Class<E> beanClass, Matcher<PropertyChangeEvent> eventMatcher) {\n        this(beanClass);\n        setEventMatcher(eventMatcher);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testBlock() throws HyperLedgerException, IOException {\n        Block b1 =\n                Block.fromWireDump(\"01000000030a829633bc7bf1a7da1f62a5e07249dccb23d2a49f546ba100000000000000bc136fbaa332f13c46a89ae811aa622f3093608cf7d015276c3e64f9cf060c53801aab4e4b6d0b1a734bf22a1b01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff3807456c696769757302861b2c4d4d3d3d3da55adedb4c5856f7307e68d96f06f9f3849315ad0af015c15cf5f71d00d2340100000000000000ffffffff3501000000000000004341045976c2b7974f5b7b0dfa5a0b5f4b0828f78f88d4d6518dc0645253d6707355596364430b9647fbd15b9e264ad4c0939107fb8501ea89f91bd0857628dc16ce4bacc1585804000000001976a914cbf559b9d1f02508a448e28891395d8a143f26fb88acb2a75504000000001976a914996e7360841075378817a79a782d72c809484f5a88ac8e1c0204000000001976a9146df4d16e43f3f727f1968c3c09f1bfbba46fc5d288ac75b11e04000000001976a9148597d5d833a11186977e29001f651bbd4d63d0ee88ac0c7fd017000000001976a914b2606ae3ce0782268e916dc9e08eb13ba285e3b188ac89e50c04000000001976a914af47a490cd47b3fb1ae1800cc7fd1f2f1860903f88acf0e6a604000000001976a9148d5567ede2794f8b5e85c89ccca6cc2e3ae72a8888ac9da38d05000000001976a914a975dcbdef5c9360d831963bb3923411a495c0d788acf9452304000000001976a91439eb449e3cdf858e054533de91c543fff76d2ae088ac6c302f04000000001976a914af652c623045da48c22e117616d8305d05982b0088ac95caca05000000001976a914c5bc8e52b65d8031b8e3a77920fcd76cc0ebd69288acf09fc804000000001976a9149e10b49ac12dbb2ec969b78442c61e9043746adc88ac2dd7a104000000001976a914c2f21f1ef1bbb2c97080244895ba8a32546cf01d88ac031ec906000000001976a914776c25e07fa49e549944d24acef7a3a3d94818ca88ac6bd11504000000001976a9146f67318de52ca1d2082b9bf094d08b06492c435f88acfd37e804000000001976a914c4423f143d23b6c1a26b8f5aaeac3ccb197689e588ac4d813004000000001976a914cd5813b9e4b38eae5c99eeabd76d09d346bd9c2688ac67390805000000001976a91487d659973a1c75b11e338477d44c4501b66570a788ac3dfac304000000001976a914418e4d605cce8e34289830a21614d66145b4a1da88ac5a325f04000000001976a914180cbd0a36c0991a1d400be72d31d6f6e656957388acae4e0e04000000001976a9147de940f91c3b526d77d8f7589f11172ef47286a488ac9adfeb04000000001976a91404fc38108f998d1559bc80551d84c6630318698488ac8c546704000000001976a914dada56f3d1eacb8ef36d00d4eb5bd06449759ac988ac45aea004000000001976a9142a8c470a2382d80fb56cdf60782590ff4787becd88ac8770d004000000001976a9147be05c03fe69f8da79ef8c3bab21fd4c3819523988acbb450304000000001976a914d744e9daaf32b7f76f4d44c94fa4d6ff428fe89c88ac767e3904000000001976a91461acdc99dc928d31099f1adc76db005f6d9a5d7788ac9146fb10000000001976a914341d91c5a7615b335afbf7d43e9aae2cb12a2a1088ac7318dd04000000001976a9141305cfca4cff38ed9e061c25290c75caffa272a588ac4b016204000000001976a914dd4c51b0788e0bc6be6ea9fe23ab117d87d76c9a88acf3ea6404000000001976a914908ebe2f857c5ceab1050ff96e52f0da5232980088ac94f12c05000000001976a914e6e55e2991742ece883b5dc084efc46552e9378588ac0d225404000000001976a914dad596aa198f76150caf3c43ae0c922bf76e011788acebae7504000000001976a914c8e9eac50f100e2782ed0ca2315c061acd229e1888acc6e8b804000000001976a914ad9d837dd996b6f09408c48fb021f47113893e1288acbcc31e04000000001976a91400f7f42c37f55dc4f75e5145afae80665c62e6a588ace4901f04000000001976a9142dbd943fa4480987fba00463944234550a6d94d188ac0fac8405000000001976a91444e9b068c16db122aed770108345e4a60924298d88ac3bba900b000000001976a9140d37f0f7edeae22e7ab7524db57b3885c0a1844f88ac90187604000000001976a914acd9ff6e5bb5ad0e31ba93a691332fcd5aea183a88ac9ccd1904000000001976a914b5a55074e8618f9d4f9e9c86083eff096f5011cf88ac23e94f04000000001976a914e02e3b7e136d12b23bd07a0954897a8c686edae588ac3a962704000000001976a9144b8dd99194ae1887826edce17d0998875c89c81b88ac3642af04000000001976a914e2daa0e1e810d90afdc4f67feb22b42b6911fcc988ac84209b04000000001976a9141d71a68b2bfc1af6842744794a460a532e9112ed88ac66050b04000000001976a9141f055a6a3c9dbf8857c366a6cd43a34c1f46ab7e88acf9dd2704000000001976a914d5f6ed687203993d4ac05401add7fdece18b8d8488ace74c2c1a000000001976a9142aa969bf3fdbe587bf6c14e606c4d2b14665c93d88ac24db4b04000000001976a91449e45c4f2ff522d6e026a6d8337de6cb87cd960888ac66ee1804000000001976a9145318d3a7bd7d5be0650a8e7d16db458a6b0fd1ae88ac96e10405000000001976a914647484ab81427b30333eeaae714ba08a0980a83288aca2b2ad05000000001976a9143213e4e884d1dfad34a563271894ed76667abcea88ac0000000001000000031091bb34c19754b689685bd5f84078b437653d08377d2d03d256b34f80eb219e010000008a4730440220476c26cdcecccf46fdd96fb87814661cb1044e103d1bcd5be339b9cbaceca47902201b2caafe5b36913ef475d4d33b9d62aa3316ece6f1ac3371a506906e61afd4510141048c632401521a105db6b62db0a2c393181b5538f2c56d461057611252baebc9c7794378c252c45b7393fc93ea3b8bc6d6db1c9b5506744d51d1ddd7a9acd27d81ffffffffcc72f7a8acf77c1b1313d4ba229bff7db4f40e0a1b525a9b8a4dbc8ecc80b070000000008b483045022100997b74ef85d3be61a96a4d8ecebfeb588979364276f54fa77571ff8fb7906e4202204390f9935695194362fbc221b00436b4811d01f645715105f9d081ad65977e2b014104fd579aa4983cece29365038ddbaf479af86bdf25afdcae67bbe8b30c268aecdac6cd8f923ef3f23ab694783f9243522f67886a46a43499e3fb3ed49623869d6fffffffff8ecdae566b8e8d709a32054175ce61fc2a9323e60023f62b23c342a7186beeea000000008b48304502200f95d4cd51bb5b867563700979ea23bf69921b1a0262ff5de3d7330bb992a713022100de58fa5822e7e62c8e6e4edbdece7913cb21f5a7b5a39d85fa9291874ce81a710141045f7f6eed56863bf527b8fd30cbe78038db311370da6c7054beced527d60f47a65d6f1ce62278ba496f5da4a3d738eac0e2cb0f4ac38b113cbeabef59b685b16cffffffff0280c51b11010000000576a90088ac4cbdd397a90000001976a914d1121a58483d135c953e0f4e2cc6d126b5c6b06388ac00000000010000000379c1e9a1351b8c48fca27acff391512cb175978c8168adb40bfcf53c05dcb294000000008b483045022006a45b800a55ed2049c5d4ab7a56c2ff5855b665e9ae317d630fcc7e6fc8fe290221008952ed27b36591f55fcf42f486d1f9c958946c30721c1c0cb74972e681bd044e0141041f2f2a1e0b07aea8121b0af50fda58aa5893c5484c3d7389b2be08d02e986b07673c1207bb44e4c8f53ed51068ddec008105f1aa1c93c182875174561c08bd28ffffffff95a53b939c4bb466d77eec9bdb5a2ceed11682150e57b70a523d6f0c875998ff010000008a473044022005ea3540a376e1e912a86ffaff77fca577b790bf9e6c01f1ddca0ee1f592f03b02202ac4b54ab374df394c339c9a56e3730511b2c9a8c43213cfa66e46540e1d06ab0141045a46b12291ce91177728fe72e2b5fcf889ec9af92e5b6c5e2d018fec3be33b9cfefa818ec5f054086d88529dd6d70545b0aaa2a189b2657ae95e7f14397529bfffffffff001372c7988ea3117066373bf6fe4e065eeddab23113017852deee196e83d990000000008b4830450221008107b6c0d39012ed287546e170bac03ca5b523f768a6caddcdd42a05b762f4e802206156dcae129cf29306644dc06a7cfb361ec4261b27c3b0dd05e11be8b1ce643a0141047c0e1c51568226267607fbecddaf8418ab9c5945f59c15101c513338e481f838e4d3aea166fd0c2577b6324e623524562f0b7f00861e25cc4eba4012f3b7dd08ffffffff0200e40b54020000000576a90088ac2af12b94010000001976a914c494dc55663b229dfff5cfa4494422da1cfb733f88ac000000000100000002cebb018b42ff01857999f937a0a9f806c5140c99ebf4350b3f063de54f242d67000000008c493046022100bd4495bc8894b6dc69b61e4490ce6fb037d901180ceb77c52a1cade1e39b6b4b022100db71fb5e4ac1b0ce41d640017a86f25b5a0c55373076851b249e1742afc6d8850141049ff3c0a24258c2ea592bd7470ec90808e5b2276c87e42d2dc634a50b92af6deaa759df2a69e887549f1e29f3ee13767e000e9631fc50935b091fbfede3155770ffffffff2e807ac0a79be9f4fa4424413b489361a2b3854915f74fcb9891489455df8e7a000000008c493046022100b35ada65dbcfad525f2ef72b8d184920d259a820e52ab42107d85e452830f6da02210098a6cf88216650ea1ca782b3be407cd7a41d9cce31b62b4d25b413cee75675820141040c3e3629999aa48634ed51d1b67567b0275579eb70cb308de99d7a4842903fd4240c269835c0a7cd6ed6d4d0fa563536727360a5b1b58884f8123221bd747e04ffffffff0200222048020000000576a90088ac95b46b8e140000001976a914ad42ec3fb939e7fb32e4181c627b31f4ca51935088ac000000000100000003f9b0aefb747977759cb38eaf49070941bb50725c58131a51dd2ea382856bd493010000008a47304402201bb7594d0dbcd3c3d0dda3b62056000ca8d4bfc888e3b2ccfed63267ee313e8c0220728e003c152e743525ee46421cb84ed03734536c6ddfb6edf22605ba937f2a1b0141049437dc89b2f312d6bf45c4a8f724a03f38f005ef797ab109c590ae8f2b741bfaf335198813e3ac20f41aa61a44aaa41c2d6d1351166192a93e9a2517e300cd11ffffffff907e6fb71e188950c217ecc1354e60978485466616e4f2fc0b54066dd6f74a7f010000008b483045022100f2bd60edde0336efb4469648a929483f189324838d12e03302974c0f9f3a38550220236ac00c39c3a5d3953374880fc761bc5e5887d092e6a57cb4c52cfcbf531eca014104984a410b276249519104c78fbf3c254a5d2ef54e4d5f50ee4e97e8bd921864632b6bb0aba8b15e574e9bef31452fc5d2ef86754f02e9f652e70411707cd89e39fffffffff6c7455d978b99e8545ef6cd9e2810cb254c8b044da43839e44f1af25c0abd89000000008b483045022011800e7110565b4ef1ad74b681c290197fda98d64f92d5dde87a806e3a9b9089022100e1d97e5b2a7849197c5d6b88e57b58a619965cdd66f2a9945775b445b474c17601410434eb3054af434d2b516f3bf7a29a765ee4a22911c4708f829d766ee635e62c6f4d77150c83d3f0251cfbe6a4b8c2b507c3b0a3dcaef1daea571728b1a3bd0c8dffffffff02a07be810000000001976a9144640c0f3b01655377f10a4ec6c71bc4f9acb037388ac00c817a8040000000576a90088ac0000000001000000029c2939ce49092ebe03663784ff1159ea60a51cd00e140cfb30a6ba10d48b10e1000000008b483045022100b0a0013746586915dbfcd81160433c50abb23ea5f14843ded879de314268de480220363d30a18ddf66fe4922384c3b03c591d26585ef6b886c530ce5d6caa0b2a40701410469cd4c69f639e978dcc3798fecfaff76a00ef713d4855646b2b358bdb5a6cdd1292e684917fa1c3deba06d35c3d64723b656ec4df914121e7a3e3b89b7c720c7ffffffff0b524c36b7a69737820ab2b8baeb26a98920d8e0a5fcabb3db9a61eacfb6efb0000000008a473044022049b3a8e3daa04e634605bcdd4a5e159ca06250e33872455b902e319a2fbdedf4022011c7be9f3673b72fd5181dba3e7808b48051d2ff0fc46c70344d55631aa21454014104dc93841231106c4a749644408d55b0c7e0f886da3a854308dfd4ad626847785175fb19b31d9c220b2541767e792bb7f7e3d0608b0660649452636ff25d9e9584ffffffff025b5d004b060000001976a91416f50e5bd3609b11b4b29c945d02d68b307fd2c288ac00e40b54020000000576a90088ac00000000010000000219efe8e1194227624d2bb6f318c6ec8de8b7bbba0c81ae80c17edcdfc267471f000000008b483045022100ef15d2067b6a1a649afe62b966c7b0b52eccd25bff6092c6f6855653fbfc8d6f0220329b7e39b7081318ef7d6b1a48735a3d00f69ddbaa6b220158138da139eb74e501410490cb3e0cf1e82fd74da06588c2b8a227ce6cf3ffb586cb223a15466ce993ec9a831c05d428768859f7fed3f07ea99f57bcc6b7273e353d34062a61f44ed749c1ffffffff95d6e74b2c05ecefd10db5a9ae889cc7cfbc614d1fdc27dd2a5bcd8a6447c25b000000008b483045022100958f9940845b4c149fbf00942634eef1767f2cf6d786ab71394c6e563db5e64502206f4cfffb10513b59b02ee77f62f6e1481b70d78ccfd5ffe95ee97fa5ba93b2bd0141047826de0d9803045401b9eacdec3dd12ccc24db786d613997ab33c3e0cad2952c736b7360684cd8c5ca3698531108f9c1d121be690567b369d49a1c3400d96614ffffffff026043a97e0d0000001976a9143c6eddbc7b4dfba3870364c5f72b5adfec96a1d688ac00d159920b0000000576a90088ac000000000100000004b97076000b63b0af66b597376ba2f647ba15a03be001c5f84b60d804b9675416000000008a47304402207d2ab9d5febcac0c6863e57a97b363a51c21c836a5ade2efcbd88884da697784022075838f05471489b9b83d6349a91f259c8de85168412d267b5ab37484fe4b689c0141044428c31cb917b10df68b9228eec86d9236a700b30bd6db34d7c3a227bb403f0cdd02418a99936da84c6e111c054ca8f556ba149d2f3c78a539a8bdeb04214e62ffffffffd3162e2acc1e161e6bea079d45f38e71e91c0cf87858c4dc3d4001133733ebc4010000008a47304402205ced90985ef2db226e9e6cc10806334fe50dc6b9f3f759e6079600900968d7c302201ea8635b24cc7e7226ae3891d3968792753d346bbe29e68632b99b9acdf7382e014104db1c689aaee39d3294eeace8ecb58a1af09401b2e5732beb8c0e52cdcd82f38e22d404a521dd1f7bd238350aa2e2f7365619eae49d8f8411e323720f1db9984fffffffff50d2d9c5c95bf7aed197884e60d33847ce9d34c69f1fa4a28fe3fd5356cdbf14000000008b483045022100b68835fa1177de4aa514e55232c34a88ad9081acdaf30797565fbbf49f722dba02206ed2ed427afcea05c37fcc6e1f11e676a820215fa65fce16a5481316fbbcf577014104df16cb9d9c33e0783b2f6256727edb62451279f6067cc4f7d7d6017f23982152fab4bdc9efd830e995df472e05fc45f3bab3568c2bd8f5165d46be2d372eb313ffffffffe379d34887eba5e646ba43709ee78f480ed714a3b2a1fd072aaba6b1756858a7000000008c493046022100b430fe5fadcbd57a16ca8068a94f888a8fa4ac5bd8fcc30e3708dc15dab703f4022100b3ed2ef9bc04e068d8404b7fd8ff3284e88082da8436b543acec9404a75786a001410498cd5baf356c719a385b5437a569d17cb5f9705d1972d9657208f174b07eb7dd34bde6917d00a73e9e21b2667862cd2e0f6c3efe7bbb7cb1535aa702c2c56335ffffffff027a404c79020000001976a91400929f558848fdc75f28c8d54a60168f1f58e95288ac00e40b54020000000576a90088ac0000000001000000045286ba6b751fd73b489ff568c4703a218c1b84cb4f050c6868647281c8a0bb5a010000008b483045022100d9c62fa2400947bbef0cf3a12fb624cf7077cc7012c8779d60caab5e729c592a02203549b760feb804ff75b7debee0f488877267b1898f328e5ed0f41b359c8e4bfb014104406db037ac5abf7706be70bfcb8bfc96a06f4d2e9ff32d558626326c4292bd7fe009ab11b78fb77e954ff1f1d9e75e0b813b9294c935ec346f878ebf63f6e648ffffffffd979bac67c4770b7d426fa9e86e7f28e9b2fb122c54aa3dc1c1a5efbcebbe71c000000008b483045022100df404dee5c82f8a5f427f265b2a8bf8281287bb0a903ef7c9a420ad19b6240d702204ef82b8b1fb6d96af1b77eef45cfb41f30f8b972874e476b5babb1ee849aedd3014104dbdb7215d1d188a1d4b0cc753893ead675ff357d12a651bff4f5a085bc25ca3841f6685621be85fc5bffbb96d0ac7b22d7faa3b0a2e0dac791228fc21168986affffffffaf0f08cf052709bfc240a5c9797316cd992e029fbffafe8d12583ba7b5031f15000000008a47304402205e2b963834ab670a0ed1ef54dbe97bd059968a9a7000dd74c80e32da05c273560220498567c78d4257adb126b1c86c6f296f0ffbaeb45f9234c5fe0611570001b2d00141048b354f8985192f0cbc2240807f74696da5e1b26e3d4175a9c5ce29f476462337db3cd259926d106a77d89f806342ee14bee8dbda497992e0584cf71dacef881affffffff5033093d8fe628a954d4a349ba553d8aa423de6de279327a5d9d5cb43c3758ca000000008a47304402206c428dbf810e0fb77747f7ff9d60bf6657e7e3edb290b9a8de8c12982ecb08ce02207ad61ae4d2470b3d8759d99bb4bd116a90e771ab76fbfdc791be0f7a5cf5f328014104552b2eb41559e7ce64c513f8a606fcbd8e39b0f8320ea93b92d2d483c86d8e5f860bf652bee62e744b10671dbcc89acfe8df3f7b368162cf8c77a42e25f8b7a1ffffffff0200e40b54020000000576a90088ac27edda06030000001976a9140ad47afb47219ba4efadb4d33db6e49a71f724af88ac000000000100000002640bc279dc41264c678e24416062291991d247cb593c21193da12ac7e9ab0e00010000008a47304402204c00e5109dbe1644413d92ac8408e0c02d888850e97c1bd74aa80f88c609bdb6022047d3f208244a3111c612e6af13052efd4b543c4d112429d2f838d35ce859dcc2014104c99034ab76c908b87a22f89b8e260447a066349c754a4eaa4e2b4d663e4a92f6a1e6540a82c49fcdc03aff1f9937ffa6d4aaa97802276438bd9703f3eb732ce1fffffffffd269441066b1683fe398de40356c4958d3474d817d036581302dcd0412c4174000000008a47304402201f7a187130a083a4d941561e0c39d61287fe1580d874874d7a62aaa62a85f98202203a14a99b2ba48c870073234c56a3b055506116ca5b8d0af9a1dd7997b55bce010141048548bb73eb0ea484f7f55236522f4a681cbf75b91848eab975aad8af35791629bdd706fa26e57296c5accd02c91b1b051acc850bc1e7c037268b128a52bc4b5fffffffff0280f243d5000000000576a90088ac0488242d020000001976a9144914281232f335f5ca684da9145aff9fed2b1bd388ac000000000100000004a70a2acec4564cbf68ba54de025943cd34db518ef7ccaa1adb9f079166d1d838010000008b483045022100a2b5c5f76c8565f2dd24e13af4c56578dc1755b74bcc2fad27a61d5e9a76e9c102203c7e279e07d10b3c3b0c9c87d29faa0304bedf3e9444b23e58ce445f15a052db014104660cce1ed3c99e1e6c2af088be0fb107c5dabcecd4eedf45f076dbe7ab5c0aa01506fdee2c2a6520f193d40a7c53d680f36ed17629bdd408bbc0be793a9026b8ffffffff50fabcb9f2a42335ceae67d9a97e852f1ffe19356b086fb1a1ee9873edd50eac000000008c493046022100d1dfe92b9f122cb5163b35f4a80895b106751d3600e330d3612c5b78ffa84a39022100939d0af24b057f08958030a13d46e2d56842b8e147dc7ffa7c0cc19e3d3527c601410465b84f162d2be2a7fcaf467c610594e7209f96bb3e2fac8e57bdd9f02f8c4b5f3434e656f8cd0d7876cf671690e939e31bf3d5b4ce70590862dedd35eb0db903ffffffffca944f07a8fbbdf81b4c575129e97485a3d3c160f271d07a426728f3c4da08e6010000008a47304402206c0022db38159e32f48bbfef5c781077cd147d9885d7f20a1af73297309a22b60220417b89f11ddbedf407e4c2ec745f0ee99bdac213c752fe77099b37ac5651e675014104016719c960c4312afd82d81818599a79c8e52c96bd631ae12ed7fd474f656696e4365bf60f5433691944f2456f49750e9fc42b067a4fa31c109f2171072af728ffffffff4adeb8301ef9093c4325e15c6c822bd34288ab8b8909754673af9d4b67bdc234000000008a47304402200515281ee114adcb28c3c5e6dc0d15d6ce0a69dcbb1457308f69ca109cf64e9c02200d48b04f2a44202ce0843e6b80a4e3c78eaa2a7f300259a1116c86d0550c887a014104cfa10d3f5636b42042d44d10193e9c56ad5b37adb4af47844f8b361e42748f33cc8540ac015696ecf4d687f86ae17260a393d40a5c4ed2f343d6af87a9c71b08ffffffff0200e40b54020000000576a90088aca04ad999000000001976a91415c2f66d85282d3136f044874899df12c6af401688ac00000000010000000548bbc19f5dc889b303a5097032b6235d0f293c3517437a22ab868fc5b030ccbc000000008c49304602210083cfebea9add1b691c17bbaec289ca4ee4b0e5052b95b85321350d8eaf17e7ff022100daa02af66c312540cde6f0d78d7156fbec17cdd0b1fc9f737319eded387197aa014104a9efbbc65f1fc99a89b899a2ca0f6ea7a709dfe1386aa1ee22ddef0fcff32cfd776d79fc67f937604cfcf39505de4b79ba753205f5d17537bae4b54e26248d0fffffffff0b050a9a612d4007e369d02370faf7dd9c99f4025136f9ba3e3c05f3026b6155010000008b483045022100df6607bb6285833a13aa20e96c05693b3078b7371956b8239aed1ce15af1ba8502204c2384dcda08bb68e5dcf0d65fea4aa2933fc1b7fb827541648cc03e4886248d014104debd5fe6e6bc796ac51e8d8e6853f6bce567f2d56e4c6086e14f7d7cedcd7999302980e775b5334deb21f29a2794e54979db14dc239f9237b217619297c1152bffffffffcd34d66eabddd3067fb4a2aefbd097e6c2a636d50fecf59f2676e58ecbb5f092000000008b4830450220784a6af74465584014dd815c3075918137b96f30edfa84d05accab644b61238a0221008f3bd6860303a3ade81cf66823c933083e18d38573da4f28a11f9bec2e3f6c560141044ccbe1d2a628b313340ff0418e8568f904cdc4eb6d4893ad8da70c4165dcb838122061aa47e2ab852cd782fbb42d21bcb8ba243e78ff4344f8bd4faee092054affffffff42d957671ff25e06200376ecf7e764b75305405a397235d85663bcb187390fc7000000008a47304402205363f75cb7c1a01bfe10e70467c7438a266793ec10d1347aa5a54fd60e82966102206b7fbb1b974dc3d99c74b7496627746562e609cefda4b646c654eb4dd34eef4c014104eaf728ca0222ed95104b3bb7497011e275b83b76a01c3dbb20dd6fcc12b3ead2722c3a19a02bb3f113433477c4cc6756fc126c8382e85666d8574af34e0275abffffffff6c3fad717b65f66f35f7b6f37f37d1b5e5487594a5c26ec2c15a4958aa266920000000008b4830450221009abbc460d10aeefc526c5f1b2a03e9d30522918bb870b5aa2d52614109b7ef910220439a27b134bd6dd967ea8e6afca46f8f7b7344120b66fc20c7fbb6ddbf561530014104b187b9770f4be1aa8e7ffede833b4e9cd3955ec8ec435ed53ab5c0b047df419913c6d7ece8586222ba4fd4f3c19a582214c3412dd3f31b1479d806548242e285ffffffff0267ed0290080000000576a90088acd8ec1115000000001976a9145c6c7f33ff387aa5e76a909ee1eae77a982f8fce88ac0000000001000000020d7dc1fbab67fdc7ad07a32dc264a6a89e1b4f90bd2a68e250d50f6f56422a4a010000008b4830450220109fa1e9015ca11ffb48c1c3396c16aabdcfa45f5161c45dd01be0d00296989102210087e4591ec96b49ce0aab06e59034b066e7dcfcdfddef978860ef55a6fd305465014104e22055ed36a6825cb9ef98896e21c697b9a1d0c233220ce5ff1e79a5dc8231e84fa8e3e18ad0a999fc30121a3effa6576ca5bf8f542f2dbe8d6b1271e103050dffffffff1e9bd8d6617a678a73e3e1ef1649f75bebf09cc1a25855ddeaf7b7e332e5245b000000008b4830450221009017d6a5c2e3d07d84e1c30b36cc5288cde374a7ebf5ff00851120e591e7dbd1022058c673a7ccecb1b93f837ccdac83246d949ad65cb7774b32372923b49a66b5be014104c0838f5fa82a5eddd38ba77f3025f0c5b1d7fe044254052ef2fb2d5ddb590d0e706d336b3c4c7564747412023f146dc1084583e7f0d20f09ce2f0522705b6976ffffffff02c507156a000000001976a914b4ddb8b532ac4bf8eb049f17e3b0439f0bb6cda688ac80ba0a58030000000576a90088ac000000000100000002023f9e8ec6ba2557aa132a321fb59a7431446be1f1ac47459f9cf5f3c0ec839f000000008a47304402207af3e5fa4af66df9d65c1d9990e1840ed7d93aeeb52aec715bc96834ce59413902207ef98c22214ccb4672959c5388764520bf79d64b70efd86a52c313dddb3017c60141042501bf738c99668d59e2eac327c5fa1d2df878b70c632e07b4870c56675db8f70474476069d6c0870ec6656507ced71ecbc4cdfb0c54e14d645de2cb20fb967cffffffff328d45c8c2db1e93b80f72583b64d1afa2cba961f3fe0e681ae3a1d1ea817842000000008a47304402207ef22192d74963e4b18a14fecfde3dcae0bdb98405711f92a3f07a4e71bf3d0902202ffa231600f2de0370d89dd12a00d864362efdbb7d662b5a6df3caf053fccf8b014104aec30ec70029b07ac2c520e5aca16bbe177cafa876bfa59f4a28dcb5741e6207add42b73d528c53c599ad54827106077e018d52a70e38432cc29d0425edbfccaffffffff022124df22010000001976a914c36eb340bede7392d20a1ead0e22223c3614e51288ac00e40b54020000000576a90088ac000000000100000002b3433bd439ad4de84486497ae0f8792d2af6c93a6beaf3498c449c34d30b06a5010000008b48304502207ef51939f938e73ea87281f8e2ca4d9dee529750e187602eb585fcd7f7e804b30221009ad3b8519fe91b45bbe509c9a45a709fb90bd61c0d4fff1a49d1be8459bbe32001410465000d8f80f2a2de2e670e1a895ba12d64508504e2fe0fcb3c81c107a376810e8296353fa345d5f923fe03ed27b493c853fff931e878adec54d861f8fe211673ffffffffb78ba1f379ce69c3425514260cbac8d58abc324af57190da0151552f3e0e06a9000000008a47304402201bf73c5f8cca86bb008adebd69ca0c3954682f7fccf4a42a5bb74a88ae11e3910220312301f26a99f25f42896fb7e69c8e05ce0095bdc3d9cfa5ecfd5b3c7e9bfcc6014104476cf62f4d084e142dd386dbf58c5cf7ede50381fe9dc204082efb91e139f38502838a6d7816e83d9f1b9f42e940fbd6d10a0f64d53a143e54a610b080de7d89ffffffff0205b61ea1000000001976a914db9d4a800a4ffd2da65b38eca5d86c6d7d08127f88ac00e40b54020000000576a90088ac000000000100000002b6c4ed0ad8af3df9657a86620091f77168ad971dc9cb5b450f4f9ea674111a5b010000008c493046022100852a86d2f99db69939c1c9ce1508ae815eddedb72d8b718e51e31700021da8b6022100dfa8089991e932c7f4e50b3f4ba758f5fca45fb0e325a13441b5479d578f37ae0141044288c93686409888ab458da8a13bcc3ac42fbc7d705037330737481ad4e1138d2282d72bdd005cfc73e0e4dfcf9e34f9bfe015fecd47eeef438341c91a3ad7e1ffffffff0395cca9da44033256732afefff0baf8b18e4773b9d9175e49a7f5ce046f60b8000000008b4830450220577bf83dd84dfe9367586050f6b8e58410e0184d1d5e0978ab84bbb5cc1e669e022100a4d57e20a0523b8841bcda6d80f239469e1ead73ddd0075e500ecbbf10a9c4b1014104ea85268a10b2e98808318e492fb8c8dd8ce71bc76bdbf224673116d17cd272b0cd1f501e9f6cfafecce6d577156bac4ff2ed1b61e060162f1df2574f83044fd9ffffffff02511ff15c010000001976a91481dcf5d6b068f73a950abcedd85ef3f6a08f644e88ac000d4ad5000000000576a90088ac000000000100000002365db58511ead0a21395a5ace6b6807879aced9d4af329a635c4539ff5c0a59a010000008b483045022100f9dbed75fe4383887f705ff21f2e4c1387f05146390866310de1a93dd5fe29bc02204fe61799e2c45758645498f35853f19e09370af67301ff5013390ea4ff5062bc014104b757f915135e703fb46090f0b43b561a9ad03e58709d740854fcf57a0926a9d8a88fe650ff62333ba22a6ddb6c47ded04576f0bc95240693ea14eb2336bb23fcffffffff71637c58482f5d9752a1e6d4fb641e29406d27e0603c1d90a5b233d4a423adf0000000008c493046022100b5a80c6c27fcc0ff871d8afb7ef69b0b9a12b2af1933e26860adeac18a15c4f1022100f76f91213af3f81824e7272f8e13c2d2af80e8ab6e3627cc8e61e7c94eae13cb014104ccd734cb966202957feb2d99665fde8dc10058c846eee9600c472f04de62f8c43e29675b49cab939964893b5561d4ce3a7b843724f824eaef371f8106b971648ffffffff02227dd4bf000000001976a914941cd547e06648a37b65113b2c964f7614013d7c88ac00752b7d000000000576a90088ac000000000100000002820f995cc5610abc2bb46cde44e09d3999c040e7c55c018d51d6101d97e3c7fc000000008b483045022100ed90c5758af1016b55c7edf5c6d5ed51ee58240bec20b37426484ce6861b25a502204243b29c1844b2d7d7be7e86baf66b6190ad82157dd6e255a158e3306f694b4d0141040dfdd0d4f52b0d06d8456382fafc5e9cfecc9d8b22ccba8f81ac547b07bcf9b0b325354403ec29676958179ee88238c69148e604ecfc1a3a1db988034bed9d8cffffffff5c72c48dc9a96256b89bba1faeccfba2299c84541ddc9993d8629170186473a5000000008b483045022100906a575cb19b671a37ceb99bab48ab9ad16f41e6acd457bc815d87009aeefcc302207119d2eb966c182ca89b2e2f7758eceee643cfecc7957ae66b99abc22b9fb4a5014104b36bf897bc8e3ddaf994d35fb9318b96ea39c83d79fa321e734d9e0ccf098acfe084a85da72b21acc06fbd3fd8c0d1135200de59435a9513e7a070d4e437c4aaffffffff0288d71375000000001976a914956ec1b15bf7bbf51579322acfa2de0181a92b4888ac00e40b54020000000576a90088ac000000000100000002e3dcb3745b2268694e09dfef8322e760148bc20a572b4ba05114154937db3e7a000000008a47304402200732e1793ef171cfa80e6e1e31162667544bead7b41c5f07a1efeb202e7d6d4a022064077c7255c3d7e6f486b98cf73385d1be479a7249cbe7a9064c0a5765f02d9b014104eb6b057a58e583a1102674fbd261c6e5d12e38c0614ef09d075ced6758250cecfb650be3f72cc372db7fa3b1687ed3d2cd3031a3d9b5eaa277237aa399084d7effffffff77bc71b71f63a44f4a6237f4465ba1c5047fc6eea03d6dfd2ca99839c97b1904000000008b483045022006dd69e583d3e6375328acc7008ca8cb524a627b642f167893f38e84ae778d670221009e042c8c7c5a87a99b1d9666bbc9bcb533bf2dab193fff812cd30daeb3bc091d014104af4ff96561c45324bb0e5acbc9969bae759c06805df2b4f158198c80f550799bf82e00469a597d85cad4bda76f96aa75db681153e70968270df4f6530845963affffffff0200216e83010000000576a90088acf605e870010000001976a9149fa92478eb2a698b1c43b93d1cac579e5867f33488ac0000000001000000026d2b9285ee9e842b9bd7679c968fba4f50d4f4e4f3fc3ab09b67c9a33181b356000000008b48304502201fcfefc85852e5d62d84d7b291e06d610f6e7a8cee2cccf45fcb6ac45da7bed50221009522abef511ff6e55bef3fe4d42a0392fb1158e4ee11d199e96df7fb092e5b0f01410439c7e7dfa93f1f2df27c6477da515959d20e5adeb97bbad791c319b798f8471a51e3ba6e9ecd655d052600f74acd2dd4e4c550e112f3390cff7ac5f9b9e7d28bffffffffd715f45860232b410559a3637666e15b8e0a5d638b8e3bce62e2a85867a1c80b000000008b483045022100e4f93784ed21edcf992b10800562e889c232b9c91b6be7477a0f5d8096a24f7002207f73f01e85f2dfefe42e7eec5b367d8f1e3f6770c473e6ec4aecf419b969ef4d01410432b78bcf0094b1d85ef4e0432615cda857e2db16f36b6d36bebb3b4af694eafeaadf44cf5f366c2e280e3976121867fbbde9bd52433db6ad90e1badda28d7ca9ffffffff02403d49ed000000000576a90088ac49a00b05020000001976a91419addef47d03493eec8498478a12816bf60b0b3388ac00000000010000000272ab6897ceb3ed03b6a2b1ef780132eefd30b868a2675645f9e000190cc97847000000008a473044022005c02efb73f739e86129b4f83c1d1328dfd699d004a3d751d9ae4727649e008402205d6895bdec555fe2e873b141c2231a03a005a4e77acb54f53508ff64349308d80141045104b3ab84e7ef4fbe927a80fce88238d959b55fdb24060d186b7d8236d4622d91c3f1637fb72180997a66490b2b3619cbe66a1ac8b29d4b424bd428c5027d19ffffffff7eda41fd44dad3cf3b348a77551d1def84453c7d9ed6b5891a8478e4df4d95e5000000008b4830450220699bb2298c200c827a427a0b93367db0b709a1b0015661911f84d4f6a4c8fe40022100b8c145a4bef4e6e634e9e812bfbbac0dd6ff40f68feaf2459908d44fc7852c1201410445a0247f0ebf30cc032863169a20c1769be5059c5b2c1f396b0e20885700f06b9d4f57da5560531506b78e687f48185cab7481e0347762a4934929b1fe294734ffffffff02d864fd4a020000000576a90088acb762a15d000000001976a91467cd6ae9649e5d80c4e3892d31e1bf3cc241e88d88ac0000000001000000029e2d25174c440290f96c5c85f75a286926b28d724dadcc09389b520ae229d0d5000000008b483045022008fd31a7c955a1aa1d39849ff0ea7c2d286f6557184bb1b6d1bb91a4e0f742e4022100942e632ad357efbc63b24e761c3ee14dce98cb21c4acf5fdcbbb7dc95919053a0141049cced48977ff3e8886e9de9f148871f0338d3393eecfa003bc383a3eda1bf0bcc284205bfb9aeac58426370e4f2027d3bb7284d09b79539b1e2242cdca33ee1effffffff2c92c1722d2ed167e523943d601d1bbaf946da44cd4bdfdcdf9f3ff71a216a29000000008c493046022100a68ea7160f424662aa0e2e10d664250b890bd77d3425220df0677ed354e7bd7c022100814abf85fe352b6962f65046c43458a58060ce823bec18bd73ffeae9b859300b014104338e8d5b7c053dfbec2d081ce4149100b625a11eada6875973bcbb9a0e4a6cbd8b3b3aa2483cbd5fb1c0106c223f391f0872b1a9e87ef514e60cab51b0e3f112ffffffff02008589dc000000000576a90088acef220c91000000001976a914a37e0e3bdf5b14dd31656a4d10dc03ed7ac2387a88ac0000000001000000053ed213109224b1dd1670c7c0ab58d4e9624bc35e3e5387c6cfbdc865727f6ed5010000008b483045022100fc69d035bee079389ac6fdb384d9a849fc219ae7ac9af27a0aab505e9c52780c022050801b3971a363716e10182e43f56d9a8cc796b41764e2d78c5cd291cb84783e014104bc602e6f995fa1665aecc6a47a37a4cc709db7b2a74ef5dc77af12fc2e630265741f3ea1900b1263978eeeddc77f07c849b617715a39d28295b00bab728eb0acffffffffa07db90df20868c32368fe93c94f8728dd4c067336e4ed1cb17ae25d909715f1010000008a473044022038edeaec1ef24a2221656e80b4b91437f9e15fc1a33c1d53c7c08843a486761a022075571c3fbc99321f7427d3e38adc2e6a6eb9693edbcbbe8d3722ca876d271543014104cc25f901c5393e5e1bc31e65867dce8530da7f7447b291a15856fd00bb97e7425303c9d6141fdea77bd3e714c4e14fc4881f8f929d9d1f3b69ef2589580c7048ffffffff6a3c51fc1627448a20147eecca0cdc3eacab2d9553bceec440c589ce7559a560010000008c4930460221009e25da2150990195aa4c82f4be3975e4dfb1807fb61b3ce38b985bc0aa962cc00221008072b935899ba5221e8953a4f6f5d000bc073fa39a5268a37ceb74b57c41632e014104889e87dc69456de7341b3f4b7be13cfd0f12a25293dd5bc5f277898b4302247df8a3d6d62b4eda4dd85006d05c1e4333632bdb9885156ff5cbb0950be1d7efd3ffffffff118296ff18757293b834b527d9079c7cc910758b95179e17dd1072520b9903db000000008c493046022100880937c0eb29bb02001180bb9acd4a63a09df77a8cfaa202d9fe4ed8e45ddc21022100aadfe80a5268be7e151a3aa8215fb2cfe6e2cce903a014909dbd1141cbe05d9b0141049cced48977ff3e8886e9de9f148871f0338d3393eecfa003bc383a3eda1bf0bcc284205bfb9aeac58426370e4f2027d3bb7284d09b79539b1e2242cdca33ee1effffffff8ef7419e33621c8dac43f74ec5dec2463c8893cf449afc740ebb19bdba0deb75000000008b483045022055f534b8ecb4dbf832aeb566aa4e95dd0371c76a2eeed2edde441bcec5862402022100b243282a2003028f988267c75228306fd6dcb68ad1db4c0e7bd04acb3891743c014104dd2f0f609d31439fdcfe64f20c133e95156527aaee35ad7e2ec7d148256e41ab00eabe612e40419fa7552601e68cae3d7b6f8d519bd7444175fcac8cbb6d807fffffffff02935c2815010000001976a914f2e63314c350094550c703fcdcd4850ad37d831088ac00e40b54020000000576a90088ac0000000001000000028f1c4c3b555ad15599cbdfc217ca83b25ebc63a7a47583eecc9e849cdb292b74000000008c49304602210098a473ff7b98d7acc3ce3acda19f4e45f330e04ca4d31a02b51ae69adc7b2b000221009c46c53ed0fc1b8a257328f9b6d8f6e02ed6c44a94b2a0a4c4728027558d6c8301410440008f0ad075c74dec817f2e4bebeacf89f0666b3c5c35bba197a7cce335da684ee2a9087d66b0501934cc3a92dc5f68660af35367dac4e5aac1aaa1f840eabdffffffffc4c286341e5608e2ded8cabe7f29b02a8ccc427c87e51f2288dfa291783be2cb000000008b4830450221009139501c766c7d74d0d8a1f34efedca971f53358bd79263204a2eee841578a8502201a105f464759a52ae65e2ac3bccb563bb3cbc093ae13e328b1411e87edb63596014104b19a8b0dbe177f7e019e0cb95f12ad3ea6923805a8daba88ec5f28d777ab2eb7376d7e00a726d3b5056dbe301a5c3e01748a83210a458421daaeb77c9975c5a4ffffffff0221dc0124000000001976a914f74c13d007a14fbd5b9ec91dfd1cfb963d0881f088acc01de690000000000576a90088ac0000000001000000014d0da1a301f0497839db0288f1c5a6fb7e4f00ee030775840d3d8dccd752eaab010000008b4830450221009eaf4aed229e80d11a1f3a82ea27657639493c980e591fa770b8af36829bac910220777ab5514c6645d885a74fdfd5daaeddb674c5f2f807474fdd552d8fc556e717014104d60963c00623ebfded78e022bb40b870c4a9d2382d69881c1db327fc2d39baa56fe0c6ce07a18da6ce9b8d6ad4f0e48ef07582fcc7c7cbd0816804e6d9fd1155ffffffff02e0930400000000001976a914fbe5e214b23fc7a0bc3e764b043dca89c20b1f3c88ac60c20523000000001976a9141537e5e949dd0f552bd7e9f4ee3cf7b223851d6d88ac00000000010000000166c7d23b44e7833216150ebac52063af59a9edd978336a6119f71ad8e404ab10000000008b4830450221008c284af16d3ee85470b726c1e0632b12a3bd9b0af51cbbdcae6ae52b34a8aa3f022030dc762c7b2c68e41d5facf79b059259eb257b5d2b01ff7c0c66e125c9ef6e980141048e114fd19de8b537b82712930b1bd64c796d0abcba48c92053481a824361570b4b2fa5039adaed27aee785f6f68699803a4d1b04a63372d415a91c63303e2388ffffffff02fffe2b06000000001976a9147fc4dab271d443d3aa399a5f96707b54ea0aabbf88ac18170000000000001976a914c4c69a79f4e56bf6e17308f6e5e7ff4dc046ac0f88ac0000000001000000014c380ce44c37cb3d99d65e9cdcf0519a32f3e693c7e7b22ad97cf2dbec6aaed1000000008b483045022063a331ff7aeebbd06912e5ec4cdec6e89bb376b1a55523a9eb73eff9ff8bd91f022100a3a6c92593832057772d8b890fb7e6c0f3f21851ba8c3cdf2b8b30e1ebda97f3014104dad007c26b13ffa69e44ea32e7dce7781f95552e636cdd04024a55e5d0a9fed07f6b2fc2b9f8e689afb2d0aed790944bc390d38560bfb7178c16a73ff396f2adffffffff029d18a500000000001976a914b75a4b00d4df1e8358cc79f3d8d000d4806f46ee88ac9fc70600000000001976a914a31cc35833040aa1f8b09d69dcf0ae7359d6f4b788ac00000000\", formatter, BitcoinHeader.class);\n        assertTrue(b1.getID().equals(new BID(\"0000000000000449ee5b94ba7a051caffff5c23d6a03335f6e20e3985b5ffa61\")));\n        Block b2 = Block.fromWireDump(b1.toWireDump(), formatter, BitcoinHeader.class);\n        assertTrue(b1.getID().equals(b2.getID()));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static void timestampValueInsertSelect(Connection conn, TimeUnit databasePrecision) throws Exception {\n        timestampValueInsertSelect(conn, databasePrecision, null);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private void addEntries(String newEntries, String modifications, String comment) {\n        boolean modified = false;\n        int childcount = 0;\n        String lastadded = null;\n        DefaultMutableTreeNode insert = (DefaultMutableTreeNode) jTreeDesktop.getLastSelectedPathComponent();\n        if (!insert.getAllowsChildren()) {\n            DefaultMutableTreeNode parent = (DefaultMutableTreeNode) insert.getParent();\n            childcount = parent.getIndex(insert) + 1;\n            insert = parent;\n        }\n        int[] entries = Tools.retrieveEntryNumbersFromInput(newEntries, dataObj.getCount(Daten.ZKNCOUNT));\n        LinkedList<Integer> multipleEntries = new LinkedList<>();\n        showMultipleEntryMsg = true;\n        if (entries != null) {\n            for (int cnt : entries) {\n                if (noDoubleEntries(insert, cnt)) {\n                    for (int me = 0; me < desktopObj.getCount(); me++) {\n                        if (desktopObj.checkForDoubleEntry(me, cnt)) {\n                            multipleEntries.add(cnt);\n                        }\n                    }\n                    lastadded = desktopObj.addEntry(TreeUtil.getNodeTimestamp(insert),\n                            String.valueOf(cnt),\n                            childcount);\n                    if (modifications != null && !modifications.isEmpty()) {\n                        desktopObj.addModifiedEntry(lastadded, modifications);\n                    }\n                    if (comment != null && !comment.isEmpty()) {\n                        desktopObj.setComment(lastadded, comment);\n                    }\n                    modified = true;\n                    childcount++;\n                }\n            }\n        }\n        if (modified) {\n            updateTreeView();\n            selectTreePath(lastadded);\n            showMultipleOccurencesMessage(Tools.retrieveDoubleEntries(desktopObj, multipleEntries));\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic final DenseMatrix zeros(ValueType valueType, long... size) {\n\t\tswitch (size.length) {\n\t\tcase 0:\n\t\t\tthrow new RuntimeException(\"Size not defined\");\n\t\tcase 1:\n\t\t\tthrow new RuntimeException(\"Size must be at least 2-dimensional\");\n\t\tdefault:\n\t\t\tswitch (valueType) {\n\t\t\tcase BIGDECIMAL:\n\t\t\t\treturn new DefaultDenseBigDecimalMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BIGINTEGER:\n\t\t\t\treturn new DefaultDenseBigIntegerMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BOOLEAN:\n\t\t\t\treturn new ArrayDenseBooleanMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BYTE:\n\t\t\t\treturn new DefaultDenseByteMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase CHAR:\n\t\t\t\treturn new DefaultDenseCharMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase DOUBLE:\n\t\t\t\tif (size.length == 2) {\n\t\t\t\t\treturn new DefaultDenseDoubleMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\t\t} else {\n\t\t\t\t\treturn new DefaultDenseDoubleMatrixMultiD(size);\n\t\t\t\t}\n\t\t\tcase FLOAT:\n\t\t\t\treturn new DefaultDenseFloatMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase INT:\n\t\t\t\treturn new DefaultDenseIntMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase LONG:\n\t\t\t\treturn new DefaultDenseLongMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase OBJECT:\n\t\t\t\treturn ObjectMatrix.Factory.zeros(size);\n\t\t\tcase SHORT:\n\t\t\t\treturn new DefaultDenseShortMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase STRING:\n\t\t\t\treturn new DefaultDenseStringMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tdefault:\n\t\t\t\tthrow new RuntimeException(\"unknown value type: \" + valueType);\n\t\t\t}\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void addShaped(RecipeDifficulty difficulty, ItemStack result, Object... recipe) {\n        if (difficulty != ALL && RecipeDifficulty.getDifficulty() != difficulty) {\n            return;\n        }\n\n        boolean isOre = false;\n\n        if (!isEnabled(result)) {\n            return;\n        }\n\n        for (int i = 3; i < recipe.length; i++) {\n            if (recipe[i] instanceof String) {\n                isOre = true;\n            }\n\n            if (!isEnabled(recipe[i])) {\n                return;\n            }\n        }\n\n        if (isOre) {\n            ResourceLocation location = getNameForRecipe(result);\n            ShapedOreRecipe shapedOreRecipe = new ShapedOreRecipe(location, result, recipe);\n            shapedOreRecipe.setRegistryName(location);\n            GameData.register_impl(shapedOreRecipe);\n        }\n        else {\n            ResourceLocation location = getNameForRecipe(result);\n            CraftingHelper.ShapedPrimer primer = CraftingHelper.parseShaped(recipe);\n            ShapedRecipes shapedRecipes = new ShapedRecipes(result.getItem().getRegistryName().toString(), primer.width, primer.height, primer.input, result);\n            shapedRecipes.setRegistryName(location);\n            GameData.register_impl(shapedRecipes);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic boolean feasible(Optimizable innerTable,\n\t\t\t\t\t\t\tOptimizablePredicateList predList,\n\t\t\t\t\t\t\tOptimizer optimizer\n\t\t\t\t\t\t\t)\n\t\t\t\t\tthrows StandardException \n\t{\n\t\tConglomerateDescriptor cd = null;\n\n\t\t\n\t\tif (! innerTable.isMaterializable())\n\t\t{\n            if ( innerTable.optimizerTracingIsOn() ) { innerTable.getOptimizerTracer().traceSkipUnmaterializableHashJoin(); }\n\t\t\treturn false;\n\t\t}\n\n\t\t\n\t\tif (innerTable.isTargetTable())\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t\n\t\tif ((predList != null) && (predList.size() > 0) &&\n\t\t\t!(innerTable instanceof FromBaseTable))\n\t\t{\n\t\t\tFromTable ft = (FromTable)innerTable;\n\n\t\t\tJBitSet tNums = new JBitSet(ft.getReferencedTableMap().size());\n\t\t\tBaseTableNumbersVisitor btnVis = new BaseTableNumbersVisitor(tNums);\n\t\t\tft.accept(btnVis);\n\n\t\t\tJBitSet pNums = new JBitSet(tNums.size());\n\n            for (int i = 0; i < predList.size(); i++)\n\t\t\t{\n                Predicate pred = (Predicate)predList.getOptPredicate(i);\n\t\t\t\tif (pred.isJoinPredicate())\n\t\t\t\t\tpNums.or(pred.getReferencedSet());\n\t\t\t}\n\n\t\t\ttNums.and(pNums);\n\t\t\tif (tNums.getFirstSetBit() != -1)\n\t\t\t\treturn false;\n\t\t}\n\n\t\tif (innerTable.isBaseTable())\n\t\t{\n\t\t\t\n\t\t\tcd = innerTable.getCurrentAccessPath().getConglomerateDescriptor();\n\t\t}\n\t\t\n\t\t\n        int[] hashKeyColumns = findHashKeyColumns(\n                innerTable,\n                cd,\n                predList);\n\n\t\tif (SanityManager.DEBUG)\n\t\t{\n            if ( innerTable.optimizerTracingIsOn() )\n            {\n                if (hashKeyColumns == null)\n                {\n                    innerTable.getOptimizerTracer().traceSkipHashJoinNoHashKeys();\n                }\n                else\n                {\n                    innerTable.getOptimizerTracer().traceHashKeyColumns( ArrayUtil.copy( hashKeyColumns ) );\n                }\n            }\n\t\t}\n\n\t\tif (hashKeyColumns == null)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static List<ExtractedResult> extractSorted(String query, Collection<String> choices) {\n\n        Extractor extractor = new Extractor();\n\n        return extractor.extractTop(query, choices, new WeightedRatio());\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr adjacencyList) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), adjacencyList});\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tthis.helper = new PremiumSettingsHelper(this);\n\t\tBillingManager.getInstance(this).setObserver(this);\n\t\t\n\t\tif (BillingManager.getInstance(this).canPurchasePremium()) {\n\t\t\t@SuppressWarnings(\"deprecation\")\n\t\t\tPreference preference = findPreference(PremiumSettingsHelper.PREFERENCE_PURCHASE_PREMIUM);\n\t\t\thelper.preparePurchasePremium(preference);\n\t\t} else {\n\t\t\tthis.removePremium();\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        \n        byte[] byteArray = new byte[bytes.size()]; \n        bytes.getBytes(byteArray, 0);\n        return Utf8Utils.utf8BytesToString(byteArray);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void doGenerate(IProgressMonitor monitor) throws IOException {\n\t\tif (!targetFolder.getLocation().toFile().exists()) {\n\t\t\ttargetFolder.getLocation().toFile().mkdirs();\n\t\t}\n\t\t\n\t\tmonitor.subTask(\"Loading...\");\n\t\tcom.github.lbroudoux.dsl.eip.gen.camel.main.GenerateXmlRoutes gen0 = new com.github.lbroudoux.dsl.eip.gen.camel.main.GenerateXmlRoutes(modelURI, targetFolder.getLocation().toFile(), arguments);\n\t\tmonitor.worked(1);\n\t\tString generationID = org.eclipse.acceleo.engine.utils.AcceleoLaunchingUtil.computeUIProjectID(\"com.github.lbroudoux.dsl.eip.gen.camel\", \"com.github.lbroudoux.dsl.eip.gen.camel.main.GenerateJavaRoutes\", modelURI.toString(), targetFolder.getFullPath().toString(), new ArrayList<String>());\n\t\tgen0.setGenerationID(generationID);\n\t\tgen0.doGenerate(BasicMonitor.toMonitor(monitor));\n\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PasswordImpl(SaltProvider saltProvider, ConfigCoder configCoder, HashAlgorithmRegistry hashAlgorithmRegistry, HashAlgorithm defaultHashAlgorithm) {\n        this.saltProvider = Preconditions.checkNotNull(saltProvider, \"saltProvider\");\n        this.configCoder = Preconditions.checkNotNull(configCoder, \"configCoder\");\n        this.hashAlgorithmRegistry = Preconditions.checkNotNull(hashAlgorithmRegistry, \"hashAlgorithmRegistry\");\n        this.defaultHashAlgorithm = Preconditions.checkNotNull(defaultHashAlgorithm, \"defaultHashAlgorithm\");\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Collection createRenderableCollectionNS(String opName,\n                                                   ParameterBlock args,\n                                                   RenderingHints hints) {\n        if(opName == null) {\n            throw new IllegalArgumentException(JaiI18N.getString(\"JAI14\"));\n        } else if (args == null) {\n            throw new IllegalArgumentException(JaiI18N.getString(\"JAI15\"));\n        }\n\n\tString modeName = \"renderableCollection\";\n\n        OperationDescriptor odesc = (OperationDescriptor)\n            operationRegistry.getDescriptor(modeName, opName);\n\n        if (odesc == null) {\n            throw new IllegalArgumentException(opName + \": \" +\n                                               JaiI18N.getString(\"JAI0\"));\n        }\n\n\tClass destClass = odesc.getDestClass(modeName);\n\n\tif (!RenderableImage.class.isAssignableFrom(destClass) &&\n\t    !CollectionImage.class.isAssignableFrom(destClass)) {\n\t  throw new IllegalArgumentException(opName + \": \" +\n\t\t\t\t\t     JaiI18N.getString(\"JAI6\"));\n        }\n\n\n\n        StringBuffer msg = new StringBuffer();\n        args = (ParameterBlock)args.clone();\n        RenderingHints mergedHints =\n            mergeRenderingHints(renderingHints, hints);\n\tif (odesc.validateArguments(modeName, args, msg)) {\n            if (RenderableImage.class.isAssignableFrom(destClass)) {\n                Vector v = new Vector(1);\n                RenderableOp op =\n                    new RenderableOp(operationRegistry, opName, args,\n                                     mergedHints);\n                v.add(op);\n                return v;\n            } else {\n                CollectionOp cOp = new\n                    CollectionOp(operationRegistry, opName, args,\n                                 mergedHints, true);\n\n                if (odesc.isImmediate()) {\n                    Collection coll = null;\n                    coll = cOp.getCollection();\n                    if(coll == null) {\n                        return null;\n                    }\n                }\n\n                return cOp;\n            }\n\n\t} else {\n            int numSources = odesc.getNumSources();\n            Vector sources = args.getSources();\n\n\n\n            Iterator[] iters = new Iterator[numSources];\n            Iterator iter = null;\n            int size = Integer.MAX_VALUE;\n            for (int i = 0; i < numSources; i++) {\n                Object s = sources.elementAt(i);\n                if (s instanceof Collection) {\n                    iters[i] = ((Collection)s).iterator();\n                    if (iter == null || ((Collection)s).size() < size) {\n                        iter = iters[i];\n                        size = ((Collection)s).size();\n                    }\n                }\n            }\n\n            if (iter == null) {\n\n\n                throw new IllegalArgumentException(msg.toString());\n            }\n\n            Collection col = null;\n            for (int i = 0; i < numSources; i++) {\n                Object s = sources.elementAt(i);\n                if (s instanceof Collection) {\n                    try {\n                        col = (Collection)s.getClass().newInstance();\n                        break;\n                    } catch (Exception e) {\n                        sendExceptionToListener(\n                            JaiI18N.getString(\"JAI16\") + s.getClass().getName(),\n                            e);\n                    }\n                }\n            }\n            if (col == null) {\n                col = new Vector();\n            }\n\n            Class[] sourceClasses = odesc.getSourceClasses(modeName);\n\n            while (iter.hasNext()) {\n                ParameterBlock pb = new ParameterBlock();\n                pb.setParameters(args.getParameters());\n\n                for (int i = 0; i < numSources; i++) {\n                    Object nextSource = null;\n                    if (iters[i] == null) {\n                        nextSource = sources.elementAt(i);\n                    } else {\n                        nextSource = iters[i].next();\n                    }\n\n                    if(!sourceClasses[i].isAssignableFrom(nextSource.getClass()) &&\n                       !(nextSource instanceof Collection)) {\n                        throw new IllegalArgumentException(msg.toString());\n                    }\n                    pb.addSource(nextSource);\n                }\n\n                Collection c = createRenderableCollectionNS(opName, pb,\n                                                            mergedHints);\n                if (c instanceof Vector &&\n                    c.size() == 1 &&\n                    ((Vector)c).elementAt(0) instanceof RenderableOp) {\n                    col.add(((Vector)c).elementAt(0));\n                } else {\n                    col.add(c);\n                }\n            }\n\n            return col;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Deprecated\n\tpublic ImageData getImageData() {\n\t\treturn getImageData(100);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_optimize_item_click);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n\n        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);\n        fab.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\n                        .setAction(\"Action\", null).show();\n            }\n        });\n        mRecyclerView = (RecyclerView) findViewById(R.id.list);\n        GridLayoutManager layoutManager = new GridLayoutManager(this,4);\n        mRecyclerView.setLayoutManager(layoutManager);\n        initAdapter();\n\n        mRecyclerView.addOnItemTouchListener(new OnItemClickListener() {\n\n            @Override\n            public void onSimpleItemClick(BaseQuickAdapter adapter, View view, int position) {\n            }\n\n            @Override\n            public void onItemChildClick(BaseQuickAdapter adapter, View view, int position) {\n                Logger.d(\"\u8930\u64b3\u58a0\u93c3\u5815\u68ff  \"+System.currentTimeMillis());\n                super.onItemChildClick(adapter, view, position);\n                switch (view.getId()) {\n\n                    default:\n                        break;\n                }\n            }\n\n\n            @Override\n            public void onItemLongClick(BaseQuickAdapter adapter, View view, int position) {\n                super.onItemLongClick(adapter, view, position);\n\n            }\n\n            @Override\n            public void onItemChildLongClick(BaseQuickAdapter adapter, View view, int position) {\n                super.onItemChildLongClick(adapter, view, position);\n\n            }\n        });\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@NotNull\n    @Parameterized.Parameters\n    public static Collection<Object[]> combinations() {\n        @NotNull List<Object[]> list = new ArrayList<>();\n        @NotNull Marshallable[] objects = {\n                new Nested(new ScalarValues(), Collections.emptyList(), Collections.emptySet(), Collections.emptyMap(), \"\".split(\"\")),\n                new ScalarValues(1),\n        };\n        @NotNull String[] fields = {\n                \"[!FieldInfo {\\n\" +\n                        \"  name: values,\\n\" +\n                        \"  type: !type net.openhft.chronicle.wire.marshallable.ScalarValues,\\n\" +\n                        \"  bracketType: MAP,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: strings,\\n\" +\n                        \"  type: !type !seq,\\n\" +\n                        \"  bracketType: SEQ,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: ints,\\n\" +\n                        \"  type: !type !set,\\n\" +\n                        \"  bracketType: SEQ,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: map,\\n\" +\n                        \"  type: !type !map,\\n\" +\n                        \"  bracketType: MAP,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: array,\\n\" +\n                        \"  type: !type String[],\\n\" +\n                        \"  bracketType: SEQ,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \"]\",\n                \"[!FieldInfo {\\n\" +\n                        \"  name: flag,\\n\" +\n                        \"  type: !type boolean,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: b,\\n\" +\n                        \"  type: !type byte,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: s,\\n\" +\n                        \"  type: !type short,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: ch,\\n\" +\n                        \"  type: !type char,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: i,\\n\" +\n                        \"  type: !type int,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: f,\\n\" +\n                        \"  type: !type float,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: l,\\n\" +\n                        \"  type: !type long,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: d,\\n\" +\n                        \"  type: !type double,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: flag2,\\n\" +\n                        \"  type: !type java.lang.Boolean,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: b2,\\n\" +\n                        \"  type: !type byte,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: s2,\\n\" +\n                        \"  type: !type short,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: ch2,\\n\" +\n                        \"  type: !type Char,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: i2,\\n\" +\n                        \"  type: !type int,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: f2,\\n\" +\n                        \"  type: !type Float32,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: l2,\\n\" +\n                        \"  type: !type long,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: d2,\\n\" +\n                        \"  type: !type Float64,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: aClass,\\n\" +\n                        \"  type: !type type,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: policy,\\n\" +\n                        \"  type: !type java.lang.annotation.RetentionPolicy,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: text,\\n\" +\n                        \"  type: !type String,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: date,\\n\" +\n                        \"  type: !type Date,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: time,\\n\" +\n                        \"  type: !type Time,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: dateTime,\\n\" +\n                        \"  type: !type DateTime,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: zonedDateTime,\\n\" +\n                        \"  type: !type ZonedDateTime,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: uuid,\\n\" +\n                        \"  type: !type java.util.UUID,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: bi,\\n\" +\n                        \"  type: !type java.math.BigInteger,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: bd,\\n\" +\n                        \"  type: !type java.math.BigDecimal,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: file,\\n\" +\n                        \"  type: !type java.io.File,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \"]\",\n        };\n        for (int i = 0; i < objects.length; i++) {\n            Marshallable object = objects[i];\n            String fi = fields[i];\n            @NotNull Object[] test = {object, fi};\n            list.add(test);\n        }\n        return list;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic ExternalCarrierBillingInstrumentProto(String instrumentKey, String subscriberIdentifier, String accountType, String subscriberCurrency, Long transactionLimit, String subscriberName, String address1, String address2, String city, String state, String postalCode, String country, EncryptedSubscriberInfo encryptedSubscriberInfo) {\n    this.instrumentKey = instrumentKey;\n    this.subscriberIdentifier = subscriberIdentifier;\n    this.accountType = accountType;\n    this.subscriberCurrency = subscriberCurrency;\n    this.transactionLimit = transactionLimit;\n    this.subscriberName = subscriberName;\n    this.address1 = address1;\n    this.address2 = address2;\n    this.city = city;\n    this.state = state;\n    this.postalCode = postalCode;\n    this.country = country;\n    this.encryptedSubscriberInfo = encryptedSubscriberInfo;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        PartialSufficientSatistics partialSufficientSatistics = PartialSufficientSatistics.createZeroPartialSufficientStatistics(efBayesianNetwork);\n        partialSufficientSatistics.copy(this.sumSS);\n        partialSufficientSatistics.normalize();\n        SufficientStatistics finalSS = efBayesianNetwork.createZeroSufficientStatistics();\n        finalSS.sum(partialSufficientSatistics.getCompoundVector());\n\n        efBayesianNetwork.setMomentParameters(finalSS);\n        return efBayesianNetwork.toBayesianNetwork(dag);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintWriter writer, boolean suppressLogin, char eolMarker, boolean showDirection)\n    {\n        __writer = writer;\n        __nologin = suppressLogin;\n        __eolMarker = eolMarker;\n        __directionMarker = showDirection;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void setText(CharSequence text, BufferType type,\n            boolean notifyBefore, int oldlen) {\n        int n = mFilters.length;\n        \n        for (int i = 0; i < n; i++) {\n            CharSequence out = mFilters[i].filter(text, 0, text.length(), EMPTY_SPANNED, 0, 0);\n            text = out;\n        }\n\n        oldlen += mText.length();\n        sendBeforeTextChanged(mText, 0, oldlen, text.length());\n\n\n        type = BufferType.EDITABLE;\n\n\n        mBufferType = type;\n        mText = text;\n\n        mTransformed = mTransformation.getTransformation(text, this);\n\n        final int textLength = text.length();\n\n        if (mEditor != null) mEditor.addSpanWatchers((Spannable) text);\n\n        mMovement.initialize(this, (Spannable) text);\n\n        checkForRelayout();\n\n        sendOnTextChanged(text, 0, oldlen, textLength);\n        onTextChanged(text, 0, oldlen, textLength);\n        sendAfterTextChanged((Editable) text);\n\n        mEditor.prepareCursorControllers();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Kernel(int width, int height, float data[]) {\n        this.width  = width;\n        this.height = height;\n        this.xOrigin  = (width-1)>>1;\n        this.yOrigin  = (height-1)>>1;\n        int len = width*height;\n        if (data.length < len) {\n            throw new IllegalArgumentException(\"Data array too small \"+\n                                               \"(is \"+data.length+\n                                               \" and should be \"+len);\n        }\n        this.data = new float[len];\n        System.arraycopy(data, 0, this.data, 0, len);\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic <A extends Closeable> A api(Class<A> apitype, final String provider, final String credId, final String url,\n            final String zones) {\n        return api(apitype, provider, credId, buildJcloudsOverrides(url, zones, false));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(org.w3c.dom.Node node, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( node, type, options ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void addFooterView(View v, Object data, boolean isSelectable) {\n\n\n        FixedViewInfo info = new FixedViewInfo();\n        info.view = v;\n        info.data = data;\n        info.isSelectable = isSelectable;\n        mFooterViewInfos.add(info);\n\n        if (mAdapter != null && mObserver != null) {\n            mObserver.onChanged();\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public Value<Integer> run(String userEmail) {\n      PromisedValue<Integer> x = newPromise();\n      PromisedValue<Integer> y = newPromise();\n      PromisedValue<Integer> z = newPromise();\n      FutureValue<Integer> intermediate = futureCall(new ComplexJob(), x, y, z);\n\n      getIntFromUser(\"Please give 1st int\", userEmail, x.getHandle());\n      getIntFromUser(\"Please give 2nd int\", userEmail, y.getHandle());\n      getIntFromUser(\"Please give 3rd int\", userEmail, z.getHandle());\n\n      FutureValue<Integer> oneMoreInt =\n        futureCall(new PromptJob(), intermediate, immediate(userEmail));\n\n      return futureCall(new MultJob(), intermediate, oneMoreInt);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void removePropertyChangeListener(\n                                                          String propertyName,\n                                                          PropertyChangeListener listener) {\n        synchronized (getObjectLock()) {\n            if (listener == null || changeSupport == null) {\n                return;\n            }\n            changeSupport.removePropertyChangeListener(propertyName, listener);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n        if(!nonSequentialModel)\n            return new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n        else{\n\n            CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n            this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n            BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n            this.updateNaturalParameterPrior(prior);\n\n            return learntBN;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int countLines(Reader r) throws IOException {\n        try (Reader _r = r) {\n            char[] c = new char[1024];\n            int count = 0;\n            int readChars = 0;\n            boolean empty = true;\n            while ((readChars = _r.read(c)) != -1) {\n                empty = false;\n                for (int i = 0; i < readChars; ++i)\n                    if (c[i] == '\\n')\n                        ++count;\n            }\n            return (count == 0 && !empty) ? 1 : count;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters) {\n        api = this.filterApiString(api);\n        Type type = this.defineApiType(api);\n        api = this.appendGetArgs(api, filters);\n\n        try {\n\n            Request resource;\n            HttpResponse response;\n            String klass, content;\n\n            switch (rest) {\n                case GET:\n                    response = wrapper.get(Request.to(api));\n\n                    if (response.getStatusLine().getStatusCode() == 303) { // recursive better?\n                        api = (String) (response.getFirstHeader(\"Location\").getValue() + \".json\").replace(\"https://api.soundcloud.com\", \"\");\n                        response = wrapper.get(Request.to(api));\n                    }\n\n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String) (Http.formatJSON(Http.getString(response))).trim();\n\n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n\n                            if (data.size() > 0) {\n                                switch (type) {\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default:\n                                        return null;\n                                }\n\n                            }\n\n                        } else {\n\n                            switch (type) {\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default:\n                                    return null;\n                            }\n\n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    break;\n                case POST:\n\n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.') + 1));\n\n                    if (klass.equals(\"Track\")) {\n                        Track track = ((Track) value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE, track.getTitle())\n                                .add(Params.Track.TAG_LIST, track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA, new File(track.asset_data));\n                    } else if (klass.equals(\"Comment\")) {\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\" + content + \"}\";\n                        resource = Request.to(api.replace(\".json\", \"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n\n                    response = wrapper.post(resource);\n\n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String) (Http.formatJSON(Http.getString(response))).trim();\n                        switch (type) {\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default:\n                                return null;\n                        }\n\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n\n                    break;\n                case PUT:\n\n                    if (value != null) {\n\n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.') + 1));\n\n                        content = gson.toJson(value);\n\n                        if (klass.equals(\"User\")) {\n                            content = \"{\\\"user\\\":\" + content + \"}\";\n                        } else if (klass.equals(\"Track\")) {\n                            content = \"{\\\"track\\\":\" + content + \"}\";\n                        } else {\n                            return null;\n                        }\n\n                        resource = Request.to(api.replace(\".json\", \"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\", \"\"));\n                    }\n\n                    response = wrapper.put(resource);\n\n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String) (Http.formatJSON(Http.getString(response))).trim();\n\n                        switch (type) {\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default:\n                                return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n\n                    break;\n                case DELETE:\n                    response = wrapper.delete(Request.to(api));\n\n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public void onNewFrame(HeadTransform headTransform) {\n        GLES20.glUseProgram(mGlProgram);\n\n        mModelViewProjectionParam = GLES20.glGetUniformLocation(mGlProgram, \"u_MVP\");\n        mLightPosParam = GLES20.glGetUniformLocation(mGlProgram, \"u_LightPos\");\n        mModelViewParam = GLES20.glGetUniformLocation(mGlProgram, \"u_MVMatrix\");\n        mModelParam = GLES20.glGetUniformLocation(mGlProgram, \"u_Model\");\n        mIsFloorParam = GLES20.glGetUniformLocation(mGlProgram, \"u_IsFloor\");\n\n        Matrix.rotateM(mModelCube, 0, TIME_DELTA, 0.5f, 0.5f, 1.0f);\n\n        Matrix.setLookAtM(mCamera, 0, 0.0f, 0.0f, CAMERA_Z, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f);\n\n        headTransform.getHeadView(mHeadView, 0);\n\n        checkGLError(\"onReadyToDraw\");\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic DocumentInfo(String author, String creator, String fileName, boolean isEncrypted, int pages,\n\t\t\tString pdfVersion, String producer, String title) {\n\t\tsuper();\n\t\tthis.author = author;\n\t\tthis.creator = creator;\n\t\tthis.fileName = fileName;\n\t\tthis.isEncrypted = isEncrypted;\n\t\tthis.pages = pages;\n\t\tthis.pdfVersion = pdfVersion;\n\t\tthis.producer = producer;\n\t\tthis.title = title;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testBlock() throws HyperLedgerException, IOException {\n        Block b1 =\n                Block.fromWireDump(\"\", formatter, BitcoinHeader.class);\n        assertTrue(b1.getID().equals(new BID(\"0000000000000449ee5b94ba7a051caffff5c23d6a03335f6e20e3985b5ffa61\")));\n        Block b2 = Block.fromWireDump(b1.toWireDump(), formatter, BitcoinHeader.class);\n        assertTrue(b1.getID().equals(b2.getID()));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static boolean isTrue(Object o) {\n        if (o == null) return false;\n\n        Class<?> cls = o.getClass();\n        if (cls == Boolean.class) return (Boolean) o;\n        if (o instanceof Collection) return !((Collection<?>) o).isEmpty();\n        if (o instanceof Map) return !((Map<?, ?>) o).isEmpty();\n        if (o instanceof CharSequence) return ((CharSequence) o).length() > 0;\n        if (o instanceof Number) return ((Number) o).intValue() != 0;\n        if (cls.isArray()) return Array.getLength(o) > 0;\n        if (cls == Character.class) return ((Character) o) != '\\0';\n        if (o instanceof Enumeration) return ((Enumeration<?>) o).hasMoreElements();\n        if (o instanceof Iterator) return ((Iterator<?>) o).hasNext();\n        if (o instanceof Iterable) return ((Iterable<?>) o).iterator().hasNext();\n\n        return true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic <A extends Closeable> A api(Class<A> apitype, final String provider, final String credId, final String url,\n            final String zones) {\n        return api(apitype, provider, credId, buildJcloudsOverrides(url, zones, false));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; } \n        return retVal;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public String getReplyString()\n    {\n        StringBuilder buffer = new StringBuilder(256);\n        for (String s : _replyLines)\n        {\n            buffer.append(s);\n            buffer.append(SocketClient.NETASCII_EOL);\n        }\n\n        return buffer.toString();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic Vector<Operator> topologicalSort() {\n\t\tfinal Map<Operator, Integer> originalIndices = new HashMap<Operator, Integer>();\n\t\tfor (int i = 0; i < operators.size(); i++) {\n\t\t\toriginalIndices.put(operators.get(i), i);\n\t\t}\n\t\tEdgeCounter counter = new EdgeCounter(operators);\n\t\tfor (Operator child : getOperators()) {\n\t\t\tfor (OutputPort out : child.getOutputPorts().getAllPorts()) {\n\t\t\t\tInputPort dest = out.getDestination();\n\t\t\t\tif (dest != null) {\n\t\t\t\t\tcounter.incNumEdges(dest.getPorts().getOwner().getOperator());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tVector<Operator> sorted = new Vector<Operator>();\n\t\tPriorityQueue<Operator> independentOperators = new PriorityQueue<Operator>(Math.max(1, operators.size()),\n\t\t\t\tnew Comparator<Operator>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic int compare(Operator o1, Operator o2) {\n\t\t\t\t\t\treturn originalIndices.get(o1) - originalIndices.get(o2);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\tindependentOperators.addAll(counter.getIndependentOperators());\n\t\twhile (!independentOperators.isEmpty()) {\n\t\t\tOperator first = independentOperators.poll();\n\t\t\tsorted.add(first);\n\t\t\tfor (OutputPort out : first.getOutputPorts().getAllPorts()) {\n\t\t\t\tInputPort dest = out.getDestination();\n\t\t\t\tif (dest != null) {\n\t\t\t\t\tOperator destOp = dest.getPorts().getOwner().getOperator();\n\t\t\t\t\tif (counter.decNumEdges(destOp) == 0) {\n\t\t\t\t\t\tindependentOperators.add(destOp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void requestListViewData() {\n        mBllUser = new BusinessUser(this);\n        mBllServer = new BusinessServer(this);\n        mListMap = new ArrayList<Map<String, Object>>();\n        mBllUser.userServerOrderList((position + 1) + \"\", pageNum + \"\");\n\n\n            mAdapterNotake = new AdapterFrgServerOrderComplete(getActivity(), this, mListMap);\n            mListView.setAdapter(mAdapterNotake);\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public boolean transformOne(GlyphLine line) {\n        if (line.idx >= line.end) {\n            return false;\n        }\n        Glyph g = line.get(line.idx);\n        boolean changed = false;\n        if (!openReader.isSkip(g.getCode(), lookupFlag)) {\n            int[] substSequence = substMap.get(g.getCode());\n            if (substSequence != null) {\n                if (substSequence.length > 0) {\n                    line.substituteOneToMany(openReader, substSequence);\n                    changed = true;\n                }\n            }\n        }\n        line.idx++;\n        return changed;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tprotected void func_143011_b(NBTTagCompound par1NBTTagCompound) {\n\t\tsuper.func_143011_b(par1NBTTagCompound);\n\t\t\n\n        this.src = new ChunkCoordinates(par1NBTTagCompound.getInteger(\"srcPosX\"), par1NBTTagCompound.getInteger(\"srcPosY\"), par1NBTTagCompound.getInteger(\"srcPosZ\"));\n        this.dest = new ChunkCoordinates(par1NBTTagCompound.getInteger(\"destPosX\"), par1NBTTagCompound.getInteger(\"destPosY\"), par1NBTTagCompound.getInteger(\"destPosZ\"));\n        \n        this.length = par1NBTTagCompound.getDouble(\"branchLength\");\n        this.angle = par1NBTTagCompound.getDouble(\"branchAngle\");\n        this.tilt = par1NBTTagCompound.getDouble(\"branchTilt\");\n        this.leafy = par1NBTTagCompound.getBoolean(\"branchLeafy\");\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void addFooterView(View v, Object data, boolean isSelectable) {\n\n\n        FixedViewInfo info = new FixedViewInfo();\n        info.view = v;\n        info.data = data;\n        info.isSelectable = isSelectable;\n        mFooterViewInfos.add(info);\n\n        if (mAdapter != null && mObserver != null) {\n            mObserver.onChanged();\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void visitLdcInsn(final Object cst) {\n        if (mv != null) {\n            mv.visitLdcInsn(cst);\n        }\n        if (this.locals == null) {\n            labels = null;\n            return;\n        }\n        if (cst instanceof Integer) {\n            push(Opcodes.INTEGER);\n        } else if (cst instanceof Long) {\n            push(Opcodes.LONG);\n            push(Opcodes.TOP);\n        } else if (cst instanceof Float) {\n            push(Opcodes.FLOAT);\n        } else if (cst instanceof Double) {\n            push(Opcodes.DOUBLE);\n            push(Opcodes.TOP);\n        } else if (cst instanceof String) {\n            push(\"java/lang/String\");\n        } else if (cst instanceof Type) {\n            int sort = ((Type) cst).getSort();\n            if (sort == Type.OBJECT || sort == Type.ARRAY) {\n                push(\"java/lang/Class\");\n            } else if (sort == Type.METHOD) {\n                push(\"java/lang/invoke/MethodType\");\n            } else {\n                throw new IllegalArgumentException();\n            }\n        } else if (cst instanceof Handle) {\n            push(\"java/lang/invoke/MethodHandle\");\n        } else {\n            throw new IllegalArgumentException();\n        }\n        labels = null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static Endpoint create(Object implementor, WebServiceFeature ... features) {\n        return create(null, implementor, features);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic IssuerEntry(final int id, final X509Certificate cert)\n            throws CertificateEncodingException {\n        this.id = id;\n        this.cert = ParamUtil.requireNonNull(\"cert\", cert);\n        this.notBefore = cert.getNotBefore();\n        this.issuerHashMap = getIssuerHashAndKeys(cert.getEncoded());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintWriter writer, boolean suppressLogin, char eolMarker, boolean showDirection)\n    {\n        __writer = writer;\n        __nologin = suppressLogin;\n        __eolMarker = eolMarker;\n        __directionMarker = showDirection;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void printMethods(){\n        MethodData[] methods = cls.getMethods();\n        for(int m = 0; m < methods.length; m++){\n            String[] accflags = methods[m].getAccess();\n            if(checkAccess(accflags)){\n                if(!(env. showLineAndLocal || env.showDisassembled || env.showVerbose\n                     ||  env.showInternalSigs || env.showallAttr)){\n                    out.print(\"    \");\n                }\n                printMethodSignature(methods[m], accflags);\n                printExceptions(methods[m]);\n                out.println(\";\");\n\n                if (env.showInternalSigs){\n                    out.println(\"  Signature: \" + (methods[m].getInternalSig()));\n                }\n\n                if(env.showDisassembled && ! env.showallAttr) {\n                    printcodeSequence(methods[m]);\n                    printExceptionTable(methods[m]);\n                    out.println();\n                }\n\n                if (env.showLineAndLocal) {\n                    printLineNumTable(methods[m]);\n                    printLocVarTable(methods[m]);\n                    out.println();\n                }\n\n                if (env.showallAttr){\n                    printMethodAttributes(methods[m]);\n                }\n            }\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        PartialSufficientSatistics partialSufficientSatistics = PartialSufficientSatistics.createZeroPartialSufficientStatistics(efBayesianNetwork);\n        partialSufficientSatistics.copy(this.sumSS);\n        partialSufficientSatistics.normalize();\n        SufficientStatistics finalSS = efBayesianNetwork.createZeroSufficientStatistics();\n        finalSS.sum(partialSufficientSatistics.getCompoundVector());\n\n        efBayesianNetwork.setMomentParameters(finalSS);\n        return efBayesianNetwork.toBayesianNetwork(dag);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, boolean isStatic, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            lineNumber = printMethod(mv, clazz, method, isStatic, lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .directModelSubstitute(LocalDate.class, java.sql.Date.class)\n                .directModelSubstitute(LocalDateTime.class, java.util.Date.class)\n                .select()\n                .apis(requestHandler -> {\n                    String packageName = requestHandler.getHandlerMethod().getMethod()\n                            .getDeclaringClass().getPackage().getName();\n                    return packageName.startsWith(\"com.akkafun.\") && packageName.contains(\".web\");\n                })\n                .paths(PathSelectors.any())\n                .build();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        protected PreparedStatement initStatement(String sql, Object... parameters) throws SQLException\n        {\n            preparedStatement = getConnection().prepareStatement(sql);\n\n            for (int i = 0; i < parameters.length; i++)\n            {\n                preparedStatement.setObject(i + 1, parameters[i]);\n            }\n\n            return preparedStatement;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void ReadCommonRecord(NBTTagCompound tag) {\n    \tsuper.ReadCommonRecord(tag);\n    \t\n        Continuous = tag.getBoolean(\"Continuous\");\n\n        for (Directions Direction : Directions.values()) {\n            SideClosed[Direction.ordinal()] = tag.getBoolean(\"SideClosed\" + Direction.ordinal());\n        }\n\n        Active = tag.getBoolean(\"Active\");\n\n        Tier = tag.getInteger(\"Tier\");\n\n        energyStored = tag.getInteger(\"energyStored\");\n        \n        requiresScrewdriverToOpen=tag.getBoolean(\"screwdriver\");\n        \n        isAnchored=tag.getBoolean(\"anchored\");\n\n        personalDurationInTicks = tag.getInteger(\"PersonalDuration\");\n\n        zeroContinuousCooldown = tag.getBoolean(\"ForceZeroCooldown\");\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n  public void testQueryOrdered()\n  throws Exception {\n    final String query = \"SELECT ?s ?p WHERE { ?s ?p ?o . }ORDER BY ?s ?p\";\n\n    PostMethod post = new PostMethod(aseBaseUrl);\n    post.addParameter(Protocol.QUERY_PARAM_NAME, URLEncoder.encode(query, \"UTF-8\"));\n\n    final int code = client.executeMethod(post);\n    if (code == HttpStatus.SC_OK) {\n      final String json = post.getResponseBodyAsString();\n      String ref = \"{\\\"results\\\":{\\\"distinct\\\":\\\"false\\\",\\\"ordered\\\":\\\"true\\\",\\\"bindings\\\":[\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/a\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/firstName\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/a\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/like\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/a\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/type\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/b\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/firstName\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/b\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/firstName\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/b\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/think_at\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/b\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/type\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/c\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/firstName\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/c\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/test\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/c\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/type\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/d\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/fail\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/e\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/type\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/f\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/do\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/f\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/type\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/g\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/test\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/g\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/type\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/g\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/type\\\"}}]},\"\n              + \"\\\"head\\\":{\\\"link\\\":[],\\\"vars\\\":[\\\"s\\\",\\\"p\\\"]},\"\n              + \"\\\"status\\\":\\\"SUCCESS\\\",\\\"message\\\":\\\"\\\"}\";\n      assertEquals(ref, json.toString());\n    } else {\n      fail(\"code=\" + code);\n    }\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void adaptToEnablementChange(HighlightingStyle highlighting, PropertyChangeEvent event) {\n\t\tObject value = event.getNewValue();\n\t\tboolean eventValue;\n\t\tif (value instanceof Boolean)\n\t\t\teventValue = ((Boolean) value).booleanValue();\n\t\telse if (IPreferenceStore.TRUE.equals(value))\n\t\t\teventValue = true;\n\t\telse\n\t\t\teventValue = false;\n\t\thighlighting.setEnabled(eventValue);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n        \n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n        \n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n        \n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode parse(java.lang.String xmlAsString, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException {\n          return (com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( xmlAsString, type, options ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private boolean isInContent(float touchX, float touchY, Sticker currentSticker) {\n\n\n\n        float[] f = new float[9];\n        currentSticker.getmMatrix().getValues(f);\n        mContentDstLeftTopPoint.x = f[0] * 0 + f[1] * 0 + f[2];\n        mContentDstLeftTopPoint.y = f[3] * 0 + f[4] * 0 + f[5];\n        mContentDstRightTopPoint.x = f[0] * currentSticker.getBitmap().getWidth() + f[1] * 0 + f[2];\n        mContentDstRightTopPoint.y = f[3] * currentSticker.getBitmap().getWidth() + f[4] * 0 + f[5];\n        mContentDstLeftBottomPoint.x = f[0] * 0 + f[1] * currentSticker.getBitmap().getHeight() + f[2];\n        mContentDstLeftBottomPoint.y = f[3] * 0 + f[4] * currentSticker.getBitmap().getHeight() + f[5];\n        mContentDstRigintBottomPoint.x = f[0] * currentSticker.getBitmap().getWidth() + f[1] * currentSticker.getBitmap().getHeight() + f[2];\n        mContentDstRigintBottomPoint.y = f[3] * currentSticker.getBitmap().getWidth() + f[4] * currentSticker.getBitmap().getHeight() + f[5];\n\n        PointF pointF = new PointF(touchX, touchY);\n        PointF[] vertexPointFs = new PointF[] { mContentDstLeftTopPoint, mContentDstRightTopPoint, mContentDstRigintBottomPoint, mContentDstLeftBottomPoint };\n        int nCross = 0;\n        for (int i = 0; i < vertexPointFs.length; i++) {\n            PointF p1 = vertexPointFs[i];\n            PointF p2 = vertexPointFs[(i + 1) % vertexPointFs.length];\n            if (p1.y == p2.y)\n                continue;\n            if (pointF.y < Math.min(p1.y, p2.y))\n                continue;\n            if (pointF.y >= Math.max(p1.y, p2.y))\n                continue;\n            double x = (double) (pointF.y - p1.y) * (double) (p2.x - p1.x) / (double) (p2.y - p1.y) + p1.x;\n            if (x > pointF.x)\n                nCross++;\n        }\n        return (nCross % 2 == 1);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate double readDecimalLiteral(int c, boolean resetBuffer) {\n        assert c == '.' || isDecimalDigit(c);\n        boolean isInteger = true;\n        TokenStreamInput input = this.input;\n        StrBuffer buffer = resetBuffer ? this.buffer() : this.buffer;\n        if (c != '.' && c != '0') {\n            buffer.append(c);\n            while (isDecimalDigit(c = input.get())) {\n                buffer.append(c);\n            }\n        } else if (c == '0') {\n            buffer.append(c);\n            c = input.get();\n        }\n        if (c == '.') {\n            isInteger = false;\n            buffer.append(c);\n            while (isDecimalDigit(c = input.get())) {\n                buffer.append(c);\n            }\n        }\n        if (c == 'e' || c == 'E') {\n            isInteger = false;\n            buffer.append(c);\n            c = input.get();\n            if (c == '+' || c == '-') {\n                buffer.append(c);\n                c = input.get();\n            }\n            if (!isDecimalDigit(c)) {\n                throw error(Messages.Key.InvalidNumberLiteral);\n            }\n            buffer.append(c);\n            while (isDecimalDigit(c = input.get())) {\n                buffer.append(c);\n            }\n        }\n        if (isDecimalDigitOrIdentifierStart(c)) {\n            throw error(Messages.Key.InvalidNumberLiteral);\n        }\n        input.unget(c);\n        if (isInteger) {\n            return parseInteger(buffer.array(), buffer.length());\n        }\n        return parseDecimal(buffer.array(), buffer.length());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; } \n        return retVal;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        return CharacterData.of(codePoint).isIdentifierIgnorable(codePoint);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void printMethods(){\n        MethodData[] methods = cls.getMethods();\n        for(int m = 0; m < methods.length; m++){\n            String[] accflags = methods[m].getAccess();\n            if(checkAccess(accflags)){\n                if(!(env. showLineAndLocal || env.showDisassembled || env.showVerbose\n                     ||  env.showInternalSigs || env.showallAttr)){\n                    out.print(\"    \");\n                }\n                printMethodSignature(methods[m], accflags);\n                printExceptions(methods[m]);\n                out.println(\";\");\n\n                if (env.showInternalSigs){\n                    out.println(\"  Signature: \" + (methods[m].getInternalSig()));\n                }\n\n                if(env.showDisassembled && ! env.showallAttr) {\n                    printcodeSequence(methods[m]);\n                    printExceptionTable(methods[m]);\n                    out.println();\n                }\n\n                if (env.showLineAndLocal) {\n                    printLineNumTable(methods[m]);\n                    printLocVarTable(methods[m]);\n                    out.println();\n                }\n\n                if (env.showallAttr){\n                    printMethodAttributes(methods[m]);\n                }\n            }\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic LevelGen(int w, int h, int featureSize) {\n\t\tthis.w = w; // assigns the width of the map\n\t\tthis.h = h; // assigns the height of the map\n\n\t\tvalues = new double[w * h]; // creates the size of the value array (width * height)\n\n\t\tfor (int y = 0; y < w; y += featureSize) { // Loops through the width of the map, going up by the featureSize value each time. \n\t\t\tfor (int x = 0; x < w; x += featureSize) { // Loops through the width of the map a second time, going up by the featureSize value each time.\n\t\t\t\tsetSample(x, y, random.nextFloat() * 2 - 1); // sets a random value at a x and y point.\n\t\t\t}\n\t\t}\n\n\t\tint stepSize = featureSize; // stepSize is the featureSize that is given when you call the method. \n\t\tdouble scale = 1.0 / w; // scale of the map\n\t\tdouble scaleMod = 1; // scale modification\n\t\tdo { //do this...\n\t\t\tint halfStep = stepSize / 2;  // Half of stepSize\n\t\t\tfor (int y = 0; y < w; y += stepSize) { // Loops through the width value of the map, going up by the stepSize value each time. \n\t\t\t\tfor (int x = 0; x < w; x += stepSize) { // Loops through the width value of the map, going up by the stepSize value each time. \n\t\t\t\t\tdouble a = sample(x, y); // gets a sample value from the x and y value.\n\t\t\t\t\tdouble b = sample(x + stepSize, y); // gets a sample value from the next value of x, and the current y value.\n\t\t\t\t\tdouble c = sample(x, y + stepSize); // gets a sample value from the current x, and next value of y.\n\t\t\t\t\tdouble d = sample(x + stepSize, y + stepSize); // gets a sample value from the next x value and next y value.\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tdouble e = (a + b + c + d) / 4.0 + (random.nextFloat() * 2 - 1) * stepSize * scale;\n\t\t\t\t\t\n\t\t\t\t\tsetSample(x + halfStep, y + halfStep, e); // sets the value e at the next x value and next y value. repeat these until loop is done.\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int y = 0; y < w; y += stepSize) { // Loops through the width value of the map, going up by the stepSize value each time. \n\t\t\t\tfor (int x = 0; x < w; x += stepSize) { // Loops through the width value of the map, going up by the stepSize value each time. \n\t\t\t\t\tdouble a = sample(x, y); // gets a sample value from the x and y value.\n\t\t\t\t\tdouble b = sample(x + stepSize, y); // gets a sample value from the next value of x, and the current y value.\n\t\t\t\t\tdouble c = sample(x, y + stepSize); // gets a sample value from the current x, and next value of y.\n\t\t\t\t\tdouble d = sample(x + halfStep, y + halfStep); // gets a sample value from the next x value and next y value.\n\t\t\t\t\tdouble e = sample(x + halfStep, y - halfStep); // gets a sample value from the next x value and the previous y value.\n\t\t\t\t\tdouble f = sample(x - halfStep, y + halfStep); // gets a sample value from the previous x value and the next y value.\n\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tdouble H = (a + b + d + e) / 4.0 + (random.nextFloat() * 2 - 1) * stepSize * scale * 0.5;\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tdouble g = (a + c + d + f) / 4.0 + (random.nextFloat() * 2 - 1) * stepSize * scale * 0.5;\n\t\t\t\t\t\n\t\t\t\t\tsetSample(x + halfStep, y, H); // sets the H value at the half-way position of the next x value, and the current y value. \n\t\t\t\t\tsetSample(x, y + halfStep, g); // sets the g value at the current x value, and half-way position of the next y value.\n\t\t\t\t}\n\t\t\t}\n\t\t\tstepSize /= 2; // cuts the stepSize value in half.\n\t\t\tscale *= (scaleMod + 0.8); // Multiplies the scale by (scaleMod value + 0.8)\n\t\t\tscaleMod *= 0.3; // multiplies the scaleMod by 0.3\n\t\t} while (stepSize > 1); // ...if stepSize is larger than 1.\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static List<Integer> topologicalSort(List<Integer>[] graph) {\n\t\tint n = graph.length;\n\t\tboolean[] used = new boolean[n];\n\t\tLinkedList<Integer> res = new LinkedList<>();\n\t\tused = new boolean[n];\n\t\tfor (int i = 0; i < n; i++){\n\t\t\tif (!used[i])\n\t\t\t\tdfs(graph, used, res, i);\n\t\t}\n\t\t\t\t\n\t\tCollections.reverse(res);\n\t\treturn res;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public PartitionLoad getLoad() throws IOException{\n        Map<ServerName, List<HRegionInfo>> serverToRegionMap=new HashMap<>();\n        try(RegionLocator rl=connection.getRegionLocator(tableName)){\n            List<HRegionLocation> locations=rl.getAllRegionLocations();\n            for(HRegionLocation location : locations){\n                List<HRegionInfo> info=serverToRegionMap.get(location.getServerName());\n                if(info==null){\n                    info = new LinkedList<>();\n                    serverToRegionMap.put(location.getServerName(),info);\n                }\n                info.add(location.getRegionInfo());\n            }\n        }\n        int totalStoreFileSizeMB = 0;\n        int totalMemstoreSieMB = 0;\n        int storefileIndexSizeMB = 0;\n        try(Admin admin=connection.getAdmin()){\n            ClusterStatus clusterStatus=admin.getClusterStatus();\n            for(Map.Entry<ServerName,List<HRegionInfo>> entry:serverToRegionMap.entrySet()){\n                ServerLoad load=clusterStatus.getLoad(entry.getKey());\n                Map<byte[], RegionLoad> regionsLoad=load.getRegionsLoad();\n                for(HRegionInfo info:entry.getValue()){\n                    RegionLoad rl = regionsLoad.get(info.getRegionName());\n                    totalStoreFileSizeMB+=rl.getStorefileSizeMB();\n                    totalMemstoreSieMB+=rl.getMemStoreSizeMB();\n                    storefileIndexSizeMB+=rl.getStorefileIndexSizeMB();\n                }\n            }\n        }\n        return new HPartitionLoad(getName(),totalStoreFileSizeMB,totalMemstoreSieMB,storefileIndexSizeMB);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Accessor getAccessor(String poolName, AbstractSession session, DatabaseQuery query, boolean returnNullIfDead) {\n        Accessor accessor = null;\n        if (session.isClientSession()) {\n            ClientSession client = (ClientSession)session;\n            if (client.isExclusiveIsolatedClientSession() && client.hasWriteConnection()) {\n                accessor = client.getWriteConnection();\n            } else {\n                accessor = client.getWriteConnections().get(poolName);\n                if (accessor == null) {\n                    accessor = acquireAccessor(poolName, client.getParent(), query, returnNullIfDead);\n                    if (client.isExclusiveIsolatedClientSession() || session.isInTransaction()) {\n                        accessor = client.addWriteConnection(poolName, accessor);\n                    }\n                }\n            }\n        } else if (session.isServerSession()) {\n            accessor = acquireAccessor(poolName, (ServerSession)session, query, returnNullIfDead);\n        } else {\n            throw QueryException.partitioningNotSupported(session, query);\n        }\n        return accessor;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\tpublic PsiBuilder.Marker parseAndDone(ShaderLabParserBuilder builder, @NotNull PsiBuilder.Marker mark)\n\t{\n\t\tif(myFirstRole.parseAndDone(builder, builder.mark()) != null)\n\t\t{\n\t\t\tPsiBuilder.Marker secondMark = builder.mark();\n\t\t\tif(mySecondRole.parseAndDone(builder, secondMark) == null)\n\t\t\t{\n\t\t\t\tsecondMark.error(\"Expected second value\");\n\t\t\t}\n\t\t}\n\n\t\tmark.done(ShaderLabElements.PAIR_VALUE);\n\t\treturn mark;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate Member lookupDirectly( final Hierarchy hierarchy,\n                                 final Cube cube,\n                                 final String parameter,\n                                 final boolean searchForNames ) throws SQLException {\n    Member memberById = null;\n    Member memberByUniqueId = null;\n    final OlapStatement statement = connection.createStatement();\n    try {\n      final CellSet result = statement.executeOlapQuery( \"SELECT STRTOMEMBER(\" + quote( parameter ) +\n        \") ON 0, {} ON 1 FROM \" + cube.getUniqueName() );\n      try {\n        final List<CellSetAxis> setAxises = result.getAxes();\n        final List<Position> positionList = setAxises.get( 0 ).getPositions();\n        for ( int i = 0; i < positionList.size(); i++ ) {\n          final Position position = positionList.get( i );\n          final List<Member> memberList = position.getMembers();\n          for ( int j = 0; j < memberList.size(); j++ ) {\n            final Member member = memberList.get( j );\n            if ( parameter.startsWith( \"[\" ) ) {\n              if ( memberByUniqueId == null ) {\n                memberByUniqueId = member;\n              } else {\n                logger.warn( \"Encountered a member with a duplicate unique key: \" + member.getUniqueName() );\n              }\n            }\n            if ( searchForNames == false ) {\n              continue;\n            }\n            if ( parameter.equals( member.getName() ) ) {\n              if ( memberById == null ) {\n                memberById = member;\n              } else {\n                logger.warn( \"Encountered a member with a duplicate name: \" + member.getUniqueName() );\n              }\n            }\n          }\n        }\n      } finally {\n        result.close();\n      }\n    } finally {\n      try {\n        statement.close();\n      } catch ( final SQLException e ) {\n      }\n    }\n    if ( memberByUniqueId != null ) {\n      final Hierarchy memberHierarchy = memberByUniqueId.getHierarchy();\n      if ( hierarchy != memberHierarchy ) {\n        if ( ObjectUtilities.equal( hierarchy, memberHierarchy ) == false ) {\n          logger.warn( \"Cannot match hierarchy of member found with the hierarchy specfied in the parameter: \" +\n            \"Unabe to guarantee that the correct member has been queried, returning null.\" );\n          return null;\n        }\n      }\n      return memberByUniqueId;\n    }\n    if ( memberById != null ) {\n      final Hierarchy memberHierarchy = memberById.getHierarchy();\n      if ( hierarchy != memberHierarchy ) {\n        if ( ObjectUtilities.equal( hierarchy, memberHierarchy ) == false ) {\n          logger.warn( \"Cannot match hierarchy of member found with the hierarchy specfied in the parameter: \" +\n            \"Unabe to guarantee that the correct member has been queried, returning null.\" );\n          return null;\n        }\n      }\n      return memberById;\n    }\n    return null;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void handlePatch(final PatchParam patchParam) throws Throwable {\n        {\n            Class<?> cls = null;\n            try {\n                cls= patchParam.context.getClass().getClassLoader().loadClass(\"com.taobao.dexposed.TestFragment\");\n            } catch (Exception e) {\n                e.printStackTrace();\n                return;\n            }\n            Log.e(TAG, \"cls:\" + cls);\n            DexposedBridge.findAndHookMethod(cls, \"getText\", new XC_MethodReplacement() {\n                @Override\n                protected Object replaceHookedMethod(MethodHookParam methodHookParam) throws Throwable {\n                    Log.e(TAG, \"methodHookParam:\" + methodHookParam.method.getName());\n                    return \"from patch\";\n                }\n            });\n\n            DexposedBridge.findAndHookMethod(cls, \"onCreateView\", LayoutInflater.class, ViewGroup.class, Bundle.class, new XC_MethodReplacement() {\n                @Override\n                protected Object replaceHookedMethod(MethodHookParam methodHookParam) throws Throwable {\n                    ViewGroup view = (ViewGroup) methodHookParam.args[1];\n                    TextView tv = new TextView(view.getContext());\n                    tv.setText(\"replace onCreateView\");\n                    return tv;\n                }\n            });\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test public void\n    testBlock() throws Exception {\n        CompilationUnit cu = new CompilationUnit(\"AstTests.java\");\n\n        final PackageMemberClassDeclaration clazz = AstTest.createClass(cu);\n\n        List<Java.Statement> body = new ArrayList<Statement>();\n\n        Block sub = new Block(AstTest.getLocation());\n        sub.addStatement(AstTest.createVarDecl(\"x\", \"2.0\"));\n\n        body.add(sub);\n        body.add(\n            new ReturnStatement(\n                AstTest.getLocation(),\n                new Java.BinaryOperation(\n                    AstTest.getLocation(),\n                    AstTest.createVariableRef(\"x\"),\n                    \"*\",\n                    AstTest.createIntegerLiteral(\"3\")\n                )\n            )\n        );\n\n        AstTest.createMethod(clazz, body, AstTest.createDoubleType());\n\n        try {\n            AstTest.compileAndEval(cu);\n            Assert.fail(\"Block must limit the scope of variables in it\");\n        } catch (CompileException ex) {\n            Assert.assertTrue(ex.getMessage().endsWith(\"Expression \\\"x\\\" is not an rvalue\"));\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic MP3Reader(File file) throws IOException {\n\t\tthis.file = file;\n\t\ttry {\n\t\t\tMP3File mp3file = (MP3File) AudioFileIO.read(file);\n\t\t\tMP3AudioHeader audioHeader = (MP3AudioHeader) mp3file.getAudioHeader();\n\t\t\tif (audioHeader != null) {\n\t\t\t\tlog.debug(\"Track length: {}\", audioHeader.getTrackLength());\n\t\t\t\tlog.debug(\"Sample rate: {}\", audioHeader.getSampleRateAsNumber());\n\t\t\t\tlog.debug(\"Channels: {}\", audioHeader.getChannels());\n\t\t\t\tlog.debug(\"Variable bit rate: {}\", audioHeader.isVariableBitRate());\n\t\t\t\tlog.debug(\"Track length (2): {}\", audioHeader.getTrackLengthAsString());\n\t\t\t\tlog.debug(\"Mpeg version: {}\", audioHeader.getMpegVersion());\n\t\t\t\tlog.debug(\"Mpeg layer: {}\", audioHeader.getMpegLayer());\n\t\t\t\tlog.debug(\"Original: {}\", audioHeader.isOriginal());\n\t\t\t\tlog.debug(\"Copyrighted: {}\", audioHeader.isCopyrighted());\n\t\t\t\tlog.debug(\"Private: {}\", audioHeader.isPrivate());\n\t\t\t\tlog.debug(\"Protected: {}\", audioHeader.isProtected());\n\t\t\t\tlog.debug(\"Bitrate: {}\", audioHeader.getBitRate());\n\t\t\t\tlog.debug(\"Encoding type: {}\", audioHeader.getEncodingType());\n\t\t\t\tlog.debug(\"Encoder: {}\", audioHeader.getEncoder());\n\t\t\t}\n\t\t\tID3v24Tag idTag = mp3file.getID3v2TagAsv24();\n\t\t\tif (idTag != null) {\n\t\t\t\tmetaData = new MetaData();\n\t\t\t\tmetaData.setAlbum(idTag.getFirst(FieldKey.ALBUM));\n\t\t\t\tmetaData.setArtist(idTag.getFirst(FieldKey.ARTIST));\n\t\t\t\tmetaData.setComment(idTag.getFirst(FieldKey.COMMENT));\n\t\t\t\tmetaData.setGenre(idTag.getFirst(FieldKey.GENRE));\n\t\t\t\tmetaData.setSongName(idTag.getFirst(FieldKey.TITLE));\n\t\t\t\tmetaData.setTrack(idTag.getFirst(FieldKey.TRACK));\n\t\t\t\tmetaData.setYear(idTag.getFirst(FieldKey.YEAR));\n\t\t\t\tList<Artwork> tagFieldList = idTag.getArtworkList();\n\t\t\t\tif (tagFieldList == null || tagFieldList.isEmpty()) {\n\t\t\t\t\tlog.debug(\"No cover art was found\");\n\t\t\t\t} else {\n\t\t\t\t\tArtwork imageField = tagFieldList.get(0);\n\t\t\t\t\tlog.debug(\"Picture type: {}\", imageField.getPictureType());\n\t\t\t\t\tFrameBodyAPIC imageFrameBody = new FrameBodyAPIC();\n\t\t\t\t\timageFrameBody.setImageData(imageField.getBinaryData());\n\t\t\t\t\tif (!imageFrameBody.isImageUrl()) {\n\t\t\t\t\t\tbyte[] imageBuffer = (byte[]) imageFrameBody.getObjectValue(DataTypes.OBJ_PICTURE_DATA);\n\t\t\t\t\t\tmetaData.setCovr(imageBuffer);\n\t\t\t\t\t\tIoBuffer buf = IoBuffer.allocate(imageBuffer.length);\n\t\t\t\t\t\tbuf.setAutoExpand(true);\n\t\t\t\t\t\tOutput out = new Output(buf);\n\t\t\t\t\t\tout.writeString(\"onImageData\");\n\t\t\t\t\t\tMap<Object, Object> props = new HashMap<Object, Object>();\n\t\t\t\t\t\tprops.put(\"trackid\", 1);\n\t\t\t\t\t\tprops.put(\"data\", imageBuffer);\n\t\t\t\t\t\tout.writeMap(props, new Serializer());\n\t\t\t\t\t\tbuf.flip();\n\t\t\t\t\t\tITag result = new Tag(IoConstants.TYPE_METADATA, 0, buf.limit(), null, 0);\n\t\t\t\t\t\tresult.setBody(buf);\n\t\t\t\t\t\tfirstTags.add(result);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog.info(\"File did not contain ID3v2 data: {}\", file.getName());\n\t\t\t}\n\t\t\tmp3file = null;\n\t\t} catch (TagException e) {\n\t\t\tlog.error(\"MP3Reader (tag error) {}\", e);\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"MP3Reader {}\", e);\n\t\t}\n\t\tfis = new FileInputStream(file);\n\t\tchannel = fis.getChannel();\n\t\tfileSize = channel.size();\n\t\tlog.debug(\"File size: {}\", fileSize);\n\t\tanalyzeKeyFrames();\n\t\tfirstTags.addFirst(createFileMeta());\n\t\tif ((fileSize - channel.position()) > 4) {\n\t\t\tsearchNextFrame();\n\t\t\tlong pos = channel.position();\n\t\t\tMP3Header header = null;\n\t\t\ttry {\n\t\t\t\theader = readHeader();\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.warn(\"Exception reading initial header\", e);\n\t\t\t}\n\t\t\tchannel.position(pos);\n\t\t\tif (header != null) {\n\t\t\t\tcheckValidHeader(header);\n\t\t\t} else {\n\t\t\t\tthrow new RuntimeException(\"No initial header found\");\n\t\t\t}\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static int readVarInt(MCDataInput in) {\n        int i = 0;\n        int j = 0;\n        byte b0;\n\n        do {\n            b0 = in.readByte();\n            i |= (b0 & 127) << j++ * 7;\n\n            if (j > 5)\n                throw new RuntimeException(\"VarInt too big\");\n        } while ((b0 & 128) == 128);\n\n        return i;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void testParameterTypes() throws Exception {\n        Response<String> response = webb\n                .get(\"/parameter-types\")\n                .param(\"string\", SIMPLE_ASCII)\n                .param(\"number\", 815)\n                .param(\"number\", 4711) // test overwrite feature of multiple calls with same name\n                .param(\"null\", null)\n                .param(\"empty\", \"\")\n                .asString();\n\n        assertEquals(204, response.getStatusCode());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static <V> Iterable<V> topologicalSort(\n            @Nonnull Map<V, List<V>> adjacencyMap, @Nonnull Function<V, String> vertexNameFn\n    ) {\n        Map<V, TarjanVertex<V>> tarjanVertices =\n                adjacencyMap.keySet().stream()\n                            .map(v -> entry(v, new TarjanVertex<>(v)))\n                            .collect(toMap(Entry::getKey, Entry::getValue));\n        Map<TarjanVertex<V>, List<TarjanVertex<V>>> tarjanAdjacencyMap =\n                adjacencyMap.entrySet().stream()\n                            .collect(toMap(e -> tarjanVertices.get(e.getKey()),\n                                           e -> e.getValue().stream()\n                                                 .map(tarjanVertices::get)\n                                                 .collect(toList())));\n        return new TopologicalSorter<>(tarjanAdjacencyMap, vertexNameFn).go();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testAs() {\n        XCriteriaBuilder cb = entityManagerFactory.getCriteriaBuilder();\n        XCriteriaQuery<Tuple> cq = cb.createTupleQuery();\n        XRoot<SaleTransaction> saleTransaction = cq.from(SaleTransaction.class);\n        cq\n        .groupBy(\n                saleTransaction.join(SaleTransaction_.buyer).get(Customer_.name),\n                saleTransaction.join(SaleTransaction_.product).get(Product_.name)\n        )\n        .orderBy(\n                cb.asc(saleTransaction.join(SaleTransaction_.buyer).get(Customer_.name)),\n                cb.asc(saleTransaction.join(SaleTransaction_.product).get(Product_.name))\n        )\n        .multiselect(\n                saleTransaction.get(SaleTransaction_.buyer).get(Customer_.name).alias(\"customer\"),\n                saleTransaction.get(SaleTransaction_.product).get(Product_.name).alias(\"product\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(int.class)\n                .alias(\"totalIntPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(long.class)\n                .alias(\"totalLongPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(float.class)\n                .alias(\"totalFloatPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(double.class)\n                .alias(\"totalDoublePrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(Integer.class)\n                .alias(\"totalNullableIntPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(Long.class)\n                .alias(\"totalNullableLongPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(Float.class)\n                .alias(\"totalNullableFloatPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(Double.class)\n                .alias(\"totalNullableDoublePrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(BigInteger.class)\n                .alias(\"totalBigIntegerPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.productTransactionPrice)\n                        )\n                )\n                .as(BigDecimal.class)\n                .alias(\"totalBigDecimalPrice\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(short.class)\n                .alias(\"totalShortWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(int.class)\n                .alias(\"totalIntWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(long.class)\n                .alias(\"totalLongWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(float.class)\n                .alias(\"totalFloatWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(double.class)\n                .alias(\"totalDoubleWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(Short.class)\n                .alias(\"totalNullableShortWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(Integer.class)\n                .alias(\"totalNullableIntWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(Long.class)\n                .alias(\"totalNullableLongWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(Float.class)\n                .alias(\"totalNullableFloatWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(Double.class)\n                .alias(\"totalNullableDoubleWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(BigInteger.class)\n                .alias(\"totalBigIntegerWeight\"),\n                cb.sum(\n                        cb.prod(\n                                saleTransaction.get(SaleTransaction_.quantity),\n                                saleTransaction.get(SaleTransaction_.product).get(Product_.weight)\n                        )\n                )\n                .as(BigDecimal.class)\n                .alias(\"totalBigDecimalWeight\")\n        );\n        \n        List<Tuple> tuples = this.entityManager.createQuery(cq).getResultList();\n        Assert.assertEquals(5, tuples.size());\n        \n        Assert.assertEquals(\"Howard\", (String)tuples.get(0).get(\"customer\"));\n        Assert.assertEquals(\"ADUI-A8\", (String)tuples.get(0).get(\"product\"));\n        Assert.assertEquals(2620000 * 2 - 1280000, ((Integer)tuples.get(0).get(\"totalIntPrice\")).intValue());\n        Assert.assertEquals(2620000L * 2 - 1280000, ((Long)tuples.get(0).get(\"totalLongPrice\")).longValue());\n        Assert.assertEquals(2620000F * 2 - 1280000, ((Float)tuples.get(0).get(\"totalFloatPrice\")).floatValue());\n        Assert.assertEquals(2620000D * 2 - 1280000, ((Double)tuples.get(0).get(\"totalDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2620000 * 2 - 1280000, ((Integer)tuples.get(0).get(\"totalNullableIntPrice\")).intValue());\n        Assert.assertEquals(2620000L * 2 - 1280000, ((Long)tuples.get(0).get(\"totalNullableLongPrice\")).longValue());\n        Assert.assertEquals(2620000F * 2 - 1280000, ((Float)tuples.get(0).get(\"totalNullableFloatPrice\")).floatValue());\n        Assert.assertEquals(2620000D * 2 - 1280000, ((Double)tuples.get(0).get(\"totalNullableDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2620000L * 2 - 1280000, ((BigInteger)tuples.get(0).get(\"totalBigIntegerPrice\")).longValue());\n        Assert.assertEquals(2620000L * 2 - 1280000, ((BigDecimal)tuples.get(0).get(\"totalBigDecimalPrice\")).longValue());\n        Assert.assertEquals((short)2185, ((Short)tuples.get(0).get(\"totalShortWeight\")).shortValue());\n        Assert.assertEquals(2185, ((Integer)tuples.get(0).get(\"totalIntWeight\")).intValue());\n        Assert.assertEquals(2185L, ((Long)tuples.get(0).get(\"totalLongWeight\")).longValue());\n        Assert.assertEquals(2185F, ((Float)tuples.get(0).get(\"totalFloatWeight\")).floatValue());\n        Assert.assertEquals(2185D, ((Double)tuples.get(0).get(\"totalDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals((short)2185, ((Short)tuples.get(0).get(\"totalNullableShortWeight\")).shortValue());\n        Assert.assertEquals(2185, ((Integer)tuples.get(0).get(\"totalNullableIntWeight\")).intValue());\n        Assert.assertEquals(2185L, ((Long)tuples.get(0).get(\"totalNullableLongWeight\")).longValue());\n        Assert.assertEquals(2185F, ((Float)tuples.get(0).get(\"totalNullableFloatWeight\")).floatValue());\n        Assert.assertEquals(2185D, ((Double)tuples.get(0).get(\"totalNullableDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2185L, ((BigInteger)tuples.get(0).get(\"totalBigIntegerWeight\")).longValue());\n        Assert.assertEquals(2185L, ((BigDecimal)tuples.get(0).get(\"totalBigDecimalWeight\")).longValue());\n        \n        Assert.assertEquals(\"Howard\", (String)tuples.get(1).get(\"customer\"));\n        Assert.assertEquals(\"Aventador LP700-4\", (String)tuples.get(1).get(\"product\"));\n        Assert.assertEquals(7354000, ((Integer)tuples.get(1).get(\"totalIntPrice\")).intValue());\n        Assert.assertEquals(7354000L, ((Long)tuples.get(1).get(\"totalLongPrice\")).longValue());\n        Assert.assertEquals(7354000F, ((Float)tuples.get(1).get(\"totalFloatPrice\")).floatValue());\n        Assert.assertEquals(7354000D, ((Double)tuples.get(1).get(\"totalDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(7354000, ((Integer)tuples.get(1).get(\"totalNullableIntPrice\")).intValue());\n        Assert.assertEquals(7354000L, ((Long)tuples.get(1).get(\"totalNullableLongPrice\")).longValue());\n        Assert.assertEquals(7354000F, ((Float)tuples.get(1).get(\"totalNullableFloatPrice\")).floatValue());\n        Assert.assertEquals(7354000D, ((Double)tuples.get(1).get(\"totalNullableDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(7354000L, ((BigInteger)tuples.get(1).get(\"totalBigIntegerPrice\")).longValue());\n        Assert.assertEquals(7354000L, ((BigDecimal)tuples.get(1).get(\"totalBigDecimalPrice\")).longValue());\n        Assert.assertEquals((short)1585, ((Short)tuples.get(1).get(\"totalShortWeight\")).shortValue());\n        Assert.assertEquals(1585, ((Integer)tuples.get(1).get(\"totalIntWeight\")).intValue());\n        Assert.assertEquals(1585L, ((Long)tuples.get(1).get(\"totalLongWeight\")).longValue());\n        Assert.assertEquals(1585F, ((Float)tuples.get(1).get(\"totalFloatWeight\")).floatValue());\n        Assert.assertEquals(1585D, ((Double)tuples.get(1).get(\"totalDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals((short)1585, ((Short)tuples.get(1).get(\"totalNullableShortWeight\")).shortValue());\n        Assert.assertEquals(1585, ((Integer)tuples.get(1).get(\"totalNullableIntWeight\")).intValue());\n        Assert.assertEquals(1585L, ((Long)tuples.get(1).get(\"totalNullableLongWeight\")).longValue());\n        Assert.assertEquals(1585F, ((Float)tuples.get(1).get(\"totalNullableFloatWeight\")).floatValue());\n        Assert.assertEquals(1585D, ((Double)tuples.get(1).get(\"totalNullableDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(1585L, ((BigInteger)tuples.get(1).get(\"totalBigIntegerWeight\")).longValue());\n        Assert.assertEquals(1585L, ((BigDecimal)tuples.get(1).get(\"totalBigDecimalWeight\")).longValue());\n        \n        Assert.assertEquals(\"Howard\", (String)tuples.get(2).get(\"customer\"));\n        Assert.assertEquals(\"BENZ-S\", (String)tuples.get(2).get(\"product\"));\n        Assert.assertEquals(3612000, ((Integer)tuples.get(2).get(\"totalIntPrice\")).intValue());\n        Assert.assertEquals(3612000L, ((Long)tuples.get(2).get(\"totalLongPrice\")).longValue());\n        Assert.assertEquals(3612000F, ((Float)tuples.get(2).get(\"totalFloatPrice\")).floatValue());\n        Assert.assertEquals(3612000D, ((Double)tuples.get(2).get(\"totalDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(3612000, ((Integer)tuples.get(2).get(\"totalNullableIntPrice\")).intValue());\n        Assert.assertEquals(3612000L, ((Long)tuples.get(2).get(\"totalNullableLongPrice\")).longValue());\n        Assert.assertEquals(3612000F, ((Float)tuples.get(2).get(\"totalNullableFloatPrice\")).floatValue());\n        Assert.assertEquals(3612000D, ((Double)tuples.get(2).get(\"totalNullableDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(3612000L, ((BigInteger)tuples.get(2).get(\"totalBigIntegerPrice\")).longValue());\n        Assert.assertEquals(3612000L, ((BigDecimal)tuples.get(2).get(\"totalBigDecimalPrice\")).longValue());\n        Assert.assertEquals((short)2250, ((Short)tuples.get(2).get(\"totalShortWeight\")).shortValue());\n        Assert.assertEquals(2250, ((Integer)tuples.get(2).get(\"totalIntWeight\")).intValue());\n        Assert.assertEquals(2250L, ((Long)tuples.get(2).get(\"totalLongWeight\")).longValue());\n        Assert.assertEquals(2250F, ((Float)tuples.get(2).get(\"totalFloatWeight\")).floatValue());\n        Assert.assertEquals(2250D, ((Double)tuples.get(2).get(\"totalDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals((short)2250, ((Short)tuples.get(2).get(\"totalNullableShortWeight\")).shortValue());\n        Assert.assertEquals(2250, ((Integer)tuples.get(2).get(\"totalNullableIntWeight\")).intValue());\n        Assert.assertEquals(2250L, ((Long)tuples.get(2).get(\"totalNullableLongWeight\")).longValue());\n        Assert.assertEquals(2250F, ((Float)tuples.get(2).get(\"totalNullableFloatWeight\")).floatValue());\n        Assert.assertEquals(2250D, ((Double)tuples.get(2).get(\"totalNullableDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2250L, ((BigInteger)tuples.get(2).get(\"totalBigIntegerWeight\")).longValue());\n        Assert.assertEquals(2250L, ((BigDecimal)tuples.get(2).get(\"totalBigDecimalWeight\")).longValue());\n        \n        Assert.assertEquals(\"Jim\", (String)tuples.get(3).get(\"customer\"));\n        Assert.assertEquals(\"ADUI-A8\", (String)tuples.get(3).get(\"product\"));\n        Assert.assertEquals(2611000 * 4, ((Integer)tuples.get(3).get(\"totalIntPrice\")).intValue());\n        Assert.assertEquals(2611000L * 4, ((Long)tuples.get(3).get(\"totalLongPrice\")).longValue());\n        Assert.assertEquals(2611000F * 4, ((Float)tuples.get(3).get(\"totalFloatPrice\")).floatValue());\n        Assert.assertEquals(2611000D * 4, ((Double)tuples.get(3).get(\"totalDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2611000 * 4, ((Integer)tuples.get(3).get(\"totalNullableIntPrice\")).intValue());\n        Assert.assertEquals(2611000L * 4, ((Long)tuples.get(3).get(\"totalNullableLongPrice\")).longValue());\n        Assert.assertEquals(2611000F * 4, ((Float)tuples.get(3).get(\"totalNullableFloatPrice\")).floatValue());\n        Assert.assertEquals(2611000D * 4, ((Double)tuples.get(3).get(\"totalNullableDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2611000L * 4, ((BigInteger)tuples.get(3).get(\"totalBigIntegerPrice\")).longValue());\n        Assert.assertEquals(2611000L * 4, ((BigDecimal)tuples.get(3).get(\"totalBigDecimalPrice\")).longValue());\n        Assert.assertEquals((short)(2185 * 4), ((Short)tuples.get(3).get(\"totalShortWeight\")).shortValue());\n        Assert.assertEquals(2185 * 4, ((Integer)tuples.get(3).get(\"totalIntWeight\")).intValue());\n        Assert.assertEquals(2185L * 4, ((Long)tuples.get(3).get(\"totalLongWeight\")).longValue());\n        Assert.assertEquals(2185F * 4, ((Float)tuples.get(3).get(\"totalFloatWeight\")).floatValue());\n        Assert.assertEquals(2185D * 4, ((Double)tuples.get(3).get(\"totalDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals((short)(2185 * 4), ((Short)tuples.get(3).get(\"totalNullableShortWeight\")).shortValue());\n        Assert.assertEquals(2185 * 4, ((Integer)tuples.get(3).get(\"totalNullableIntWeight\")).intValue());\n        Assert.assertEquals(2185L * 4, ((Long)tuples.get(3).get(\"totalNullableLongWeight\")).longValue());\n        Assert.assertEquals(2185F * 4, ((Float)tuples.get(3).get(\"totalNullableFloatWeight\")).floatValue());\n        Assert.assertEquals(2185D * 4, ((Double)tuples.get(3).get(\"totalNullableDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2185L * 4, ((BigInteger)tuples.get(3).get(\"totalBigIntegerWeight\")).longValue());\n        Assert.assertEquals(2185L * 4, ((BigDecimal)tuples.get(3).get(\"totalBigDecimalWeight\")).longValue());\n        \n        Assert.assertEquals(\"Smith\", (String)tuples.get(4).get(\"customer\"));\n        Assert.assertEquals(\"BENZ-S\", (String)tuples.get(4).get(\"product\"));\n        Assert.assertEquals(3582000 * 3, ((Integer)tuples.get(4).get(\"totalIntPrice\")).intValue());\n        Assert.assertEquals(3582000L * 3, ((Long)tuples.get(4).get(\"totalLongPrice\")).longValue());\n        Assert.assertEquals(3582000F * 3, ((Float)tuples.get(4).get(\"totalFloatPrice\")).floatValue());\n        Assert.assertEquals(3582000D * 3, ((Double)tuples.get(4).get(\"totalDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(3582000 * 3, ((Integer)tuples.get(4).get(\"totalNullableIntPrice\")).intValue());\n        Assert.assertEquals(3582000L * 3, ((Long)tuples.get(4).get(\"totalNullableLongPrice\")).longValue());\n        Assert.assertEquals(3582000F * 3, ((Float)tuples.get(4).get(\"totalNullableFloatPrice\")).floatValue());\n        Assert.assertEquals(3582000D * 3, ((Double)tuples.get(4).get(\"totalNullableDoublePrice\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(3582000L * 3, ((BigInteger)tuples.get(4).get(\"totalBigIntegerPrice\")).longValue());\n        Assert.assertEquals(3582000L * 3, ((BigDecimal)tuples.get(4).get(\"totalBigDecimalPrice\")).longValue());\n        Assert.assertEquals((short)(2250 * 3), ((Short)tuples.get(4).get(\"totalShortWeight\")).shortValue());\n        Assert.assertEquals(2250 * 3, ((Integer)tuples.get(4).get(\"totalIntWeight\")).intValue());\n        Assert.assertEquals(2250L * 3, ((Long)tuples.get(4).get(\"totalLongWeight\")).longValue());\n        Assert.assertEquals(2250F * 3, ((Float)tuples.get(4).get(\"totalFloatWeight\")).floatValue());\n        Assert.assertEquals(2250D * 3, ((Double)tuples.get(4).get(\"totalDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals((short)(2250 * 3), ((Short)tuples.get(4).get(\"totalNullableShortWeight\")).shortValue());\n        Assert.assertEquals(2250 * 3, ((Integer)tuples.get(4).get(\"totalNullableIntWeight\")).intValue());\n        Assert.assertEquals(2250L * 3, ((Long)tuples.get(4).get(\"totalNullableLongWeight\")).longValue());\n        Assert.assertEquals(2250F * 3, ((Float)tuples.get(4).get(\"totalNullableFloatWeight\")).floatValue());\n        Assert.assertEquals(2250D * 3, ((Double)tuples.get(4).get(\"totalNullableDoubleWeight\")).doubleValue(), 1E-6D);\n        Assert.assertEquals(2250L * 3, ((BigInteger)tuples.get(4).get(\"totalBigIntegerWeight\")).longValue());\n        Assert.assertEquals(2250L * 3, ((BigDecimal)tuples.get(4).get(\"totalBigDecimalWeight\")).longValue());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static <T> T getViewer(Class<T> clazz, Control control, int event) {\n\t\tListener[] listeners = control.getListeners(event);\n\t\tfor (Listener listener : listeners) {\n\t\t\tObject lookFor = listener;\n\t\t\tif (listener instanceof TypedListener) {\n\t\t\t\tlookFor = ((TypedListener) listener).getEventListener();\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tField this$0 = lookFor.getClass().getDeclaredField(\"this$0\");\n\t\t\t\tthis$0.setAccessible(true);\n\t\t\t\tObject viewer = this$0.get(lookFor);\n\t\t\t\tif (clazz.isInstance(viewer)) {\n\t\t\t\t\treturn clazz.cast(viewer);\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public boolean transformOne(GlyphLine line) {\n        if (line.idx >= line.end) {\n            return false;\n        }\n        Glyph g = line.get(line.idx);\n        boolean changed = false;\n        if (!openReader.isSkip(g.getCode(), lookupFlag)) {\n            int substCode = substMap.get(g.getCode());\n            if (substCode != 0) {\n                line.substituteOneToOne(openReader, substCode);\n                changed = true;\n            }\n        }\n        line.idx++;\n        return changed;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void defaultAction(HttpServletRequest req, HttpServletResponse res)\n                   throws ServletException, IOException\n    {\n     bmsample3home home = null;\n     bmsample3 remote = null;\n     res.setContentType(\"text/plain\");\n     PrintWriter out = res.getWriter();\n     Context ctx;\n\t       \n     try\n      {\n      Hashtable env = new Hashtable(1);\n      env.put(\"javax.naming.factory.initial\", \"com.netscape.server.jndi.RootContextFactory\");\n      ctx = new InitialContext(env);\n\n      Object objref = ctx.lookup(\"ejb/bmsamplebean3\");\n      home = (bmsample3home)PortableRemoteObject.narrow(objref, bmsample3home.class);\n      remote = home.create();\n      out.println(\"calling  bean1 \");\n      out.println(\" the result of invoking the ejb method is \" + remote.performDBOps());\n\t   }\n       catch (Exception e)\n       {\n\t   System.out.println(\" ERROR: \" + e);\n       }\n        try\n        {\n    \n        }catch(Exception e){}\t\t\t      \n\t\t\t\t\t\t\t\t      \n\t  \n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void sendCrashLog2PM(String fileName) {\n        if (!new File(fileName).exists()) {\n            Toast.makeText(mContext, \"\u93c3\u30e5\u7e54\u93c2\u56e6\u6b22\u6d93\u5d85\u74e8\u9366\ue7d2\u7d12\", Toast.LENGTH_SHORT).show();\n            return;\n        }\n        FileInputStream fis = null;\n        BufferedReader reader = null;\n        String s = null;\n        try {\n            fis = new FileInputStream(fileName);\n            reader = new BufferedReader(new InputStreamReader(fis, \"GBK\"));\n            while (true) {\n                s = reader.readLine();\n                if (s == null)\n                    break;\n\n\n                Log.i(\"info\", s.toString());\n            }\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally { // \u934f\u62bd\u68f4\u5a34\n\n            try {\n                if (reader != null)\n                    reader.close();\n                if (fis != null)\n                    fis.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprotected void checkPrivileges(String user,\n\t\t\t\t\t\t\t\t   TableDescriptor td,\n\t\t\t\t\t\t\t\t   SchemaDescriptor sd,\n\t\t\t\t\t\t\t\t   DataDictionary dd,\n\t\t\t\t\t\t\t\t   LanguageConnectionContext lcc)\n\t\t\tthrows StandardException {\n\t\tif (user.equals(dd.getAuthorizationDatabaseOwner())) return;\n\n\t\tif (td == null) return;\n\t\tif (td.getTableType() == TableDescriptor.VIEW_TYPE) {\n\t\t\tif (descriptorList != null) {\n\t\t\t\tTransactionController tc = lcc.getTransactionExecute();\n\t\t\t\tint siz = descriptorList.size();\n                for (Object aDescriptorList : descriptorList) {\n                    TupleDescriptor p;\n                    SchemaDescriptor s = null;\n\n                    p = (TupleDescriptor) aDescriptorList;\n                    if (p instanceof TableDescriptor) {\n                        TableDescriptor t = (TableDescriptor) p;\n                        s = t.getSchemaDescriptor();\n                    } else if (p instanceof ViewDescriptor) {\n                        ViewDescriptor v = (ViewDescriptor) p;\n                        s = dd.getSchemaDescriptor(v.getCompSchemaId(), tc);\n                    } else if (p instanceof AliasDescriptor) {\n                        AliasDescriptor a = (AliasDescriptor) p;\n                        s = dd.getSchemaDescriptor(a.getSchemaUUID(), tc);\n                    }\n\n                    if (s != null && !user.equals(s.getAuthorizationId())) {\n                        throw StandardException.newException(\n                                SQLState.AUTH_NO_OBJECT_PERMISSION,\n                                user,\n                                \"grant\",\n                                sd.getSchemaName(),\n                                td.getName());\n                    }\n\n                }\n\t\t\t}\n\t\t}\n\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static int compareWithConversion(Object v1, Object v2) {\n        return compareWithConversion(v1, v2, false);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void visitLdcInsn(final Object cst) {\n        if (mv != null) {\n            mv.visitLdcInsn(cst);\n        }\n        if (this.locals == null) {\n            labels = null;\n            return;\n        }\n        if (cst instanceof Integer) {\n            push(Opcodes.INTEGER);\n        } else if (cst instanceof Long) {\n            push(Opcodes.LONG);\n            push(Opcodes.TOP);\n        } else if (cst instanceof Float) {\n            push(Opcodes.FLOAT);\n        } else if (cst instanceof Double) {\n            push(Opcodes.DOUBLE);\n            push(Opcodes.TOP);\n        } else if (cst instanceof String) {\n            push(\"java/lang/String\");\n        } else if (cst instanceof Type) {\n            int sort = ((Type) cst).getSort();\n            if (sort == Type.OBJECT || sort == Type.ARRAY) {\n                push(\"java/lang/Class\");\n            } else if (sort == Type.METHOD) {\n                push(\"java/lang/invoke/MethodType\");\n            } else {\n                throw new IllegalArgumentException();\n            }\n        } else if (cst instanceof Handle) {\n            push(\"java/lang/invoke/MethodHandle\");\n        } else {\n            throw new IllegalArgumentException();\n        }\n        labels = null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static String stringFromStream(InputStream inputStream) throws IOException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        byte[] buffer = new byte[1024];\n        while (true) {\n            int length = inputStream.read(buffer);\n            if (length == -1) {\n                return new String(baos.toByteArray(), \"UTF-8\");\n            }\n            baos.write(buffer, 0, length);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    <T> Variable<T> reserveSlot(String name, Type type, int slot) {\n        reserveSlot(type, slot);\n        return varScope.add(name, type, slot);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public boolean transformOne(GlyphLine line) {\n        if (line.idx >= line.end) {\n            return false;\n        }\n        Glyph g = line.get(line.idx);\n        boolean changed = false;\n        if (!openReader.isSkip(g.getCode(), lookupFlag)) {\n            int substCode = substMap.get(g.getCode());\n            if (substCode != 0) {\n                line.substituteOneToOne(openReader, substCode);\n                changed = true;\n            }\n        }\n        line.idx++;\n        return changed;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker, boolean showDirection) {\n        this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String[] appendSelectionArgs(String[] originalValues, String[] newValues) {\n        if (originalValues == null || originalValues.length == 0) {\n            return newValues;\n        }\n        String[] result = new String[originalValues.length + newValues.length ];\n        System.arraycopy(originalValues, 0, result, 0, originalValues.length);\n        System.arraycopy(newValues, 0, result, originalValues.length, newValues.length);\n        return result;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static void escapeCssIdentifier(final String text, final Writer writer,\n                                           final CssIdentifierEscapeType type, final CssIdentifierEscapeLevel level)\n            throws IOException {\n\n        if (writer == null) {\n            throw new IllegalArgumentException(\"Argument 'writer' cannot be null\");\n        }\n\n        if (type == null) {\n            throw new IllegalArgumentException(\"The 'type' argument cannot be null\");\n        }\n\n        if (level == null) {\n            throw new IllegalArgumentException(\"The 'level' argument cannot be null\");\n        }\n\n        CssIdentifierEscapeUtil.escape(new InternalStringReader(text), writer, type, level);\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprotected String testBlock(BlockPos pos) {\n\t\tIBlockState _blockState = worldObj.getBlockState(pos);\n\t\tBlock _block = _blockState.getBlock();\n\t\tint metaData = _block.getMetaFromState(_blockState);\n\t\tItemStack testItem = new ItemStack(_block, 1, metaData);\n\t\tif (ModHelper.isLeaf(testItem)) return \"treeLeaves\";\n\t\tif (ModHelper.isLog(testItem)) return \"logWood\";\n\t\treturn \"Unknown\";\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic WebSocketServer( InetSocketAddress address , int decodercount , List<Draft> drafts ) {\n\t\tthis( address, decodercount, drafts, new HashSet<WebSocket>() );\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic String loadJSONFromAsset(String fileName) {\n        String json = null;\n        try {\n            InputStream is = context.getAssets().open(fileName);\n            int size = is.available();\n            byte[] buffer = new byte[size];\n            is.read(buffer);\n            is.close();\n            json = new String(buffer, \"UTF-8\");\n\n        } catch (IOException ex) {\n            ex.printStackTrace();\n            return null;\n        }\n        return json;\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, Predicate<String> isStatic, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            lineNumber = printMethod(mv, clazz, method, isStatic.test(method), lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        PartialSufficientSatistics partialSufficientSatistics = PartialSufficientSatistics.createZeroPartialSufficientStatistics(efBayesianNetwork);\n        partialSufficientSatistics.copy(this.sumSS);\n        partialSufficientSatistics.normalize();\n        SufficientStatistics finalSS = efBayesianNetwork.createZeroSufficientStatistics();\n        finalSS.sum(partialSufficientSatistics.getCompoundVector());\n\n        efBayesianNetwork.setMomentParameters(finalSS);\n        return efBayesianNetwork.toBayesianNetwork(dag);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\n  @Test\n  public void raise() {\n    AtomicReference<Throwable> interrupt = new AtomicReference<>();\n    Promise<Integer> p = Promise.apply(interrupt::set);\n    p.raise(ex);\n    assertEquals(ex, interrupt.get());\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public BeanConnector(Class<E> beanClass, Matcher<PropertyChangeEvent> eventMatcher) {\n        this(beanClass);\n        setEventMatcher(eventMatcher);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate <T> List<T> arrayToList(T[] array) {\n\t\tList<T> list = new ArrayList<T>(array.length);\n\t\tfor (T t : array) {\n\t\t\tlist.add(t);\n\t\t}\n\t\treturn list;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void actionPerformed(ActionEvent e) {\n                                                                                                int i = 0;\n                                                                                                for (i = 0; i < runners\n                                                                                                    .size(); i++) {\n                                                                                                    if (runners\n                                                                                                        .get(\n                                                                                                            i)\n                                                                                                        .isAlive())\n                                                                                                        break;\n                                                                                                }\n\n                                                                                                if (i == runners\n                                                                                                    .size()) {\n                                                                                                    Display\n                                                                                                        .getDefault()\n                                                                                                        .asyncExec(\n                                                                                                            new Runnable() {\n                                                                                                                public void run() {\n                                                                                                                    stop(true);\n                                                                                                                    setButton(\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true);\n                                                                                                                }\n                                                                                                            });\n\n                                                                                                }\n                                                                                            }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n     public ConeSound(MediaContainer soundData,\n                      float initialGain,\n                      Point3f position,\n                      Vector3f direction) {\n\n        super(soundData, initialGain, position );\n\n        setDefaultReadCapabilities(readCapabilities);\n\n        ((ConeSoundRetained)this.retained).setDirection(direction);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public CompositeDataSupport(\n            CompositeType compositeType, String[] itemNames, Object[] itemValues)\n            throws OpenDataException {\n        this(makeMap(itemNames, itemValues), compositeType);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private boolean isInContent(double x, double y, Sticker currentSticker) {\n        long startTime = System.currentTimeMillis();\n        float[] pointsDst = currentSticker.getMapPointsDst();\n        PointD pointF_1 = Utils.getMidpointCoordinate(pointsDst[0], pointsDst[1], pointsDst[2], pointsDst[3]);\n        double a1 = Utils.lineSpace(pointsDst[8], pointsDst[9], pointF_1.getX(), pointF_1.getY());\n        double b1 = Utils.lineSpace(pointsDst[8], pointsDst[9], x, y);\n        if (b1 <= a1) {\n            return true;\n        }\n        double c1 = Utils.lineSpace(pointF_1.getX(), pointF_1.getY(), x, y);\n        double p1 = (a1 + b1 + c1) / 2;\n        double s1 = Math.sqrt(p1 * (p1 - a1) * (p1 - b1) * (p1 - c1));\n        double d1 = 2 * s1 / a1;\n        if (d1 > a1) {\n            return false;\n        }\n\n        PointD pointF_2 = Utils.getMidpointCoordinate(pointsDst[2], pointsDst[3], pointsDst[4], pointsDst[5]);\n        double a2 = a1;\n        double b2 = b1;\n        double c2 = Utils.lineSpace(pointF_2.getX(), pointF_2.getY(), x, y);\n        double p2 = (a2 + b2 + c2) / 2;\n        double temp = p2 * (p2 - a2) * (p2 - b2) * (p2 - c2);\n        double s2 = Math.sqrt(temp);\n        double d2 = 2 * s2 / a2;\n        if (d2 > a1) {\n            return false;\n        }\n        long endTime = System.currentTimeMillis();\n        long time = endTime - startTime;\n\n        if (d1 <= a1 && d2 <= a1) {\n            return true;\n        }\n\n        return false;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic Vector<Operator> topologicalSort() {\n\t\tfinal Map<Operator, Integer> originalIndices = new HashMap<Operator, Integer>();\n\t\tfor (int i = 0; i < operators.size(); i++) {\n\t\t\toriginalIndices.put(operators.get(i), i);\n\t\t}\n\t\tEdgeCounter counter = new EdgeCounter(operators);\n\t\tfor (Operator child : getOperators()) {\n\t\t\tfor (OutputPort out : child.getOutputPorts().getAllPorts()) {\n\t\t\t\tInputPort dest = out.getDestination();\n\t\t\t\tif (dest != null) {\n\t\t\t\t\tcounter.incNumEdges(dest.getPorts().getOwner().getOperator());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tVector<Operator> sorted = new Vector<Operator>();\n\t\tPriorityQueue<Operator> independentOperators = new PriorityQueue<Operator>(Math.max(1, operators.size()),\n\t\t\t\tnew Comparator<Operator>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic int compare(Operator o1, Operator o2) {\n\t\t\t\t\t\treturn originalIndices.get(o1) - originalIndices.get(o2);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\tindependentOperators.addAll(counter.getIndependentOperators());\n\t\twhile (!independentOperators.isEmpty()) {\n\t\t\tOperator first = independentOperators.poll();\n\t\t\tsorted.add(first);\n\t\t\tfor (OutputPort out : first.getOutputPorts().getAllPorts()) {\n\t\t\t\tInputPort dest = out.getDestination();\n\t\t\t\tif (dest != null) {\n\t\t\t\t\tOperator destOp = dest.getPorts().getOwner().getOperator();\n\t\t\t\t\tif (counter.decNumEdges(destOp) == 0) {\n\t\t\t\t\t\tindependentOperators.add(destOp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static List<ClassParams> getApplicable(Instances instances, String paramDirName, Testable type, List<String> allowed, List<String> options)\n    {\n        File paramDir = new File(paramDirName);\n        if(!paramDir.exists() || !paramDir.isDirectory())\n        {\n            throw new RuntimeException(paramDirName + \" is not a valid directory\");\n        }\n        FileFilter paramFilter = new FileFilter() {\n            public boolean accept(File file) {\n                return file.getName().endsWith(\".params\") && !file.getName().startsWith(\".\");\n            }\n        };\n\n        ArrayList<String> names = new ArrayList<String>();\n        File[] params = paramDir.listFiles(paramFilter);\n        for(File i:params)\n        {\n           names.add(Util.removeExtension(i.getName()));\n        }\n        java.util.Collections.sort(names);\n\n        ArrayList<ClassParams> goodMethods = new ArrayList<ClassParams>();\n\n        for(String name: names)\n        {\n            if(allowed != null && !allowed.contains(name))\n                continue;\n            if(isApplicable(name, instances, options, type))\n            {\n                goodMethods.add(new ClassParams(paramDirName + File.separatorChar + name + \".params\"));\n            }\n        }\n        return goodMethods;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic JMethod addGetter(final JDefinedClass definedClass, final JFieldVar field) {\n        final JMethod method = definedClass.method(JMod.PUBLIC, field.type(), getGetterName(field));\n        final JBlock block = method.body();\n        block._return(field);\n        return method;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"net.chrisrichardson.eventstore.examples.customersandorders\"))\n                .build()\n                .pathMapping(\"/\")\n                .genericModelSubstitutes(ResponseEntity.class, CompletableFuture.class)\n                .alternateTypeRules(\n                        newRule(typeResolver.resolve(DeferredResult.class,\n                                        typeResolver.resolve(ResponseEntity.class, WildcardType.class)),\n                                typeResolver.resolve(WildcardType.class))\n                )\n                .useDefaultResponseMessages(false)\n                ;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic BlameGenerator push(String description, byte[] contents)\n\t\t\tthrows IOException {\n\t\treturn push(description, new RawText(contents));\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@SuppressLint(\"NewApi\")\n    public static Bitmap fastblur(Context context, Bitmap sentBitmap, int radius) {\n\n        if (VERSION.SDK_INT > 16) {\n            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n            final RenderScript rs = RenderScript.create(context);\n            final Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n                    Allocation.USAGE_SCRIPT);\n            final Allocation output = Allocation.createTyped(rs, input.getType());\n            final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n            script.setRadius(radius );\n            script.setInput(input);\n            script.forEach(output);\n            output.copyTo(bitmap);\n            return bitmap;\n        }\n\n\n\n        Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n        if (radius < 1) {\n            return (null);\n        }\n\n        int w = bitmap.getWidth();\n        int h = bitmap.getHeight();\n\n        int[] pix = new int[w * h];\n        Log.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n        bitmap.getPixels(pix, 0, w, 0, 0, w, h);\n\n        int wm = w - 1;\n        int hm = h - 1;\n        int wh = w * h;\n        int div = radius + radius + 1;\n\n        int r[] = new int[wh];\n        int g[] = new int[wh];\n        int b[] = new int[wh];\n        int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;\n        int vmin[] = new int[Math.max(w, h)];\n\n        int divsum = (div + 1) >> 1;\n        divsum *= divsum;\n        int dv[] = new int[256 * divsum];\n        for (i = 0; i < 256 * divsum; i++) {\n            dv[i] = (i / divsum);\n        }\n\n        yw = yi = 0;\n\n        int[][] stack = new int[div][3];\n        int stackpointer;\n        int stackstart;\n        int[] sir;\n        int rbs;\n        int r1 = radius + 1;\n        int routsum, goutsum, boutsum;\n        int rinsum, ginsum, binsum;\n\n        for (y = 0; y < h; y++) {\n            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n            for (i = -radius; i <= radius; i++) {\n                p = pix[yi + Math.min(wm, Math.max(i, 0))];\n                sir = stack[i + radius];\n                sir[0] = (p & 0xff0000) >> 16;\n                sir[1] = (p & 0x00ff00) >> 8;\n                sir[2] = (p & 0x0000ff);\n                rbs = r1 - Math.abs(i);\n                rsum += sir[0] * rbs;\n                gsum += sir[1] * rbs;\n                bsum += sir[2] * rbs;\n                if (i > 0) {\n                    rinsum += sir[0];\n                    ginsum += sir[1];\n                    binsum += sir[2];\n                } else {\n                    routsum += sir[0];\n                    goutsum += sir[1];\n                    boutsum += sir[2];\n                }\n            }\n            stackpointer = radius;\n\n            for (x = 0; x < w; x++) {\n\n                r[yi] = dv[rsum];\n                g[yi] = dv[gsum];\n                b[yi] = dv[bsum];\n\n                rsum -= routsum;\n                gsum -= goutsum;\n                bsum -= boutsum;\n\n                stackstart = stackpointer - radius + div;\n                sir = stack[stackstart % div];\n\n                routsum -= sir[0];\n                goutsum -= sir[1];\n                boutsum -= sir[2];\n\n                if (y == 0) {\n                    vmin[x] = Math.min(x + radius + 1, wm);\n                }\n                p = pix[yw + vmin[x]];\n\n                sir[0] = (p & 0xff0000) >> 16;\n                sir[1] = (p & 0x00ff00) >> 8;\n                sir[2] = (p & 0x0000ff);\n\n                rinsum += sir[0];\n                ginsum += sir[1];\n                binsum += sir[2];\n\n                rsum += rinsum;\n                gsum += ginsum;\n                bsum += binsum;\n\n                stackpointer = (stackpointer + 1) % div;\n                sir = stack[(stackpointer) % div];\n\n                routsum += sir[0];\n                goutsum += sir[1];\n                boutsum += sir[2];\n\n                rinsum -= sir[0];\n                ginsum -= sir[1];\n                binsum -= sir[2];\n\n                yi++;\n            }\n            yw += w;\n        }\n        for (x = 0; x < w; x++) {\n            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n            yp = -radius * w;\n            for (i = -radius; i <= radius; i++) {\n                yi = Math.max(0, yp) + x;\n\n                sir = stack[i + radius];\n\n                sir[0] = r[yi];\n                sir[1] = g[yi];\n                sir[2] = b[yi];\n\n                rbs = r1 - Math.abs(i);\n\n                rsum += r[yi] * rbs;\n                gsum += g[yi] * rbs;\n                bsum += b[yi] * rbs;\n\n                if (i > 0) {\n                    rinsum += sir[0];\n                    ginsum += sir[1];\n                    binsum += sir[2];\n                } else {\n                    routsum += sir[0];\n                    goutsum += sir[1];\n                    boutsum += sir[2];\n                }\n\n                if (i < hm) {\n                    yp += w;\n                }\n            }\n            yi = x;\n            stackpointer = radius;\n            for (y = 0; y < h; y++) {\n                pix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8) | dv[bsum];\n\n                rsum -= routsum;\n                gsum -= goutsum;\n                bsum -= boutsum;\n\n                stackstart = stackpointer - radius + div;\n                sir = stack[stackstart % div];\n\n                routsum -= sir[0];\n                goutsum -= sir[1];\n                boutsum -= sir[2];\n\n                if (x == 0) {\n                    vmin[y] = Math.min(y + r1, hm) * w;\n                }\n                p = x + vmin[y];\n\n                sir[0] = r[p];\n                sir[1] = g[p];\n                sir[2] = b[p];\n\n                rinsum += sir[0];\n                ginsum += sir[1];\n                binsum += sir[2];\n\n                rsum += rinsum;\n                gsum += ginsum;\n                bsum += binsum;\n\n                stackpointer = (stackpointer + 1) % div;\n                sir = stack[stackpointer];\n\n                routsum += sir[0];\n                goutsum += sir[1];\n                boutsum += sir[2];\n\n                rinsum -= sir[0];\n                ginsum -= sir[1];\n                binsum -= sir[2];\n\n                yi += w;\n            }\n        }\n\n        Log.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n        bitmap.setPixels(pix, 0, w, 0, 0, w, h);\n        return (bitmap);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t\tprotected Entry(final int hash, final int key, final Object value, final Entry next) {\n\t\t\tthis.hash = hash;\n\t\t\tthis.key = key;\n\t\t\tthis.value = value;\n\t\t\tthis.next = next;\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; } \n        return retVal;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, final Contract contract, final TradeOrder tradeOrder,\n\t\t\tfinal OrderState orderState) {\n\n\t\ttry {\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(tradeOrder.getOrderKey());\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170, \"Warning Order not found for Order Key: \" + orderId + \" make sure Client ID: \" + 0\n\t\t\t\t\t\t+ \" is not the master in TWS. On openOrder update.\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (BackTestBrokerModel.updateTradeOrder(tradeOrder, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\n\t\t\t\t\t_log.debug(\"Order Key: \" + transientInstance.getOrderKey() + \" filled.\");\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (updatedOrder.hasTradePosition() && !updatedOrder.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(updatedOrder.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Order key: \" + transientInstance.getOrderKey() + \" state changed. Status:\"\n\t\t\t\t\t\t\t+ orderState.m_status);\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(updatedOrder.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(updatedOrder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n        \n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n        \n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n        \n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode parse(org.w3c.dom.Node node, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException {\n          return (com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( node, type, options ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Kernel(int width, int height, double factor, double data[]) {\n        this(width, height, (width - 1) / 2, (height - 1) / 2, factor, data);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public CallNode(\n        ParseRegion region,\n        String name,\n        Syntax syntax,\n        ParseTreeNode... args)\n    {\n        this(region, name, syntax, Arrays.asList(args));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"net.chrisrichardson.eventstore.examples.customersandorders\"))\n                .build()\n                .pathMapping(\"/\")\n                .genericModelSubstitutes(ResponseEntity.class, CompletableFuture.class)\n                .alternateTypeRules(\n                        newRule(typeResolver.resolve(DeferredResult.class,\n                                        typeResolver.resolve(ResponseEntity.class, WildcardType.class)),\n                                typeResolver.resolve(WildcardType.class))\n                )\n                .useDefaultResponseMessages(false)\n                ;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic final DenseMatrix zeros(ValueType valueType, long... size) {\n\t\tswitch (size.length) {\n\t\tcase 0:\n\t\t\tthrow new RuntimeException(\"Size not defined\");\n\t\tcase 1:\n\t\t\tthrow new RuntimeException(\"Size must be at least 2-dimensional\");\n\t\tdefault:\n\t\t\tswitch (valueType) {\n\t\t\tcase BIGDECIMAL:\n\t\t\t\treturn new DefaultDenseBigDecimalMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BIGINTEGER:\n\t\t\t\treturn new DefaultDenseBigIntegerMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BOOLEAN:\n\t\t\t\treturn new ArrayDenseBooleanMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BYTE:\n\t\t\t\treturn new DefaultDenseByteMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase CHAR:\n\t\t\t\treturn new DefaultDenseCharMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase DOUBLE:\n\t\t\t\tif (size.length == 2) {\n\t\t\t\t\treturn new DefaultDenseDoubleMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\t\t} else {\n\t\t\t\t\treturn new DefaultDenseDoubleMatrixMultiD(size);\n\t\t\t\t}\n\t\t\tcase FLOAT:\n\t\t\t\treturn new DefaultDenseFloatMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase INT:\n\t\t\t\treturn new DefaultDenseIntMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase LONG:\n\t\t\t\treturn new DefaultDenseLongMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase OBJECT:\n\t\t\t\treturn ObjectMatrix.Factory.zeros(size);\n\t\t\tcase SHORT:\n\t\t\t\treturn new DefaultDenseShortMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase STRING:\n\t\t\t\treturn new DefaultDenseStringMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tdefault:\n\t\t\t\tthrow new RuntimeException(\"unknown value type: \" + valueType);\n\t\t\t}\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void addFooterView(View v, Object data, boolean isSelectable) {\n        FixedViewInfo info = new FixedViewInfo();\n        info.view = v;\n        info.data = data;\n        info.isSelectable = isSelectable;\n        mFooterViewInfos.add(info);\n\n        if (mDataSetObserver != null) {\n            mDataSetObserver.onChanged();\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    protected void initEnablementBehaviours( List<EnablementBehaviour> enablementBehaviours ) {\n\t\tenablementBehaviours.add(new WithinLegalLayerBoundsBehaviour());\n\t\tenablementBehaviours.add(new ValidToolDetectionActivator(new Class[] {\n\t\t\t\tGeometry.class,\n\t\t\t\tPolygon.class,\n\t\t\t\tMultiPolygon.class,\n\t\t\t\tLineString.class,\n\t\t\t\tMultiLineString.class }));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    protected void doRedirect(HttpServletRequest request,\n            HttpServletResponse response, Controller controller, String path)\n            throws IOException, ServletException {\n        doRedirect(request, response, path);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n\n\n        Debug.v(\"onCreate here!\");\n        Debug.d(1, 2, 3, 4, 5);\n        Debug.i(\"0\", \"1\", \"2\", \"3\"); // will just enumerate strings\n        Debug.w(\"%s %s %s\", null, null, null); // will call String.format\n        Debug.e(true, null, Integer.MAX_VALUE, Long.MIN_VALUE);\n        Debug.wtf(\"No, really, WTF?!\");\n\n\n        if (savedInstanceState == null) {\n            getSupportFragmentManager()\n                    .beginTransaction()\n                    .add(R.id.content, new MainFragment())\n                    .commit();\n        }\n\n        Debug.trace(100);\n\n\n\n\n\n\n\n\n\n        final UnknownHostException exception = new UnknownHostException();\n        exception.initCause(new Throwable());\n        Debug.e(exception, \"Hello this is a message for exception\");\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void adaptToEnablementChange(HighlightingStyle highlighting,\n\t\t\tPropertyChangeEvent event) {\n\t\tObject value = event.getNewValue();\n\t\tboolean eventValue;\n\t\tif (value instanceof Boolean)\n\t\t\teventValue = ((Boolean) value).booleanValue();\n\t\telse if (IPreferenceStore.TRUE.equals(value))\n\t\t\teventValue = true;\n\t\telse\n\t\t\teventValue = false;\n\t\thighlighting.setEnabled(eventValue);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic MP3Reader(File file) throws IOException {\n\t\tthis.file = file;\n\t\ttry {\n\t\t\tMP3File mp3file = (MP3File) AudioFileIO.read(file);\n\t\t\tMP3AudioHeader audioHeader = (MP3AudioHeader) mp3file.getAudioHeader();\n\t\t\tif (audioHeader != null) {\n\t\t\t\tlog.debug(\"Track length: {}\", audioHeader.getTrackLength());\n\t\t\t\tlog.debug(\"Sample rate: {}\", audioHeader.getSampleRateAsNumber());\n\t\t\t\tlog.debug(\"Channels: {}\", audioHeader.getChannels());\n\t\t\t\tlog.debug(\"Variable bit rate: {}\", audioHeader.isVariableBitRate());\n\t\t\t\tlog.debug(\"Track length (2): {}\", audioHeader.getTrackLengthAsString());\n\t\t\t\tlog.debug(\"Mpeg version: {}\", audioHeader.getMpegVersion());\n\t\t\t\tlog.debug(\"Mpeg layer: {}\", audioHeader.getMpegLayer());\n\t\t\t\tlog.debug(\"Original: {}\", audioHeader.isOriginal());\n\t\t\t\tlog.debug(\"Copyrighted: {}\", audioHeader.isCopyrighted());\n\t\t\t\tlog.debug(\"Private: {}\", audioHeader.isPrivate());\n\t\t\t\tlog.debug(\"Protected: {}\", audioHeader.isProtected());\n\t\t\t\tlog.debug(\"Bitrate: {}\", audioHeader.getBitRate());\n\t\t\t\tlog.debug(\"Encoding type: {}\", audioHeader.getEncodingType());\n\t\t\t\tlog.debug(\"Encoder: {}\", audioHeader.getEncoder());\n\t\t\t}\n\t\t\tID3v24Tag idTag = mp3file.getID3v2TagAsv24();\n\t\t\tif (idTag != null) {\n\t\t\t\tmetaData = new MetaData();\n\t\t\t\tmetaData.setAlbum(idTag.getFirst(FieldKey.ALBUM));\n\t\t\t\tmetaData.setArtist(idTag.getFirst(FieldKey.ARTIST));\n\t\t\t\tmetaData.setComment(idTag.getFirst(FieldKey.COMMENT));\n\t\t\t\tmetaData.setGenre(idTag.getFirst(FieldKey.GENRE));\n\t\t\t\tmetaData.setSongName(idTag.getFirst(FieldKey.TITLE));\n\t\t\t\tmetaData.setTrack(idTag.getFirst(FieldKey.TRACK));\n\t\t\t\tmetaData.setYear(idTag.getFirst(FieldKey.YEAR));\n\t\t\t\tList<Artwork> tagFieldList = idTag.getArtworkList();\n\t\t\t\tif (tagFieldList == null || tagFieldList.isEmpty()) {\n\t\t\t\t\tlog.debug(\"No cover art was found\");\n\t\t\t\t} else {\n\t\t\t\t\tArtwork imageField = tagFieldList.get(0);\n\t\t\t\t\tlog.debug(\"Picture type: {}\", imageField.getPictureType());\n\t\t\t\t\tFrameBodyAPIC imageFrameBody = new FrameBodyAPIC();\n\t\t\t\t\timageFrameBody.setImageData(imageField.getBinaryData());\n\t\t\t\t\tif (!imageFrameBody.isImageUrl()) {\n\t\t\t\t\t\tbyte[] imageBuffer = (byte[]) imageFrameBody.getObjectValue(DataTypes.OBJ_PICTURE_DATA);\n\t\t\t\t\t\tmetaData.setCovr(imageBuffer);\n\t\t\t\t\t\tIoBuffer buf = IoBuffer.allocate(imageBuffer.length);\n\t\t\t\t\t\tbuf.setAutoExpand(true);\n\t\t\t\t\t\tOutput out = new Output(buf);\n\t\t\t\t\t\tout.writeString(\"onImageData\");\n\t\t\t\t\t\tMap<Object, Object> props = new HashMap<Object, Object>();\n\t\t\t\t\t\tprops.put(\"trackid\", 1);\n\t\t\t\t\t\tprops.put(\"data\", imageBuffer);\n\t\t\t\t\t\tout.writeMap(props, new Serializer());\n\t\t\t\t\t\tbuf.flip();\n\t\t\t\t\t\tITag result = new Tag(IoConstants.TYPE_METADATA, 0, buf.limit(), null, 0);\n\t\t\t\t\t\tresult.setBody(buf);\n\t\t\t\t\t\tfirstTags.add(result);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog.info(\"File did not contain ID3v2 data: {}\", file.getName());\n\t\t\t}\n\t\t\tmp3file = null;\n\t\t} catch (TagException e) {\n\t\t\tlog.error(\"MP3Reader (tag error) {}\", e);\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"MP3Reader {}\", e);\n\t\t}\n\t\tfis = new FileInputStream(file);\n\t\tchannel = fis.getChannel();\n\t\tfileSize = channel.size();\n\t\tlog.debug(\"File size: {}\", fileSize);\n\t\tanalyzeKeyFrames();\n\t\tfirstTags.addFirst(createFileMeta());\n\t\tif ((fileSize - channel.position()) > 4) {\n\t\t\tsearchNextFrame();\n\t\t\tlong pos = channel.position();\n\t\t\tMP3Header header = null;\n\t\t\ttry {\n\t\t\t\theader = readHeader();\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.warn(\"Exception reading initial header\", e);\n\t\t\t}\n\t\t\tchannel.position(pos);\n\t\t\tif (header != null) {\n\t\t\t\tcheckValidHeader(header);\n\t\t\t} else {\n\t\t\t\tthrow new RuntimeException(\"No initial header found\");\n\t\t\t}\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n\n\n        Debug.v(\"onCreate here!\");\n        Debug.d(1, 2, 3, 4, 5);\n        Debug.i(\"0\", \"1\", \"2\", \"3\"); // will just enumerate strings\n        Debug.w(\"%s %s %s\", null, null, null); // will call String.format\n        Debug.e(true, null, Integer.MAX_VALUE, Long.MIN_VALUE);\n        Debug.wtf(\"No, really, WTF?!\");\n\n\n        if (savedInstanceState == null) {\n            getSupportFragmentManager()\n                    .beginTransaction()\n                    .add(R.id.content, new MainFragment())\n                    .commit();\n        }\n\n        Debug.trace(100);\n\n\n\n\n\n\n\n\n\n        final UnknownHostException exception = new UnknownHostException();\n        exception.initCause(new Throwable());\n        Debug.e(exception, \"Hello this is a message for exception\");\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        boolean bIdentifierIgnorable = false;\n\n        if (codePoint >= MIN_CODE_POINT && codePoint <= FAST_PATH_MAX) {\n            bIdentifierIgnorable = CharacterDataLatin1.isIdentifierIgnorable(codePoint);\n        } else {\n            int plane = getPlane(codePoint);\n            switch(plane) {\n            case(0):\n                bIdentifierIgnorable = CharacterData00.isIdentifierIgnorable(codePoint);\n                break;\n            case(1):\n                bIdentifierIgnorable = CharacterData01.isIdentifierIgnorable(codePoint);\n                break;\n            case(2):\n                bIdentifierIgnorable = CharacterData02.isIdentifierIgnorable(codePoint);\n                break;\n            case(3): // Undefined\n            case(4): // Undefined\n            case(5): // Undefined\n            case(6): // Undefined\n            case(7): // Undefined\n            case(8): // Undefined\n            case(9): // Undefined\n            case(10): // Undefined\n            case(11): // Undefined\n            case(12): // Undefined\n            case(13): // Undefined\n                bIdentifierIgnorable = CharacterDataUndefined.isIdentifierIgnorable(codePoint);\n                break;\n            case(14): \n                bIdentifierIgnorable = CharacterData0E.isIdentifierIgnorable(codePoint);\n                break;\n            case(15): // Private Use\n            case(16): // Private Use\n                bIdentifierIgnorable = CharacterDataPrivateUse.isIdentifierIgnorable(codePoint);\n                break;\n            default:\n                break;\n            }\n        }\n        return bIdentifierIgnorable;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate int checkExtensions(X509Certificate cert, int maxPathLen)\n            throws CertificateException {\n        Set<String> critSet = cert.getCriticalExtensionOIDs();\n        if (critSet == null) {\n            critSet = Collections.<String>emptySet();\n        }\n\n        int pathLenConstraint =\n                checkBasicConstraints(cert, critSet, maxPathLen);\n\n        checkKeyUsage(cert, critSet);\n\n        checkNetscapeCertType(cert, critSet);\n\n        if (!critSet.isEmpty()) {\n            throw new ValidatorException\n                (\"Certificate contains unknown critical extensions: \" + critSet,\n                ValidatorException.T_CA_EXTENSIONS, cert);\n        }\n\n        return pathLenConstraint;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprotected void printMethods (       IndentingWriter writer,\n                                        boolean useQualifiedNames,\n                                        boolean useIDLNames,\n                                        boolean globalIDLNames) throws IOException {\n\n        CompoundType.Method[] methods = getMethods();\n\n        for (int m = 0; m < methods.length; m++) {\n            CompoundType.Method theMethod = methods[m];\n            printMethod(theMethod,writer,useQualifiedNames,useIDLNames,globalIDLNames);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static void escapeCssIdentifier(final char[] text, final int offset, final int len, final Writer writer)\n            throws IOException {\n        escapeCssIdentifier(text, offset, len, writer,\n                CssIdentifierEscapeType.BACKSLASH_ESCAPES_DEFAULT_TO_COMPACT_HEXA,\n                CssIdentifierEscapeLevel.LEVEL_2_ALL_NON_ASCII_PLUS_BASIC_ESCAPE_SET);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static void getTypeLabel(ITypeBinding binding, long flags, StringBuilder buffer) {\n\t\tif ((flags & (ScriptElementLabels.T_FULLY_QUALIFIED | ScriptElementLabels.T_CONTAINER_QUALIFIED)) != 0) {\n\t\t}\n\n\t\tif (binding == null) {\n\t\t\treturn;\n\t\t}\n\t\tif (binding.isArray()) {\n\t\t\tgetTypeLabel(binding.getElementType(), flags & ScriptElementLabels.T_TYPE_PARAMETERS, buffer);\n\t\t\tappendDimensions(binding.getDimensions(), buffer);\n\t\t} else { // type variables, primitive, reftype\n\t\t\tString name = binding.getName();\n\t\t\tif (name != null) {\n\t\t\t\tbuffer.append(name);\n\t\t\t}\n\n\t\t\tif ((flags & ScriptElementLabels.T_TYPE_PARAMETERS) != 0) {\n\t\t\t}\n\t\t}\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public RealVector solve(final RealLinearOperator a, final RealVector b,\n        final boolean goodb, final double shift) throws NullArgumentException,\n        NonSquareOperatorException, DimensionMismatchException,\n        NonSelfAdjointOperatorException, IllConditionedOperatorException,\n        MaxCountExceededException {\n        MathUtils.checkNotNull(a);\n        final RealVector x = new ArrayRealVector(a.getColumnDimension());\n        return solveInPlace(a, null, b, x, goodb, shift);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public List<BeanPropertyWriter> changeProperties(SerializationConfig config,\n            BeanDescription beanDesc,\n            List<BeanPropertyWriter> beanProperties)\n    {\n        for (int i = 0; i < beanProperties.size(); ++i) {\n            final BeanPropertyWriter writer = beanProperties.get(i);\n            JavaType type = writer.getType();\n            if (type.isTypeOrSubTypeOf(Optional.class)) {\n                beanProperties.set(i, new Jdk8OptionalBeanPropertyWriter(writer));\n            }\n        }\n        return beanProperties;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        return CharacterData.of(codePoint).isIdentifierIgnorable(codePoint);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void onDownloadError(int index, String message) {\n    for (int i = 0; i < mDownloadStatus.length; i++) {\n        if (mDownloadStatus[i] != DownFile.DownloadStatus.FINISH && mDownloadStatus[i] != DownFile.DownloadStatus.ERROR) {\n            mDownloadThreads[i].cancel();\n        }\n    }\n        notifyUpdate(downFile, Constants.WHAT_ERROR);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static RadioButton createRadioButton(UiNavigation navigation, String id, ActionListener listener) {\n\t\tRadioButton radioButton = new RadioButton(id);\n\t\tradioButton.addActionListener(listener);\n\t\tradioButton.setVisibility(Visibility.VISIBLE);\n\t\t\n\t\tif(navigation != null) {\n\t\t\tnavigation.add(radioButton);\n\t\t}\n\t\treturn radioButton;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic ExternalCarrierBillingInstrumentProto(String instrumentKey, String subscriberIdentifier, String accountType, String subscriberCurrency, Long transactionLimit, String subscriberName, String address1, String address2, String city, String state, String postalCode, String country, EncryptedSubscriberInfo encryptedSubscriberInfo) {\n    this.instrumentKey = instrumentKey;\n    this.subscriberIdentifier = subscriberIdentifier;\n    this.accountType = accountType;\n    this.subscriberCurrency = subscriberCurrency;\n    this.transactionLimit = transactionLimit;\n    this.subscriberName = subscriberName;\n    this.address1 = address1;\n    this.address2 = address2;\n    this.city = city;\n    this.state = state;\n    this.postalCode = postalCode;\n    this.country = country;\n    this.encryptedSubscriberInfo = encryptedSubscriberInfo;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprotected static long getblock(byte[] key, int offset, int index) {\n    int i_8 = index << 3;\n    int blockOffset = offset + i_8;\n    return ((long) key[blockOffset + 0] & 0xff) + (((long) key[blockOffset + 1] & 0xff) << 8) +\n            (((long) key[blockOffset + 2] & 0xff) << 16) + (((long) key[blockOffset + 3] & 0xff) << 24) +\n            (((long) key[blockOffset + 4] & 0xff) << 32) + (((long) key[blockOffset + 5] & 0xff) << 40) +\n            (((long) key[blockOffset + 6] & 0xff) << 48) + (((long) key[blockOffset + 7] & 0xff) << 56);\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void shouldCreateKeyIfCASIsAttemptedForKeyThatDoesNotExist() throws Exception {\n        final long newCommandIndex = 66;\n        KeyValue keyValue = localStore.compareAndSet(newCommandIndex, KEY, null, NEW_VALUE);\n        keyValue = checkNotNull(keyValue);\n\n        assertThat(keyValue.getKey(), equalTo(KEY));\n        assertThat(keyValue.getValue(), equalTo(NEW_VALUE));\n\n        assertThatBackingStoreHasKeyValue(KEY, NEW_VALUE);\n        assertThatLastAppliedCommandIndexHasValue(newCommandIndex);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void insert(int itemNum, Item item)\n\t{\n\t\tif (itemNum == this.container.size()) {\n\t\t\tthis.container.add(item);\n\t\t} else {\n\t\t\tthis.container.add( itemNum, item );\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static <E> List<E> toBeanList(Class<E> cla, List<Map<String, Object>> mapList) {\n\t\tList<E> list = new ArrayList<E>(mapList.size());\n\t\tfor (Map<String, Object> map : mapList) {\n\t\t\tE obj = toBean(cla, map);\n\t\t\tlist.add(obj);\n\t\t}\n\t\treturn list;\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprivate void completeAddAppWidget(Intent data, CellLayout.CellInfo cellInfo) {\n\t\tBundle extras = data.getExtras();\n\t\tint appWidgetId = extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID, -1);\n\n\t\tLog.d(LOG_TAG, \"dumping extras content=\" + extras.toString());\n\n\t\tAppWidgetProviderInfo appWidgetInfo = appWidgetManager.getAppWidgetInfo(appWidgetId);\n\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\n\tprivate void topologicalSort( Collection<TopologicalElement> unmarkedNodes, List<Element> sorted ) {\n\n\t\twhile ( !unmarkedNodes.isEmpty() ) {\n\n\t\t\tTopologicalElement node = unmarkedNodes.iterator().next();\n\t\t\ttopologicalVisit( node, unmarkedNodes, sorted, unmarkedNodes.size() );\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintWriter writer, boolean suppressLogin, char eolMarker, boolean showDirection)\n    {\n        __writer = writer;\n        __nologin = suppressLogin;\n        __eolMarker = eolMarker;\n        __directionMarker = showDirection;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, Predicate<String> isStatic, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            lineNumber = printMethod(mv, clazz, method, isStatic.test(method), lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public Value<Integer> run(String userEmail) {\n      PromisedValue<Integer> x = newPromise();\n      PromisedValue<Integer> y = newPromise();\n      PromisedValue<Integer> z = newPromise();\n      FutureValue<Integer> intermediate = futureCall(new ComplexJob(), x, y, z);\n\n      getIntFromUser(\"Please give 1st int\", userEmail, x.getHandle());\n      getIntFromUser(\"Please give 2nd int\", userEmail, y.getHandle());\n      getIntFromUser(\"Please give 3rd int\", userEmail, z.getHandle());\n\n      FutureValue<Integer> oneMoreInt =\n        futureCall(new PromptJob(), intermediate, immediate(userEmail));\n\n      return futureCall(new MultJob(), intermediate, oneMoreInt);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void insert(int itemNum, Item item)\n\t{\n\t\tif (itemNum == this.container.size()) {\n\t\t\tthis.container.add(item);\n\t\t} else {\n\t\t\tthis.container.add( itemNum, item );\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; } \n        return retVal;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void shouldCreateKeyIfCASIsAttemptedForKeyThatDoesNotExist() throws Exception {\n        final long originalIndex = 65;\n        localStore.setLastAppliedIndexForUnitTestsOnly(originalIndex);\n\n        final long newIndex = originalIndex + 1;\n        KeyValue keyValue = localStore.compareAndSet(newIndex, KEY, null, NEW_VALUE);\n        keyValue = checkNotNull(keyValue);\n\n        assertThat(keyValue.getKey(), equalTo(KEY));\n        assertThat(keyValue.getValue(), equalTo(NEW_VALUE));\n\n        assertThatLocalStoreHasKeyValue(KEY, NEW_VALUE);\n        assertThatLastAppliedIndexHasValue(newIndex);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testBlock() throws HyperLedgerException, IOException {\n        Block b1 =\n                Block.fromWireDump(\"\", formatter, BitcoinHeader.class);\n        assertTrue(b1.getID().equals(new BID(\"0000000000000449ee5b94ba7a051caffff5c23d6a03335f6e20e3985b5ffa61\")));\n        Block b2 = Block.fromWireDump(b1.toWireDump(), formatter, BitcoinHeader.class);\n        assertTrue(b1.getID().equals(b2.getID()));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void init() {\n        label = i18n.string(R.string.dt_tests);\n        icon = R.drawable.tab_tests;\n        \n        DesktopItem dt = null;\n        dt = new DesktopItem(new Runnable() {\n            public void run() {\n                Contexts ctx = Contexts.instance(); \n                ctx.getMasterDataProvider().reset();\n            }\n        }, \"Reset Master Dataprovider\", R.drawable.dtitem_test);\n        \n        addItem(dt);\n        \n        dt = new DesktopItem(new Runnable() {\n            public void run() {\n                Contexts ctx = Contexts.instance(); \n                Intent intent = null;\n                intent = new Intent(activity,BookMgntActivity.class);\n                activity.startActivityForResult(intent,0);\n            }\n        }, \"Book Management\", R.drawable.dtitem_test);\n        \n        addItem(dt);\n        \n        \n        dt = new DesktopItem(new Runnable() {\n            public void run() {\n                Contexts ctx = Contexts.instance(); \n                Book book = ctx.getMasterDataProvider().findBook(ctx.getWorkingBookId());\n                \n                Intent intent = null;\n                intent = new Intent(activity,BookEditorActivity.class);\n                intent.putExtra(BookEditorActivity.INTENT_MODE_CREATE,false);\n                intent.putExtra(BookEditorActivity.INTENT_BOOK,book);\n                activity.startActivityForResult(intent,Constants.REQUEST_BOOK_EDITOR_CODE);\n            }\n        }, \"Edit selected book\", R.drawable.dtitem_test);\n        \n        addItem(dt);\n        \n        dt = new DesktopItem(new Runnable() {\n            public void run() {\n                Book book = new Book(\"test\",\"$\",SymbolPosition.AFTER,\"\");\n                Intent intent = null;\n                intent = new Intent(activity,BookEditorActivity.class);\n                intent.putExtra(BookEditorActivity.INTENT_MODE_CREATE,true);\n                intent.putExtra(BookEditorActivity.INTENT_BOOK,book);\n                activity.startActivityForResult(intent,Constants.REQUEST_BOOK_EDITOR_CODE);\n            }\n        }, \"Add book\", R.drawable.dtitem_test);\n        \n        addItem(dt);\n        \n        \n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                Contexts.instance().getDataProvider().reset();\n                GUIs.shortToast(activity,\"reset data provider\");\n            }}, \"rest data provider\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testFirstDayOfWeek();\n            }}, \"first day of week\",R.drawable.dtitem_test){\n        });\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testBusy(200,null);\n            }}, \"Busy 200ms\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testBusy(200, \"error short\");\n            }}, \"Busy 200ms Error\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testBusy(5000,null);\n            }}, \"Busy 5s\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testBusy(5000, \"error long\");\n            }}, \"Busy 5s Error\",R.drawable.dtitem_test));\n        \n        \n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testCreateTestdata(25);\n            }}, \"test data25\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testCreateTestdata(50);\n            }}, \"test data50\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testCreateTestdata(100);\n            }}, \"test data100\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testCreateTestdata(200);\n            }}, \"test data200\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testJust();\n            }}, \"just test\",R.drawable.dtitem_test));\n        \n        DesktopItem padding = new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                \n            }}, \"padding\",R.drawable.dtitem_test);\n        \n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprotected void checkPrivileges(String user,\n\t\t\t\t\t\t\t\t   TableDescriptor td,\n\t\t\t\t\t\t\t\t   SchemaDescriptor sd,\n\t\t\t\t\t\t\t\t   DataDictionary dd,\n\t\t\t\t\t\t\t\t   LanguageConnectionContext lcc)\n\t\t\tthrows StandardException {\n\t\tif (user.equals(dd.getAuthorizationDatabaseOwner())) return;\n\n\t\tif (td == null) return;\n\t\tif (td.getTableType() == TableDescriptor.VIEW_TYPE) {\n\t\t\tif (descriptorList != null) {\n\t\t\t\tTransactionController tc = lcc.getTransactionExecute();\n\t\t\t\tint siz = descriptorList.size();\n                for (Object aDescriptorList : descriptorList) {\n                    TupleDescriptor p;\n                    SchemaDescriptor s = null;\n\n                    p = (TupleDescriptor) aDescriptorList;\n                    if (p instanceof TableDescriptor) {\n                        TableDescriptor t = (TableDescriptor) p;\n                        s = t.getSchemaDescriptor();\n                    } else if (p instanceof ViewDescriptor) {\n                        ViewDescriptor v = (ViewDescriptor) p;\n                        s = dd.getSchemaDescriptor(v.getCompSchemaId(), tc);\n                    } else if (p instanceof AliasDescriptor) {\n                        AliasDescriptor a = (AliasDescriptor) p;\n                        s = dd.getSchemaDescriptor(a.getSchemaUUID(), tc);\n                    }\n\n                    if (s != null && !user.equals(s.getAuthorizationId())) {\n                        throw StandardException.newException(\n                                SQLState.AUTH_NO_OBJECT_PERMISSION,\n                                user,\n                                \"grant\",\n                                sd.getSchemaName(),\n                                td.getName());\n                    }\n\n                }\n\t\t\t}\n\t\t}\n\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Deprecated\n    public static boolean isJavaLetterOrDigit(char ch) {\n        return isJavaIdentifierPart(ch);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private static void print(int values[], int start, int end,\n                              int middle, int target) {\n\n        if (DEBUG_IDS) {\n            System.out.print(start);\n            System.out.print(\" [\");\n            for (int i = start; i < end; i++) {\n                if (middle == i) {\n                    System.out.print(\"!\");\n                }\n                System.out.print(values[i]);\n                if (values[i] == target) {\n                    System.out.print(\"*\");\n                }\n                if (i < end - 1) {\n                    System.out.print(\" \");\n                }\n            }\n            System.out.println(\"] \"+end);\n        }\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr adjacencyList) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), adjacencyList});\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void initEnablementBehaviours( List<EnablementBehaviour> helper ) {\n        helper.add(new WithinLegalLayerBoundsBehaviour());\n        helper.add(new ValidToolDetectionActivator(new Class[]{Geometry.class, LineString.class, MultiLineString.class,\n                Polygon.class, MultiPolygon.class}));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tpublic void checkPrivileges(HiveOperationType         hiveOpType,\n\t\t\t\t\t\t\t\tList<HivePrivilegeObject> inputHObjs,\n\t\t\t\t\t\t\t    List<HivePrivilegeObject> outputHObjs,\n\t\t\t\t\t\t\t    HiveAuthzContext          context)\n\t\t      throws HiveAuthzPluginException, HiveAccessControlException {\n\t\tUserGroupInformation ugi = getCurrentUserGroupInfo();\n\n\t\tif(ugi == null) {\n\t\t\tthrow new HiveAccessControlException(\"Permission denied: user information not available\");\n\t\t}\n\n\t\tRangerHiveAuditHandler auditHandler = new RangerHiveAuditHandler();\n\n\t\tRangerPerfTracer perf = null;\n\n\t\ttry {\n\t\t\tHiveAuthzSessionContext sessionContext = getHiveAuthzSessionContext();\n\t\t\tString                  user           = ugi.getShortUserName();\n\t\t\tSet<String>             groups         = Sets.newHashSet(ugi.getGroupNames());\n\t\t\tString clusterName = hivePlugin.getClusterName();\n\n\t\t\tif(LOG.isDebugEnabled()) {\n\t\t\t\tLOG.debug(toString(hiveOpType, inputHObjs, outputHObjs, context, sessionContext));\n\t\t\t}\n\n\t\t\tif(hiveOpType == HiveOperationType.DFS) {\n\t\t\t\thandleDfsCommand(hiveOpType, inputHObjs, user, auditHandler);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif(RangerPerfTracer.isPerfTraceEnabled(PERF_HIVEAUTH_REQUEST_LOG)) {\n\t\t\t\tperf = RangerPerfTracer.getPerfTracer(PERF_HIVEAUTH_REQUEST_LOG, \"RangerHiveAuthorizer.checkPrivileges(hiveOpType=\" + hiveOpType + \")\");\n\t\t\t}\n\n\t\t\tList<RangerHiveAccessRequest> requests = new ArrayList<RangerHiveAccessRequest>();\n\n\t\t\tif(!CollectionUtils.isEmpty(inputHObjs)) {\n\t\t\t\tfor(HivePrivilegeObject hiveObj : inputHObjs) {\n\t\t\t\t\tRangerHiveResource resource = getHiveResource(hiveOpType, hiveObj);\n\n\t\t\t\t\tif (resource == null) { // possible if input object/object is of a kind that we don't currently authorize\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tString \tpath         \t\t= hiveObj.getObjectName();\n\t\t\t\t\tHiveObjectType hiveObjType  = resource.getObjectType();\n\n\t\t\t\t\tif(hiveObjType == HiveObjectType.URI && isPathInFSScheme(path)) {\n\t\t\t\t\t\tFsAction permission = getURIAccessType(hiveOpType);\n\n\t\t\t\t\t\tif(!isURIAccessAllowed(user, permission, path, getHiveConf())) {\n\t\t\t\t\t\t\tthrow new HiveAccessControlException(String.format(\"Permission denied: user [%s] does not have [%s] privilege on [%s]\", user, permission.name(), path));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tHiveAccessType accessType = getAccessType(hiveObj, hiveOpType, hiveObjType, true);\n\n\t\t\t\t\tif(accessType == HiveAccessType.NONE) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(!existsByResourceAndAccessType(requests, resource, accessType)) {\n\t\t\t\t\t\tRangerHiveAccessRequest request = new RangerHiveAccessRequest(resource, user, groups, hiveOpType, accessType, context, sessionContext, clusterName);\n\n\t\t\t\t\t\trequests.add(request);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (hiveOpType == HiveOperationType.SHOWDATABASES) {\n\t\t\t\t\tRangerHiveResource resource = new RangerHiveResource(HiveObjectType.DATABASE, null);\n\t\t\t\t\tRangerHiveAccessRequest request = new RangerHiveAccessRequest(resource, user, groups, hiveOpType.name(), HiveAccessType.USE, context, sessionContext, clusterName);\n\t\t\t\t\trequests.add(request);\n\t\t\t\t} else {\n\t\t\t\t\tif (LOG.isDebugEnabled()) {\n\t\t\t\t\t\tLOG.debug(\"RangerHiveAuthorizer.checkPrivileges: Unexpected operation type[\" + hiveOpType + \"] received with empty input objects list!\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!CollectionUtils.isEmpty(outputHObjs)) {\n\t\t\t\tfor(HivePrivilegeObject hiveObj : outputHObjs) {\n\t\t\t\t\tRangerHiveResource resource = getHiveResource(hiveOpType, hiveObj);\n\n\t\t\t\t\tif (resource == null) { // possible if input object/object is of a kind that we don't currently authorize\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tString   path       = hiveObj.getObjectName();\n\t\t\t\t\tHiveObjectType hiveObjType  = resource.getObjectType();\n\n\t\t\t\t\tif(hiveObjType == HiveObjectType.URI  && isPathInFSScheme(path)) {\n\t\t\t\t\t\tFsAction permission = getURIAccessType(hiveOpType);\n\n\t\t                if(!isURIAccessAllowed(user, permission, path, getHiveConf())) {\n\t\t    \t\t\t\tthrow new HiveAccessControlException(String.format(\"Permission denied: user [%s] does not have [%s] privilege on [%s]\", user, permission.name(), path));\n\t\t                }\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tHiveAccessType accessType = getAccessType(hiveObj, hiveOpType, hiveObjType, false);\n\n\t\t\t\t\tif(accessType == HiveAccessType.NONE) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(!existsByResourceAndAccessType(requests, resource, accessType)) {\n\t\t\t\t\t\tRangerHiveAccessRequest request = new RangerHiveAccessRequest(resource, user, groups, hiveOpType, accessType, context, sessionContext, clusterName);\n\n\t\t\t\t\t\trequests.add(request);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuildRequestContextWithAllAccessedResources(requests);\n\n\t\t\tfor(RangerHiveAccessRequest request : requests) {\n\t\t\t\tif (LOG.isDebugEnabled()) {\n\t\t\t\t\tLOG.debug(\"request: \" + request);\n\t\t\t\t}\n\t\t\t\tRangerHiveResource resource = (RangerHiveResource)request.getResource();\n\t\t\t\tRangerAccessResult result   = null;\n\n\t\t\t\tif(resource.getObjectType() == HiveObjectType.COLUMN && StringUtils.contains(resource.getColumn(), COLUMN_SEP)) {\n\t\t\t\t\tList<RangerAccessRequest> colRequests = new ArrayList<RangerAccessRequest>();\n\n\t\t\t\t\tString[] columns = StringUtils.split(resource.getColumn(), COLUMN_SEP);\n\n\t\t\t\t\tresource.setServiceDef(hivePlugin.getServiceDef());\n\n\t\t\t\t\tfor(String column : columns) {\n\t\t\t\t\t\tif (column != null) {\n\t\t\t\t\t\t\tcolumn = column.trim();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(StringUtils.isBlank(column)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tRangerHiveResource colResource = new RangerHiveResource(HiveObjectType.COLUMN, resource.getDatabase(), resource.getTable(), column);\n\n\t\t\t\t\t\tRangerHiveAccessRequest colRequest = request.copy();\n\t\t\t\t\t\tcolRequest.setResource(colResource);\n\n\t\t\t\t\t\tcolRequests.add(colRequest);\n\t\t\t\t\t}\n\n\t\t\t\t\tCollection<RangerAccessResult> colResults = hivePlugin.isAccessAllowed(colRequests, auditHandler);\n\n\t\t\t\t\tif(colResults != null) {\n\t\t\t\t\t\tfor(RangerAccessResult colResult : colResults) {\n\t\t\t\t\t\t\tresult = colResult;\n\n\t\t\t\t\t\t\tif(result != null && !result.getIsAllowed()) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresult = hivePlugin.isAccessAllowed(request, auditHandler);\n\t\t\t\t}\n\n\t\t\t\tif((result == null || result.getIsAllowed()) && isBlockAccessIfRowfilterColumnMaskSpecified(hiveOpType, request)) {\n\t\t\t\t\tHiveAccessType     savedAccessType = request.getHiveAccessType();\n\t\t\t\t\tRangerHiveResource tblResource     = new RangerHiveResource(HiveObjectType.TABLE, resource.getDatabase(), resource.getTable());\n\n\t\t\t\t\trequest.setHiveAccessType(HiveAccessType.SELECT); // filtering/masking policies are defined only for SELECT\n\t\t\t\t\trequest.setResource(tblResource);\n\n\t\t\t\t\tRangerRowFilterResult rowFilterResult = getRowFilterResult(request);\n\n\t\t\t\t\tif (isRowFilterEnabled(rowFilterResult)) {\n\t\t\t\t\t\tif(result == null) {\n\t\t\t\t\t\t\tresult = new RangerAccessResult(rowFilterResult.getServiceName(), rowFilterResult.getServiceDef(), request);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresult.setIsAllowed(false);\n\t\t\t\t\t\tresult.setPolicyId(rowFilterResult.getPolicyId());\n\t\t\t\t\t\tresult.setReason(\"User does not have acces to all rows of the table\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\trequest.setResourceMatchingScope(RangerAccessRequest.ResourceMatchingScope.SELF_OR_DESCENDANTS);\n\n\t\t\t\t\t\tRangerDataMaskResult dataMaskResult = getDataMaskResult(request);\n\n\t\t\t\t\t\tif (isDataMaskEnabled(dataMaskResult)) {\n\t\t\t\t\t\t\tif(result == null) {\n\t\t\t\t\t\t\t\tresult = new RangerAccessResult(dataMaskResult.getServiceName(), dataMaskResult.getServiceDef(), request);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tresult.setIsAllowed(false);\n\t\t\t\t\t\t\tresult.setPolicyId(dataMaskResult.getPolicyId());\n\t\t\t\t\t\t\tresult.setReason(\"User does not have acces to unmasked column values\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\trequest.setHiveAccessType(savedAccessType);\n\t\t\t\t\trequest.setResource(resource);\n\n\t\t\t\t\tif(result != null && !result.getIsAllowed()) {\n\t\t\t\t\t\tauditHandler.processResult(result);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(result == null || !result.getIsAllowed()) {\n\t\t\t\t\tString path = resource.getAsString();\n\t\t\t\t\tpath = (path == null) ? \"Unknown resource!!\" : buildPathForException(path, hiveOpType);\n\t\t\t\t\tthrow new HiveAccessControlException(String.format(\"Permission denied: user [%s] does not have [%s] privilege on [%s]\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t user, request.getHiveAccessType().name(), path));\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tauditHandler.flushAudit();\n\t\t\tRangerPerfTracer.log(perf);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void initEnablementBehaviours( List<EnablementBehaviour> helper ) {\n        helper.add(new WithinLegalLayerBoundsBehaviour());\n        helper.add(new ValidToolDetectionActivator(new Class[]{Geometry.class, MultiLineString.class, \n                LineString.class, LinearRing.class, Polygon.class, MultiPolygon.class}));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    void sampleValueAboveMaximumExpectedValue() {\n        TimeWindowLatencyHistogram histogram = new TimeWindowLatencyHistogram(Clock.SYSTEM, HistogramConfig.builder()\n            .maximumExpectedValue(2L)\n            .build()\n            .merge(HistogramConfig.DEFAULT));\n        histogram.record(3);\n        assertThat(histogram.histogramCountAtValue(3)).isEqualTo(1);\n        assertThat(histogram.histogramCountAtValue(Long.MAX_VALUE)).isEqualTo(1);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic Class<?> primitiveType(char c) {\n        switch (c) {\n            case 'V':\n                return void.class;\n\n            case 'B':\n                return byte.class;\n\n            case 'C':\n                return char.class;\n\n            case 'D':\n                return double.class;\n\n            case 'F':\n                return float.class;\n\n            case 'I':\n                return int.class;\n\n            case 'J':\n                return long.class;\n\n            case 'S':\n                return short.class;\n\n            case 'Z':\n                return boolean.class;\n\n        }\n        return null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void main(String[] args) {\n        Looper.prepare();\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (sPower) {\n                    String cmd = String.format(\"am startservice%s-n com.aigestudio.daemon/\" +\n                                    \"com.aigestudio.daemon.services.DaemonService\",\n                            SysUtil.isAfter17() ? \" --user 0 \" : \" \");\n                    LogUtil.i(\"CMD exec \" + cmd);\n                    try {\n                        Runtime.getRuntime().exec(cmd);\n                    } catch (IOException e) {\n                    }\n                    try {\n                        Thread.sleep(1500);\n                    } catch (InterruptedException e) {\n                        LogUtil.w(\"Thread sleep failed:\" + e.toString());\n                    }\n                }\n            }\n        }).start();\n        Looper.loop();\n        LogUtil.i(\"====================Daemon exit with error====================\");\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void writeLength() throws IOException {\n        if (inputStream == null)\n            throw new UnsupportedOperationException(\"writeLength() can only be called in a contructed PdfStream(InputStream,PdfWriter).\");\n        if (inputStreamLength == -1)\n            throw new IOException(\"writeLength() can only be called after output of the stream body.\");\n        writer.addToBody(new PdfNumber(inputStreamLength), ref, false);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public CallNode(\n        ParseRegion region,\n        String name,\n        Syntax syntax,\n        ParseTreeNode... args)\n    {\n        this(region, name, syntax, Arrays.asList(args));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; } \n        return retVal;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(java.io.InputStream is) throws org.apache.xmlbeans.XmlException, java.io.IOException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( is, type, null ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public Value<Integer> run(Integer x, Integer y, Integer z) {\n      DiffJob diffJob = new DiffJob();\n      MultJob multJob = new MultJob();\n      FutureValue<Integer> r = futureCall(diffJob, immediate(x), immediate(y));\n      FutureValue<Integer> s = futureCall(diffJob, immediate(x), immediate(z));\n      FutureValue<Integer> t = futureCall(multJob, r, s);\n      FutureValue<Integer> u = futureCall(diffJob, t, immediate(2));\n      return u;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void registerReceiver(BroadcastReceiver receiver, IntentFilter filter) {\n\t\tif (receiver == null || filter == null) {\n\t\t\tLogUtil.e(TAG, \"invalid parameters\");\n\t\t\treturn;\n\t\t}\n\n\t\tsynchronized (mManager) {\n\t\t\tif (mReceivers.contains(receiver)) {\n\t\t\t\tLogUtil.e(TAG, \"unregister old receiver!\");\n\t\t\t\tmManager.unregisterReceiver(receiver);\n\t\t\t}\n\n\t\t\tmReceivers.addLast(receiver);\n\t\t\tmManager.registerReceiver(receiver, filter);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprotected String testBlock(BlockPos pos) {\n\t\tIBlockState _blockState = worldObj.getBlockState(pos);\n\t\tBlock _block = _blockState.getBlock();\n\t\tint metaData = _block.getMetaFromState(_blockState);\n\t\tItemStack testItem = new ItemStack(_block, 1, metaData);\n\t\tif (ModHelper.isLeaf(testItem)) return \"treeLeaves\";\n\t\tif (ModHelper.isLog(testItem)) return \"logWood\";\n\t\treturn \"Unknown\";\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void addTail(T item){\n\t\tif(!isEmpty()){\n\t\t\ttail.next=new Node<T>(item);\n\t\t\ttail=tail.next;\n\t\t}else{\n\t\t\thead=tail=new Node<T>(item);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n        \n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n        \n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n        \n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode parse(java.lang.String xmlAsString) throws org.apache.xmlbeans.XmlException {\n          return (com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( xmlAsString, type, null ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void registerReceiver(World world, BlockPos pos, String name) {\n        TeleportDestinations destinations = TeleportDestinations.getDestinations(world);\n        GlobalCoordinate gc = new GlobalCoordinate(pos, world.provider.getDimension());\n        TeleportDestination destination = destinations.addDestination(gc);\n        destination.setName(name);\n        destinations.save(world);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; } \n        return retVal;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void Bld_all(Bry_bfr bfr, Xoae_page page, List_adp list) {\n\t\tthis.list = list; this.list_len = list.Count();\n\t\thash.Clear();\n\t\tfmtr_grp.Bld_bfr_many(bfr, xtn_mgr.Msg_sidebar_ttl(), xtn_mgr.Msg_about_page(), xtn_mgr.Msg_about_ttl(), this);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static <P extends IUnlistedProperty<T>, T> T getStatePropertySafely(@Nullable TileEntity te, Class<? extends Block> block, P property, T defaultVal, boolean actual, boolean extended) {\n\t\tif(te == null || te.getWorld() == null) {\n\t\t\treturn defaultVal;\n\t\t}\n\t\tIBlockState state = te.getWorld().getBlockState(te.getPos());\n\t\tif(block.isInstance(state.getBlock())) {\n\t\t\tif(actual) {\n\t\t\t\tstate = state.getActualState(te.getWorld(), te.getPos());\n\t\t\t}\n\t\t\tif(extended) {\n\t\t\t\tstate = state.getBlock().getExtendedState(state, te.getWorld(), te.getPos());\n\t\t\t}\n\t\t\tif(state instanceof IExtendedBlockState) {\n\t\t\t\treturn ((IExtendedBlockState)state).getValue(property);\n\t\t\t}\n\t\t}\n\t\treturn defaultVal;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate String buildElements() {\n\n        StringBuilder xml = new StringBuilder();\n\n        xml.append(\"<xml>\");\n\n        if (es != null && es.size() > 0){\n            for (E e : es){\n                xml.append(e.render());\n            }\n        }\n\n        xml.append(\"</xml>\");\n\n        return xml.toString();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void main(String[] args) {\n        Looper.prepare();\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (sPower) {\n                    String cmd = String.format(\"am startservice%s-n com.aigestudio.daemon/\" +\n                                    \"com.aigestudio.daemon.services.DaemonService\",\n                            SysUtil.isAfter17() ? \" --user 0 \" : \" \");\n                    LogUtil.i(\"CMD exec \" + cmd);\n                    try {\n                        Runtime.getRuntime().exec(cmd);\n                    } catch (IOException e) {\n                    }\n                    try {\n                        Thread.sleep(1500);\n                    } catch (InterruptedException e) {\n                        LogUtil.w(\"Thread sleep failed:\" + e.toString());\n                    }\n                }\n            }\n        }).start();\n        Looper.loop();\n        LogUtil.i(\"====================Daemon exit with error====================\");\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void doGenerate(final Resource resource, final IFileSystemAccess fsa) {\n    EList<EObject> _contents = resource.getContents();\n    EObject _head = IterableExtensions.<EObject>head(_contents);\n    Model model = ((Model) _head);\n    SqliteDatabaseSnapshot.Builder _get = this.mDbSnapshotBuilderProvider.get();\n    final SqliteDatabaseSnapshot snapshot = _get.build(model);\n    String _packageName = model.getPackageName();\n    DatabaseBlock _database = model.getDatabase();\n    String _name = _database.getName();\n    String _pascalize = Strings.pascalize(_name);\n    String _concat = \"Abstract\".concat(_pascalize);\n    String _concat_1 = _concat.concat(\"OpenHelper\");\n    String _resolveFileName = Strings.resolveFileName(_packageName, _concat_1);\n    CharSequence _generate = this.mOpenHelperGenerator.generate(model, snapshot);\n    fsa.generateFile(_resolveFileName, _generate);\n    String _packageName_1 = model.getPackageName();\n    DatabaseBlock _database_1 = model.getDatabase();\n    String _name_1 = _database_1.getName();\n    String _pascalize_1 = Strings.pascalize(_name_1);\n    String _concat_2 = _pascalize_1.concat(\"OpenHelper\");\n    String _resolveFileName_1 = Strings.resolveFileName(_packageName_1, _concat_2);\n    CharSequence _generateStub = this.mOpenHelperGenerator.generateStub(model, snapshot);\n    fsa.generateFile(_resolveFileName_1, \n      MechanoidOutputConfigurationProvider.DEFAULT_STUB_OUTPUT, _generateStub);\n    String _packageName_2 = model.getPackageName();\n    DatabaseBlock _database_2 = model.getDatabase();\n    String _name_2 = _database_2.getName();\n    String _pascalize_2 = Strings.pascalize(_name_2);\n    String _concat_3 = _pascalize_2.concat(\"Contract\");\n    String _resolveFileName_2 = Strings.resolveFileName(_packageName_2, _concat_3);\n    CharSequence _generate_1 = this.mContentProviderContractGenerator.generate(model, snapshot);\n    fsa.generateFile(_resolveFileName_2, _generate_1);\n    String _packageName_3 = model.getPackageName();\n    DatabaseBlock _database_3 = model.getDatabase();\n    String _name_3 = _database_3.getName();\n    String _pascalize_3 = Strings.pascalize(_name_3);\n    String _concat_4 = \"Abstract\".concat(_pascalize_3);\n    String _concat_5 = _concat_4.concat(\"ContentProvider\");\n    String _resolveFileName_3 = Strings.resolveFileName(_packageName_3, _concat_5);\n    CharSequence _generate_2 = this.mContentProviderGenerator.generate(model, snapshot);\n    fsa.generateFile(_resolveFileName_3, _generate_2);\n    String _packageName_4 = model.getPackageName();\n    DatabaseBlock _database_4 = model.getDatabase();\n    String _name_4 = _database_4.getName();\n    String _pascalize_4 = Strings.pascalize(_name_4);\n    String _concat_6 = _pascalize_4.concat(\"ContentProvider\");\n    String _resolveFileName_4 = Strings.resolveFileName(_packageName_4, _concat_6);\n    CharSequence _generateStub_1 = this.mContentProviderGenerator.generateStub(model, snapshot);\n    fsa.generateFile(_resolveFileName_4, \n      MechanoidOutputConfigurationProvider.DEFAULT_STUB_OUTPUT, _generateStub_1);\n    Collection<CreateTableStatement> _tables = snapshot.getTables();\n    final Procedure1<CreateTableStatement> _function = new Procedure1<CreateTableStatement>() {\n      public void apply(final CreateTableStatement statement) {\n        SqliteModelGenerator.this.generateActiveRecordEntity(resource, fsa, ((CreateTableStatement) statement));\n      }\n    };\n    IterableExtensions.<CreateTableStatement>forEach(_tables, _function);\n    Collection<CreateViewStatement> _views = snapshot.getViews();\n    final Procedure1<CreateViewStatement> _function_1 = new Procedure1<CreateViewStatement>() {\n      public void apply(final CreateViewStatement statement) {\n        SqliteModelGenerator.this.generateActiveRecordEntity(resource, fsa, ((CreateViewStatement) statement));\n      }\n    };\n    IterableExtensions.<CreateViewStatement>forEach(_views, _function_1);\n    Collection<CreateTableStatement> _configInitTables = ModelUtil.getConfigInitTables(model);\n    final Procedure1<CreateTableStatement> _function_2 = new Procedure1<CreateTableStatement>() {\n      public void apply(final CreateTableStatement statement) {\n        SqliteModelGenerator.this.generateActiveRecordEntity(resource, fsa, ((CreateTableStatement) statement));\n      }\n    };\n    IterableExtensions.<CreateTableStatement>forEach(_configInitTables, _function_2);\n    Collection<CreateViewStatement> _configInitViews = ModelUtil.getConfigInitViews(model);\n    final Procedure1<CreateViewStatement> _function_3 = new Procedure1<CreateViewStatement>() {\n      public void apply(final CreateViewStatement statement) {\n        SqliteModelGenerator.this.generateActiveRecordEntity(resource, fsa, ((CreateViewStatement) statement));\n      }\n    };\n    IterableExtensions.<CreateViewStatement>forEach(_configInitViews, _function_3);\n    DatabaseBlock _database_5 = model.getDatabase();\n    EList<MigrationBlock> _migrations = _database_5.getMigrations();\n    final Procedure2<MigrationBlock, Integer> _function_4 = new Procedure2<MigrationBlock, Integer>() {\n      public void apply(final MigrationBlock item, final Integer index) {\n        SqliteModelGenerator.this.generateMigration(resource, fsa, item, ((index).intValue() + 1));\n      }\n    };\n    IterableExtensions.<MigrationBlock>forEach(_migrations, _function_4);\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void setGlobalProperties(String resource, String url) {\n    config.getErrorContext().setActivity(\"loading global properties\");\n    try {\n      Properties props;\n      if (resource != null) {\n        config.getErrorContext().setResource(resource);\n        props = Resources.getResourceAsProperties(resource);\n      } else if (url != null) {\n        config.getErrorContext().setResource(url);\n        props = Resources.getUrlAsProperties(url);\n      } else {\n        throw new RuntimeException(\"The \" + \"properties\" + \" element requires either a resource or a url attribute.\");\n      }\n\n      if (props != null) {\n        props.putAll(globalProps);\n        globalProps = props;\n      }\n\n      String customizedSQLExecutor = globalProps.getProperty(\"sql_executor_class\");\n      config.getErrorContext().setActivity(\"Loading SQLExecutor.\");\n      if (customizedSQLExecutor != null) {\n        try {\n          config.getClient().getDelegate().setCustomExecutor(customizedSQLExecutor);\n          config.getClient().getDelegate().getSqlExecutor().init(config, globalProps);\n        } catch (Exception e) {\n          config.getErrorContext().setCause(e);\n          config.getErrorContext()\n              .setMoreInfo(\"Loading of customizedSQLExecutor failed. Please check Properties file.\");\n        }\n      }\n\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error loading properties.  Cause: \" + e, e);\n    }\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    protected void doRedirect(HttpServletRequest request,\n            HttpServletResponse response, Controller controller, String path)\n            throws IOException, ServletException {\n        doRedirect(request, response, path);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public void onPlayerStateChange(PlayerState oldState, PlayerState newState, Bundle extra) {\n\n        mPrevState = mCurrentState;\n        mCurrentState = newState;\n        Log.d(TAG, \"State change event! Oldstate= \" + oldState + \" NewState= \" + newState);\n        if (mPrevState == mCurrentState) {\n            Log.w(TAG, \"Duplicate state change message!!! \");\n        }\n        Log.d(TAG, \"State change event! OldState= \" + oldState + \" NewState= \" + newState);\n        switch (newState) {\n            case IDLE:\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mIsContentChangeRequested) {\n                    openContent(mSelectedContent);\n                }\n                break;\n            case OPENING:\n                break;\n            case OPENED:\n                if (mPlayer != null && mIsActivityResumed) {\n                    mPlayer.prepare();\n                }\n                else {\n                    mIsContentChangeRequested = false;\n                }\n                if (mIsContentSupportCC && mIsCloseCaptionEnabled) {\n                    if (mPlaybackOverlayFragment != null) {\n                        mPlaybackOverlayFragment.updateCCButtonState(true, true);\n                    }\n                    if (mPlayer != null) {\n                        mPlayer.enableTextTrack(TrackType.SUBTITLE, true);\n                    }\n                }\n                break;\n            case PREPARING:\n                if (mPlaybackOverlayFragment != null && mPlaybackOverlayFragment.getView() !=\n                        null) {\n                    mPlaybackOverlayFragment.getView().setVisibility(View.VISIBLE);\n                }\n                break;\n            case READY:\n                mPlaybackState = LeanbackPlaybackState.PAUSED;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(false);\n                }\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mPrevState == PlayerState.PREPARING) {\n                    if (mPlaybackOverlayFragment != null) {\n                        mPlaybackOverlayFragment.updatePlayback();\n                        mPlaybackOverlayFragment.startProgressAutomation();\n                    }\n                    if (mCurrentPlaybackPosition > 0) {\n                        mPlayer.seekTo(mCurrentPlaybackPosition);\n                    }\n                    if (mAutoPlay || mIsContentChangeRequested) {\n                        play();\n                        mAutoPlay = false;\n                        if (mIsContentChangeRequested) {\n                            mIsContentChangeRequested = false;\n                        }\n                    }\n                }\n                else if (mAudioFocusState == AudioFocusState.NoFocusNoDuck) {\n                    play();\n                }\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PAUSED);\n                }\n                break;\n            case PLAYING:\n                mPlaybackState = LeanbackPlaybackState.PLAYING;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(true);\n                }\n                hideProgress();\n                mWindow.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PLAYING);\n                }\n                break;\n            case BUFFERING:\n                showProgress();\n                break;\n            case SEEKING:\n                showProgress();\n                break;\n            case ENDED:\n                hideProgress();\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.playbackFinished();\n                }\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.COMPLETED);\n                }\n                break;\n            case CLOSING:\n\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.stopProgressAutomation();\n                }\n                if (!isContentLive(mSelectedContent)) {\n                    trackContentFinished(mCurrentContent, mCurrentPlaybackPosition);\n                }\n                break;\n            case ERROR:\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                Log.e(TAG, \"Player encountered an error!\");\n                break;\n            default:\n                Log.e(TAG, \"Unknown state!!!!!\");\n                break;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1],\n                col = (int)val[2];\n            float multiplier = val[3];\n            \n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            table.setVal(row-1, col-1, (Float)table.value(row-1, col-1) * multiplier);\n            return multiplier;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Deprecated\n    public static boolean isJavaLetterOrDigit(char ch) {\n        return isJavaIdentifierPart(ch);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic LevelGen(int w, int h, int featureSize) {\n\t\tthis.w = w; // assigns the width of the map\n\t\tthis.h = h; // assigns the height of the map\n\n\t\tvalues = new double[w * h]; // creates the size of the value array (width * height)\n\n\t\tfor (int y = 0; y < w; y += featureSize) { // Loops through the width of the map, going up by the featureSize value each time. \n\t\t\tfor (int x = 0; x < w; x += featureSize) { // Loops through the width of the map a second time, going up by the featureSize value each time.\n\t\t\t\tsetSample(x, y, random.nextFloat() * 2 - 1); // sets a random value at a x and y point.\n\t\t\t}\n\t\t}\n\n\t\tint stepSize = featureSize; // stepSize is the featureSize that is given when you call the method. \n\t\tdouble scale = 1.0 / w; // scale of the map\n\t\tdouble scaleMod = 1; // scale modification\n\t\tdo { //do this...\n\t\t\tint halfStep = stepSize / 2;  // Half of stepSize\n\t\t\tfor (int y = 0; y < w; y += stepSize) { // Loops through the width value of the map, going up by the stepSize value each time. \n\t\t\t\tfor (int x = 0; x < w; x += stepSize) { // Loops through the width value of the map, going up by the stepSize value each time. \n\t\t\t\t\tdouble a = sample(x, y); // gets a sample value from the x and y value.\n\t\t\t\t\tdouble b = sample(x + stepSize, y); // gets a sample value from the next value of x, and the current y value.\n\t\t\t\t\tdouble c = sample(x, y + stepSize); // gets a sample value from the current x, and next value of y.\n\t\t\t\t\tdouble d = sample(x + stepSize, y + stepSize); // gets a sample value from the next x value and next y value.\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tdouble e = (a + b + c + d) / 4.0 + (random.nextFloat() * 2 - 1) * stepSize * scale;\n\t\t\t\t\t\n\t\t\t\t\tsetSample(x + halfStep, y + halfStep, e); // sets the value e at the next x value and next y value. repeat these until loop is done.\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int y = 0; y < w; y += stepSize) { // Loops through the width value of the map, going up by the stepSize value each time. \n\t\t\t\tfor (int x = 0; x < w; x += stepSize) { // Loops through the width value of the map, going up by the stepSize value each time. \n\t\t\t\t\tdouble a = sample(x, y); // gets a sample value from the x and y value.\n\t\t\t\t\tdouble b = sample(x + stepSize, y); // gets a sample value from the next value of x, and the current y value.\n\t\t\t\t\tdouble c = sample(x, y + stepSize); // gets a sample value from the current x, and next value of y.\n\t\t\t\t\tdouble d = sample(x + halfStep, y + halfStep); // gets a sample value from the next x value and next y value.\n\t\t\t\t\tdouble e = sample(x + halfStep, y - halfStep); // gets a sample value from the next x value and the previous y value.\n\t\t\t\t\tdouble f = sample(x - halfStep, y + halfStep); // gets a sample value from the previous x value and the next y value.\n\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tdouble H = (a + b + d + e) / 4.0 + (random.nextFloat() * 2 - 1) * stepSize * scale * 0.5;\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tdouble g = (a + c + d + f) / 4.0 + (random.nextFloat() * 2 - 1) * stepSize * scale * 0.5;\n\t\t\t\t\t\n\t\t\t\t\tsetSample(x + halfStep, y, H); // sets the H value at the half-way position of the next x value, and the current y value. \n\t\t\t\t\tsetSample(x, y + halfStep, g); // sets the g value at the current x value, and half-way position of the next y value.\n\t\t\t\t}\n\t\t\t}\n\t\t\tstepSize /= 2; // cuts the stepSize value in half.\n\t\t\tscale *= (scaleMod + 0.8); // Multiplies the scale by (scaleMod value + 0.8)\n\t\t\tscaleMod *= 0.3; // multiplies the scaleMod by 0.3\n\t\t} while (stepSize > 1); // ...if stepSize is larger than 1.\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    <T> Variable<T> reserveSlot(String name, Type type, int slot) {\n        reserveSlot(type, slot);\n        return varScope.add(name, type, slot);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\tChannelListener listener = this.listeners.remove(ctx.channel());\n\t\tif (listener != null) {\n\t\t\tLogManager.logDetail(LogConstants.CTX_TRANSPORT, \n\t\t\t        RuntimePlugin.Util.getString(\"SSLAwareChannelHandler.channel_closed\")); //$NON-NLS-1$\n\t\t\tlistener.disconnected();\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void onDownloadError(int index, String message) {\n    for (int i = 0; i < mDownloadStatus.length; i++) {\n        if (mDownloadStatus[i] != Constants.DOWNLOAD_STATE_FINISH && mDownloadStatus[i] != Constants.DOWNLOAD_STATE_ERROR) {\n            mDownloadThreads[i].cancel();\n        }\n    }\n    notifyError(message);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate int checkExtensions(X509Certificate cert, int maxPathLen)\n            throws CertificateException {\n        Set<String> critSet = cert.getCriticalExtensionOIDs();\n        if (critSet == null) {\n            critSet = Collections.<String>emptySet();\n        }\n\n        int pathLenConstraint =\n                checkBasicConstraints(cert, critSet, maxPathLen);\n\n        checkKeyUsage(cert, critSet);\n\n        checkNetscapeCertType(cert, critSet);\n\n        if (!critSet.isEmpty()) {\n            throw new ValidatorException\n                (\"Certificate contains unknown critical extensions: \" + critSet,\n                ValidatorException.T_CA_EXTENSIONS, cert);\n        }\n\n        return pathLenConstraint;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static void timestampValueInsertSelect(Connection conn, TimeUnit databasePrecision) throws Exception {\n        timestampValueInsertSelect(conn, databasePrecision, null);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n\tpublic void testBlock () throws ValidationException\n\t{\n\t\tBlk b1 =\n\t\t\t\tBlk.fromWireDump (\"\");\n\t\tassertTrue (b1.getHash ().equals (\"0000000000000449ee5b94ba7a051caffff5c23d6a03335f6e20e3985b5ffa61\"));\n\t\tBlk b2 = Blk.fromWireDump (b1.toWireDump ());\n\t\tb2.computeHash ();\n\t\tassertTrue (b1.getHash ().equals (b2.getHash ()));\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static Graph<ITestNGMethod> topologicalSort(ITestNGMethod[] methods,\n      List<ITestNGMethod> sequentialList, List<ITestNGMethod> parallelList) {\n    Graph<ITestNGMethod> result = new Graph<ITestNGMethod>();\n\n    if (methods.length == 0) {\n      return result;\n    }\n\n    for (ITestNGMethod m : methods) {\n      result.addNode(m);\n\n      List<ITestNGMethod> predecessors = Lists.newArrayList();\n\n      String[] methodsDependedUpon = m.getMethodsDependedUpon();\n      String[] groupsDependedUpon = m.getGroupsDependedUpon();\n      if (methodsDependedUpon.length > 0) {\n        ITestNGMethod[] methodsNamed =\n          MethodHelper.findDependedUponMethods(m, methods);\n        for (ITestNGMethod pred : methodsNamed) {\n          predecessors.add(pred);\n        }\n      }\n      if (groupsDependedUpon.length > 0) {\n        for (String group : groupsDependedUpon) {\n          ITestNGMethod[] methodsThatBelongToGroup =\n            MethodGroupsHelper.findMethodsThatBelongToGroup(m, methods, group);\n          for (ITestNGMethod pred : methodsThatBelongToGroup) {\n            predecessors.add(pred);\n          }\n        }\n      }\n\n      for (ITestNGMethod predecessor : predecessors) {\n        result.addPredecessor(m, predecessor);\n      }\n    }\n\n    result.topologicalSort();\n    sequentialList.addAll(result.getStrictlySortedNodes());\n    parallelList.addAll(result.getIndependentNodes());\n\n    return result;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void writeLength() throws IOException {\n        if (inputStream == null)\n            throw new UnsupportedOperationException(\"writeLength() can only be called in a contructed PdfStream(InputStream,PdfWriter).\");\n        if (inputStreamLength == -1)\n            throw new IOException(\"writeLength() can only be called after output of the stream body.\");\n        writer.addToBody(new PdfNumber(inputStreamLength), ref, false);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@RequestMapping(value = \"guid.do\",method= RequestMethod.POST)\n    @ResponseBody\n    public String getGuid(int proxy, Long proxyId, String ip, Integer port, String password, HttpServletResponse response) {\n        Agent agent = new Agent();\n        agent.setProxy(proxy);\n        agent.setIp(ip);\n        agent.setPort(port);\n        agent.setPassword(password);\n\n        if (proxy == Opencron.ConnType.PROXY.getType()) {\n            agent.setProxy(Opencron.ConnType.CONN.getType());\n            if (proxyId != null) {\n                Agent proxyAgent = agentService.getAgent(proxyId);\n                if (proxyAgent == null) {\n                    return null;\n                }\n                agent.setProxyAgent(proxyId);\n                agent.setProxy(Opencron.ConnType.PROXY.getType());\n            }\n        }\n       return executeService.guid(agent);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Nonnull\n    public static ProcessorMetaSupplier streamRemoteMapP(\n            @Nonnull String mapName, @Nonnull ClientConfig clientConfig, boolean startFromLatestSequence) {\n        return StreamEventJournalP.streamMapP(mapName, clientConfig, null, null, startFromLatestSequence);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void initEnablementBehaviours( List<EnablementBehaviour> helper ) {\n        helper.add(new WithinLegalLayerBoundsBehaviour());\n        helper.add(new ValidToolDetectionActivator(new Class[]{Geometry.class, MultiLineString.class, \n                LineString.class, LinearRing.class, Polygon.class, MultiPolygon.class}));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void initStatement(int type, int concurrency, int holdability,\n                               int autoGeneratedKeys, String[] columnNames,\n                               int[] columnIndexes) throws SqlException {\n        switch (type) {\n        case java.sql.ResultSet.TYPE_FORWARD_ONLY:\n        case java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE:\n        case java.sql.ResultSet.TYPE_SCROLL_SENSITIVE:\n            resultSetType_ = type;\n            break;\n        default:\n            throw new SqlException(agent_.logWriter_, \n                new ClientMessageId(SQLState.INVALID_API_PARAMETER),\n                new Integer(type), \"type\", \"createStatement()\");\n        }\n\n        switch (concurrency) {\n        case java.sql.ResultSet.CONCUR_READ_ONLY:\n        case java.sql.ResultSet.CONCUR_UPDATABLE:\n            resultSetConcurrency_ = concurrency;\n            break;\n        default:\n            throw new SqlException(agent_.logWriter_, \n                new ClientMessageId(SQLState.INVALID_API_PARAMETER),\n                new Integer(concurrency), \"concurrency\",\n                \"createStatement()\");\n        }\n\n        switch (holdability) {\n        case ResultSet.CLOSE_CURSORS_AT_COMMIT:\n        case ResultSet.HOLD_CURSORS_OVER_COMMIT:\n            resultSetHoldability_ = holdability;\n            break;\n        default:\n            throw new SqlException(agent_.logWriter_,\n                new ClientMessageId(SQLState.INVALID_API_PARAMETER),\n                new Integer(holdability), \"holdability\",\n                \"createStatement()\");\n        }\n\n        switch (autoGeneratedKeys) {\n        case java.sql.Statement.NO_GENERATED_KEYS:\n        case java.sql.Statement.RETURN_GENERATED_KEYS:\n            autoGeneratedKeys_ = autoGeneratedKeys;\n            break;\n        default:\n            throw new SqlException(agent_.logWriter_, \n                new ClientMessageId(SQLState.INVALID_API_PARAMETER),\n                new Integer(autoGeneratedKeys),\n                \"autoGeneratedKeys\", \"createStatement\");\n        }\n\n        generatedKeysColumnNames_ = columnNames;\n        generatedKeysColumnIndexes_ = columnIndexes;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate Expression readTerm() throws SQLException {\n        Expression r = null;\n        switch (currentTokenType) {\n        case PARAMETER:\n            boolean indexed = Character.isDigit(sqlCommandChars[parseIndex]);\n            read();\n            Parameter p;\n                p = new Parameter(session, parameters.size());\n            parameters.add(p);\n            r = p;\n            break;\n        case IDENTIFIER:\n            String name = currentToken;\n                read();\n                  if (readIf(\".\")) {\n                    r = readTermObjectDot(name);\n                } else {\n                    r = new ExpressionColumn(session, null, null, name);\n                }\n            break;\n        case OPEN:\n            read();\n            r = readExpression();\n            if (readIf(\",\")) {\n                ObjectArray<Expression> list = ObjectArray.newInstance();\n                list.add(r);\n                do {\n                    r = readExpression();\n                    list.add(r);\n                } while (readIf(\",\"));\n                Expression[] array = new Expression[list.size()];\n                list.toArray(array);\n            }\n            read(\")\");\n            break;\n        case NULL:\n            read();\n            r = new Null();\n            break;\n        default:\n            throw getSyntaxError();\n        }\n\n        return r;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static <N extends RootedDAGNode<N>> List<N> topologicalSort(N root) throws GraphException {\n\t\tList<N> queued = new ArrayList<N>();\n\t\tqueued.add(root);\n\t\tint i=0;\n\t\twhile (i<queued.size()) {\n\t\t\tN n = queued.get(i);\n\t\t\tfor (N c : n.getChildren()) {\n\t\t\t\tif (!queued.contains(c))\n\t\t\t\t\tqueued.add(c);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tCollections.reverse(queued);\n\t\tList<N> sorted = new ArrayList<N>();\n\t\ti = 0;\n\t\twhile (!queued.isEmpty()) {\n\t\t\ti = queued.size()-1;\n\t\t\twhile (i>=0) {\n\t\t\t\tN n = queued.get(i);\n\t\t\t\tboolean allParentsSorted = true;\n\t\t\t\tfor (N p : n.getParents()) {\n\t\t\t\t\tif (!sorted.contains(p)) {\n\t\t\t\t\t\tallParentsSorted = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (allParentsSorted) {\n\t\t\t\t\tsorted.add(queued.remove(i));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tif (i==-1)\n\t\t\t\tthrow new GraphException(\"Cannot produce a topological sort: not a DAG\");\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tpublic UUID getGuid(String fieldName) throws DecodingException\n\t{\n\t\tString guidString = null;\n\t\tif (beginFieldSafe(fieldName, true))\n\t\t{\n\t\t\tguidString = getString(\"String\");\n\n\t\t\tendField(fieldName);\n\t\t}\n\n\t\treturn UUID.fromString(guidString);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; } \n        return retVal;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public List<SearchColumnStringField> getSerialNumbers() {\n        if (serialNumbers == null) {\n            serialNumbers = new ArrayList<SearchColumnStringField>();\n        }\n        return this.serialNumbers;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Kernel(int width, int height, double factor, double data[]) {\n        this(width, height, (width - 1) / 2, (height - 1) / 2, factor, data);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n  public static List<String> getList(InputStream is) throws ParserException {\n    return getList(new BufferedReader(new InputStreamReader(is)));\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static float convertDpToPixel(float dp,Context context){\n\t    Resources resources = context.getResources();\n\t    DisplayMetrics metrics = resources.getDisplayMetrics();\n\t    float px = dp * metrics.density;\n\t    return px;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test public void testBlock() throws Exception {\n        ElementSymbol a = new ElementSymbol(\"a\"); //$NON-NLS-1$\n        String type = new String(\"short\"); //$NON-NLS-1$\n        DeclareStatement declStmt = new DeclareStatement(a, type);\n        Statement stmt = declStmt;\n        Block block = new Block(stmt);       \n       \n        helpBlockTest(\"BEGIN DECLARE short a; END\", \"BEGIN\"+\"\\n\"+\"DECLARE short a;\"+\"\\n\"+\"END\", //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$\n            block);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(org.w3c.dom.Node node, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( node, type, options ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprotected void printMethods (       IndentingWriter writer,\n                                        boolean useQualifiedNames,\n                                        boolean useIDLNames,\n                                        boolean globalIDLNames) throws IOException {\n\n        CompoundType.Method[] methods = getMethods();\n\n        for (int m = 0; m < methods.length; m++) {\n            CompoundType.Method theMethod = methods[m];\n            printMethod(theMethod,writer,useQualifiedNames,useIDLNames,globalIDLNames);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String[] appendSelectionArgs(String[] originalValues, String[] newValues) {\n        if (originalValues == null || originalValues.length == 0) {\n            return newValues;\n        }\n        String[] result = new String[originalValues.length + newValues.length ];\n        System.arraycopy(originalValues, 0, result, 0, originalValues.length);\n        System.arraycopy(newValues, 0, result, originalValues.length, newValues.length);\n        return result;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n  public void testQueryOrdered()\n  throws Exception {\n    final String query = \"SELECT ?s ?p WHERE { ?s ?p ?o . }ORDER BY ?s ?p\";\n\n    PostMethod post = new PostMethod(aseBaseUrl);\n    post.addParameter(Protocol.QUERY_PARAM_NAME, URLEncoder.encode(query, \"UTF-8\"));\n\n    final int code = client.executeMethod(post);\n    if (code == HttpStatus.SC_OK) {\n      final String json = post.getResponseBodyAsString();\n      String ref = \"{\\\"results\\\":{\\\"distinct\\\":\\\"false\\\",\\\"ordered\\\":\\\"true\\\",\\\"bindings\\\":[\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/a\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/firstName\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/a\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/like\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/a\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/type\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/b\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/firstName\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/b\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/firstName\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/b\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/think_at\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/b\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/type\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/c\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/firstName\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/c\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/test\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/c\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/type\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/d\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/fail\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/e\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/type\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/f\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/do\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/f\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/type\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/g\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/test\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/g\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/type\\\"}},\"\n              + \"{\\\"s\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/g\\\"},\\\"p\\\":{\\\"type\\\":\\\"uri\\\",\\\"value\\\":\\\"http://opengraphprotocol.org/schema/type\\\"}}]},\"\n              + \"\\\"head\\\":{\\\"link\\\":[],\\\"vars\\\":[\\\"s\\\",\\\"p\\\"]},\"\n              + \"\\\"status\\\":\\\"SUCCESS\\\",\\\"message\\\":\\\"\\\"}\";\n      assertEquals(ref, json.toString());\n    } else {\n      fail(\"code=\" + code);\n    }\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void drawKeyBackground(int drawableId,Canvas canvas,Key key){\n\t\tDrawable npd = (Drawable) mContext.getResources().getDrawable(\n\t\t\t\tdrawableId);\n\t\tint[] drawableState = key.getCurrentDrawableState();\n\t\tif (key.codes[0] != 0) {\n\t\t\tnpd.setState(drawableState);\n\t\t}\n\t\tnpd.setBounds(key.x, key.y, key.x + key.width, key.y\n\t\t\t\t+ key.height);\n\t\tnpd.draw(canvas);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static List<ClassParams> getApplicable(Instances instances, String paramDirName, Testable type, List<String> allowed, List<String> options)\n    {\n        File paramDir = new File(paramDirName);\n        if(!paramDir.exists() || !paramDir.isDirectory())\n        {\n            throw new RuntimeException(paramDirName + \" is not a valid directory\");\n        }\n        FileFilter paramFilter = new FileFilter() {\n            public boolean accept(File file) {\n                return file.getName().endsWith(\".params\") && !file.getName().startsWith(\".\");\n            }\n        };\n\n        ArrayList<String> names = new ArrayList<String>();\n        File[] params = paramDir.listFiles(paramFilter);\n        for(File i:params)\n        {\n           names.add(Util.removeExtension(i.getName()));\n        }\n        java.util.Collections.sort(names);\n\n        ArrayList<ClassParams> goodMethods = new ArrayList<ClassParams>();\n\n        for(String name: names)\n        {\n            if(allowed != null && !allowed.contains(name))\n                continue;\n            if(isApplicable(name, instances, options, type))\n            {\n                goodMethods.add(new ClassParams(paramDirName + File.separatorChar + name + \".params\"));\n            }\n        }\n        return goodMethods;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\tpublic SortedMap<String, Integer> GetInOutList(Netlist MyNetList,\n\t\t\tAttributeSet attrs) {\n\t\tSortedMap<String, Integer> InOuts = new TreeMap<String, Integer>();\n\t\tint InOutBubbles = MyNetList.NumberOfInOutBubbles();\n\t\tif (InOutBubbles > 0) {\n\t\t\tif (InOutBubbles > 1) {\n\t\t\t\tInOuts.put(HDLGeneratorFactory.LocalInOutBubbleBusname,\n\t\t\t\t\t\tInOutBubbles);\n\t\t\t} else {\n\t\t\t\tInOuts.put(HDLGeneratorFactory.LocalInOutBubbleBusname, 0);\n\t\t\t}\n\t\t}\n\t\treturn InOuts;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@RequestMapping(\"/\")\n    public void api(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        String reqUrl = request.getRequestURL().toString();\n        reqUrl = reqUrl.replace(\"api\", \"api\") + \"index.html\";\n        HttpClient client = new HttpClient();\n        HttpMethod method = new GetMethod(reqUrl);\n        client.executeMethod(method);\n        String apiUrl = request.getServerName() + COLON + request.getServerPort() + API_DOC;\n \n        String html = method.getResponseBodyAsString();\n        String body = html.replace(\"petstore.swagger.io/v2/swagger.json\", apiUrl)\n                .replace(\"css/\", \"/api/css/\")\n                .replace(\"lib/\", \"/api/lib/\")\n                .replace(\"swagger-ui.js\", \"/api/swagger-ui.js\");\n        response.getWriter().write(body);\n        response.getWriter().flush();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public List<SearchColumnStringField> getSerialNumbers() {\n        if (serialNumbers == null) {\n            serialNumbers = new ArrayList<SearchColumnStringField>();\n        }\n        return this.serialNumbers;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private boolean isInContent(double x, double y, Sticker currentSticker) {\n        long startTime = System.currentTimeMillis();\n        float[] pointsDst = currentSticker.getMapPointsDst();\n        PointD pointF_1 = Utils.getMidpointCoordinate(pointsDst[0], pointsDst[1], pointsDst[2], pointsDst[3]);\n        double a1 = Utils.lineSpace(pointsDst[8], pointsDst[9], pointF_1.getX(), pointF_1.getY());\n        double b1 = Utils.lineSpace(pointsDst[8], pointsDst[9], x, y);\n        if (b1 <= a1) {\n            return true;\n        }\n        double c1 = Utils.lineSpace(pointF_1.getX(), pointF_1.getY(), x, y);\n        double p1 = (a1 + b1 + c1) / 2;\n        double s1 = Math.sqrt(p1 * (p1 - a1) * (p1 - b1) * (p1 - c1));\n        double d1 = 2 * s1 / a1;\n        if (d1 > a1) {\n            return false;\n        }\n\n        PointD pointF_2 = Utils.getMidpointCoordinate(pointsDst[2], pointsDst[3], pointsDst[4], pointsDst[5]);\n        double a2 = a1;\n        double b2 = b1;\n        double c2 = Utils.lineSpace(pointF_2.getX(), pointF_2.getY(), x, y);\n        double p2 = (a2 + b2 + c2) / 2;\n        double temp = p2 * (p2 - a2) * (p2 - b2) * (p2 - c2);\n        double s2 = Math.sqrt(temp);\n        double d2 = 2 * s2 / a2;\n        if (d2 > a1) {\n            return false;\n        }\n        long endTime = System.currentTimeMillis();\n        long time = endTime - startTime;\n\n        if (d1 <= a1 && d2 <= a1) {\n            return true;\n        }\n\n        return false;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PasswordImpl(SaltProvider saltProvider, ConfigCoder configCoder, HashAlgorithmRegistry hashAlgorithmRegistry, HashAlgorithm defaultHashAlgorithm) {\n        this.saltProvider = Preconditions.checkNotNull(saltProvider, \"saltProvider\");\n        this.configCoder = Preconditions.checkNotNull(configCoder, \"configCoder\");\n        this.hashAlgorithmRegistry = Preconditions.checkNotNull(hashAlgorithmRegistry, \"hashAlgorithmRegistry\");\n        this.defaultHashAlgorithm = Preconditions.checkNotNull(defaultHashAlgorithm, \"defaultHashAlgorithm\");\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nvoid createCurve(PointF[] originPoint,Path path){\n        int originCount = originPoint.length;\n        float scale = 0.6f;\n        PointF midpoints[] = new PointF[originCount];\n        for(int i = 0 ;i < originCount ; i++){\n            int nexti = (i + 1) % originCount;\n            midpoints[i] = new PointF();\n            midpoints[i].x = (originPoint[i].x + originPoint[nexti].x)/2.0f;\n            midpoints[i].y = (originPoint[i].y + originPoint[nexti].y)/2.0f;\n        }\n\n        PointF extrapoints[] = new PointF[2 * originCount];\n        for(int i = 0 ;i < originCount ; i++){\n            int nexti = (i + 1) % originCount;\n            int backi = (i + originCount - 1) % originCount;\n            if(i==0) backi=0;\n            PointF midinmid = new PointF();\n            midinmid.x = (midpoints[i].x + midpoints[backi].x)/2.0f;\n            midinmid.y = (midpoints[i].y + midpoints[backi].y)/2.0f;\n            float offsetx = originPoint[i].x - midinmid.x;\n            float offsety = originPoint[i].y - midinmid.y;\n            int extraindex = 2 * i;\n            extrapoints[extraindex] = new PointF();\n            extrapoints[extraindex].x = midpoints[backi].x + offsetx;\n            extrapoints[extraindex].y = midpoints[backi].y + offsety;\n            float addx = (extrapoints[extraindex].x - originPoint[i].x) * scale;\n            float addy = (extrapoints[extraindex].y - originPoint[i].y) * scale;\n            extrapoints[extraindex].x = originPoint[i].x + addx;\n            extrapoints[extraindex].y = originPoint[i].y + addy;\n\n            int extranexti = (extraindex + 1)%(2 * originCount);\n            extrapoints[extranexti] = new PointF();\n            extrapoints[extranexti].x = midpoints[i].x + offsetx;\n            extrapoints[extranexti].y = midpoints[i].y + offsety;\n            addx = (extrapoints[extranexti].x - originPoint[i].x) * scale;\n            addy = (extrapoints[extranexti].y - originPoint[i].y) * scale;\n            extrapoints[extranexti].x = originPoint[i].x + addx;\n            extrapoints[extranexti].y = originPoint[i].y + addy;\n        }\n\n        PointF controlPoint[] = new PointF[4];\n        boolean first = true;\n        for(int i = 0 ;i < originCount ; i++){\n            controlPoint[0] = originPoint[i];\n            int extraindex = 2 * i;\n            controlPoint[1] = extrapoints[extraindex + 1];\n            if(controlPoint[1].x < originPoint[i].x) controlPoint[1] = originPoint[i];\n\n            int extranexti = (extraindex + 2) % (2 * originCount);\n            controlPoint[2] = extrapoints[extranexti];\n            if(controlPoint[2].x < originPoint[i].x) controlPoint[2] = originPoint[i];\n\n            int nexti = (i + 1) % originCount;\n            controlPoint[3] = originPoint[nexti];\n            if(controlPoint[3].x < originPoint[i].x) controlPoint[3] = originPoint[i];\n            float u = 1;\n            while(u >= 0){\n                float px = bezier3funcX(u,controlPoint);\n                float py = bezier3funcY(u,controlPoint);\n                u -= 0.005;\n                if(first){\n                    path.moveTo(px, py);\n                    first = false;\n                }\n                else path.lineTo(px, py);\n            }\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\tsuper.channelActive(ctx);\n\t\tlong passed = System.currentTimeMillis() - connected;\n\t\tSystem.out.print(c * 1000 / passed);\n\t\tsynchronized (clients) {\n\t\t\tclients.remove(this);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void runScheduleJobToAction(List<JobPersistenceOld> jobDetails, Date now, SimpleDateFormat df2, Map<Long, JobPersistence> actionDetails, String currentDateStr){\n\t\tfor(JobPersistenceOld jobDetail : jobDetails){\n\t\t\tif(jobDetail.getScheduleType() != null && jobDetail.getScheduleType()==0){\n\t\t\t\ttry{\n\t\t\t\t\tString jobCronExpression = jobDetail.getCronExpression();\n\t\t\t\t\tString cronDate= df2.format(now);\n\t\t\t\t\tList<String> lTime = new ArrayList<String>();\n\t\t\t\t\tif(jobCronExpression != null && jobCronExpression.trim().length() > 0){\n\t\t\t\t\t\tboolean isCronExp = false;\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\tisCronExp = CronExpParser.Parser(jobCronExpression, cronDate, lTime);\n\t\t\t\t\t\t}catch(Exception ex){\n\t\t\t\t\t\t\tisCronExp = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!isCronExp) {\n\t\t\t\t\t\t\tlog.error(\"\u93c3\u72b3\u7876\u9422\u71b8\u579aCron\u741b\u3128\u63ea\u5bee\u5fe5\u7d30\u93c3\u30e6\u6e61,\" + cronDate + \";\u6d93\u5d87\ue0c1\u935a\u5823\ue749\u9352\u6a86ron\u741b\u3128\u63ea\u5bee\u5fe5\u7d30\" + jobCronExpression);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (int i = 0; i < lTime.size(); i++) {\n\t\t\t\t\t\t\tString actionDateStr = ZeusDateTool.StringToDateStr(lTime.get(i), \"yyyy-MM-dd HH:mm:ss\", \"yyyyMMddHHmmss\");\n\t\t\t\t\t\t\tString actionCronExpr = ZeusDateTool.StringToDateStr(lTime.get(i), \"yyyy-MM-dd HH:mm:ss\", \"s m H d M\") + \" ?\";\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tJobPersistence actionPer = new JobPersistence();\n\t\t\t\t\t\t\tactionPer.setId(Long.parseLong(actionDateStr)*10000+jobDetail.getId());//update action id\n\t\t\t\t\t\t\tactionPer.setToJobId(jobDetail.getId());\n\t\t\t\t\t\t\tactionPer.setAuto(jobDetail.getAuto());\n\t\t\t\t\t\t\tactionPer.setConfigs(jobDetail.getConfigs());\n\t\t\t\t\t\t\tactionPer.setCronExpression(actionCronExpr);//update action cron expression\n\t\t\t\t\t\t\tactionPer.setCycle(jobDetail.getCycle());\n\t\t\t\t\t\t\tString jobDependencies = jobDetail.getDependencies();\n\t\t\t\t\t\t\tactionPer.setDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setJobDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setDescr(jobDetail.getDescr());\n\t\t\t\t\t\t\tactionPer.setGmtCreate(jobDetail.getGmtCreate());\n\t\t\t\t\t\t\tactionPer.setGmtModified(new Date());\n\t\t\t\t\t\t\tactionPer.setGroupId(jobDetail.getGroupId());\n\t\t\t\t\t\t\tactionPer.setHistoryId(jobDetail.getHistoryId());\n\t\t\t\t\t\t\tactionPer.setHost(jobDetail.getHost());\n\t\t\t\t\t\t\tactionPer.setLastEndTime(jobDetail.getLastEndTime());\n\t\t\t\t\t\t\tactionPer.setLastResult(jobDetail.getLastResult());\n\t\t\t\t\t\t\tactionPer.setName(jobDetail.getName());\n\t\t\t\t\t\t\tactionPer.setOffset(jobDetail.getOffset());\n\t\t\t\t\t\t\tactionPer.setOwner(jobDetail.getOwner());\n\t\t\t\t\t\t\tactionPer.setPostProcessers(jobDetail.getPostProcessers());\n\t\t\t\t\t\t\tactionPer.setPreProcessers(jobDetail.getPreProcessers());\n\t\t\t\t\t\t\tactionPer.setReadyDependency(jobDetail.getReadyDependency());\n\t\t\t\t\t\t\tactionPer.setResources(jobDetail.getResources());\n\t\t\t\t\t\t\tactionPer.setRunType(jobDetail.getRunType());\n\t\t\t\t\t\t\tactionPer.setScheduleType(jobDetail.getScheduleType());\n\t\t\t\t\t\t\tactionPer.setScript(jobDetail.getScript());\n\t\t\t\t\t\t\tactionPer.setStartTime(jobDetail.getStartTime());\n\t\t\t\t\t\t\tactionPer.setStartTimestamp(jobDetail.getStartTimestamp());\n\t\t\t\t\t\t\tactionPer.setStatisStartTime(jobDetail.getStatisStartTime());\n\t\t\t\t\t\t\tactionPer.setStatisEndTime(jobDetail.getStatisEndTime());\n\t\t\t\t\t\t\tactionPer.setStatus(jobDetail.getStatus());\n\t\t\t\t\t\t\tactionPer.setTimezone(jobDetail.getTimezone());\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tSystem.out.println(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59dfJobId: \" + jobDetail.getId()+\";  ActionId: \" +actionPer.getId());\n\t\t\t\t\t\t\t\t\tcontext.getGroupManager().saveJob(actionPer);\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"success\");\n\t\t\t\t\t\t\t\t\tactionDetails.put(actionPer.getId(),actionPer);\n\t\t\t\t\t\t\t} catch (ZeusException e) {\n\t\t\t\t\t\t\t\tSystem.out.println(\"failed\");\n\t\t\t\t\t\t\t\tlog.error(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59dfJobId:\" + jobDetail.getId() + \" \u9422\u71b8\u579aAction\" +actionPer.getId() + \"\u6fb6\u8fab\u89e6\", e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}catch(Exception ex){\n\t\t\t\t\tlog.error(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59df\u9422\u71b8\u579aAction\u6fb6\u8fab\u89e6\",ex);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(jobDetail.getScheduleType() != null && jobDetail.getScheduleType()==2){\n\t\t\t\ttry{\n\t\t\t\t\tif(jobDetail.getDependencies()==null || jobDetail.getDependencies().trim().length()==0){\n\t\t\t\t\t\tDate date = null;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tdate = DateUtil.timestamp2Date(jobDetail.getStartTimestamp(),\n\t\t\t\t\t\t\t\t\tDateUtil.getDefaultTZStr());\n\t\t\t\t\t\t} catch (ParseException e) {\n\t\t\t\t\t\t\tdate = new Date();\n\t\t\t\t\t\t\tlog.error(\"parse job start timestamp to date failed,\", e);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tSimpleDateFormat dfTime=new SimpleDateFormat(\"HHmmss\");\n\t\t\t\t\t\tSimpleDateFormat dfDate=new SimpleDateFormat(\"yyyyMMdd\");\n\t\t\t\t\t\tSimpleDateFormat dfMinute=new SimpleDateFormat(\"mmss\");\n\t\t\t\t\t\tString currentDate = dfDate.format(new Date());\n\t\t\t\t\t\tString startTime = dfTime.format(date);\n\t\t\t\t\t\tString startMinute = dfMinute.format(date);\n\t\t\t\t\t\tif(jobDetail.getCycle().equals(\"day\")){\n\t\t\t\t\t\t\tDate newStartDate = ZeusDateTool.StringToDate(currentDate+startTime, \"yyyyMMddHHmmss\");\n\t\t\t\t\t\t\tCalendar calendar = Calendar.getInstance();\n\t\t\t\t\t\t\tcalendar.setTimeInMillis(newStartDate.getTime());\n\t\t\t\t\t\t\tcalendar.add(Calendar.DATE, -1);\n\t\t\t\t\t\t\tcalendar.getTime();\n\t\t\t\t\t\t\tDate statisStartTime = calendar.getTime();\n\t\t\t\t\t\t\tcalendar.add(Calendar.MINUTE, 60*23+59);\n\t\t\t\t\t\t\tDate statisEndTime = calendar.getTime();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tJobPersistence actionPer = new JobPersistence();\n\t\t\t\t\t\t\tactionPer.setId(Long.parseLong(currentDate+startTime)*10000+jobDetail.getId());//update action id\n\t\t\t\t\t\t\tactionPer.setToJobId(jobDetail.getId());\n\t\t\t\t\t\t\tactionPer.setAuto(jobDetail.getAuto());\n\t\t\t\t\t\t\tactionPer.setConfigs(jobDetail.getConfigs());\n\t\t\t\t\t\t\tactionPer.setCronExpression(jobDetail.getCronExpression());\n\t\t\t\t\t\t\tactionPer.setCycle(jobDetail.getCycle());\n\t\t\t\t\t\t\tString jobDependencies = jobDetail.getDependencies();\n\t\t\t\t\t\t\tactionPer.setDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setJobDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setDescr(jobDetail.getDescr());\n\t\t\t\t\t\t\tactionPer.setGmtCreate(jobDetail.getGmtCreate());\n\t\t\t\t\t\t\tactionPer.setGmtModified(new Date());\n\t\t\t\t\t\t\tactionPer.setGroupId(jobDetail.getGroupId());\n\t\t\t\t\t\t\tactionPer.setHistoryId(jobDetail.getHistoryId());\n\t\t\t\t\t\t\tactionPer.setHost(jobDetail.getHost());\n\t\t\t\t\t\t\tactionPer.setLastEndTime(jobDetail.getLastEndTime());\n\t\t\t\t\t\t\tactionPer.setLastResult(jobDetail.getLastResult());\n\t\t\t\t\t\t\tactionPer.setName(jobDetail.getName());\n\t\t\t\t\t\t\tactionPer.setOffset(jobDetail.getOffset());\n\t\t\t\t\t\t\tactionPer.setOwner(jobDetail.getOwner());\n\t\t\t\t\t\t\tactionPer.setPostProcessers(jobDetail.getPostProcessers());\n\t\t\t\t\t\t\tactionPer.setPreProcessers(jobDetail.getPreProcessers());\n\t\t\t\t\t\t\tactionPer.setReadyDependency(jobDetail.getReadyDependency());\n\t\t\t\t\t\t\tactionPer.setResources(jobDetail.getResources());\n\t\t\t\t\t\t\tactionPer.setRunType(jobDetail.getRunType());\n\t\t\t\t\t\t\tactionPer.setScheduleType(jobDetail.getScheduleType());\n\t\t\t\t\t\t\tactionPer.setScript(jobDetail.getScript());\n\t\t\t\t\t\t\tactionPer.setStartTime(newStartDate);\n\t\t\t\t\t\t\tactionPer.setStartTimestamp(newStartDate.getTime());\n\t\t\t\t\t\t\tactionPer.setStatisStartTime(statisStartTime);\n\t\t\t\t\t\t\tactionPer.setStatisEndTime(statisEndTime);\n\t\t\t\t\t\t\tactionPer.setStatus(jobDetail.getStatus());\n\t\t\t\t\t\t\tactionPer.setTimezone(jobDetail.getTimezone());\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tSystem.out.println(\"\u935b\u3126\u6e61\u6d60\u8bf2\u59df\u951b\u581d\u3049\u951b\u5849obId: \" + jobDetail.getId()+\";  ActionId: \" +actionPer.getId());\n\t\t\t\t\t\t\t\t\tcontext.getGroupManager().saveJob(actionPer);\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"success\");\n\t\t\t\t\t\t\t\t\tactionDetails.put(actionPer.getId(),actionPer);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t} catch (ZeusException e) {\n\t\t\t\t\t\t\t\tSystem.out.println(\"failed\");\n\t\t\t\t\t\t\t\tlog.error(\"\u935b\u3126\u6e61\u6d60\u8bf2\u59df\u951b\u581d\u3049\u951b\u5849obId:\" + jobDetail.getId() + \" \u9422\u71b8\u579aAction\" +actionPer.getId() + \"\u6fb6\u8fab\u89e6\", e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(jobDetail.getCycle().equals(\"hour\")){\n\t\t\t\t\t\t\tfor (int i = 0; i < 24; i++) {\t\t\n\t\t\t\t\t\t\t\tString startHour = String.valueOf(i);\n\t\t\t\t\t\t\t\tif(startHour.trim().length()<2){\n\t\t\t\t\t\t\t\t\tstartHour = \"0\"+startHour;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDate newStartDate = ZeusDateTool.StringToDate(currentDate+startHour+startMinute, \"yyyyMMddHHmmss\");\n\t\t\t\t\t\t\t\tCalendar calendar = Calendar.getInstance();\n\t\t\t\t\t\t\t\tcalendar.setTimeInMillis(newStartDate.getTime());\n\t\t\t\t\t\t\t\tcalendar.add(Calendar.HOUR, -1);\n\t\t\t\t\t\t\t\tcalendar.getTime();\n\t\t\t\t\t\t\t\tDate statisStartTime = calendar.getTime();\n\t\t\t\t\t\t\t\tcalendar.add(Calendar.MINUTE, 59);\n\t\t\t\t\t\t\t\tDate statisEndTime = calendar.getTime();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tJobPersistence actionPer = new JobPersistence();\n\t\t\t\t\t\t\t\tactionPer.setId(Long.parseLong(currentDate+startHour+startMinute)*10000+jobDetail.getId());//update action id\n\t\t\t\t\t\t\t\tactionPer.setToJobId(jobDetail.getId());\n\t\t\t\t\t\t\t\tactionPer.setAuto(jobDetail.getAuto());\n\t\t\t\t\t\t\t\tactionPer.setConfigs(jobDetail.getConfigs());\n\t\t\t\t\t\t\t\tactionPer.setCronExpression(jobDetail.getCronExpression());\n\t\t\t\t\t\t\t\tactionPer.setCycle(jobDetail.getCycle());\n\t\t\t\t\t\t\t\tString jobDependencies = jobDetail.getDependencies();\n\t\t\t\t\t\t\t\tactionPer.setDependencies(jobDependencies);\n\t\t\t\t\t\t\t\tactionPer.setJobDependencies(jobDependencies);\n\t\t\t\t\t\t\t\tactionPer.setDescr(jobDetail.getDescr());\n\t\t\t\t\t\t\t\tactionPer.setGmtCreate(jobDetail.getGmtCreate());\n\t\t\t\t\t\t\t\tactionPer.setGmtModified(new Date());\n\t\t\t\t\t\t\t\tactionPer.setGroupId(jobDetail.getGroupId());\n\t\t\t\t\t\t\t\tactionPer.setHistoryId(jobDetail.getHistoryId());\n\t\t\t\t\t\t\t\tactionPer.setHost(jobDetail.getHost());\n\t\t\t\t\t\t\t\tactionPer.setLastEndTime(jobDetail.getLastEndTime());\n\t\t\t\t\t\t\t\tactionPer.setLastResult(jobDetail.getLastResult());\n\t\t\t\t\t\t\t\tactionPer.setName(jobDetail.getName());\n\t\t\t\t\t\t\t\tactionPer.setOffset(jobDetail.getOffset());\n\t\t\t\t\t\t\t\tactionPer.setOwner(jobDetail.getOwner());\n\t\t\t\t\t\t\t\tactionPer.setPostProcessers(jobDetail.getPostProcessers());\n\t\t\t\t\t\t\t\tactionPer.setPreProcessers(jobDetail.getPreProcessers());\n\t\t\t\t\t\t\t\tactionPer.setReadyDependency(jobDetail.getReadyDependency());\n\t\t\t\t\t\t\t\tactionPer.setResources(jobDetail.getResources());\n\t\t\t\t\t\t\t\tactionPer.setRunType(jobDetail.getRunType());\n\t\t\t\t\t\t\t\tactionPer.setScheduleType(jobDetail.getScheduleType());\n\t\t\t\t\t\t\t\tactionPer.setScript(jobDetail.getScript());\n\t\t\t\t\t\t\t\tactionPer.setStartTime(newStartDate);\n\t\t\t\t\t\t\t\tactionPer.setStartTimestamp(newStartDate.getTime());\n\t\t\t\t\t\t\t\tactionPer.setStatisStartTime(statisStartTime);\n\t\t\t\t\t\t\t\tactionPer.setStatisEndTime(statisEndTime);\n\t\t\t\t\t\t\t\tactionPer.setStatus(jobDetail.getStatus());\n\t\t\t\t\t\t\t\tactionPer.setTimezone(jobDetail.getTimezone());\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"\u935b\u3126\u6e61\u6d60\u8bf2\u59df\u951b\u581f\u6902\u951b\u5849obId: \" + jobDetail.getId()+\";  ActionId: \" +actionPer.getId());\n\t\t\t\t\t\t\t\t\t\tcontext.getGroupManager().saveJob(actionPer);\n\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"success\");\n\t\t\t\t\t\t\t\t\t\tactionDetails.put(actionPer.getId(),actionPer);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t} catch (ZeusException e) {\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"failed\");\n\t\t\t\t\t\t\t\t\tlog.error(\"\u935b\u3126\u6e61\u6d60\u8bf2\u59df\u951b\u581f\u6902\u951b\u5849obId:\" + jobDetail.getId() + \" \u9422\u71b8\u579aAction\" +actionPer.getId() + \"\u6fb6\u8fab\u89e6\", e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}catch(Exception ex){\n\t\t\t\t\tlog.error(\"\u935b\u3126\u6e61\u6d60\u8bf2\u59df\u9422\u71b8\u579aAction\u6fb6\u8fab\u89e6\",ex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic List<List<String>> toClass(InputEvent event) throws IOException {\n        List<List<String>> output = new ArrayList<>();\n        String[] items;\n        try {\n            items = super.getItems(event);\n\n            for (String s : items) {\n                List<String> elements = new ArrayList<>();\n\n                if (m == null) {\n                    m = p.matcher(s);\n                } else {\n                    m.reset(s);\n                }\n                if (m.find() && m.groupCount() > 0) {\n                    for (int i = 1; i < m.groupCount() + 1; i++) {\n                        elements.add(m.group(i));\n                    }\n\n                    output.add(elements);\n                }\n            }\n\n            return output;\n        } catch (Exception e) {\n            throw new IOException(e);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void quadrantRotate(int numquadrants) {\n        switch (numquadrants & 3) {\n        case 0:\n            break;\n        case 1:\n            rotate90();\n            break;\n        case 2:\n            rotate180();\n            break;\n        case 3:\n            rotate270();\n            break;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\n\tprivate void topologicalSort( Collection<TopologicalElement> unmarkedNodes, List<Element> sorted ) {\n\n\t\twhile ( !unmarkedNodes.isEmpty() ) {\n\n\t\t\tTopologicalElement node = unmarkedNodes.iterator().next();\n\t\t\ttopologicalVisit( node, unmarkedNodes, sorted, unmarkedNodes.size() );\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@RequestMapping(value = \"api\", method = {RequestMethod.GET,\n            RequestMethod.POST}, produces = {\"application/json;charset=UTF-8\"})\n    @ResponseBody\n    public String api(HttpServletRequest request, Model model,\n                      @RequestParam(\"WIDout_trade_no\") String out_trade_no,\n                      @RequestParam(\"WIDsubject\") String subject,\n                      @RequestParam(\"WIDtotal_fee\") String total_fee,\n                      @RequestParam(\"WIDshow_url\") String show_url,\n                      @RequestParam(\"WIDbody\") String body\n    ) {\n\n        Map<String, String> sParaTemp = new HashMap<String, String>();\n        sParaTemp.put(\"service\", AlipayConfig.service);\n        sParaTemp.put(\"partner\", AlipayConfig.partner);\n        sParaTemp.put(\"seller_id\", AlipayConfig.seller_id);\n        sParaTemp.put(\"_input_charset\", AlipayConfig.input_charset);\n        sParaTemp.put(\"payment_type\", AlipayConfig.payment_type);\n        sParaTemp.put(\"notify_url\", AlipayConfig.notify_url);\n        sParaTemp.put(\"return_url\", AlipayConfig.return_url);\n        sParaTemp.put(\"out_trade_no\", out_trade_no);\n        sParaTemp.put(\"subject\", subject);\n        sParaTemp.put(\"total_fee\", total_fee);\n        sParaTemp.put(\"show_url\", show_url);\n        sParaTemp.put(\"body\", body);\n\n\n\n\n        Map<String, String> sPara = AlipaySubmit.buildRequestPara(sParaTemp);\n\n        JSONObject ret = JsonUtil.getOkJson();\n        ret.put(\"params\", sPara);\n        return ret.toString();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\n  @Test\n  public void raise() {\n    AtomicReference<Throwable> interrupt = new AtomicReference<>();\n    Promise<Integer> p = Promise.apply(interrupt::set);\n    p.raise(ex);\n    assertEquals(ex, interrupt.get());\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void hookDialogIsOpen() {\n        \n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                UIHelpers.runOnUIThread(true, new Runnable() {\n                    @Override\n                    public void run() {\n                        if (!browser.isDisposed()) {\n                            log.debug(\"Go to the ACS authentication URL: \" + serverSigninURL.toString()); //$NON-NLS-1$\n                            browser.setUrl(serverSigninURL.toString());\n\n                            \n                            notifyToken = new NotifyTokenBrowserFunction(browser.getBrowser(), \"notifyToken\"); //$NON-NLS-1$\n                        }\n                    }\n                });\n            }\n        }).start();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public RealVector solve(final RealLinearOperator a, final RealVector b,\n        final boolean goodb, final double shift) throws NullArgumentException,\n        NonSquareOperatorException, DimensionMismatchException,\n        NonSelfAdjointOperatorException, IllConditionedOperatorException,\n        MaxCountExceededException {\n        MathUtils.checkNotNull(a);\n        final RealVector x = new ArrayRealVector(a.getColumnDimension());\n        return solveInPlace(a, null, b, x, goodb, shift);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" deltaNeutralOpenClose=\" + order.m_deltaNeutralOpenClose +\n        \" deltaNeutralShortSale=\" + order.m_deltaNeutralShortSale +\n        \" deltaNeutralShortSaleSlot=\" + order.m_deltaNeutralShortSaleSlot +\n        \" deltaNeutralDesignatedLocation=\" + order.m_deltaNeutralDesignatedLocation +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void addFooterView(View v, Object data, boolean isSelectable) {\n\n\n\t\tFixedViewInfo info = new FixedViewInfo();\n\t\tinfo.view = v;\n\t\tinfo.data = data;\n\t\tinfo.isSelectable = isSelectable;\n\t\tmFooterViewInfos.add(info);\n\n\t\tif (mAdapter != null && mObserver != null) {\n\t\t\tmObserver.onChanged();\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@RequestMapping(value = \"guid.do\",method= RequestMethod.POST)\n    @ResponseBody\n    public String getGuid(int proxy, Long proxyId, String ip, Integer port, String password, HttpServletResponse response) {\n        Agent agent = new Agent();\n        agent.setProxy(proxy);\n        agent.setIp(ip);\n        agent.setPort(port);\n        agent.setPassword(password);\n\n        if (proxy == Opencron.ConnType.PROXY.getType()) {\n            agent.setProxy(Opencron.ConnType.CONN.getType());\n            if (proxyId != null) {\n                Agent proxyAgent = agentService.getAgent(proxyId);\n                if (proxyAgent == null) {\n                    return null;\n                }\n                agent.setProxyAgent(proxyId);\n                agent.setProxy(Opencron.ConnType.PROXY.getType());\n            }\n        }\n       return executeService.guid(agent);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic final boolean platformRequest( String URL) throws ConnectionNotFoundException\n\t{\n\t\tthrow new ConnectionNotFoundException();\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void actionPerformed(ActionEvent e) {\n                                                                                                int i = 0;\n                                                                                                for (i = 0; i < runners\n                                                                                                    .size(); i++) {\n                                                                                                    if (runners\n                                                                                                        .get(\n                                                                                                            i)\n                                                                                                        .isAlive())\n                                                                                                        break;\n                                                                                                }\n\n                                                                                                if (i == runners\n                                                                                                    .size()) {\n                                                                                                    Display\n                                                                                                        .getDefault()\n                                                                                                        .asyncExec(\n                                                                                                            new Runnable() {\n                                                                                                                public void run() {\n                                                                                                                    stop(true);\n                                                                                                                    setButton(\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true);\n                                                                                                                }\n                                                                                                            });\n\n                                                                                                }\n                                                                                            }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    protected void initEnablementBehaviours( List<EnablementBehaviour> enablementBehaviours ) {\n\t\tenablementBehaviours.add(new WithinLegalLayerBoundsBehaviour());\n\t\tenablementBehaviours.add(new ValidToolDetectionActivator(new Class[] {\n\t\t\t\tGeometry.class,\n\t\t\t\tPolygon.class,\n\t\t\t\tMultiPolygon.class,\n\t\t\t\tLineString.class,\n\t\t\t\tMultiLineString.class }));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@SuppressWarnings(\"unchecked\")\n        public HttpContext.StringArrayList getNames() {\n            if (mNames == null) {\n                mNames = new HttpContext.StringArrayList();\n                Enumeration<String> e = mRequest.getParameterNames();\n                while (e.hasMoreElements()) {\n                    mNames.add(e.nextElement());\n                }\n            }\n            return mNames;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static Graph<ITestNGMethod> topologicalSort(ITestNGMethod[] methods,\n      List<ITestNGMethod> sequentialList, List<ITestNGMethod> parallelList) {\n    Graph<ITestNGMethod> result = new Graph<ITestNGMethod>();\n\n    if (methods.length == 0) {\n      return result;\n    }\n\n    for (ITestNGMethod m : methods) {\n      result.addNode(m);\n\n      List<ITestNGMethod> predecessors = Lists.newArrayList();\n\n      String[] methodsDependedUpon = m.getMethodsDependedUpon();\n      String[] groupsDependedUpon = m.getGroupsDependedUpon();\n      if (methodsDependedUpon.length > 0) {\n        ITestNGMethod[] methodsNamed =\n          MethodHelper.findDependedUponMethods(m, methods);\n        for (ITestNGMethod pred : methodsNamed) {\n          predecessors.add(pred);\n        }\n      }\n      if (groupsDependedUpon.length > 0) {\n        for (String group : groupsDependedUpon) {\n          ITestNGMethod[] methodsThatBelongToGroup =\n            MethodGroupsHelper.findMethodsThatBelongToGroup(m, methods, group);\n          for (ITestNGMethod pred : methodsThatBelongToGroup) {\n            predecessors.add(pred);\n          }\n        }\n      }\n\n      for (ITestNGMethod predecessor : predecessors) {\n        result.addPredecessor(m, predecessor);\n      }\n    }\n\n    result.topologicalSort();\n    sequentialList.addAll(result.getStrictlySortedNodes());\n    parallelList.addAll(result.getIndependentNodes());\n\n    return result;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void addShaped(RecipeDifficulty difficulty, ItemStack result, Object... recipe) {\n        if (difficulty != ALL && RecipeDifficulty.getDifficulty() != difficulty) {\n            return;\n        }\n\n        boolean isOre = false;\n\n        if (!isEnabled(result)) {\n            return;\n        }\n\n        for (int i = 3; i < recipe.length; i++) {\n            if (recipe[i] instanceof String) {\n                isOre = true;\n            }\n\n            if (!isEnabled(recipe[i])) {\n                return;\n            }\n        }\n\n        if (isOre) {\n            IRecipe iRecipe = new ShapedOreRecipe(result, recipe);\n            activeCrafting.add(iRecipe);\n            GameRegistry.addRecipe(iRecipe);\n        }\n        else {\n            activeCrafting.add(GameRegistry.addShapedRecipe(result, recipe));\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public PartitionLoad getLoad() throws IOException{\n        Map<ServerName, List<HRegionInfo>> serverToRegionMap=new HashMap<>();\n        try(RegionLocator rl=connection.getRegionLocator(tableName)){\n            List<HRegionLocation> locations=rl.getAllRegionLocations();\n            for(HRegionLocation location : locations){\n                List<HRegionInfo> info=serverToRegionMap.get(location.getServerName());\n                if(info==null){\n                    info = new LinkedList<>();\n                    serverToRegionMap.put(location.getServerName(),info);\n                }\n                info.add(location.getRegionInfo());\n            }\n        }\n        int totalStoreFileSizeMB = 0;\n        int totalMemstoreSieMB = 0;\n        int storefileIndexSizeMB = 0;\n        try(Admin admin=connection.getAdmin()){\n            ClusterStatus clusterStatus=admin.getClusterStatus();\n            for(Map.Entry<ServerName,List<HRegionInfo>> entry:serverToRegionMap.entrySet()){\n                ServerLoad load=clusterStatus.getLoad(entry.getKey());\n                Map<byte[], RegionLoad> regionsLoad=load.getRegionsLoad();\n                for(HRegionInfo info:entry.getValue()){\n                    RegionLoad rl = regionsLoad.get(info.getRegionName());\n                    totalStoreFileSizeMB+=rl.getStorefileSizeMB();\n                    totalMemstoreSieMB+=rl.getMemStoreSizeMB();\n                    storefileIndexSizeMB+=rl.getStorefileIndexSizeMB();\n                }\n            }\n        }\n        return new HPartitionLoad(getName(),totalStoreFileSizeMB,totalMemstoreSieMB,storefileIndexSizeMB);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" deltaNeutralOpenClose=\" + order.m_deltaNeutralOpenClose +\n        \" deltaNeutralShortSale=\" + order.m_deltaNeutralShortSale +\n        \" deltaNeutralShortSaleSlot=\" + order.m_deltaNeutralShortSaleSlot +\n        \" deltaNeutralDesignatedLocation=\" + order.m_deltaNeutralDesignatedLocation +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintWriter writer, boolean suppressLogin, char eolMarker, boolean showDirection)\n    {\n        __writer = writer;\n        __nologin = suppressLogin;\n        __eolMarker = eolMarker;\n        __directionMarker = showDirection;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n  private Instruction makePhiInstruction(Register r, BasicBlock bb) {\n    int n = bb.getNumberOfIn();\n    Enumeration<BasicBlock> in = bb.getIn();\n    TypeReference type = null;\n    Instruction s = Phi.create(PHI, new RegisterOperand(r, type), n);\n    for (int i = 0; i < n; i++) {\n      RegisterOperand junk = new RegisterOperand(r, type);\n      Phi.setValue(s, i, junk);\n      BasicBlock pred = in.nextElement();\n      Phi.setPred(s, i, new BasicBlockOperand(pred));\n    }\n    s.setSourcePosition(SSA_SYNTH_BCI, ir.getGc().getInlineSequence());\n    return s;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@SuppressLint(\"NewApi\")\n    public static Bitmap fastblur(Context context, Bitmap sentBitmap, int radius) {\n\n        if (VERSION.SDK_INT > 16) {\n            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n            final RenderScript rs = RenderScript.create(context);\n            final Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n                    Allocation.USAGE_SCRIPT);\n            final Allocation output = Allocation.createTyped(rs, input.getType());\n            final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n            script.setRadius(radius );\n            script.setInput(input);\n            script.forEach(output);\n            output.copyTo(bitmap);\n            return bitmap;\n        }\n\n\n\n        Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n        if (radius < 1) {\n            return (null);\n        }\n\n        int w = bitmap.getWidth();\n        int h = bitmap.getHeight();\n\n        int[] pix = new int[w * h];\n        Log.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n        bitmap.getPixels(pix, 0, w, 0, 0, w, h);\n\n        int wm = w - 1;\n        int hm = h - 1;\n        int wh = w * h;\n        int div = radius + radius + 1;\n\n        int r[] = new int[wh];\n        int g[] = new int[wh];\n        int b[] = new int[wh];\n        int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;\n        int vmin[] = new int[Math.max(w, h)];\n\n        int divsum = (div + 1) >> 1;\n        divsum *= divsum;\n        int dv[] = new int[256 * divsum];\n        for (i = 0; i < 256 * divsum; i++) {\n            dv[i] = (i / divsum);\n        }\n\n        yw = yi = 0;\n\n        int[][] stack = new int[div][3];\n        int stackpointer;\n        int stackstart;\n        int[] sir;\n        int rbs;\n        int r1 = radius + 1;\n        int routsum, goutsum, boutsum;\n        int rinsum, ginsum, binsum;\n\n        for (y = 0; y < h; y++) {\n            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n            for (i = -radius; i <= radius; i++) {\n                p = pix[yi + Math.min(wm, Math.max(i, 0))];\n                sir = stack[i + radius];\n                sir[0] = (p & 0xff0000) >> 16;\n                sir[1] = (p & 0x00ff00) >> 8;\n                sir[2] = (p & 0x0000ff);\n                rbs = r1 - Math.abs(i);\n                rsum += sir[0] * rbs;\n                gsum += sir[1] * rbs;\n                bsum += sir[2] * rbs;\n                if (i > 0) {\n                    rinsum += sir[0];\n                    ginsum += sir[1];\n                    binsum += sir[2];\n                } else {\n                    routsum += sir[0];\n                    goutsum += sir[1];\n                    boutsum += sir[2];\n                }\n            }\n            stackpointer = radius;\n\n            for (x = 0; x < w; x++) {\n\n                r[yi] = dv[rsum];\n                g[yi] = dv[gsum];\n                b[yi] = dv[bsum];\n\n                rsum -= routsum;\n                gsum -= goutsum;\n                bsum -= boutsum;\n\n                stackstart = stackpointer - radius + div;\n                sir = stack[stackstart % div];\n\n                routsum -= sir[0];\n                goutsum -= sir[1];\n                boutsum -= sir[2];\n\n                if (y == 0) {\n                    vmin[x] = Math.min(x + radius + 1, wm);\n                }\n                p = pix[yw + vmin[x]];\n\n                sir[0] = (p & 0xff0000) >> 16;\n                sir[1] = (p & 0x00ff00) >> 8;\n                sir[2] = (p & 0x0000ff);\n\n                rinsum += sir[0];\n                ginsum += sir[1];\n                binsum += sir[2];\n\n                rsum += rinsum;\n                gsum += ginsum;\n                bsum += binsum;\n\n                stackpointer = (stackpointer + 1) % div;\n                sir = stack[(stackpointer) % div];\n\n                routsum += sir[0];\n                goutsum += sir[1];\n                boutsum += sir[2];\n\n                rinsum -= sir[0];\n                ginsum -= sir[1];\n                binsum -= sir[2];\n\n                yi++;\n            }\n            yw += w;\n        }\n        for (x = 0; x < w; x++) {\n            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n            yp = -radius * w;\n            for (i = -radius; i <= radius; i++) {\n                yi = Math.max(0, yp) + x;\n\n                sir = stack[i + radius];\n\n                sir[0] = r[yi];\n                sir[1] = g[yi];\n                sir[2] = b[yi];\n\n                rbs = r1 - Math.abs(i);\n\n                rsum += r[yi] * rbs;\n                gsum += g[yi] * rbs;\n                bsum += b[yi] * rbs;\n\n                if (i > 0) {\n                    rinsum += sir[0];\n                    ginsum += sir[1];\n                    binsum += sir[2];\n                } else {\n                    routsum += sir[0];\n                    goutsum += sir[1];\n                    boutsum += sir[2];\n                }\n\n                if (i < hm) {\n                    yp += w;\n                }\n            }\n            yi = x;\n            stackpointer = radius;\n            for (y = 0; y < h; y++) {\n                pix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8) | dv[bsum];\n\n                rsum -= routsum;\n                gsum -= goutsum;\n                bsum -= boutsum;\n\n                stackstart = stackpointer - radius + div;\n                sir = stack[stackstart % div];\n\n                routsum -= sir[0];\n                goutsum -= sir[1];\n                boutsum -= sir[2];\n\n                if (x == 0) {\n                    vmin[y] = Math.min(y + r1, hm) * w;\n                }\n                p = x + vmin[y];\n\n                sir[0] = r[p];\n                sir[1] = g[p];\n                sir[2] = b[p];\n\n                rinsum += sir[0];\n                ginsum += sir[1];\n                binsum += sir[2];\n\n                rsum += rinsum;\n                gsum += ginsum;\n                bsum += binsum;\n\n                stackpointer = (stackpointer + 1) % div;\n                sir = stack[stackpointer];\n\n                routsum += sir[0];\n                goutsum += sir[1];\n                boutsum += sir[2];\n\n                rinsum -= sir[0];\n                ginsum -= sir[1];\n                binsum -= sir[2];\n\n                yi += w;\n            }\n        }\n\n        Log.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n        bitmap.setPixels(pix, 0, w, 0, 0, w, h);\n        return (bitmap);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void requestListViewData() {\n        mBllUser = new BusinessUser(this);\n        mBllServer = new BusinessServer(this);\n        mListMap = new ArrayList<Map<String, Object>>();\n        mBllUser.userServerOrderList((position + 1) + \"\", pageNum + \"\");\n\n\n            mAdapterNotake = new AdapterFrgServerOrderComplete(getActivity(), this, mListMap);\n            mListView.setAdapter(mAdapterNotake);\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static <P extends IUnlistedProperty<T>, T> T getStatePropertySafely(@Nullable TileEntity te, Class<? extends Block> block, P property, T defaultVal) {\n\t\treturn getStatePropertySafely(te, block, property, defaultVal, false, false);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        \n        byte[] byteArray = new byte[bytes.size()]; \n        bytes.getBytes(byteArray, 0);\n        return Utf8Utils.utf8BytesToString(byteArray);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static <V> Iterable<V> topologicalSort(\n            @Nonnull Map<V, List<V>> adjacencyMap, @Nonnull Function<V, String> vertexNameFn\n    ) {\n        Map<V, TarjanVertex<V>> tarjanVertices =\n                adjacencyMap.keySet().stream()\n                            .map(v -> entry(v, new TarjanVertex<>(v)))\n                            .collect(toMap(Entry::getKey, Entry::getValue));\n        Map<TarjanVertex<V>, List<TarjanVertex<V>>> tarjanAdjacencyMap =\n                adjacencyMap.entrySet().stream()\n                            .collect(toMap(e -> tarjanVertices.get(e.getKey()),\n                                           e -> e.getValue().stream()\n                                                 .map(tarjanVertices::get)\n                                                 .collect(toList())));\n        return new TopologicalSorter<>(tarjanAdjacencyMap, vertexNameFn).go();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic BlameGenerator push(String description, byte[] contents)\n\t\t\tthrows IOException {\n\t\treturn push(description, new RawText(contents));\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        \n        byte[] byteArray = new byte[bytes.size()]; \n        bytes.getBytes(byteArray, 0);\n        return Utf8Utils.utf8BytesToString(byteArray);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic WebSocketServer( InetSocketAddress address , int decodercount , List<Draft> drafts ) {\n\t\tthis( address, decodercount, drafts, new HashSet<WebSocket>() );\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void setJoinType(Player player, int joinType)\n\t{\n\t\tLegion legion = player.getLegion();\n\t\t\n\t\tif (legion == null)\n\t\t\treturn;\n\n\t\tif (legionRestrictions.canChangeLegionJoinSetting(player))\n\t\t{\n\t\t\tlegion.setJoinType(joinType);\n\t\t\tPacketSendUtility.sendPacket(player, new SM_LEGION_EDIT(0x0D , legion));\n\t\t\tDAOManager.getDAO(LegionDAO.class).updateLegionDescription(legion);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void main(String[] args){\n\t\ttry {\n\t\t\t@SuppressWarnings(\"deprecation\")\n\t\t\tHBaseConfiguration conf = new HBaseConfiguration();\n\t\t\tconf.set(\"hbase.zookeeper.quorum\", \"den3dhdptk01.int.photobucket.com\");\n\t\t\tconf.set(\"hbase.zookeeper.property.clientPort\", \"2181\");\n\t\t\tconf.setInt(\"hbase.client.retries.number\", 7);\n\t\t\tconf.setInt(\"ipc.client.connect.max.retries\", 3);\n\n\t\t\t\n\t\t\t\n\t\t\tHTablePool hTablePool = new HTablePool(conf, 10);\n\t\t\t\n\t\t\tHTableInterface seq = hTablePool.getTable(\"DocKeyIdMap\");\t\t\t\n\n\t\t\tString globalId = \"0089210673:0000540572:309AB023-orig.jpg\";\n\t\t\tGet get = new Get(Bytes.toBytes(globalId));\n\t\t\t\n\t\t\tResult result = seq.get(get);\n\t\t\t\n\t\t\tbyte[] docId = result.getValue(Bytes.toBytes(\"docId\"), Bytes.toBytes(\"\"));\n\n\t\t\tint docNumber = 384900472;\n\t\t\t\n\t\t\tSolrInputDocument doc = new SolrInputDocument();\t\t\t\n\t\t\tif(docId != null) {\n\t\t\t\tSystem.out.println(Bytes.toInt(docId));\n\t\t\t\tdocNumber = Bytes.toInt(docId);\n\t\t\t\tdoc.addField(\"edit\", true);\n\t\t\t}\n\t\t\t\n\t\t\tCommonsHttpSolrServer solbaseServer = new CommonsHttpSolrServer(\"http://localhost:8080/solbase/pbimages~1\");\n\n\t\t\tdoc.addField(\"docId\", docNumber);\n\t\t\tdoc.addField(\"global_uniq_id\", globalId);\n\t\t\tdoc.addField(\"title\", \"tom\");\n\t\t\tdoc.addField(\"description\", \"Uploaded with Snapbucket\");\n\t\t\tdoc.addField(\"tags\", \"Snapbucket\");\n\t\t\tdoc.addField(\"path\", \"/albums/tt262/koh_tester/309AB021-orig.jpg\");\n\t\t\tdoc.addField(\"subdomain\", \"i618\");\n\t\t\tdoc.addField(\"lastModified\", new Integer(SolbaseUtil.getEpochSinceSolbase(System.currentTimeMillis() / 60000)).toString());\n\t\t\tdoc.addField(\"media_type\", new Integer(1).toString());\n\t\t\tdoc.addField(\"total_view_count\", new Long(10).toString());\n\t\t\tdoc.addField(\"sevendays_view_count\", new Integer(5).toString());\n\t\t\tdoc.addField(\"total_likes_count\", new Long(5).toString());\n\t\t\tdoc.addField(\"sevendays_likes_count\", new Integer(1).toString());\n\t\t\tdoc.addField(\"total_comments_count\", new Long(5).toString());\n\t\t\tdoc.addField(\"sevendays_comments_count\", new Integer(1).toString());\n\t\t\tdoc.addField(\"contents\", \"audi tom solbase Uploaded with Snapbucket \");\n\t\t\tdoc.addField(\"updateStore\", true);\n\t\t\t\n\t\t\tsolbaseServer.add(doc);\n\n\t\t} catch (MalformedURLException e) {\n\n\t\t} catch (SolrServerException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic <A extends Closeable> A api(Class<A> apitype, final String provider, final String credId, final String url,\n            final String zones) {\n        return api(apitype, provider, credId, buildJcloudsOverrides(url, zones, false));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void setJoinType(Player player, int joinType)\n\t{\n\t\tLegion legion = player.getLegion();\n\t\t\n\t\tif (legion == null)\n\t\t\treturn;\n\n\t\tif (legionRestrictions.canChangeLegionJoinSetting(player))\n\t\t{\n\t\t\tlegion.setJoinType(joinType);\n\t\t\tPacketSendUtility.sendPacket(player, new SM_LEGION_EDIT(0x0D , legion));\n\t\t\tDAOManager.getDAO(LegionDAO.class).updateLegionDescription(legion);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Kernel(int width, int height, double factor, double data[]) {\n        this(width, height, (width - 1) / 2, (height - 1) / 2, factor, data);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(java.lang.String xmlAsString) throws org.apache.xmlbeans.XmlException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( xmlAsString, type, null ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    @Nonnull\n    public ItemStack removeStackFromSlot (int index) {\n        if (!tableItemStacks[index].isEmpty()) {\n            ItemStack stack = tableItemStacks[index];\n            tableItemStacks[index] = ItemStack.EMPTY;\n            markDirty();\n            return stack;\n        }\n\n        return ItemStack.EMPTY;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n\tpublic void testBlock () throws ValidationException\n\t{\n\t\tBlk b1 =\n\t\t\t\tBlk.fromWireDump (\"\");\n\t\tassertTrue (b1.getHash ().equals (\"0000000000000449ee5b94ba7a051caffff5c23d6a03335f6e20e3985b5ffa61\"));\n\t\tBlk b2 = Blk.fromWireDump (b1.toWireDump ());\n\t\tb2.computeHash ();\n\t\tassertTrue (b1.getHash ().equals (b2.getHash ()));\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void paintIcon(Component c, Graphics g, int x, int y) {\n            AbstractButton b = (AbstractButton) c;\n            ButtonModel model = b.getModel();\n\n            int w = getIconWidth();\n            int h = getIconHeight();\n\n            boolean isPressed = model.isPressed();\n            boolean isArmed = model.isArmed();\n            boolean isEnabled = model.isEnabled();\n            boolean isSelected = model.isSelected();\n\n            boolean checkIn = ((isPressed &&\n                                !isArmed   &&\n                                isSelected) ||\n                               (isPressed &&\n                                isArmed   &&\n                                !isSelected)\n                               ||\n                               (!isPressed  &&\n                                isArmed    &&\n                                isSelected  ||\n                                (!isPressed &&\n                                 !isArmed  &&\n                                 isSelected)));\n\n            if (checkIn){\n                g.setColor(shadow);\n                g.drawLine(x+5,y+0,x+8,y+0);\n                g.drawLine(x+3,y+1,x+4,y+1);\n                g.drawLine(x+9,y+1,x+9,y+1);\n                g.drawLine(x+2,y+2,x+2,y+2);\n                g.drawLine(x+1,y+3,x+1,y+3);\n                g.drawLine(x,y+4,x,y+9);\n                g.drawLine(x+1,y+10,x+1,y+10);\n                g.drawLine(x+2,y+11,x+2,y+11);\n                g.setColor(highlight);\n                g.drawLine(x+3,y+12,x+4,y+12);\n                g.drawLine(x+5,y+13,x+8,y+13);\n                g.drawLine(x+9,y+12,x+10,y+12);\n                g.drawLine(x+11,y+11,x+11,y+11);\n                g.drawLine(x+12,y+10,x+12,y+10);\n                g.drawLine(x+13,y+9,x+13,y+4);\n                g.drawLine(x+12,y+3,x+12,y+3);\n                g.drawLine(x+11,y+2,x+11,y+2);\n                g.drawLine(x+10,y+1,x+10,y+1);\n                g.setColor(dot);\n                g.fillRect(x+4,y+5,6,4);\n                g.drawLine(x+5,y+4,x+8,y+4);\n                g.drawLine(x+5,y+9,x+8,y+9);\n            }\n            else {\n                g.setColor(highlight);\n                g.drawLine(x+5,y+0,x+8,y+0);\n                g.drawLine(x+3,y+1,x+4,y+1);\n                g.drawLine(x+9,y+1,x+9,y+1);\n                g.drawLine(x+2,y+2,x+2,y+2);\n                g.drawLine(x+1,y+3,x+1,y+3);\n                g.drawLine(x,y+4,x,y+9);\n                g.drawLine(x+1,y+10,x+1,y+10);\n                g.drawLine(x+2,y+11,x+2,y+11);\n\n                g.setColor(shadow);\n                g.drawLine(x+3,y+12,x+4,y+12);\n                g.drawLine(x+5,y+13,x+8,y+13);\n                g.drawLine(x+9,y+12,x+10,y+12);\n                g.drawLine(x+11,y+11,x+11,y+11);\n                g.drawLine(x+12,y+10,x+12,y+10);\n                g.drawLine(x+13,y+9,x+13,y+4);\n                g.drawLine(x+12,y+3,x+12,y+3);\n                g.drawLine(x+11,y+2,x+11,y+2);\n                g.drawLine(x+10,y+1,x+10,y+1);\n\n            }\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public void onPlayerStateChange(PlayerState oldState, PlayerState newState, Bundle extra) {\n\n        mPrevState = mCurrentState;\n        mCurrentState = newState;\n        Log.d(TAG, \"State change event! Oldstate= \" + oldState + \" NewState= \" + newState);\n        if (mPrevState == mCurrentState) {\n            Log.w(TAG, \"Duplicate state change message!!! \");\n        }\n        Log.d(TAG, \"State change event! OldState= \" + oldState + \" NewState= \" + newState);\n        switch (newState) {\n            case IDLE:\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mIsContentChangeRequested) {\n                    openContent(mSelectedContent);\n                }\n                break;\n            case OPENING:\n                break;\n            case OPENED:\n                if (mPlayer != null && mIsActivityResumed) {\n                    mPlayer.prepare();\n                }\n                else {\n                    mIsContentChangeRequested = false;\n                }\n                if (mIsContentSupportCC && mIsCloseCaptionEnabled) {\n                    if (mPlaybackOverlayFragment != null) {\n                        mPlaybackOverlayFragment.updateCCButtonState(true, true);\n                    }\n                    if (mPlayer != null) {\n                        mPlayer.enableTextTrack(TrackType.SUBTITLE, true);\n                    }\n                }\n                break;\n            case PREPARING:\n                if (mPlaybackOverlayFragment != null && mPlaybackOverlayFragment.getView() !=\n                        null) {\n                    mPlaybackOverlayFragment.getView().setVisibility(View.VISIBLE);\n                }\n                break;\n            case READY:\n                mPlaybackState = LeanbackPlaybackState.PAUSED;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(false);\n                }\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mPrevState == PlayerState.PREPARING) {\n                    if (mPlaybackOverlayFragment != null) {\n                        mPlaybackOverlayFragment.updatePlayback();\n                        mPlaybackOverlayFragment.startProgressAutomation();\n                    }\n                    if (mCurrentPlaybackPosition > 0) {\n                        mPlayer.seekTo(mCurrentPlaybackPosition);\n                    }\n                    if (mAutoPlay || mIsContentChangeRequested) {\n                        play();\n                        mAutoPlay = false;\n                        if (mIsContentChangeRequested) {\n                            mIsContentChangeRequested = false;\n                        }\n                    }\n                }\n                else if (mAudioFocusState == AudioFocusState.NoFocusNoDuck) {\n                    play();\n                }\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PAUSED);\n                }\n                break;\n            case PLAYING:\n                mPlaybackState = LeanbackPlaybackState.PLAYING;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(true);\n                }\n                hideProgress();\n                mWindow.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PLAYING);\n                }\n                break;\n            case BUFFERING:\n                showProgress();\n                break;\n            case SEEKING:\n                showProgress();\n                break;\n            case ENDED:\n                hideProgress();\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.playbackFinished();\n                }\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.COMPLETED);\n                }\n                break;\n            case CLOSING:\n\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.stopProgressAutomation();\n                }\n                if (!isContentLive(mSelectedContent)) {\n                    trackContentFinished(mCurrentContent, mCurrentPlaybackPosition);\n                }\n                break;\n            case ERROR:\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                Log.e(TAG, \"Player encountered an error!\");\n                break;\n            default:\n                Log.e(TAG, \"Unknown state!!!!!\");\n                break;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void insert(int itemNum, Item item, Style itemStyle)\n\t{\n\t\tif (itemNum == this.container.size()) {\n\t\t\tthis.container.add(item, itemStyle);\n\t\t} else {\n\t\t\tif (itemStyle != null) {\n\t\t\t\titem.setStyle(itemStyle);\n\t\t\t}\n\t\t\tthis.container.add( itemNum, item );\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        public static String getActionName(ActionListener listener)\n        {\n                Enumeration en = getActions();\n                while(en.hasMoreElements())\n                {\n                        String name = (String)en.nextElement();\n                        ActionListener _listener = getAction(name);\n                        if(_listener == listener) {\n                                return name;\n                        }\n                }\n                return null;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + order.m_lmtPrice +\n        \" auxPrice=\" + order.m_auxPrice +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + order.m_minQty +\n        \" percentOffset=\" + order.m_percentOffset +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + order.m_nbboPriceCap +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + order.m_startingPrice +\n        \" stockRefPrice=\" + order.m_stockRefPrice +\n        \" delta=\" + order.m_delta +\n        \" stockRangeLower=\" + order.m_stockRangeLower +\n        \" stockRangeUpper=\" + order.m_stockRangeUpper +\n        \" volatility=\" + order.m_volatility +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + order.m_trailStopPrice +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + order.m_basisPoints;\n        \t\tmsg += \" basisPointsType=\" + order.m_basisPointsType;\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testNotEquals() {\n        BitSet bset = new BitSet();\n        bset.set(100);\n\n        ImmutableBitSet ibset = new ImmutableBitSet(bset);\n\n        BitSet bset2 = new BitSet();\n        bset2.set(101);\n\n        ImmutableBitSet ibset2 = new ImmutableBitSet(bset2);\n\n        assertFalse(ibset.equals(ibset2));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Transient\n    public String[] getFieldNames() {\n        return new String[] {\n                \"id\",\n                \"userName\",\n                \"password\",\n                \"status\",\n                \"subscriberStatus\",\n                \"deleted\",\n                \"accountExpired\",\n                \"accountLocked\",\n                \"passwordExpired\",\n                \"lastLogin\",\n                \"lastStatusChange\",\n                \"createdDateTime\",\n                \"language\",\n                \"currency\",\n\n                \"invoiceDeliveryMethod\",\n                \"autoPaymentType\",\n                \"notes\",\n                \"parentUserId\",\n                \"isParent\",\n                \"invoiceIfChild\",\n                \"excludeAging\",\n                \"balanceType\",\n                \"dynamicBalance\",\n                \"creditLimit\",\n                \"autoRecharge\",\n\n                \"organizationName\",\n                \"title\",\n                \"firstName\",\n                \"lastName\",\n                \"initial\",\n                \"address1\",\n                \"address2\",\n                \"city\",\n                \"stateProvince\",\n                \"postalCode\",\n                \"countryCode\",\n                \"phoneNumber\",\n                \"faxNumber\",\n                \"email\"\n        };\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate Class primitiveType(char c) {\n        switch(c) {\n        case 66: \n            return Byte.TYPE;\n\n        case 67: \n            return Character.TYPE;\n\n        case 68: \n            return Double.TYPE;\n\n        case 70: \n            return Float.TYPE;\n\n        case 73: \n            return Integer.TYPE;\n\n        case 74: \n            return Long.TYPE;\n\n        case 83: \n            return Short.TYPE;\n\n        case 90: \n            return Boolean.TYPE;\n        }\n        return null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
