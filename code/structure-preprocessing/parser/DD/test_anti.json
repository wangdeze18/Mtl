{"code": "class EmptyClass {\n\n\n        public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps) {\n            return setImageAttachmentsForObject(objectProperty, bitmaps, false);\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void addFooterView(View v, Object data, boolean isSelectable) {\n\t\tFixedViewInfo info = new FixedViewInfo();\n\t\tinfo.view = v;\n\t\tinfo.data = data;\n\t\tinfo.isSelectable = isSelectable;\n\t\tmFooterViewInfos.add(info);\n\n\t\tif (mDataSetObserver != null) {\n\t\t\tmDataSetObserver.onChanged();\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic List<String> getUserConfigHelp() {\n\t\tList<String> params =new ArrayList<String>();\n\t\tString helpMaxGap = \"This parameter configures the maximum gap size G, that is applied during the AFP extension. The larger the value, the longer the calculation time can become, Default value is 30. Set to 0 for no limit. \" ;\n\t\tString helpWinSize = \"This configures the fragment size m of Aligned Fragment Pairs (AFPs).\";\n\t\tString helpScoring = \"Which scoring function to use.\";\n\t\tparams.add(helpMaxGap);\n\t\tparams.add(helpWinSize);\n\t\tparams.add(helpScoring);\n\t\tparams.add(\"The maximum RMSD at which to stop alignment optimization. (default: unlimited=99)\");\n\t\tparams.add(\"Gap opening penalty during alignment optimization.\");\n\t\tparams.add(\"Gap extension penalty during alignment optimization.\");\n\t\treturn params;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(java.io.Reader r) throws org.apache.xmlbeans.XmlException, java.io.IOException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( r, type, null ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\tpublic String convertGSNTypeToLocalType(DataField gsnType) {\n\t\tString convertedType = null;\n\t\tswitch (gsnType.getDataTypeID()) {\n\t\t\tcase DataTypes.CHAR:\n\t\t\tcase DataTypes.VARCHAR:\n\t\t\t\tif (gsnType.getType().trim().equalsIgnoreCase(\"string\"))\n\t\t\t\t\tconvertedType = \"TEXT\";\n\t\t\t\telse\n\t\t\t\t\tconvertedType = gsnType.getType();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconvertedType = DataTypes.TYPE_NAMES[gsnType.getDataTypeID()];\n\t\t\t\tbreak;\n\t\t}\n\t\treturn convertedType;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintWriter writer, boolean suppressLogin, char eolMarker, boolean showDirection)\n    {\n        __writer = writer;\n        __nologin = suppressLogin;\n        __eolMarker = eolMarker;\n        __directionMarker = showDirection;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic int\n    normalizeMe() throws IllegalArgumentException {\n        int src;\n        int wordcount = 0;\n        int bitcount  = 0;\n        int v = 0;\n        for ( src= nWords-1 ; src >= 0 && (v=data[src]) == 0 ; src--){\n            wordcount += 1;\n        }\n        if ( src < 0 ){\n            throw new IllegalArgumentException(\"zero value\");\n        }\n        \n        nWords -= wordcount;\n        \n        if ( (v & 0xf0000000) != 0 ){\n            for( bitcount = 32 ; (v & 0xf0000000) != 0 ; bitcount-- )\n                v >>>= 1;\n        } else {\n            while ( v <= 0x000fffff ){\n                v <<= 8;\n                bitcount += 8;\n            }\n            while ( v <= 0x07ffffff ){\n                v <<= 1;\n                bitcount += 1;\n            }\n        }\n        if ( bitcount != 0 )\n            lshiftMe( bitcount );\n        return bitcount;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test public void\n    testBlock() throws Exception {\n        CompilationUnit cu = new CompilationUnit(\"AstTests.java\");\n\n        final PackageMemberClassDeclaration clazz = AstTest.createClass(cu);\n\n        List<Java.Statement> body = new ArrayList<Statement>();\n\n        Block sub = new Block(AstTest.getLocation());\n        sub.addStatement(AstTest.createVarDecl(\"x\", \"2.0\"));\n\n        body.add(sub);\n        body.add(\n            new ReturnStatement(\n                AstTest.getLocation(),\n                new Java.BinaryOperation(\n                    AstTest.getLocation(),\n                    AstTest.createVariableRef(\"x\"),\n                    \"*\",\n                    AstTest.createIntegerLiteral(\"3\")\n                )\n            )\n        );\n\n        AstTest.createMethod(clazz, body, AstTest.createDoubleType());\n\n        try {\n            AstTest.compileAndEval(cu);\n            Assert.fail(\"Block must limit the scope of variables in it\");\n        } catch (CompileException ex) {\n            Assert.assertTrue(ex.getMessage().endsWith(\"Expression \\\"x\\\" is not an rvalue\"));\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic LevelGen(int w, int h, int featureSize) {\n\t\tthis.w = w; // assigns the width of the map\n\t\tthis.h = h; // assigns the height of the map\n\n\t\tvalues = new double[w * h]; // creates the size of the value array (width * height)\n\n\t\tfor (int y = 0; y < w; y += featureSize) { // Loops through the width of the map, going up by the featureSize value each time. \n\t\t\tfor (int x = 0; x < w; x += featureSize) { // Loops through the width of the map a second time, going up by the featureSize value each time.\n\t\t\t\tsetSample(x, y, random.nextFloat() * 2 - 1); // sets a random value at a x and y point.\n\t\t\t}\n\t\t}\n\n\t\tint stepSize = featureSize; // stepSize is the featureSize that is given when you call the method. \n\t\tdouble scale = 1.0 / w; // scale of the map\n\t\tdouble scaleMod = 1; // scale modification\n\t\tdo { //do this...\n\t\t\tint halfStep = stepSize / 2;  // Half of stepSize\n\t\t\tfor (int y = 0; y < w; y += stepSize) { // Loops through the width value of the map, going up by the stepSize value each time. \n\t\t\t\tfor (int x = 0; x < w; x += stepSize) { // Loops through the width value of the map, going up by the stepSize value each time. \n\t\t\t\t\tdouble a = sample(x, y); // gets a sample value from the x and y value.\n\t\t\t\t\tdouble b = sample(x + stepSize, y); // gets a sample value from the next value of x, and the current y value.\n\t\t\t\t\tdouble c = sample(x, y + stepSize); // gets a sample value from the current x, and next value of y.\n\t\t\t\t\tdouble d = sample(x + stepSize, y + stepSize); // gets a sample value from the next x value and next y value.\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tdouble e = (a + b + c + d) / 4.0 + (random.nextFloat() * 2 - 1) * stepSize * scale;\n\t\t\t\t\t\n\t\t\t\t\tsetSample(x + halfStep, y + halfStep, e); // sets the value e at the next x value and next y value. repeat these until loop is done.\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int y = 0; y < w; y += stepSize) { // Loops through the width value of the map, going up by the stepSize value each time. \n\t\t\t\tfor (int x = 0; x < w; x += stepSize) { // Loops through the width value of the map, going up by the stepSize value each time. \n\t\t\t\t\tdouble a = sample(x, y); // gets a sample value from the x and y value.\n\t\t\t\t\tdouble b = sample(x + stepSize, y); // gets a sample value from the next value of x, and the current y value.\n\t\t\t\t\tdouble c = sample(x, y + stepSize); // gets a sample value from the current x, and next value of y.\n\t\t\t\t\tdouble d = sample(x + halfStep, y + halfStep); // gets a sample value from the next x value and next y value.\n\t\t\t\t\tdouble e = sample(x + halfStep, y - halfStep); // gets a sample value from the next x value and the previous y value.\n\t\t\t\t\tdouble f = sample(x - halfStep, y + halfStep); // gets a sample value from the previous x value and the next y value.\n\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tdouble H = (a + b + d + e) / 4.0 + (random.nextFloat() * 2 - 1) * stepSize * scale * 0.5;\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tdouble g = (a + c + d + f) / 4.0 + (random.nextFloat() * 2 - 1) * stepSize * scale * 0.5;\n\t\t\t\t\t\n\t\t\t\t\tsetSample(x + halfStep, y, H); // sets the H value at the half-way position of the next x value, and the current y value. \n\t\t\t\t\tsetSample(x, y + halfStep, g); // sets the g value at the current x value, and half-way position of the next y value.\n\t\t\t\t}\n\t\t\t}\n\t\t\tstepSize /= 2; // cuts the stepSize value in half.\n\t\t\tscale *= (scaleMod + 0.8); // Multiplies the scale by (scaleMod value + 0.8)\n\t\t\tscaleMod *= 0.3; // multiplies the scaleMod by 0.3\n\t\t} while (stepSize > 1); // ...if stepSize is larger than 1.\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic boolean handleControlWord(RtfCtrlWordData ctrlWordData) {\n\t\tif(ctrlWordData.ctrlWord.equals(\"blue\")) this.setBlue(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"red\")) this.setRed(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"green\")) this.setGreen(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"cshade\")) this.setShade(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"ctint\")) this.setTint(ctrlWordData.intValue());\n\treturn true;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static final void writeIntLittleEndian(byte[] array, int pos,\n\t    int value) {\n\tarray[pos + 3] = (byte) (value >>> 24);\n\tarray[pos + 2] = (byte) (value >>> 16);\n\tarray[pos + 1] = (byte) (value >>> 8);\n\tarray[pos] = (byte) (value & 0xFF);\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static void timestampValueInsertSelect(Connection conn, TimeUnit databasePrecision) throws Exception {\n        timestampValueInsertSelect(conn, databasePrecision, null);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void initStatement(int type, int concurrency, int holdability,\n                               int autoGeneratedKeys, String[] columnNames,\n                               int[] columnIndexes) throws SqlException {\n        switch (type) {\n        case java.sql.ResultSet.TYPE_FORWARD_ONLY:\n        case java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE:\n        case java.sql.ResultSet.TYPE_SCROLL_SENSITIVE:\n            resultSetType_ = type;\n            break;\n        default:\n            throw new SqlException(agent_.logWriter_, \n                new ClientMessageId(SQLState.INVALID_API_PARAMETER),\n                new Integer(type), \"type\", \"createStatement()\");\n        }\n\n        switch (concurrency) {\n        case java.sql.ResultSet.CONCUR_READ_ONLY:\n        case java.sql.ResultSet.CONCUR_UPDATABLE:\n            resultSetConcurrency_ = concurrency;\n            break;\n        default:\n            throw new SqlException(agent_.logWriter_, \n                new ClientMessageId(SQLState.INVALID_API_PARAMETER),\n                new Integer(concurrency), \"concurrency\",\n                \"createStatement()\");\n        }\n\n        switch (holdability) {\n        case ResultSet.CLOSE_CURSORS_AT_COMMIT:\n        case ResultSet.HOLD_CURSORS_OVER_COMMIT:\n            resultSetHoldability_ = holdability;\n            break;\n        default:\n            throw new SqlException(agent_.logWriter_,\n                new ClientMessageId(SQLState.INVALID_API_PARAMETER),\n                new Integer(holdability), \"holdability\",\n                \"createStatement()\");\n        }\n\n        switch (autoGeneratedKeys) {\n        case java.sql.Statement.NO_GENERATED_KEYS:\n        case java.sql.Statement.RETURN_GENERATED_KEYS:\n            autoGeneratedKeys_ = autoGeneratedKeys;\n            break;\n        default:\n            throw new SqlException(agent_.logWriter_, \n                new ClientMessageId(SQLState.INVALID_API_PARAMETER),\n                new Integer(autoGeneratedKeys),\n                \"autoGeneratedKeys\", \"createStatement\");\n        }\n\n        generatedKeysColumnNames_ = columnNames;\n        generatedKeysColumnIndexes_ = columnIndexes;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void quickSendFail( int classHandle, Map<Integer,byte[]> parameters, byte[] tag )\n\t{\n\t\ttry\n\t\t{\n\t\t\tSuppliedParameters toSend = TestSetup.getRTIFactory().createSuppliedParameters();\n\t\t\tif( parameters != null )\n\t\t\t{\n\t\t\t\tfor( Integer key : parameters.keySet() )\n\t\t\t\t\ttoSend.add( key, parameters.get(key) );\n\t\t\t}\n\t\t\t\n\t\t\trtiamb.sendInteraction( classHandle, toSend, tag );\n\t\t\t\n\t\t\tAssert.fail( \"Was expecting the sending of interaction [\" + classHandle + \"] to fail\" );\n\t\t}\n\t\tcatch( Exception e )\n\t\t{\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; } \n        return retVal;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tpublic synchronized void clearContexts(Resource... contexts)\n\t\tthrows IOException\n\t{\n\n\n\t\tlogger.debug(\"deleting contexts: {}\", Arrays.toString(contexts));\n\n\t\tfor (Resource context : contexts) {\n\t\t\tString contextString = SearchFields.getContextID(context);\n\n\n\t\t\tclient.prepareDeleteByQuery(indexName).setQuery(QueryBuilders.termQuery(\n\t\t\t\t\tSearchFields.CONTEXT_FIELD_NAME, contextString)).execute().actionGet();\n\t\t}\n\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\n\tprivate void topologicalSort( Collection<TopologicalElement> unmarkedNodes, List<Element> sorted ) {\n\n\t\twhile ( !unmarkedNodes.isEmpty() ) {\n\n\t\t\tTopologicalElement node = unmarkedNodes.iterator().next();\n\t\t\ttopologicalVisit( node, unmarkedNodes, sorted, unmarkedNodes.size() );\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n\n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n\n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n\n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t\tprotected Entry(final int hash, final int key, final Object value, final Entry next) {\n\t\t\tthis.hash = hash;\n\t\t\tthis.key = key;\n\t\t\tthis.value = value;\n\t\t\tthis.next = next;\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate PolicyDescriptions createPolicyDescriptions(Map<URI, PolicyDescription> policies) {\n        PolicyDescriptions pd = new PolicyDescriptions();\n        for(URI key : policies.keySet()) {\n            PolicyDescriptionsEntry entry = new PolicyDescriptionsEntry();\n            entry.setKey(key);\n            entry.setValue(policies.get(key));\n            pd.getEntry().add(entry);\n        }\n        return pd;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void setText(CharSequence text, BufferType type,\n            boolean notifyBefore, int oldlen) {\n        int n = mFilters.length;\n        \n        for (int i = 0; i < n; i++) {\n            CharSequence out = mFilters[i].filter(text, 0, text.length(), EMPTY_SPANNED, 0, 0);\n            text = out;\n        }\n\n        oldlen += mText.length();\n        sendBeforeTextChanged(mText, 0, oldlen, text.length());\n\n\n        type = BufferType.EDITABLE;\n\n\n        mBufferType = type;\n        mText = text;\n\n        mTransformed = mTransformation.getTransformation(text, this);\n\n        final int textLength = text.length();\n\n        if (mEditor != null) mEditor.addSpanWatchers((Spannable) text);\n\n        mMovement.initialize(this, (Spannable) text);\n\n        checkForRelayout();\n\n        sendOnTextChanged(text, 0, oldlen, textLength);\n        onTextChanged(text, 0, oldlen, textLength);\n        sendAfterTextChanged((Editable) text);\n\n        mEditor.prepareCursorControllers();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprotected SynonymParser getParser(Analyzer analyzer) {\n    \t\n    \tchar sep = ',';\n    \tif (args.containsKey(\"format\") && args.get(\"format\").equals(\"semicolon\")) {\n    \t\tsep = ';';\n    \t};\n    \t\n    \tfinal Character charSeparator = sep;\n    \t\n      return new NewSolrSynonymParser(true, true, analyzer) {\n\n        public void add(Reader in) throws IOException, ParseException {\n          LineNumberReader br = new LineNumberReader(in);\n          StringBuffer newBr = new StringBuffer();\n          String line = null;\n          \n          String[] parts;\n          \n          try {\n            while ((line = br.readLine()) != null) {\n              if (line.length() == 0 || line.charAt(0) == '#') {\n                continue; // ignore empty lines and comments\n              }\n              String[] sides = line.split(\"=>\");\n              if (sides.length > 1) { // explicit mapping\n                String[] names = getNames(sides[1]);\n                parts = AuthorUtils.splitName(sides[0]);\n                if (isLongForm(parts) && containsLongForm(names) > 0) {\n                  newBr.append(escape(makeShortForm(parts)) + \"=>\" +\n                      sides[0] + \",\" +\n                      buildLine(names));\n                  newBr.append(\"\\n\");\n                }\n              }\n              else {\n                String[] names = getNames(sides[0]);\n                if (containsLongForm(names) > 1) {\n                  String newLine = buildLine(names);\n                  for (int i=0;i<names.length;i++) {\n                  \tparts = AuthorUtils.splitName(sides[i]);\n                    if (isLongForm(parts)) {\n                      newBr.append(escape(makeShortForm(parts)) + \"=>\" +\n                          newLine);\n                      newBr.append(\"\\n\");\n                    }\n                  }\n                }\n              }\n            }\n          } catch (IllegalArgumentException e) {\n            ParseException ex = new ParseException(\"Invalid synonym rule at line \" + br.getLineNumber(), 0);\n            ex.initCause(e);\n            throw ex;\n          } finally {\n            br.close();\n          }\n          \n          super.add(new InputStreamReader(new ByteArrayInputStream(newBr.toString().getBytes()),\n              Charset.forName(\"UTF-8\").newDecoder()));\n\n        }\n        @Override\n        public void add(CharsRef input, CharsRef output, boolean includeOrig) {\n          super.add(input, output, true);\n        }\n        \n        private String[] getNames(String vals) {\n          List<String> nn = StrUtils.splitSmart(vals, charSeparator);\n          String names[] = new String[nn.size()];\n          int j = 0;\n          for (String n: nn) {\n            names[j] = unescape(n);\n            j++;\n          }\n          return names;\n        }\n        private String buildLine(String[] names) {\n          HashSet<String> set = new HashSet<String>();\n          StringBuilder out = new StringBuilder();\n          boolean notFirst = false;\n          \n          for (String name: names) {\n            \n            String[] p = AuthorUtils.splitName(name);\n            if (isLongForm(p)) {\n              set.add(makeShortForm(p));\n            }\n            set.add(name);\n          }\n          for (String name: set) {\n            if (notFirst) out.append(\",\");\n            out.append(escape(name));\n            notFirst = true;\n          }\n          return out.toString();\n        }\n        \n        \n        private String unescape(String s) {\n          return s.replace(\"\\\\ \", \" \").replace(\"\\\\\" + charSeparator, charSeparator.toString());\n        }\n        \n        \n        private String escape(String s) {\n          return s.replace(\" \", \"\\\\ \").replace(\",\", \"\\\\,\");\n        }\n        \n        \n        private String makeShortForm(String[] parts) {\n          StringBuilder out = new StringBuilder();\n          out.append(parts[0]);\n          for (int i=1;i<parts.length;i++) {\n            out.append(\" \");\n            out.append(parts[i].substring(0, 1));\n          }\n          return out.toString();\n        }\n        \n        private boolean isLongForm(String[] parts) {\n          boolean res = false;\n          for (int i=1;i<parts.length;i++) {\n            if (parts[i].length() > 1)\n              return true;\n          }\n          return res;\n        }\n        private int containsLongForm(String[] names) {\n          int i = 0;\n          for (String name: names) {\n            if (isLongForm(AuthorUtils.splitName(name))) {\n              i++;\n            }\n          }\n          return i;\n        }\n      };\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate Member lookupDirectly( final Hierarchy hierarchy,\n                                 final Cube cube,\n                                 final String parameter,\n                                 final boolean searchForNames ) throws SQLException {\n    Member memberById = null;\n    Member memberByUniqueId = null;\n    final OlapStatement statement = connection.createStatement();\n    try {\n      final CellSet result = statement.executeOlapQuery( \"SELECT STRTOMEMBER(\" + quote( parameter ) +\n        \") ON 0, {} ON 1 FROM \" + cube.getUniqueName() );\n      try {\n        final List<CellSetAxis> setAxises = result.getAxes();\n        final List<Position> positionList = setAxises.get( 0 ).getPositions();\n        for ( int i = 0; i < positionList.size(); i++ ) {\n          final Position position = positionList.get( i );\n          final List<Member> memberList = position.getMembers();\n          for ( int j = 0; j < memberList.size(); j++ ) {\n            final Member member = memberList.get( j );\n            if ( parameter.startsWith( \"[\" ) ) {\n              if ( memberByUniqueId == null ) {\n                memberByUniqueId = member;\n              } else {\n                logger.warn( \"Encountered a member with a duplicate unique key: \" + member.getUniqueName() );\n              }\n            }\n            if ( searchForNames == false ) {\n              continue;\n            }\n            if ( parameter.equals( member.getName() ) ) {\n              if ( memberById == null ) {\n                memberById = member;\n              } else {\n                logger.warn( \"Encountered a member with a duplicate name: \" + member.getUniqueName() );\n              }\n            }\n          }\n        }\n      } finally {\n        result.close();\n      }\n    } finally {\n      try {\n        statement.close();\n      } catch ( final SQLException e ) {\n      }\n    }\n    if ( memberByUniqueId != null ) {\n      final Hierarchy memberHierarchy = memberByUniqueId.getHierarchy();\n      if ( hierarchy != memberHierarchy ) {\n        if ( ObjectUtilities.equal( hierarchy, memberHierarchy ) == false ) {\n          logger.warn( \"Cannot match hierarchy of member found with the hierarchy specfied in the parameter: \" +\n            \"Unabe to guarantee that the correct member has been queried, returning null.\" );\n          return null;\n        }\n      }\n      return memberByUniqueId;\n    }\n    if ( memberById != null ) {\n      final Hierarchy memberHierarchy = memberById.getHierarchy();\n      if ( hierarchy != memberHierarchy ) {\n        if ( ObjectUtilities.equal( hierarchy, memberHierarchy ) == false ) {\n          logger.warn( \"Cannot match hierarchy of member found with the hierarchy specfied in the parameter: \" +\n            \"Unabe to guarantee that the correct member has been queried, returning null.\" );\n          return null;\n        }\n      }\n      return memberById;\n    }\n    return null;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void setPrototype(IReference ref) {\n\t\tfor (int i = 0; i < lstReferences.size(); i++) {\n\t\t\tIReference element = (IReference) lstReferences.get(i);\n\t\t\telement.setPrototype(ref);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static Graph<ITestNGMethod> topologicalSort(ITestNGMethod[] methods,\n      List<ITestNGMethod> sequentialList, List<ITestNGMethod> parallelList) {\n    Graph<ITestNGMethod> result = new Graph<ITestNGMethod>();\n\n    if (methods.length == 0) {\n      return result;\n    }\n\n    for (ITestNGMethod m : methods) {\n      result.addNode(m);\n\n      List<ITestNGMethod> predecessors = Lists.newArrayList();\n\n      String[] methodsDependedUpon = m.getMethodsDependedUpon();\n      String[] groupsDependedUpon = m.getGroupsDependedUpon();\n      if (methodsDependedUpon.length > 0) {\n        ITestNGMethod[] methodsNamed =\n          MethodHelper.findDependedUponMethods(m, methods);\n        for (ITestNGMethod pred : methodsNamed) {\n          predecessors.add(pred);\n        }\n      }\n      if (groupsDependedUpon.length > 0) {\n        for (String group : groupsDependedUpon) {\n          ITestNGMethod[] methodsThatBelongToGroup =\n            MethodGroupsHelper.findMethodsThatBelongToGroup(m, methods, group);\n          for (ITestNGMethod pred : methodsThatBelongToGroup) {\n            predecessors.add(pred);\n          }\n        }\n      }\n\n      for (ITestNGMethod predecessor : predecessors) {\n        result.addPredecessor(m, predecessor);\n      }\n    }\n\n    result.topologicalSort();\n    sequentialList.addAll(result.getStrictlySortedNodes());\n    parallelList.addAll(result.getIndependentNodes());\n\n    return result;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tpublic CompletableFuture<StravaAthlete> updateAuthenticatedAthleteAsync(final String city, final String state, final String country, final StravaGender sex, final Float weight) {\n\t\treturn this.athleteService.updateAuthenticatedAthleteAsync(city, state, country, sex, weight);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic PsiBuilder.Marker parseAndDone(ShaderLabParserBuilder builder, @NotNull PsiBuilder.Marker mark)\n\t\t{\n\t\t\tif(expectWithError(builder, ShaderLabTokens.LBRACE, \"'{' expected\"))\n\t\t\t{\n\t\t\t\twhile(!builder.eof())\n\t\t\t\t{\n\t\t\t\t\tif(builder.getTokenType() == ShaderLabTokens.STRING_LITERAL)\n\t\t\t\t\t{\n\t\t\t\t\t\tPsiBuilder.Marker optionMarker = builder.mark();\n\t\t\t\t\t\tbuilder.advanceLexer();\n\t\t\t\t\t\tif(expectWithError(builder, ShaderLabTokens.EQ, \"'=' expected\"))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\texpectWithError(builder, ShaderLabTokens.STRING_LITERAL, \"Expected value\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\toptionMarker.done(ShaderLabElements.TAG);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\texpectWithError(builder, ShaderLabTokens.RBRACE, \"'}' expected\");\n\t\t\t}\n\t\t\tmark.done(ShaderLabElements.TAG_LIST);\n\t\t\treturn mark;\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tpublic void draw(float x,float y,float width,float height) {\n\t\tinit();\n\t\tdraw(x,y,width,height,Color.white);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic List<String> authors() {\n            LogInfo.I(\"\");\n\n            final List<Author> authors = myCollection.authors();\n            final List<String> strings = new ArrayList<String>(authors.size());\n            for (Author a : authors) {\n                strings.add(Util.authorToString(a));\n            }\n            return strings;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic ShortcutView(final Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t\tpm = context.getPackageManager();\n\t\t\n\t\tsec = PreferenceManager.getDefaultSharedPreferences(getContext());\n\n\t\tpkg = sec.getString(\"pkg\", \"\");\n\t\tpin = sec.getString(\"pin\", \"\");\t\t\n\t\t\n\t\t\n\t\tfor (int i = 0; i < CAPACITY; i++) {\n\t\t\tfinal int b = i;\n\t\t\tApplicationInfo ai = null;\n\t\t\tString sv = null;\n\t\t\tString s = Settings.System.getString(context.getContentResolver(), \"PiSC\" + i);\n\n\t\t\tif (s == null | s == \"\") {\n\n\t\t\t\tSettings.System.putString(context.getContentResolver(), \"PiSC\"+b, \"com.pilockerstable\");\n\t\t\t}\n\t\t\tsv = s;\n\t\t\tShortCut sc = new ShortCut(context, attrs);\n\t\t\t\n\t\t\ttry {\n\t\t\t\tai = pm.getApplicationInfo(sv, 0);\n\t\t\t} catch (NameNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\ttry{\n\t\t\tString App_Name = (String) pm.getApplicationLabel(ai);\n\t\t\tDrawable Icon = pm.getApplicationIcon(ai);\n\t\t\tShortcutter st = new Shortcutter(App_Name, Icon);\n\t\t\tsc.setName(st.getName());\n\t\t\tsc.setImage(st.getIcon());\t\t\t\n\t\t\taddView(sc);\n\t\t\t\n\t\t\t}catch(Exception e){\n\t\t\t\tSettings.System.putString(context.getContentResolver(), \"PiSC\"+b, \"com.pilockerstable\");\n\t\t\t}\n\t\t\t\n\t\t\tsc.setOnClickListener(new OnClickListener() {\n\t\t\t\t\n\t\t\t\tString sv = Settings.System.getString( context.getContentResolver(), \"PiSC\" + b);\n\n\t\t\t\t@Override \n\t\t\t\tpublic void onClick(View arg0) {\n\n\t\t\t\t\tif( pin.equals(\"\") || pin.equals(null) || pin.isEmpty()) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t((Activity) context).finish();\n\t\t\t\t\t\tIntent i = new Intent();\n\t\t\t\t\t\ti.setClass(getContext(), LockerService.class);\n\t\t\t\t\t\tcontext.startService(i);\n\t\t\t\t\t\tIntent LaunchIntent = context.getPackageManager().getLaunchIntentForPackage(sv);\n\t\t\t\t\t\tcontext.startActivity(LaunchIntent);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t}else{\n\t\t\t\t\t\n\t\t\t\t\tsave(\"pkg\", \"true\");\n\t\t\t\t\tIntent x = new Intent(getContext(), PinActivity.class);\n\t\t\t\t\tx.putExtra(\"sv\", sv);\n\t\t\t\t\tcontext.startActivity(x);\n\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static Graph<ITestNGMethod> topologicalSort(ITestNGMethod[] methods,\n      List<ITestNGMethod> sequentialList, List<ITestNGMethod> parallelList) {\n    Graph<ITestNGMethod> result = new Graph<ITestNGMethod>();\n\n    if (methods.length == 0) {\n      return result;\n    }\n\n    for (ITestNGMethod m : methods) {\n      result.addNode(m);\n\n      List<ITestNGMethod> predecessors = Lists.newArrayList();\n\n      String[] methodsDependedUpon = m.getMethodsDependedUpon();\n      String[] groupsDependedUpon = m.getGroupsDependedUpon();\n      if (methodsDependedUpon.length > 0) {\n        ITestNGMethod[] methodsNamed =\n          MethodHelper.findDependedUponMethods(m, methods);\n        for (ITestNGMethod pred : methodsNamed) {\n          predecessors.add(pred);\n        }\n      }\n      if (groupsDependedUpon.length > 0) {\n        for (String group : groupsDependedUpon) {\n          ITestNGMethod[] methodsThatBelongToGroup =\n            MethodGroupsHelper.findMethodsThatBelongToGroup(m, methods, group);\n          for (ITestNGMethod pred : methodsThatBelongToGroup) {\n            predecessors.add(pred);\n          }\n        }\n      }\n\n      for (ITestNGMethod predecessor : predecessors) {\n        result.addPredecessor(m, predecessor);\n      }\n    }\n\n    result.topologicalSort();\n    sequentialList.addAll(result.getStrictlySortedNodes());\n    parallelList.addAll(result.getIndependentNodes());\n\n    return result;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\tsuper.channelActive(ctx);\n\t\tlong passed = System.currentTimeMillis() - connected;\n\t\tSystem.out.print(c * 1000 / passed);\n\t\tsynchronized (clients) {\n\t\t\tclients.remove(this);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    void sampleValueAboveMaximumExpectedValue() {\n        TimeWindowLatencyHistogram histogram = new TimeWindowLatencyHistogram(Clock.SYSTEM, HistogramConfig.builder()\n            .maximumExpectedValue(2L)\n            .build()\n            .merge(HistogramConfig.DEFAULT));\n        histogram.record(3);\n        assertThat(histogram.histogramCountAtValue(3)).isEqualTo(1);\n        assertThat(histogram.histogramCountAtValue(Long.MAX_VALUE)).isEqualTo(1);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n     public ConeSound(MediaContainer soundData,\n                      float initialGain,\n                      Point3f position,\n                      Vector3f direction) {\n\n        super(soundData, initialGain, position );\n\n        setDefaultReadCapabilities(readCapabilities);\n\n        ((ConeSoundRetained)this.retained).setDirection(direction);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprotected void systemLoader(Context context)\n\t{\n\t\tif (RockySdk.getInstance().getContext() != null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tContext application = context.getApplicationContext();\n\t\t\n\t\tWebView webview = new WebView(context);\n\t\twebview.layout(0, 0, 0, 0);\n\t\tWebSettings webSettings = webview.getSettings();\n\t\t\n\t\tApplicationInfo applicationInfo = context.getApplicationInfo();\n\t\t\n\t\tVersionInfo versionInfo = ManifestTools.getVersionInfo(application);\n\t\tString userAgent = webSettings.getUserAgentString();\n\t\t\n\t\tClientInfo clientInfo = new ClientInfo(application.getPackageName());\n\t\tclientInfo.setAppicon(applicationInfo.icon);\n\t\tclientInfo.setAppname(ManifestTools.getApplicationLable(application));\n\t\tclientInfo.setDeviceType(SdkConfig.Device.PHONE);\n\t\tclientInfo.setDeviceName(android.os.Build.MODEL);\n\t\tclientInfo.setAlias(android.os.Build.MODEL);\n\t\tclientInfo.setSdkVersion(android.os.Build.VERSION.SDK_INT);\n\t\tclientInfo.setMac(DeviceInfoManager.getMacAddress(application));\n\t\t\n\t\tclientInfo.setUserAgent(userAgent);\n\t\t\n\t\tif (versionInfo != null)\n\t\t{\n\t\t\tclientInfo.setVersionCode(versionInfo.getVersionCode());\n\t\t\tclientInfo.setVersionName(versionInfo.getVersionName());\n\t\t}\n\t\t\n\t\tclientInfo.addFlags(ClientInfo.FLAG_DEBUG | ClientInfo.FLAG_RELEASE);\n\t\t\n\t\tRockyConfig config = new RockyConfig.Builder(application)\n\t\t\t.clientInfo(clientInfo)\n\t\t\t.hasAdBanner(false)\t\t// \u93c4\u5267\u305a\u7ec9\ue21a\u578eBanner\n\t\t\t.hasAdPointsWall(true)\t// \u93c4\u5267\u305a\u7ec9\ue21a\u578e\u6fa7\n\t\t\t.build();\n\t\t\n\t\tRockySdk.getInstance().init(config);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testNotEquals() {\n        Version builtVersion1 = new Version.Builder().major(MAJOR).minor(MINOR).build(BUILD);\n        Version builtVersion2 = new Version.Builder().major(BUILD).minor(MAJOR).build(MINOR);\n\n        Assert.assertFalse(builtVersion1.equals(builtVersion2));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n\tpublic void testBlock() throws IOException {\n\t\tBlock b = new Block(BlockCompressionMethod.GZIP.ordinal(),\n\t\t\t\tBlockContentType.CORE, 0, \"123457890\".getBytes(), null);\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tb.write(baos);\n\n\t\tByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n\t\tBlock b2 = new Block(bais, true, true);\n\n\t\tassertArrayEquals(b.getRawContent(), b2.getRawContent());\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic BlameGenerator push(String description, RawText contents)\n\t\t\tthrows IOException {\n\t\tif (description == null)\n\t\t\tdescription = JGitText.get().blameNotCommittedYet;\n\t\tBlobCandidate c = new BlobCandidate(description, resultPath);\n\t\tc.sourceText = contents;\n\t\tc.regionList = new Region(0, 0, contents.size());\n\t\tremaining = contents.size();\n\t\tpush(c);\n\t\treturn this;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintWriter writer, boolean suppressLogin, char eolMarker, boolean showDirection)\n    {\n        __writer = writer;\n        __nologin = suppressLogin;\n        __eolMarker = eolMarker;\n        __directionMarker = showDirection;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tpublic UUID getGuid(String fieldName) throws DecodingException\n\t{\n\t\tString guidString = null;\n\t\tif (beginFieldSafe(fieldName, true))\n\t\t{\n\t\t\tguidString = getString(\"String\");\n\n\t\t\tendField(fieldName);\n\t\t}\n\n\t\treturn UUID.fromString(guidString);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Matcher appendReplacement(StringBuffer sb, String replacement) {\n\n        if (first < 0)\n            throw new IllegalStateException(\"No match available\");\n\n        int cursor = 0;\n        StringBuilder result = new StringBuilder();\n\n        while (cursor < replacement.length()) {\n            char nextChar = replacement.charAt(cursor);\n            if (nextChar == '\\\\') {\n                cursor++;\n                nextChar = replacement.charAt(cursor);\n                result.append(nextChar);\n                cursor++;\n            } else if (nextChar == '$') {\n                cursor++;\n                int refNum = (int)replacement.charAt(cursor) - '0';\n                if ((refNum < 0)||(refNum > 9))\n                    throw new IllegalArgumentException(\n                        \"Illegal group reference\");\n                cursor++;\n\n                boolean done = false;\n                while (!done) {\n                    if (cursor >= replacement.length()) {\n                        break;\n                    }\n                    int nextDigit = replacement.charAt(cursor) - '0';\n                    if ((nextDigit < 0)||(nextDigit > 9)) { // not a number\n                        break;\n                    }\n                    int newRefNum = (refNum * 10) + nextDigit;\n                    if (groupCount() < newRefNum) {\n                        done = true;\n                    } else {\n                        refNum = newRefNum;\n                        cursor++;\n                    }\n                }\n                if (start(refNum) != -1 && end(refNum) != -1)\n                    result.append(text, start(refNum), end(refNum));\n            } else {\n                result.append(nextChar);\n                cursor++;\n            }\n        }\n        sb.append(text, lastAppendPosition, first);\n        sb.append(result);\n\n        lastAppendPosition = last;\n        return this;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Collection createRenderableCollectionNS(String opName,\n                                                   ParameterBlock args,\n                                                   RenderingHints hints) {\n        if(opName == null) {\n            throw new IllegalArgumentException(JaiI18N.getString(\"JAI14\"));\n        } else if (args == null) {\n            throw new IllegalArgumentException(JaiI18N.getString(\"JAI15\"));\n        }\n\n\tString modeName = \"renderableCollection\";\n\n        OperationDescriptor odesc = (OperationDescriptor)\n            operationRegistry.getDescriptor(modeName, opName);\n\n        if (odesc == null) {\n            throw new IllegalArgumentException(opName + \": \" +\n                                               JaiI18N.getString(\"JAI0\"));\n        }\n\n\tClass destClass = odesc.getDestClass(modeName);\n\n\tif (!RenderableImage.class.isAssignableFrom(destClass) &&\n\t    !CollectionImage.class.isAssignableFrom(destClass)) {\n\t  throw new IllegalArgumentException(opName + \": \" +\n\t\t\t\t\t     JaiI18N.getString(\"JAI6\"));\n        }\n\n\n\n        StringBuffer msg = new StringBuffer();\n        args = (ParameterBlock)args.clone();\n        RenderingHints mergedHints =\n            mergeRenderingHints(renderingHints, hints);\n\tif (odesc.validateArguments(modeName, args, msg)) {\n            if (RenderableImage.class.isAssignableFrom(destClass)) {\n                Vector v = new Vector(1);\n                RenderableOp op =\n                    new RenderableOp(operationRegistry, opName, args,\n                                     mergedHints);\n                v.add(op);\n                return v;\n            } else {\n                CollectionOp cOp = new\n                    CollectionOp(operationRegistry, opName, args,\n                                 mergedHints, true);\n\n                if (odesc.isImmediate()) {\n                    Collection coll = null;\n                    coll = cOp.getCollection();\n                    if(coll == null) {\n                        return null;\n                    }\n                }\n\n                return cOp;\n            }\n\n\t} else {\n            int numSources = odesc.getNumSources();\n            Vector sources = args.getSources();\n\n\n\n            Iterator[] iters = new Iterator[numSources];\n            Iterator iter = null;\n            int size = Integer.MAX_VALUE;\n            for (int i = 0; i < numSources; i++) {\n                Object s = sources.elementAt(i);\n                if (s instanceof Collection) {\n                    iters[i] = ((Collection)s).iterator();\n                    if (iter == null || ((Collection)s).size() < size) {\n                        iter = iters[i];\n                        size = ((Collection)s).size();\n                    }\n                }\n            }\n\n            if (iter == null) {\n\n\n                throw new IllegalArgumentException(msg.toString());\n            }\n\n            Collection col = null;\n            for (int i = 0; i < numSources; i++) {\n                Object s = sources.elementAt(i);\n                if (s instanceof Collection) {\n                    try {\n                        col = (Collection)s.getClass().newInstance();\n                        break;\n                    } catch (Exception e) {\n                        sendExceptionToListener(\n                            JaiI18N.getString(\"JAI16\") + s.getClass().getName(),\n                            e);\n                    }\n                }\n            }\n            if (col == null) {\n                col = new Vector();\n            }\n\n            Class[] sourceClasses = odesc.getSourceClasses(modeName);\n\n            while (iter.hasNext()) {\n                ParameterBlock pb = new ParameterBlock();\n                pb.setParameters(args.getParameters());\n\n                for (int i = 0; i < numSources; i++) {\n                    Object nextSource = null;\n                    if (iters[i] == null) {\n                        nextSource = sources.elementAt(i);\n                    } else {\n                        nextSource = iters[i].next();\n                    }\n\n                    if(!sourceClasses[i].isAssignableFrom(nextSource.getClass()) &&\n                       !(nextSource instanceof Collection)) {\n                        throw new IllegalArgumentException(msg.toString());\n                    }\n                    pb.addSource(nextSource);\n                }\n\n                Collection c = createRenderableCollectionNS(opName, pb,\n                                                            mergedHints);\n                if (c instanceof Vector &&\n                    c.size() == 1 &&\n                    ((Vector)c).elementAt(0) instanceof RenderableOp) {\n                    col.add(((Vector)c).elementAt(0));\n                } else {\n                    col.add(c);\n                }\n            }\n\n            return col;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public CharSequence logestCommonSubsequence(final CharSequence left, final CharSequence right) {\n        if (left == null || right == null) {\n            throw new IllegalArgumentException(\"Inputs must not be null\");\n        }\n        final StringBuilder longestCommonSubstringArray = new StringBuilder(Math.max(left.length(), right.length()));\n        final int[][] lcsLengthArray = longestCommonSubstringLengthArray(left, right);\n        int i = left.length() - 1;\n        int j = right.length() - 1;\n        int k = lcsLengthArray[left.length()][right.length()] - 1;\n        while (k >= 0) {\n            if (left.charAt(i) == right.charAt(j)) {\n                longestCommonSubstringArray.append(left.charAt(i));\n                i = i - 1;\n                j = j - 1;\n                k = k - 1;\n            } else if (lcsLengthArray[i + 1][j] < lcsLengthArray[i][j + 1]) {\n                i = i - 1;\n            } else {\n                j = j - 1;\n            }\n        }\n        return longestCommonSubstringArray.reverse().toString();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic boolean feasible(Optimizable innerTable,\n\t\t\t\t\t\t\tOptimizablePredicateList predList,\n\t\t\t\t\t\t\tOptimizer optimizer\n\t\t\t\t\t\t\t)\n\t\t\t\t\tthrows StandardException \n\t{\n\t\tConglomerateDescriptor cd = null;\n\n\t\t\n\t\tif (! innerTable.isMaterializable())\n\t\t{\n            if ( innerTable.optimizerTracingIsOn() ) { innerTable.getOptimizerTracer().traceSkipUnmaterializableHashJoin(); }\n\t\t\treturn false;\n\t\t}\n\n\t\t\n\t\tif (innerTable.isTargetTable())\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t\n\t\tif ((predList != null) && (predList.size() > 0) &&\n\t\t\t!(innerTable instanceof FromBaseTable))\n\t\t{\n\t\t\tFromTable ft = (FromTable)innerTable;\n\n\t\t\tJBitSet tNums = new JBitSet(ft.getReferencedTableMap().size());\n\t\t\tBaseTableNumbersVisitor btnVis = new BaseTableNumbersVisitor(tNums);\n\t\t\tft.accept(btnVis);\n\n\t\t\tJBitSet pNums = new JBitSet(tNums.size());\n\n            for (int i = 0; i < predList.size(); i++)\n\t\t\t{\n                Predicate pred = (Predicate)predList.getOptPredicate(i);\n\t\t\t\tif (pred.isJoinPredicate())\n\t\t\t\t\tpNums.or(pred.getReferencedSet());\n\t\t\t}\n\n\t\t\ttNums.and(pNums);\n\t\t\tif (tNums.getFirstSetBit() != -1)\n\t\t\t\treturn false;\n\t\t}\n\n\t\tif (innerTable.isBaseTable())\n\t\t{\n\t\t\t\n\t\t\tcd = innerTable.getCurrentAccessPath().getConglomerateDescriptor();\n\t\t}\n\t\t\n\t\t\n        int[] hashKeyColumns = findHashKeyColumns(\n                innerTable,\n                cd,\n                predList);\n\n\t\tif (SanityManager.DEBUG)\n\t\t{\n            if ( innerTable.optimizerTracingIsOn() )\n            {\n                if (hashKeyColumns == null)\n                {\n                    innerTable.getOptimizerTracer().traceSkipHashJoinNoHashKeys();\n                }\n                else\n                {\n                    innerTable.getOptimizerTracer().traceHashKeyColumns( ArrayUtil.copy( hashKeyColumns ) );\n                }\n            }\n\t\t}\n\n\t\tif (hashKeyColumns == null)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void hookDialogIsOpen() {\n        \n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                UIHelpers.runOnUIThread(true, new Runnable() {\n                    @Override\n                    public void run() {\n                        if (!browser.isDisposed()) {\n                            browser.setUrl(serverSigninURL.toString());\n                        }\n                    }\n                });\n            }\n        }).start();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                col = (int)val[1];\n\n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            Float sum = 0f;\n            for(int i = 0; i < table.data.size(); i++)\n            {\n                Object o = table.data.get(i)[col-1];\n                if (o instanceof Float)\n                    sum += (Float)o;\n            }\n            return sum;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean putMapNotEmptyKeyAndValue(Map<String, String> map, String key, String value,\n            String defaultValue) {\n        if (map == null || StringUtils.isEmpty(key)) {\n            return false;\n        }\n\n        map.put(key, StringUtils.isEmpty(value) ? defaultValue : value);\n        return true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Kernel(int width, int height, double factor, double data[]) {\n        this(width, height, (width - 1) / 2, (height - 1) / 2, factor, data);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void testMultipleUnknown() throws Exception\n      {\n          MoreNestedField moreNestedField = new MoreNestedField();\n          NestedTwoField nestedTwoField = new NestedTwoField();\n          nestedTwoField.setNested1(1);\n          nestedTwoField.setNested2(2);\n          moreNestedField.setF1(nestedTwoField);\n\n          byte[] in = MAPPER.writerFor(MoreNestedField.class)\n                  .with(MAPPER.generateSchemaFor(MoreNestedField.class))\n                  .writeValueAsBytes(moreNestedField);\n\n          LessNestedField lesser = MAPPER.readerFor(LessNestedField.class)\n                  .with(MAPPER.generateSchemaFor(LessNestedField.class))\n                  .with(JsonParser.Feature.IGNORE_UNDEFINED)\n                  .readValue(in);\n\n          assertEquals(moreNestedField.getF1().getNested2(), lesser.getF1().getNested2());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker, boolean showDirection) {\n        this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void onReply(final CharSequence content) {\n        TrackerUtils.onTopicReply();\n\n        doActionRequest(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    RequestHelper.INSTANCE.reply(mTopic, content.toString(), mOnceToken);\n                } catch (ConnectionException | RemoteException e) {\n                    ExecutorUtils.runInUiThread(new Runnable() {\n                        @Override\n                        public void run() {\n                            TopicFragment.this.doActionException(e);\n                        }\n                    });\n                    return;\n                }\n\n                AppCtx.getEventBus().post(new TopicEvent(TopicEvent.TYPE_REPLY));\n            }\n        }, new Function<Future<?>, Void>() {\n            @Override\n            public Void apply(Future<?> future) {\n                if (TopicFragment.this.cancelRequest(future)) {\n                    mReplyForm.setContent(content);\n                    if (!mReplyForm.getVisibility()) {\n                        mReplyForm.toggle();\n                    }\n                }\n                return null;\n            }\n        });\n\n        mReplyForm.setVisibility(false);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public PartitionLoad getLoad() throws IOException{\n        Map<ServerName, List<HRegionInfo>> serverToRegionMap=new HashMap<>();\n        try(RegionLocator rl=connection.getRegionLocator(tableName)){\n            List<HRegionLocation> locations=rl.getAllRegionLocations();\n            for(HRegionLocation location : locations){\n                List<HRegionInfo> info=serverToRegionMap.get(location.getServerName());\n                if(info==null){\n                    info = new LinkedList<>();\n                    serverToRegionMap.put(location.getServerName(),info);\n                }\n                info.add(location.getRegionInfo());\n            }\n        }\n        int totalStoreFileSizeMB = 0;\n        int totalMemstoreSieMB = 0;\n        int storefileIndexSizeMB = 0;\n        try(Admin admin=connection.getAdmin()){\n            ClusterStatus clusterStatus=admin.getClusterStatus();\n            for(Map.Entry<ServerName,List<HRegionInfo>> entry:serverToRegionMap.entrySet()){\n                ServerLoad load=clusterStatus.getLoad(entry.getKey());\n                Map<byte[], RegionLoad> regionsLoad=load.getRegionsLoad();\n                for(HRegionInfo info:entry.getValue()){\n                    RegionLoad rl = regionsLoad.get(info.getRegionName());\n                    totalStoreFileSizeMB+=rl.getStorefileSizeMB();\n                    totalMemstoreSieMB+=rl.getMemStoreSizeMB();\n                    storefileIndexSizeMB+=rl.getStorefileIndexSizeMB();\n                }\n            }\n        }\n        return new HPartitionLoad(getName(),totalStoreFileSizeMB,totalMemstoreSieMB,storefileIndexSizeMB);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void quadrantRotate(int numquadrants,\n                               double anchorx, double anchory)\n    {\n        switch (numquadrants & 3) {\n        case 0:\n            return;\n        case 1:\n            m02 += anchorx * (m00 - m01) + anchory * (m01 + m00);\n            m12 += anchorx * (m10 - m11) + anchory * (m11 + m10);\n            rotate90();\n            break;\n        case 2:\n            m02 += anchorx * (m00 + m00) + anchory * (m01 + m01);\n            m12 += anchorx * (m10 + m10) + anchory * (m11 + m11);\n            rotate180();\n            break;\n        case 3:\n            m02 += anchorx * (m00 + m01) + anchory * (m01 - m00);\n            m12 += anchorx * (m10 + m11) + anchory * (m11 - m10);\n            rotate270();\n            break;\n        }\n        if (m02 == 0.0 && m12 == 0.0) {\n            state &= ~APPLY_TRANSLATE;\n        } else {\n            state |= APPLY_TRANSLATE;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic SmoothStreamingRendererBuilder(Context context, String userAgent, String url,\n      MediaDrmCallback drmCallback) {\n    this.context = context;\n    this.userAgent = userAgent;\n    this.url = Util.toLowerInvariant(url).endsWith(\"/manifest\") ? url : url + \"/Manifest\";\n    this.drmCallback = drmCallback;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic boolean feasible(Optimizable innerTable,\n\t\t\t\t\t\t\tOptimizablePredicateList predList,\n\t\t\t\t\t\t\tOptimizer optimizer\n\t\t\t\t\t\t\t)\n\t\t\t\t\tthrows StandardException \n\t{\n\t\tConglomerateDescriptor cd = null;\n\n\t\t\n\t\tif (! innerTable.isMaterializable())\n\t\t{\n            if ( innerTable.optimizerTracingIsOn() ) { innerTable.getOptimizerTracer().traceSkipUnmaterializableHashJoin(); }\n\t\t\treturn false;\n\t\t}\n\n\t\t\n\t\tif (innerTable.isTargetTable())\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t\n\t\tif ((predList != null) && (predList.size() > 0) &&\n\t\t\t!(innerTable instanceof FromBaseTable))\n\t\t{\n\t\t\tFromTable ft = (FromTable)innerTable;\n\n\t\t\tJBitSet tNums = new JBitSet(ft.getReferencedTableMap().size());\n\t\t\tBaseTableNumbersVisitor btnVis = new BaseTableNumbersVisitor(tNums);\n\t\t\tft.accept(btnVis);\n\n\t\t\tJBitSet pNums = new JBitSet(tNums.size());\n\n            for (int i = 0; i < predList.size(); i++)\n\t\t\t{\n                Predicate pred = (Predicate)predList.getOptPredicate(i);\n\t\t\t\tif (pred.isJoinPredicate())\n\t\t\t\t\tpNums.or(pred.getReferencedSet());\n\t\t\t}\n\n\t\t\ttNums.and(pNums);\n\t\t\tif (tNums.getFirstSetBit() != -1)\n\t\t\t\treturn false;\n\t\t}\n\n\t\tif (innerTable.isBaseTable())\n\t\t{\n\t\t\t\n\t\t\tcd = innerTable.getCurrentAccessPath().getConglomerateDescriptor();\n\t\t}\n\t\t\n\t\t\n        int[] hashKeyColumns = findHashKeyColumns(\n                innerTable,\n                cd,\n                predList);\n\n\t\tif (SanityManager.DEBUG)\n\t\t{\n            if ( innerTable.optimizerTracingIsOn() )\n            {\n                if (hashKeyColumns == null)\n                {\n                    innerTable.getOptimizerTracer().traceSkipHashJoinNoHashKeys();\n                }\n                else\n                {\n                    innerTable.getOptimizerTracer().traceHashKeyColumns( ArrayUtil.copy( hashKeyColumns ) );\n                }\n            }\n\t\t}\n\n\t\tif (hashKeyColumns == null)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void channelActive(ChannelHandlerContext ctx) {\n        ProxyRule proxyRule = new ProxyRule();\n        long serverId = 1;\n        String host = \"127.0.0.1\";\n        int port = 7090;\n        proxyRule.setServerId(serverId);\n        proxyRule.setRemoteHost(host);\n        proxyRule.setRemotePort(port);\n\n        this.proxySession = connectProxyRule(ctx, proxyRule);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n        if(!nonSequentialModel)\n            return new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n        else{\n\n            CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n            this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n            BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n            this.updateNaturalParameterPrior(prior);\n\n            return learntBN;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, Predicate<String> isStatic, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            lineNumber = printMethod(mv, clazz, method, isStatic.test(method), lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static void main(String[] args) throws Exception {\n        \n        \n        AdbServer.server().listenUSB();\n        \n        AdbServer.server().listenADB();\n\n\n        AndroidControlServer server = new AndroidControlServer();\n        server.listen(6655);\n        \n        try {\n            Config config = new Config(args);\n\n            if (config.isClient) {\n                new RemoteClient(config.ip, config.port, config.key, config.serialNumber);\n            } else {\n                if (config.isLocal) {\n                    new LocalServer(config.port).start();\n                } else {                 \n                    new RemoteServer(config.port).start();\n                }\n            }\n        } catch (InvalidParameterException ex) {\n            System.out.println(\"localserver <port>: \u935a\ue21a\u59e9\u93c8\ue100\u6e74\u93c8\u5d85\u59df\u9363(p2p)\\n remoteserver <port> \u935a\ue21a\u59e9\u93c8\u5d85\u59df\u9363 \\nremoteclient <ip> <port> <key> [serialNumber] \u935a\ue21a\u59e9\u7039\u3221\u57db\u7ed4\");\n            System.exit(0);\n        } catch (WebSocketException |InterruptedException e) {\n            System.out.println(\"\u935a\ue21a\u59e9\u93c8\u5d85\u59df\u9363\u3125\u3051\u7490: \" + e.getMessage());\n            System.exit(0);\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(0);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void insert(int itemNum, Item item, Style itemStyle)\n\t{\n\t\tif (itemNum == this.container.size()) {\n\t\t\tthis.container.add(item, itemStyle);\n\t\t} else {\n\t\t\tif (itemStyle != null) {\n\t\t\t\titem.setStyle(itemStyle);\n\t\t\t}\n\t\t\tthis.container.add( itemNum, item );\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic List<Instance<String>> createInstances() {\n    List<Instance<String>> instances = new ArrayList<Instance<String>>();\n    instances.add(createInstance(\"O Word_Three LCWord_three CapitalType_INITIAL_UPPERCASE L0OOB1 L1OOB2 R0_sequence R0_TypePath_Pos_NN R0_TypePath_Stem_sequenc R1_elements R1_TypePath_Pos_NNS R1_TypePath_Stem_element TypePath_Pos_CD TypePath_Stem_Three PrevNEMTokenLabel_L0OOB1 PrevNEMTokenLabel_L1OOB2\"));\n    instances.add(createInstance(\"O Word_sequence LCWord_sequence CapitalType_ALL_LOWERCASE Prefix3_seq Suffix3_nce Suffix4_ence Suffix5_uence L0_Three L0_TypePath_Pos_CD L0_TypePath_Stem_Three L1OOB1 R0_elements R0_TypePath_Pos_NNS R0_TypePath_Stem_element R1_are R1_TypePath_Pos_VBP R1_TypePath_Stem_are TypePath_Pos_NN TypePath_Stem_sequenc PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1OOB1\"));\n    instances.add(createInstance(\"O Word_elements LCWord_elements CapitalType_ALL_LOWERCASE Prefix3_ele Suffix3_nts Suffix4_ents Suffix5_ments L0_sequence L0_TypePath_Pos_NN L0_TypePath_Stem_sequenc L1_Three L1_TypePath_Pos_CD L1_TypePath_Stem_Three R0_are R0_TypePath_Pos_VBP R0_TypePath_Stem_are R1_shown R1_TypePath_Pos_VBN R1_TypePath_Stem_shown TypePath_Pos_NNS TypePath_Stem_element PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_are LCWord_are CapitalType_ALL_LOWERCASE L0_elements L0_TypePath_Pos_NNS L0_TypePath_Stem_element L1_sequence L1_TypePath_Pos_NN L1_TypePath_Stem_sequenc R0_shown R0_TypePath_Pos_VBN R0_TypePath_Stem_shown R1_to R1_TypePath_Pos_TO R1_TypePath_Stem_to TypePath_Pos_VBP TypePath_Stem_are PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_shown LCWord_shown CapitalType_ALL_LOWERCASE L0_are L0_TypePath_Pos_VBP L0_TypePath_Stem_are L1_elements L1_TypePath_Pos_NNS L1_TypePath_Stem_element R0_to R0_TypePath_Pos_TO R0_TypePath_Stem_to R1_be R1_TypePath_Pos_VB R1_TypePath_Stem_be TypePath_Pos_VBN TypePath_Stem_shown PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_to LCWord_to CapitalType_ALL_LOWERCASE L0_shown L0_TypePath_Pos_VBN L0_TypePath_Stem_shown L1_are L1_TypePath_Pos_VBP L1_TypePath_Stem_are R0_be R0_TypePath_Pos_VB R0_TypePath_Stem_be R1_required R1_TypePath_Pos_VBN R1_TypePath_Stem_requir TypePath_Pos_TO TypePath_Stem_to PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_be LCWord_be CapitalType_ALL_LOWERCASE L0_to L0_TypePath_Pos_TO L0_TypePath_Stem_to L1_shown L1_TypePath_Pos_VBN L1_TypePath_Stem_shown R0_required R0_TypePath_Pos_VBN R0_TypePath_Stem_requir R1_for R1_TypePath_Pos_IN R1_TypePath_Stem_for TypePath_Pos_VB TypePath_Stem_be PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_required LCWord_required CapitalType_ALL_LOWERCASE Prefix3_req Suffix3_red Suffix4_ired Suffix5_uired L0_be L0_TypePath_Pos_VB L0_TypePath_Stem_be L1_to L1_TypePath_Pos_TO L1_TypePath_Stem_to R0_for R0_TypePath_Pos_IN R0_TypePath_Stem_for R1_accurate R1_TypePath_Pos_JJ R1_TypePath_Stem_accur TypePath_Pos_VBN TypePath_Stem_requir PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_for LCWord_for CapitalType_ALL_LOWERCASE L0_required L0_TypePath_Pos_VBN L0_TypePath_Stem_requir L1_be L1_TypePath_Pos_VB L1_TypePath_Stem_be R0_accurate R0_TypePath_Pos_JJ R0_TypePath_Stem_accur R1_and R1_TypePath_Pos_CC R1_TypePath_Stem_and TypePath_Pos_IN TypePath_Stem_for PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_accurate LCWord_accurate CapitalType_ALL_LOWERCASE Prefix3_acc Suffix3_ate Suffix4_rate Suffix5_urate L0_for L0_TypePath_Pos_IN L0_TypePath_Stem_for L1_required L1_TypePath_Pos_VBN L1_TypePath_Stem_requir R0_and R0_TypePath_Pos_CC R0_TypePath_Stem_and R1_efficient R1_TypePath_Pos_JJ R1_TypePath_Stem_effici TypePath_Pos_JJ TypePath_Stem_accur PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_and LCWord_and CapitalType_ALL_LOWERCASE L0_accurate L0_TypePath_Pos_JJ L0_TypePath_Stem_accur L1_for L1_TypePath_Pos_IN L1_TypePath_Stem_for R0_efficient R0_TypePath_Pos_JJ R0_TypePath_Stem_effici R1_transcription R1_TypePath_Pos_NN R1_TypePath_Stem_transcript TypePath_Pos_CC TypePath_Stem_and PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_efficient LCWord_efficient CapitalType_ALL_LOWERCASE Prefix3_eff Suffix3_ent Suffix4_ient Suffix5_cient L0_and L0_TypePath_Pos_CC L0_TypePath_Stem_and L1_accurate L1_TypePath_Pos_JJ L1_TypePath_Stem_accur R0_transcription R0_TypePath_Pos_NN R0_TypePath_Stem_transcript R1_termination R1_TypePath_Pos_NN R1_TypePath_Stem_termin TypePath_Pos_JJ TypePath_Stem_effici PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_transcription LCWord_transcription CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ption L0_efficient L0_TypePath_Pos_JJ L0_TypePath_Stem_effici L1_and L1_TypePath_Pos_CC L1_TypePath_Stem_and R0_termination R0_TypePath_Pos_NN R0_TypePath_Stem_termin R1_by R1_TypePath_Pos_IN R1_TypePath_Stem_by TypePath_Pos_NN TypePath_Stem_transcript PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_termination LCWord_termination CapitalType_ALL_LOWERCASE Prefix3_ter Suffix3_ion Suffix4_tion Suffix5_ation L0_transcription L0_TypePath_Pos_NN L0_TypePath_Stem_transcript L1_efficient L1_TypePath_Pos_JJ L1_TypePath_Stem_effici R0_by R0_TypePath_Pos_IN R0_TypePath_Stem_by R1_RNA R1_TypePath_Pos_NNP R1_TypePath_Stem_RNA TypePath_Pos_NN TypePath_Stem_termin PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_by LCWord_by CapitalType_ALL_LOWERCASE L0_termination L0_TypePath_Pos_NN L0_TypePath_Stem_termin L1_transcription L1_TypePath_Pos_NN L1_TypePath_Stem_transcript R0_RNA R0_TypePath_Pos_NNP R0_TypePath_Stem_RNA R1_polymerase R1_TypePath_Pos_NN R1_TypePath_Stem_polymeras TypePath_Pos_IN TypePath_Stem_by PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"B-GENE Word_RNA LCWord_rna CapitalType_ALL_UPPERCASE L0_by L0_TypePath_Pos_IN L0_TypePath_Stem_by L1_termination L1_TypePath_Pos_NN L1_TypePath_Stem_termin R0_polymerase R0_TypePath_Pos_NN R0_TypePath_Stem_polymeras R1_I R1_TypePath_Pos_PRP R1_TypePath_Stem_I TypePath_Pos_NNP TypePath_Stem_RNA PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"I-GENE Word_polymerase LCWord_polymerase CapitalType_ALL_LOWERCASE Prefix3_pol Suffix3_ase Suffix4_rase Suffix5_erase L0_RNA L0_TypePath_Pos_NNP L0_TypePath_Stem_RNA L1_by L1_TypePath_Pos_IN L1_TypePath_Stem_by R0_I R0_TypePath_Pos_PRP R0_TypePath_Stem_I R1_( R1_TypePath_Pos_-LRB- R1_TypePath_Stem_( TypePath_Pos_NN TypePath_Stem_polymeras PrevNEMTokenLabel_L0_B-GENE PrevNEMTokenLabel_L1_O Gazetteer_entrez_genes.txt Gazetteer_entrez_genes.txt\"));\n    instances.add(createInstance(\"I-GENE Word_I LCWord_i CapitalType_ALL_UPPERCASE NumericType_ROMAN_NUMERAL L0_polymerase L0_TypePath_Pos_NN L0_TypePath_Stem_polymeras L1_RNA L1_TypePath_Pos_NNP L1_TypePath_Stem_RNA R0_( R0_TypePath_Pos_-LRB- R0_TypePath_Stem_( R1_pol R1_TypePath_Pos_NN R1_TypePath_Stem_pol TypePath_Pos_PRP TypePath_Stem_I PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_B-GENE\"));\n    instances.add(createInstance(\"O Word_( LCWord_( L0_I L0_TypePath_Pos_PRP L0_TypePath_Stem_I L1_polymerase L1_TypePath_Pos_NN L1_TypePath_Stem_polymeras R0_pol R0_TypePath_Pos_NN R0_TypePath_Stem_pol R1_I R1_TypePath_Pos_PRP R1_TypePath_Stem_I TypePath_Pos_-LRB- TypePath_Stem_( PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_I-GENE\"));\n    instances.add(createInstance(\"B-GENE Word_pol LCWord_pol CapitalType_ALL_LOWERCASE L0_( L0_TypePath_Pos_-LRB- L0_TypePath_Stem_( L1_I L1_TypePath_Pos_PRP L1_TypePath_Stem_I R0_I R0_TypePath_Pos_PRP R0_TypePath_Stem_I R1_) R1_TypePath_Pos_-RRB- R1_TypePath_Stem_) TypePath_Pos_NN TypePath_Stem_pol PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_I-GENE Gazetteer_entrez_genes.txt\"));\n    instances.add(createInstance(\"I-GENE Word_I LCWord_i CapitalType_ALL_UPPERCASE NumericType_ROMAN_NUMERAL L0_pol L0_TypePath_Pos_NN L0_TypePath_Stem_pol L1_( L1_TypePath_Pos_-LRB- L1_TypePath_Stem_( R0_) R0_TypePath_Pos_-RRB- R0_TypePath_Stem_) R1_assayed R1_TypePath_Pos_VBD R1_TypePath_Stem_assay TypePath_Pos_PRP TypePath_Stem_I PrevNEMTokenLabel_L0_B-GENE PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_) LCWord_) L0_I L0_TypePath_Pos_PRP L0_TypePath_Stem_I L1_pol L1_TypePath_Pos_NN L1_TypePath_Stem_pol R0_assayed R0_TypePath_Pos_VBD R0_TypePath_Stem_assay R1_both R1_TypePath_Pos_DT R1_TypePath_Stem_both TypePath_Pos_-RRB- TypePath_Stem_) PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_B-GENE\"));\n    instances.add(createInstance(\"O Word_assayed LCWord_assayed CapitalType_ALL_LOWERCASE Prefix3_ass Suffix3_yed Suffix4_ayed L0_) L0_TypePath_Pos_-RRB- L0_TypePath_Stem_) L1_I L1_TypePath_Pos_PRP L1_TypePath_Stem_I R0_both R0_TypePath_Pos_DT R0_TypePath_Stem_both R1_in R1_TypePath_Pos_IN R1_TypePath_Stem_in TypePath_Pos_VBD TypePath_Stem_assay PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_I-GENE\"));\n    instances.add(createInstance(\"O Word_both LCWord_both CapitalType_ALL_LOWERCASE L0_assayed L0_TypePath_Pos_VBD L0_TypePath_Stem_assay L1_) L1_TypePath_Pos_-RRB- L1_TypePath_Stem_) R0_in R0_TypePath_Pos_IN R0_TypePath_Stem_in R1_a R1_TypePath_Pos_DT R1_TypePath_Stem_a TypePath_Pos_DT TypePath_Stem_both PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_in LCWord_in CapitalType_ALL_LOWERCASE L0_both L0_TypePath_Pos_DT L0_TypePath_Stem_both L1_assayed L1_TypePath_Pos_VBD L1_TypePath_Stem_assay R0_a R0_TypePath_Pos_DT R0_TypePath_Stem_a R1_cell-free R1_TypePath_Pos_JJ R1_TypePath_Stem_cell-fre TypePath_Pos_IN TypePath_Stem_in PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_a LCWord_a CapitalType_ALL_LOWERCASE L0_in L0_TypePath_Pos_IN L0_TypePath_Stem_in L1_both L1_TypePath_Pos_DT L1_TypePath_Stem_both R0_cell-free R0_TypePath_Pos_JJ R0_TypePath_Stem_cell-fre R1_transcription R1_TypePath_Pos_NN R1_TypePath_Stem_transcript TypePath_Pos_DT TypePath_Stem_a PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_cell-free LCWord_cell-free CapitalType_ALL_LOWERCASE ContainsHyphen_CONTAINS_HYPHEN Prefix3_cel Suffix3_ree Suffix4_free Suffix5_-free L0_a L0_TypePath_Pos_DT L0_TypePath_Stem_a L1_in L1_TypePath_Pos_IN L1_TypePath_Stem_in R0_transcription R0_TypePath_Pos_NN R0_TypePath_Stem_transcript R1_system R1_TypePath_Pos_NN R1_TypePath_Stem_system TypePath_Pos_JJ TypePath_Stem_cell-fre PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_transcription LCWord_transcription CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ption L0_cell-free L0_TypePath_Pos_JJ L0_TypePath_Stem_cell-fre L1_a L1_TypePath_Pos_DT L1_TypePath_Stem_a R0_system R0_TypePath_Pos_NN R0_TypePath_Stem_system R1_and R1_TypePath_Pos_CC R1_TypePath_Stem_and TypePath_Pos_NN TypePath_Stem_transcript PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_system LCWord_system CapitalType_ALL_LOWERCASE Prefix3_sys Suffix3_tem L0_transcription L0_TypePath_Pos_NN L0_TypePath_Stem_transcript L1_cell-free L1_TypePath_Pos_JJ L1_TypePath_Stem_cell-fre R0_and R0_TypePath_Pos_CC R0_TypePath_Stem_and R1_in R1_TypePath_Pos_IN R1_TypePath_Stem_in TypePath_Pos_NN TypePath_Stem_system PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_and LCWord_and CapitalType_ALL_LOWERCASE L0_system L0_TypePath_Pos_NN L0_TypePath_Stem_system L1_transcription L1_TypePath_Pos_NN L1_TypePath_Stem_transcript R0_in R0_TypePath_Pos_IN R0_TypePath_Stem_in R1_vivo R1_TypePath_Pos_RB R1_TypePath_Stem_vivo TypePath_Pos_CC TypePath_Stem_and PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_in LCWord_in CapitalType_ALL_LOWERCASE L0_and L0_TypePath_Pos_CC L0_TypePath_Stem_and L1_system L1_TypePath_Pos_NN L1_TypePath_Stem_system R0_vivo R0_TypePath_Pos_RB R0_TypePath_Stem_vivo R1_after R1_TypePath_Pos_IN R1_TypePath_Stem_after TypePath_Pos_IN TypePath_Stem_in PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_vivo LCWord_vivo CapitalType_ALL_LOWERCASE L0_in L0_TypePath_Pos_IN L0_TypePath_Stem_in L1_and L1_TypePath_Pos_CC L1_TypePath_Stem_and R0_after R0_TypePath_Pos_IN R0_TypePath_Stem_after R1_transfection R1_TypePath_Pos_NN R1_TypePath_Stem_transfect TypePath_Pos_RB TypePath_Stem_vivo PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_after LCWord_after CapitalType_ALL_LOWERCASE L0_vivo L0_TypePath_Pos_RB L0_TypePath_Stem_vivo L1_in L1_TypePath_Pos_IN L1_TypePath_Stem_in R0_transfection R0_TypePath_Pos_NN R0_TypePath_Stem_transfect R1_of R1_TypePath_Pos_IN R1_TypePath_Stem_of TypePath_Pos_IN TypePath_Stem_after PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_transfection LCWord_transfection CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ction L0_after L0_TypePath_Pos_IN L0_TypePath_Stem_after L1_vivo L1_TypePath_Pos_RB L1_TypePath_Stem_vivo R0_of R0_TypePath_Pos_IN R0_TypePath_Stem_of R1_rDNA R1_TypePath_Pos_NNP R1_TypePath_Stem_rDNA TypePath_Pos_NN TypePath_Stem_transfect PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_of LCWord_of CapitalType_ALL_LOWERCASE L0_transfection L0_TypePath_Pos_NN L0_TypePath_Stem_transfect L1_after L1_TypePath_Pos_IN L1_TypePath_Stem_after R0_rDNA R0_TypePath_Pos_NNP R0_TypePath_Stem_rDNA R1_minigene R1_TypePath_Pos_NN R1_TypePath_Stem_minigen TypePath_Pos_IN TypePath_Stem_of PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_rDNA LCWord_rdna CapitalType_MIXED_CASE L0_of L0_TypePath_Pos_IN L0_TypePath_Stem_of L1_transfection L1_TypePath_Pos_NN L1_TypePath_Stem_transfect R0_minigene R0_TypePath_Pos_NN R0_TypePath_Stem_minigen R1_constructs R1_TypePath_Pos_NNS R1_TypePath_Stem_construct TypePath_Pos_NNP TypePath_Stem_rDNA PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_minigene LCWord_minigene CapitalType_ALL_LOWERCASE Prefix3_min Suffix3_ene Suffix4_gene Suffix5_igene L0_rDNA L0_TypePath_Pos_NNP L0_TypePath_Stem_rDNA L1_of L1_TypePath_Pos_IN L1_TypePath_Stem_of R0_constructs R0_TypePath_Pos_NNS R0_TypePath_Stem_construct R1_into R1_TypePath_Pos_IN R1_TypePath_Stem_into TypePath_Pos_NN TypePath_Stem_minigen PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_constructs LCWord_constructs CapitalType_ALL_LOWERCASE Prefix3_con Suffix3_cts Suffix4_ucts Suffix5_ructs L0_minigene L0_TypePath_Pos_NN L0_TypePath_Stem_minigen L1_rDNA L1_TypePath_Pos_NNP L1_TypePath_Stem_rDNA R0_into R0_TypePath_Pos_IN R0_TypePath_Stem_into R1_3T6 R1_TypePath_Pos_CD R1_TypePath_Stem_3T6 TypePath_Pos_NNS TypePath_Stem_construct PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_into LCWord_into CapitalType_ALL_LOWERCASE L0_constructs L0_TypePath_Pos_NNS L0_TypePath_Stem_construct L1_minigene L1_TypePath_Pos_NN L1_TypePath_Stem_minigen R0_3T6 R0_TypePath_Pos_CD R0_TypePath_Stem_3T6 R1_cells R1_TypePath_Pos_NNS R1_TypePath_Stem_cell TypePath_Pos_IN TypePath_Stem_into PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_3T6 LCWord_3t6 CapitalType_ALL_UPPERCASE NumericType_ALPHANUMERIC L0_into L0_TypePath_Pos_IN L0_TypePath_Stem_into L1_constructs L1_TypePath_Pos_NNS L1_TypePath_Stem_construct R0_cells R0_TypePath_Pos_NNS R0_TypePath_Stem_cell R1_. R1_TypePath_Pos_. R1_TypePath_Stem_. TypePath_Pos_CD TypePath_Stem_3T6 PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_cells LCWord_cells CapitalType_ALL_LOWERCASE L0_3T6 L0_TypePath_Pos_CD L0_TypePath_Stem_3T6 L1_into L1_TypePath_Pos_IN L1_TypePath_Stem_into R0_. R0_TypePath_Pos_. R0_TypePath_Stem_. R1OOB1 TypePath_Pos_NNS TypePath_Stem_cell PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_. LCWord_. L0_cells L0_TypePath_Pos_NNS L0_TypePath_Stem_cell L1_3T6 L1_TypePath_Pos_CD L1_TypePath_Stem_3T6 R0OOB1 R1OOB2 TypePath_Pos_. TypePath_Stem_. PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    return instances;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void addShaped(RecipeDifficulty difficulty, ItemStack result, Object... recipe) {\n        if (difficulty != ALL && RecipeDifficulty.getDifficulty() != difficulty) {\n            return;\n        }\n\n        boolean isOre = false;\n\n        if (!isEnabled(result)) {\n            return;\n        }\n\n        for (int i = 3; i < recipe.length; i++) {\n            if (recipe[i] instanceof String) {\n                isOre = true;\n            }\n\n            if (!isEnabled(recipe[i])) {\n                return;\n            }\n        }\n\n        if (isOre) {\n            ResourceLocation location = getNameForRecipe(result);\n            ShapedOreRecipe shapedOreRecipe = new ShapedOreRecipe(location, result, recipe);\n            shapedOreRecipe.setRegistryName(location);\n            GameData.register_impl(shapedOreRecipe);\n        }\n        else {\n            ResourceLocation location = getNameForRecipe(result);\n            CraftingHelper.ShapedPrimer primer = CraftingHelper.parseShaped(recipe);\n            ShapedRecipes shapedRecipes = new ShapedRecipes(result.getItem().getRegistryName().toString(), primer.width, primer.height, primer.input, result);\n            shapedRecipes.setRegistryName(location);\n            GameData.register_impl(shapedRecipes);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static <P extends IUnlistedProperty<T>, T> T getStatePropertySafely(@Nullable TileEntity te, Class<? extends Block> block, P property, T defaultVal, boolean actual, boolean extended) {\n\t\tif(te == null || te.getWorld() == null) {\n\t\t\treturn defaultVal;\n\t\t}\n\t\tIBlockState state = te.getWorld().getBlockState(te.getPos());\n\t\tif(block.isInstance(state.getBlock())) {\n\t\t\tif(actual) {\n\t\t\t\tstate = state.getActualState(te.getWorld(), te.getPos());\n\t\t\t}\n\t\t\tif(extended) {\n\t\t\t\tstate = state.getBlock().getExtendedState(state, te.getWorld(), te.getPos());\n\t\t\t}\n\t\t\tif(state instanceof IExtendedBlockState) {\n\t\t\t\treturn ((IExtendedBlockState)state).getValue(property);\n\t\t\t}\n\t\t}\n\t\treturn defaultVal;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr adjacencyList) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), adjacencyList});\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void load() {\n        List<ListItemViewModel> viewModels = new ArrayList<>(DUMMY_MODEL_COUNT);\n        for (int i = 0; i < DUMMY_MODEL_COUNT; i++) {\n            ListItemViewModel vm = new ListItemViewModel();\n            if (i % 10 == 0 && isAddingHeaders) {\n                vm.primary = stringProvider.getStringForResource(R.string.item_primary_prefix) + \" \" + i;\n                vm.layout = R.layout.list_group_heading;\n            } else {\n                vm.primary = stringProvider.getStringForResource(R.string.item_primary_prefix) + \" \" + i;\n                vm.secondary = stringProvider.getStringForResource(R.string.item_secondary_prefix) + \" \" + i;\n                vm.tertiary = i + \" \" + stringProvider.getStringForResource(R.string.item_tertiary_prefix);\n                vm.imageUrl = \"http://rdiodynimages0-a.akamaihd.net/?l=a\" + (i + 100000) + \"-0\";\n            }\n            viewModels.add(vm);\n            if (vm.layout == R.layout.list_group_heading) {\n                onHeaderAdded(vm, i);\n            } else {\n                onItemAdded(vm, i);\n            }\n        }\n        setViewModels(viewModels);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters) {\n        api = this.filterApiString(api);\n        Type type = this.defineApiType(api);\n        api = this.appendGetArgs(api, filters);\n\n        try {\n\n            Request resource;\n            HttpResponse response;\n            String klass, content;\n\n            switch (rest) {\n                case GET:\n                    response = wrapper.get(Request.to(api));\n\n                    if (response.getStatusLine().getStatusCode() == 303) { // recursive better?\n                        api = (String) (response.getFirstHeader(\"Location\").getValue() + \".json\").replace(\"https://api.soundcloud.com\", \"\");\n                        response = wrapper.get(Request.to(api));\n                    }\n\n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String) (Http.formatJSON(Http.getString(response))).trim();\n\n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n\n                            if (data.size() > 0) {\n                                switch (type) {\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default:\n                                        return null;\n                                }\n\n                            }\n\n                        } else {\n\n                            switch (type) {\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default:\n                                    return null;\n                            }\n\n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    break;\n                case POST:\n\n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.') + 1));\n\n                    if (klass.equals(\"Track\")) {\n                        Track track = ((Track) value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE, track.getTitle())\n                                .add(Params.Track.TAG_LIST, track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA, new File(track.asset_data));\n                    } else if (klass.equals(\"Comment\")) {\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\" + content + \"}\";\n                        resource = Request.to(api.replace(\".json\", \"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n\n                    response = wrapper.post(resource);\n\n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String) (Http.formatJSON(Http.getString(response))).trim();\n                        switch (type) {\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default:\n                                return null;\n                        }\n\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n\n                    break;\n                case PUT:\n\n                    if (value != null) {\n\n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.') + 1));\n\n                        content = gson.toJson(value);\n\n                        if (klass.equals(\"User\")) {\n                            content = \"{\\\"user\\\":\" + content + \"}\";\n                        } else if (klass.equals(\"Track\")) {\n                            content = \"{\\\"track\\\":\" + content + \"}\";\n                        } else {\n                            return null;\n                        }\n\n                        resource = Request.to(api.replace(\".json\", \"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\", \"\"));\n                    }\n\n                    response = wrapper.put(resource);\n\n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String) (Http.formatJSON(Http.getString(response))).trim();\n\n                        switch (type) {\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default:\n                                return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n\n                    break;\n                case DELETE:\n                    response = wrapper.delete(Request.to(api));\n\n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void removePropertyChangeListener(\n                                                          PropertyChangeListener listener) {\n        synchronized (getObjectLock()) {\n            if (listener == null || changeSupport == null) {\n                return;\n            }\n            changeSupport.removePropertyChangeListener(listener);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nboolean resolveBundle(boolean resolve, HashSet<BundleClassLoader> hashSet) throws BundleException {\n\n        if (Framework.DEBUG_CLASSLOADING && log.isInfoEnabled()) {\n            log.info(\"BundleClassLoader: Resolving \" + this.bundle + (resolve ? \" (critical)\" : \" (not critical)\"));\n        }\n        List<String> pkgs=BundleInfoList.getInstance().\n                getDependencyForBundle(bundle.getLocation());\n        dependencyClsLoaders=new ArrayList<BundleClassLoader>(pkgs.size());\n        for (int i=0;i<pkgs.size();i++){\n            dependencyClsLoaders.add((BundleClassLoader) ACDD.getInstance().getBundleClassLoader(pkgs.get(i)));\n        }\n\n        return true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@SuppressWarnings(\"unchecked\")\n        public HttpContext.StringArrayList getNames() {\n            if (mNames == null) {\n                mNames = new HttpContext.StringArrayList();\n                Enumeration<String> e = mRequest.getAttributeNames();\n                while (e.hasMoreElements()) {\n                    mNames.add(e.nextElement());\n                }\n            }\n            return mNames;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test public void testBlock() throws Exception {\n        ElementSymbol a = new ElementSymbol(\"a\"); //$NON-NLS-1$\n        String type = new String(\"short\"); //$NON-NLS-1$\n        DeclareStatement declStmt = new DeclareStatement(a, type);\n        Statement stmt = declStmt;\n        Block block = new Block(stmt);       \n       \n        helpBlockTest(\"BEGIN DECLARE short a; END\", \"BEGIN\"+\"\\n\"+\"DECLARE short a;\"+\"\\n\"+\"END\", //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$\n            block);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n  public static Date addSeconds(Date date, int iSeconds) {\n    Calendar dateTime = dateToCalendar(date);\n    dateTime.add(Calendar.SECOND, iSeconds);\n    return dateTime.getTime();\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        public void onReply(int num, String value, String msg) {\n            logger.debug(\"A numeric reply with identifier {} and value {} was received.\", num, value);\n            headers.put(IRCConstants.HEADER_TYPE, \"reply\");\n            send(msg, headers);\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static String getCertificateFriendlyName(X509Certificate cert) {\n        X500Principal principal = cert.getSubjectX500Principal();\n        byte[] encodedSubject = principal.getEncoded();\n        String friendlyName=null;\n\n        \n        Exception exp=null;\n        try {\n            @SuppressLint(\"PrivateApi\") Class X509NameClass = Class.forName(\"com.android.org.bouncycastle.asn1.x509.X509Name\");\n            Method getInstance = X509NameClass.getMethod(\"getInstance\",Object.class);\n\n            Hashtable defaultSymbols = (Hashtable) X509NameClass.getField(\"DefaultSymbols\").get(X509NameClass);\n\n            if (!defaultSymbols.containsKey(\"1.2.840.113549.1.9.1\"))\n                defaultSymbols.put(\"1.2.840.113549.1.9.1\",\"eMail\");\n\n            Object subjectName = getInstance.invoke(X509NameClass, encodedSubject);\n\n            Method toString = X509NameClass.getMethod(\"toString\",boolean.class,Hashtable.class);\n\n            friendlyName= (String) toString.invoke(subjectName,true,defaultSymbols);\n                    \n        } catch (ClassNotFoundException e) {\n            exp =e ;\n        } catch (NoSuchMethodException e) {\n            exp =e;\n        } catch (InvocationTargetException e) {\n            exp =e;\n        } catch (IllegalAccessException e) {\n            exp =e;\n        } catch (NoSuchFieldException e) {\n            exp =e;\n        }\n        if (exp!=null)\n            VpnStatus.logException(\"Getting X509 Name from certificate\", exp);\n\n        \n        if(friendlyName==null)\n            friendlyName = principal.getName();\n\n\n\n        String[] parts = friendlyName.split(\",\");\n        for (int i=0;i<parts.length;i++){\n            String part = parts[i];\n            if (part.startsWith(\"1.2.840.113549.1.9.1=#16\")) {\n                parts[i] = \"email=\" + ia5decode(part.replace(\"1.2.840.113549.1.9.1=#16\", \"\"));\n            }\n        }\n        friendlyName = TextUtils.join(\",\", parts);\n        return friendlyName;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; } \n        return retVal;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic String startGather(Player player, Point p, int maxDistance, boolean npc) {\n        Resource resource = null;\n        Resource closestResource = null;\n\n        double closestDistance = 0;\n\n        try {\n            for (String key : resources.keySet()) {\n                resource = (Resource) resources.get(key);\n                if (!resource.getIsCollecting()) {\n                    if (p.distance(resource.getCenterPoint()) < closestDistance || closestDistance == 0) {\n                        closestResource = resource;\n                        closestDistance = p.distance(resource.getCenterPoint());\n                    }\n                }\n            }\n        } catch (ConcurrentModificationException concEx) {\n        }\n\n        if (closestResource != null && closestDistance <= maxDistance) {\n            closestResource.setCollecting(player, true, npc);\n            collectingResources.put(closestResource.getId(), closestResource);\n            return closestResource.getId();\n        }\n\n        return \"\";\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static StatsDReporterConfig buildConfig(List<HostPort> hosts, String timeUnit) {\n        StatsDReporterConfig reporter = new StatsDReporterConfig();\n\n        reporter.setHosts(hosts);\n\n        reporter.setRateunit(testRateunit.toString());\n        reporter.setDurationunit(testDurationunit.toString());\n        reporter.setPrefix(testPrefix);\n        reporter.setPredicate(testPredicate);\n        reporter.setPeriod(testPeriod);\n        reporter.setTimeunit(timeUnit);\n\n        return reporter;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic ShortcutView(final Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t\tpm = context.getPackageManager();\n\t\t\n\t\tgetResources().getInteger(R.integer.shortcut_capacity);\n\t\t\n\t\tsec = PreferenceManager.getDefaultSharedPreferences(getContext());\n\n\t\tpkg = sec.getString(\"pkg\", \"\");\n\t\tpin = sec.getString(\"pin\", \"\");\t\t\n\t\t\n\t\t\n\t\tfor (int i = 0; i < CAPACITY; i++) {\n\t\t\tfinal int b = i;\n\t\t\tApplicationInfo ai = null;\n\t\t\tString sv = null;\n\t\t\tString s = Settings.System.getString(context.getContentResolver(), \"PiSC\" + i);\n\n\t\t\tif (s == null | s == \"\") {\n\n\t\t\t\tSettings.System.putString(context.getContentResolver(), \"PiSC\"+b, \"com.pilockerstable\");\n\t\t\t}\n\t\t\tsv = s;\n\n\t\t\ttry {\n\t\t\t\tai = pm.getApplicationInfo(sv, 0);\n\t\t\t} catch (NameNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tShortCut sc = new ShortCut(context, attrs);\n\t\t\tString App_Name = (String) pm.getApplicationLabel(ai);\n\t\t\tDrawable Icon = pm.getApplicationIcon(ai);\n\t\t\tShortcutter st = new Shortcutter(App_Name, Icon);\n\t\t\tsc.setName(st.getName());\n\t\t\tsc.setImage(st.getIcon());\n\n\t\t\taddView(sc);\n\t\t\tsc.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t\n\t\t\t\tString sv = Settings.System.getString( context.getContentResolver(), \"PiSC\" + b);\n\n\t\t\t\t@Override \n\t\t\t\tpublic void onClick(View arg0) {\n\n\t\t\t\t\tif( pin.equals(\"\") || pin.equals(null) || pin.isEmpty()) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t((Activity) context).finish();\n\t\t\t\t\t\tIntent i = new Intent();\n\t\t\t\t\t\ti.setClass(getContext(), LockerService.class);\n\t\t\t\t\t\tcontext.startService(i);\n\t\t\t\t\t\tIntent LaunchIntent = context.getPackageManager().getLaunchIntentForPackage(sv);\n\t\t\t\t\t\tcontext.startActivity(LaunchIntent);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t} else{\n\t\t\t\t\t\n\t\t\t\t\tsave(\"pkg\", \"true\");\n\t\t\t\t\tIntent x = new Intent(getContext(), PinActivity.class);\n\t\t\t\t\tx.putExtra(\"sv\", sv);\n\t\t\t\t\tcontext.startActivity(x);\n\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate String buildElements() {\n\n        StringBuilder xml = new StringBuilder();\n\n        xml.append(\"<xml>\");\n\n        if (es != null && es.size() > 0){\n            for (E e : es){\n                xml.append(e.render());\n            }\n        }\n\n        xml.append(\"</xml>\");\n\n        return xml.toString();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        \n        byte[] byteArray = new byte[bytes.size()]; \n        bytes.getBytes(byteArray, 0);\n        return Utf8Utils.utf8BytesToString(byteArray);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic Params(@NotNull String path,\n                  @NotNull int[] rev,\n                  boolean wantProps,\n                  boolean wantContents,\n                  \n                  @SuppressWarnings(\"UnusedParameters\")\n                  @NotNull String[] fields,\n                  boolean wantIProps) {\n      this.path = path;\n      this.rev = rev;\n      this.wantProps = wantProps;\n      this.wantContents = wantContents;\n      this.wantIProps = wantIProps;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprotected String testBlock(BlockPos pos) {\n\t\tIBlockState _blockState = worldObj.getBlockState(pos);\n\t\tBlock _block = _blockState.getBlock();\n\t\tint metaData = _block.getMetaFromState(_blockState);\n\t\tItemStack testItem = new ItemStack(_block, 1, metaData);\n\t\tif (ModHelper.isLeaf(testItem)) return \"treeLeaves\";\n\t\tif (ModHelper.isLog(testItem)) return \"logWood\";\n\t\treturn \"Unknown\";\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        boolean bIdentifierIgnorable = false;\n\n        if (codePoint >= MIN_CODE_POINT && codePoint <= FAST_PATH_MAX) {\n            bIdentifierIgnorable = CharacterDataLatin1.isIdentifierIgnorable(codePoint);\n        } else {\n            int plane = getPlane(codePoint);\n            switch(plane) {\n            case(0):\n                bIdentifierIgnorable = CharacterData00.isIdentifierIgnorable(codePoint);\n                break;\n            case(1):\n                bIdentifierIgnorable = CharacterData01.isIdentifierIgnorable(codePoint);\n                break;\n            case(2):\n                bIdentifierIgnorable = CharacterData02.isIdentifierIgnorable(codePoint);\n                break;\n            case(3): // Undefined\n            case(4): // Undefined\n            case(5): // Undefined\n            case(6): // Undefined\n            case(7): // Undefined\n            case(8): // Undefined\n            case(9): // Undefined\n            case(10): // Undefined\n            case(11): // Undefined\n            case(12): // Undefined\n            case(13): // Undefined\n                bIdentifierIgnorable = CharacterDataUndefined.isIdentifierIgnorable(codePoint);\n                break;\n            case(14): \n                bIdentifierIgnorable = CharacterData0E.isIdentifierIgnorable(codePoint);\n                break;\n            case(15): // Private Use\n            case(16): // Private Use\n                bIdentifierIgnorable = CharacterDataPrivateUse.isIdentifierIgnorable(codePoint);\n                break;\n            default:\n                break;\n            }\n        }\n        return bIdentifierIgnorable;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test public void\n    testBlock() throws Exception {\n        CompilationUnit cu = new CompilationUnit(\"AstTests.java\");\n\n        final PackageMemberClassDeclaration clazz = AstTest.createClass(cu);\n\n        List<Java.Statement> body = new ArrayList<Statement>();\n\n        Block sub = new Block(AstTest.getLocation());\n        sub.addStatement(AstTest.createVarDecl(\"x\", \"2.0\"));\n\n        body.add(sub);\n        body.add(\n            new ReturnStatement(\n                AstTest.getLocation(),\n                new Java.BinaryOperation(\n                    AstTest.getLocation(),\n                    AstTest.createVariableRef(\"x\"),\n                    \"*\",\n                    AstTest.createIntegerLiteral(\"3\")\n                )\n            )\n        );\n\n        AstTest.createMethod(clazz, body, AstTest.createDoubleType());\n\n        try {\n            AstTest.compileAndEval(cu);\n            Assert.fail(\"Block must limit the scope of variables in it\");\n        } catch (CompileException ex) {\n            Assert.assertTrue(ex.getMessage().endsWith(\"Expression \\\"x\\\" is not an rvalue\"));\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Object getObject(int columnIndex) throws SQLException {\n        Object value;\n        Map<String, Class<?>> map;\n\n        checkIndex(columnIndex);\n        checkCursor();\n\n        setLastValueNull(false);\n        value = getCurrentRow().getColumnObject(columnIndex);\n\n        if (value == null) {\n            setLastValueNull(true);\n            return null;\n        }\n        if (value instanceof Struct) {\n            Struct s = (Struct)value;\n            map = getTypeMap();\n            Class c = (Class)map.get(s.getSQLTypeName());\n            if (c != null) {\n                SQLData obj = null;\n                try {\n                    obj = (SQLData)c.newInstance();\n                } catch (java.lang.InstantiationException ex) {\n                    throw new SQLException(MessageFormat.format(resBundle.handleGetObject(\"cachedrowsetimpl.unableins\").toString(),\n                    ex.getMessage()));\n                } catch (java.lang.IllegalAccessException ex) {\n                    throw new SQLException(MessageFormat.format(resBundle.handleGetObject(\"cachedrowsetimpl.unableins\").toString(),\n                    ex.getMessage()));\n                }\n                Object attribs[] = s.getAttributes(map);\n                SQLInputImpl sqlInput = new SQLInputImpl(attribs, map);\n                obj.readSQL(sqlInput, s.getSQLTypeName());\n                return (Object)obj;\n            }\n        }\n        return value;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean putMapNotEmptyKeyAndValue(Map<String, String> map, String key, String value,\n                                                    String defaultValue) {\n        if (map == null || StringUtil.isEmpty(key)) {\n            return false;\n        }\n\n        map.put(key, StringUtil.isEmpty(value) ? defaultValue : value);\n        return true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        return CharacterData.of(codePoint).isIdentifierIgnorable(codePoint);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate Expression readTerm() throws SQLException {\n        Expression r = null;\n        switch (currentTokenType) {\n        case PARAMETER:\n            boolean indexed = Character.isDigit(sqlCommandChars[parseIndex]);\n            read();\n            Parameter p;\n                p = new Parameter(session, parameters.size());\n            parameters.add(p);\n            r = p;\n            break;\n        case IDENTIFIER:\n            String name = currentToken;\n                read();\n                  if (readIf(\".\")) {\n                    r = readTermObjectDot(name);\n                } else {\n                    r = new ExpressionColumn(session, null, null, name);\n                }\n            break;\n        case OPEN:\n            read();\n            r = readExpression();\n            if (readIf(\",\")) {\n                ObjectArray<Expression> list = ObjectArray.newInstance();\n                list.add(r);\n                do {\n                    r = readExpression();\n                    list.add(r);\n                } while (readIf(\",\"));\n                Expression[] array = new Expression[list.size()];\n                list.toArray(array);\n            }\n            read(\")\");\n            break;\n        case NULL:\n            read();\n            r = new Null();\n            break;\n        default:\n            throw getSyntaxError();\n        }\n\n        return r;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate double readDecimalLiteral(int c, boolean resetBuffer) {\n        assert c == '.' || isDecimalDigit(c);\n        boolean isInteger = true;\n        TokenStreamInput input = this.input;\n        StrBuffer buffer = resetBuffer ? this.buffer() : this.buffer;\n        if (c != '.' && c != '0') {\n            buffer.append(c);\n            while (isDecimalDigit(c = input.get())) {\n                buffer.append(c);\n            }\n        } else if (c == '0') {\n            buffer.append(c);\n            c = input.get();\n        }\n        if (c == '.') {\n            isInteger = false;\n            buffer.append(c);\n            while (isDecimalDigit(c = input.get())) {\n                buffer.append(c);\n            }\n        }\n        if (c == 'e' || c == 'E') {\n            isInteger = false;\n            buffer.append(c);\n            c = input.get();\n            if (c == '+' || c == '-') {\n                buffer.append(c);\n                c = input.get();\n            }\n            if (!isDecimalDigit(c)) {\n                throw error(Messages.Key.InvalidNumberLiteral);\n            }\n            buffer.append(c);\n            while (isDecimalDigit(c = input.get())) {\n                buffer.append(c);\n            }\n        }\n        if (isDecimalDigitOrIdentifierStart(c)) {\n            throw error(Messages.Key.InvalidNumberLiteral);\n        }\n        input.unget(c);\n        if (isInteger) {\n            return parseInteger(buffer.array(), buffer.length());\n        }\n        return parseDecimal(buffer.array(), buffer.length());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void registerReceiver(World world, BlockPos pos, String name) {\n        TeleportDestinations destinations = TeleportDestinations.getDestinations(world);\n        GlobalCoordinate gc = new GlobalCoordinate(pos, world.provider.getDimension());\n        TeleportDestination destination = destinations.addDestination(gc);\n        destination.setName(name);\n        destinations.save(world);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void onDownloadError(int index, String message) {\n    for (int i = 0; i < mDownloadStatus.length; i++) {\n        if (mDownloadStatus[i] != DownFile.DownloadStatus.FINISH && mDownloadStatus[i] != DownFile.DownloadStatus.ERROR) {\n            mDownloadThreads[i].cancel();\n        }\n    }\n    notifyError(message);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Kernel(int width, int height, double factor, double data[]) {\n        this(width, height, (width - 1) / 2, (height - 1) / 2, factor, data);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.google.bigtable.v2.Column parseFrom(\n      java.io.InputStream input,\n      com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n      throws java.io.IOException {\n    return com.google.protobuf.GeneratedMessageV3\n        .parseWithIOException(PARSER, input, extensionRegistry);\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\n\tprivate void topologicalSort( Collection<TopologicalElement> unmarkedNodes, List<Element> sorted ) {\n\n\t\twhile ( !unmarkedNodes.isEmpty() ) {\n\n\t\t\tTopologicalElement node = unmarkedNodes.iterator().next();\n\t\t\ttopologicalVisit( node, unmarkedNodes, sorted, unmarkedNodes.size() );\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic Vector<Operator> topologicalSort() {\n\t\tfinal Map<Operator, Integer> originalIndices = new HashMap<Operator, Integer>();\n\t\tfor (int i = 0; i < operators.size(); i++) {\n\t\t\toriginalIndices.put(operators.get(i), i);\n\t\t}\n\t\tEdgeCounter counter = new EdgeCounter(operators);\n\t\tfor (Operator child : getOperators()) {\n\t\t\tfor (OutputPort out : child.getOutputPorts().getAllPorts()) {\n\t\t\t\tInputPort dest = out.getDestination();\n\t\t\t\tif (dest != null) {\n\t\t\t\t\tcounter.incNumEdges(dest.getPorts().getOwner().getOperator());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tVector<Operator> sorted = new Vector<Operator>();\n\t\tPriorityQueue<Operator> independentOperators = new PriorityQueue<Operator>(Math.max(1, operators.size()),\n\t\t\t\tnew Comparator<Operator>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic int compare(Operator o1, Operator o2) {\n\t\t\t\t\t\treturn originalIndices.get(o1) - originalIndices.get(o2);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\tindependentOperators.addAll(counter.getIndependentOperators());\n\t\twhile (!independentOperators.isEmpty()) {\n\t\t\tOperator first = independentOperators.poll();\n\t\t\tsorted.add(first);\n\t\t\tfor (OutputPort out : first.getOutputPorts().getAllPorts()) {\n\t\t\t\tInputPort dest = out.getDestination();\n\t\t\t\tif (dest != null) {\n\t\t\t\t\tOperator destOp = dest.getPorts().getOwner().getOperator();\n\t\t\t\t\tif (counter.decNumEdges(destOp) == 0) {\n\t\t\t\t\t\tindependentOperators.add(destOp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public PartitionLoad getLoad() throws IOException{\n        Map<ServerName, List<HRegionInfo>> serverToRegionMap=new HashMap<>();\n        try(RegionLocator rl=connection.getRegionLocator(tableName)){\n            List<HRegionLocation> locations=rl.getAllRegionLocations();\n            for(HRegionLocation location : locations){\n                List<HRegionInfo> info=serverToRegionMap.get(location.getServerName());\n                if(info==null){\n                    info = new LinkedList<>();\n                    serverToRegionMap.put(location.getServerName(),info);\n                }\n                info.add(location.getRegionInfo());\n            }\n        }\n        int totalStoreFileSizeMB = 0;\n        int totalMemstoreSieMB = 0;\n        int storefileIndexSizeMB = 0;\n        try(Admin admin=connection.getAdmin()){\n            ClusterStatus clusterStatus=admin.getClusterStatus();\n            for(Map.Entry<ServerName,List<HRegionInfo>> entry:serverToRegionMap.entrySet()){\n                ServerLoad load=clusterStatus.getLoad(entry.getKey());\n                Map<byte[], RegionLoad> regionsLoad=load.getRegionsLoad();\n                for(HRegionInfo info:entry.getValue()){\n                    RegionLoad rl = regionsLoad.get(info.getRegionName());\n                    totalStoreFileSizeMB+=rl.getStorefileSizeMB();\n                    totalMemstoreSieMB+=rl.getMemStoreSizeMB();\n                    storefileIndexSizeMB+=rl.getStorefileIndexSizeMB();\n                }\n            }\n        }\n        return new HPartitionLoad(getName(),totalStoreFileSizeMB,totalMemstoreSieMB,storefileIndexSizeMB);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static <A extends Closeable> A api(Class<A> apitype, final String provider, final String credId, final Properties overrides) {\n        Thread.currentThread().setContextClassLoader(Apis.class.getClassLoader());\n        return CredentialsHelper.setCredentials(ContextBuilder.newBuilder(provider), credId)\n            .overrides(overrides).modules(MODULES).buildApi(typeToken(apitype));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        public void onReply(int num, String value, String msg) {\n            logger.debug(\"A numeric reply with identifier {} and value {} was received.\", num, value);\n            headers.put(IRCConstants.HEADER_TYPE, \"reply\");\n            send(msg, headers);\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic boolean registerPacket(Class<? extends PacketBase> packet) {\n\n\t\tif (this.packets.size() > 256) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.packets.contains(packet)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.isPostInitialised) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.packets.add(packet);\n\t\treturn true;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic DocumentInfo(String author, String creator, String fileName, boolean isEncrypted, int pages,\n\t\t\tString pdfVersion, String producer, String title) {\n\t\tsuper();\n\t\tthis.author = author;\n\t\tthis.creator = creator;\n\t\tthis.fileName = fileName;\n\t\tthis.isEncrypted = isEncrypted;\n\t\tthis.pages = pages;\n\t\tthis.pdfVersion = pdfVersion;\n\t\tthis.producer = producer;\n\t\tthis.title = title;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tpublic List<Gadget> findAll(int start, int end) throws SystemException {\n\t\treturn findAll(start, end, null);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void doGenerate(final Resource resource, final IFileSystemAccess fsa) {\n    EList<EObject> _contents = resource.getContents();\n    EObject _head = IterableExtensions.<EObject>head(_contents);\n    Model model = ((Model) _head);\n    SqliteDatabaseSnapshot.Builder _get = this.mDbSnapshotBuilderProvider.get();\n    final SqliteDatabaseSnapshot snapshot = _get.build(model);\n    String _packageName = model.getPackageName();\n    DatabaseBlock _database = model.getDatabase();\n    String _name = _database.getName();\n    String _pascalize = Strings.pascalize(_name);\n    String _concat = \"Abstract\".concat(_pascalize);\n    String _concat_1 = _concat.concat(\"OpenHelper\");\n    String _resolveFileName = Strings.resolveFileName(_packageName, _concat_1);\n    CharSequence _generate = this.mOpenHelperGenerator.generate(model, snapshot);\n    fsa.generateFile(_resolveFileName, _generate);\n    String _packageName_1 = model.getPackageName();\n    DatabaseBlock _database_1 = model.getDatabase();\n    String _name_1 = _database_1.getName();\n    String _pascalize_1 = Strings.pascalize(_name_1);\n    String _concat_2 = _pascalize_1.concat(\"OpenHelper\");\n    String _resolveFileName_1 = Strings.resolveFileName(_packageName_1, _concat_2);\n    CharSequence _generateStub = this.mOpenHelperGenerator.generateStub(model, snapshot);\n    fsa.generateFile(_resolveFileName_1, \n      MechanoidOutputConfigurationProvider.DEFAULT_STUB_OUTPUT, _generateStub);\n    String _packageName_2 = model.getPackageName();\n    DatabaseBlock _database_2 = model.getDatabase();\n    String _name_2 = _database_2.getName();\n    String _pascalize_2 = Strings.pascalize(_name_2);\n    String _concat_3 = _pascalize_2.concat(\"Contract\");\n    String _resolveFileName_2 = Strings.resolveFileName(_packageName_2, _concat_3);\n    CharSequence _generate_1 = this.mContentProviderContractGenerator.generate(model, snapshot);\n    fsa.generateFile(_resolveFileName_2, _generate_1);\n    String _packageName_3 = model.getPackageName();\n    DatabaseBlock _database_3 = model.getDatabase();\n    String _name_3 = _database_3.getName();\n    String _pascalize_3 = Strings.pascalize(_name_3);\n    String _concat_4 = \"Abstract\".concat(_pascalize_3);\n    String _concat_5 = _concat_4.concat(\"ContentProvider\");\n    String _resolveFileName_3 = Strings.resolveFileName(_packageName_3, _concat_5);\n    CharSequence _generate_2 = this.mContentProviderGenerator.generate(model, snapshot);\n    fsa.generateFile(_resolveFileName_3, _generate_2);\n    String _packageName_4 = model.getPackageName();\n    DatabaseBlock _database_4 = model.getDatabase();\n    String _name_4 = _database_4.getName();\n    String _pascalize_4 = Strings.pascalize(_name_4);\n    String _concat_6 = _pascalize_4.concat(\"ContentProvider\");\n    String _resolveFileName_4 = Strings.resolveFileName(_packageName_4, _concat_6);\n    CharSequence _generateStub_1 = this.mContentProviderGenerator.generateStub(model, snapshot);\n    fsa.generateFile(_resolveFileName_4, \n      MechanoidOutputConfigurationProvider.DEFAULT_STUB_OUTPUT, _generateStub_1);\n    Collection<CreateTableStatement> _tables = snapshot.getTables();\n    final Procedure1<CreateTableStatement> _function = new Procedure1<CreateTableStatement>() {\n      public void apply(final CreateTableStatement statement) {\n        SqliteModelGenerator.this.generateActiveRecordEntity(resource, fsa, ((CreateTableStatement) statement));\n      }\n    };\n    IterableExtensions.<CreateTableStatement>forEach(_tables, _function);\n    Collection<CreateViewStatement> _views = snapshot.getViews();\n    final Procedure1<CreateViewStatement> _function_1 = new Procedure1<CreateViewStatement>() {\n      public void apply(final CreateViewStatement statement) {\n        SqliteModelGenerator.this.generateActiveRecordEntity(resource, fsa, ((CreateViewStatement) statement));\n      }\n    };\n    IterableExtensions.<CreateViewStatement>forEach(_views, _function_1);\n    Collection<CreateTableStatement> _configInitTables = ModelUtil.getConfigInitTables(model);\n    final Procedure1<CreateTableStatement> _function_2 = new Procedure1<CreateTableStatement>() {\n      public void apply(final CreateTableStatement statement) {\n        SqliteModelGenerator.this.generateActiveRecordEntity(resource, fsa, ((CreateTableStatement) statement));\n      }\n    };\n    IterableExtensions.<CreateTableStatement>forEach(_configInitTables, _function_2);\n    Collection<CreateViewStatement> _configInitViews = ModelUtil.getConfigInitViews(model);\n    final Procedure1<CreateViewStatement> _function_3 = new Procedure1<CreateViewStatement>() {\n      public void apply(final CreateViewStatement statement) {\n        SqliteModelGenerator.this.generateActiveRecordEntity(resource, fsa, ((CreateViewStatement) statement));\n      }\n    };\n    IterableExtensions.<CreateViewStatement>forEach(_configInitViews, _function_3);\n    DatabaseBlock _database_5 = model.getDatabase();\n    EList<MigrationBlock> _migrations = _database_5.getMigrations();\n    final Procedure2<MigrationBlock, Integer> _function_4 = new Procedure2<MigrationBlock, Integer>() {\n      public void apply(final MigrationBlock item, final Integer index) {\n        SqliteModelGenerator.this.generateMigration(resource, fsa, item, ((index).intValue() + 1));\n      }\n    };\n    IterableExtensions.<MigrationBlock>forEach(_migrations, _function_4);\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n  public final BlockTermState writeTerm(BytesRef term, TermsEnum termsEnum, FixedBitSet docsSeen) throws IOException {\n    startTerm();\n    if (writePositions == false) {\n      docsEnum = termsEnum.docs(null, docsEnum, enumFlags);\n    } else {\n      posEnum = termsEnum.docsAndPositions(null, posEnum, enumFlags);\n      docsEnum = posEnum;\n    }\n    assert docsEnum != null;\n\n    int docFreq = 0;\n    long totalTermFreq = 0;\n    while (true) {\n      int docID = docsEnum.nextDoc();\n      if (docID == DocsEnum.NO_MORE_DOCS) {\n        break;\n      }\n      docFreq++;\n      docsSeen.set(docID);\n      int freq;\n      if (writeFreqs) {\n        freq = docsEnum.freq();\n        totalTermFreq += freq;\n      } else {\n        freq = -1;\n      }\n      startDoc(docID, freq);\n\n      if (writePositions) {\n        for(int i=0;i<freq;i++) {\n          int pos = posEnum.nextPosition();\n          BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n          int startOffset;\n          int endOffset;\n          if (writeOffsets) {\n            startOffset = posEnum.startOffset();\n            endOffset = posEnum.endOffset();\n          } else {\n            startOffset = -1;\n            endOffset = -1;\n          }\n          addPosition(pos, payload, startOffset, endOffset);\n        }\n      }\n\n      finishDoc();\n    }\n\n    if (docFreq == 0) {\n      return null;\n    } else {\n      BlockTermState state = newTermState();\n      state.docFreq = docFreq;\n      state.totalTermFreq = writeFreqs ? totalTermFreq : -1;\n      finishTerm(state);\n      return state;\n    }\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public URI resolve(URI uri) {\n        return resolve(this, uri);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic List<List<String>> toClass(InputEvent event) throws IOException {\n        List<List<String>> output = new ArrayList<>();\n        String[] items;\n        try {\n            items = super.getItems(event);\n\n            for (String s : items) {\n                List<String> elements = new ArrayList<>();\n\n                if (m == null) {\n                    m = p.matcher(s);\n                } else {\n                    m.reset(s);\n                }\n                if (m.find() && m.groupCount() > 0) {\n                    for (int i = 1; i < m.groupCount() + 1; i++) {\n                        elements.add(m.group(i));\n                    }\n\n                    output.add(elements);\n                }\n            }\n\n            return output;\n        } catch (Exception e) {\n            throw new IOException(e);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static String getCertificateFriendlyName(X509Certificate cert) {\n        X500Principal principal = cert.getSubjectX500Principal();\n        byte[] encodedSubject = principal.getEncoded();\n        String friendlyName=null;\n\n        \n        Exception exp=null;\n        try {\n            @SuppressLint(\"PrivateApi\") Class X509NameClass = Class.forName(\"com.android.org.bouncycastle.asn1.x509.X509Name\");\n            Method getInstance = X509NameClass.getMethod(\"getInstance\",Object.class);\n\n            Hashtable defaultSymbols = (Hashtable) X509NameClass.getField(\"DefaultSymbols\").get(X509NameClass);\n\n            if (!defaultSymbols.containsKey(\"1.2.840.113549.1.9.1\"))\n                defaultSymbols.put(\"1.2.840.113549.1.9.1\",\"eMail\");\n\n            Object subjectName = getInstance.invoke(X509NameClass, encodedSubject);\n\n            Method toString = X509NameClass.getMethod(\"toString\",boolean.class,Hashtable.class);\n\n            friendlyName= (String) toString.invoke(subjectName,true,defaultSymbols);\n                    \n        } catch (ClassNotFoundException e) {\n            exp =e ;\n        } catch (NoSuchMethodException e) {\n            exp =e;\n        } catch (InvocationTargetException e) {\n            exp =e;\n        } catch (IllegalAccessException e) {\n            exp =e;\n        } catch (NoSuchFieldException e) {\n            exp =e;\n        }\n        if (exp!=null)\n            VpnStatus.logException(\"Getting X509 Name from certificate\", exp);\n\n        \n        if(friendlyName==null)\n            friendlyName = principal.getName();\n\n\n\n        String[] parts = friendlyName.split(\",\");\n        for (int i=0;i<parts.length;i++){\n            String part = parts[i];\n            if (part.startsWith(\"1.2.840.113549.1.9.1=#16\")) {\n                parts[i] = \"email=\" + ia5decode(part.replace(\"1.2.840.113549.1.9.1=#16\", \"\"));\n            }\n        }\n        friendlyName = TextUtils.join(\",\", parts);\n        return friendlyName;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        public void onReply(int num, String value, String msg) {\n            logger.debug(\"A numeric reply with identifier {} and value {} was received.\", num, value);\n            headers.put(IRCConstants.HEADER_TYPE, \"reply\");\n            send(msg, headers);\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps,\n                boolean isUserGenerated) {\n            Validate.notNull(objectProperty, \"objectProperty\");\n            Validate.containsNoNulls(bitmaps, \"bitmaps\");\n            if (action == null) {\n                throw new FacebookException(\"Can not set attachments prior to setting action.\");\n            }\n\n            List<String> attachmentUrls = addImageAttachments(bitmaps);\n            updateObjectAttachmentUrls(objectProperty, attachmentUrls, isUserGenerated);\n\n            return this;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" deltaNeutralOpenClose=\" + order.m_deltaNeutralOpenClose +\n        \" deltaNeutralShortSale=\" + order.m_deltaNeutralShortSale +\n        \" deltaNeutralShortSaleSlot=\" + order.m_deltaNeutralShortSaleSlot +\n        \" deltaNeutralDesignatedLocation=\" + order.m_deltaNeutralDesignatedLocation +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void testLogMessage() throws Exception {\n    \tListLogger cfg = (ListLogger)LogManager.logListener;\n        cfg.setLogLevel(CONTEXT, MessageLevel.INFO );\n\n        List<String> sentMsgList = new ArrayList<String>();\n        sentMsgList.add(\"A message 1\"); //$NON-NLS-1$\n        sentMsgList.add(\"A message 2\"); //$NON-NLS-1$\n        sentMsgList.add(\"A message 3\"); //$NON-NLS-1$\n        sentMsgList.add(\"A message 4\"); //$NON-NLS-1$\n        sentMsgList.add(\"A message 5\"); //$NON-NLS-1$\n        sentMsgList.add(\"A message 6\"); //$NON-NLS-1$\n\n        for (Iterator<String> iter = sentMsgList.iterator(); iter.hasNext();) {\n            String msg = iter.next();\n            LogManager.logInfo(CONTEXT, msg); \n        }\n        \n        List<String> recevedMsgList = cfg.getLoggedMessages();\n        assertEquals(sentMsgList.size(), recevedMsgList.size());\n        assertEquals(sentMsgList, recevedMsgList);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprivate void completeAddAppWidget(Intent data, CellLayout.CellInfo cellInfo) {\n\t\tBundle extras = data.getExtras();\n\t\tint appWidgetId = extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID, -1);\n\n\t\tLog.d(LOG_TAG, \"dumping extras content=\" + extras.toString());\n\n\t\tAppWidgetProviderInfo appWidgetInfo = appWidgetManager.getAppWidgetInfo(appWidgetId);\n\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void quadrantRotate(int numquadrants) {\n        switch (numquadrants & 3) {\n        case 0:\n            break;\n        case 1:\n            rotate90();\n            break;\n        case 2:\n            rotate180();\n            break;\n        case 3:\n            rotate270();\n            break;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic boolean isLinked(ParaObject obj, String type2, String id2) {\n\t\t\tif (type2 == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn getDao().read(obj.getAppid(), new Linker(obj.getType(), type2, obj.getId(), id2).getId()) != null;\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void main(String[] args){\n\t\ttry {\n\t\t\t@SuppressWarnings(\"deprecation\")\n\t\t\tHBaseConfiguration conf = new HBaseConfiguration();\n\t\t\tconf.set(\"hbase.zookeeper.quorum\", \"den3dhdptk01.int.photobucket.com\");\n\t\t\tconf.set(\"hbase.zookeeper.property.clientPort\", \"2181\");\n\t\t\tconf.setInt(\"hbase.client.retries.number\", 7);\n\t\t\tconf.setInt(\"ipc.client.connect.max.retries\", 3);\n\n\t\t\t\n\t\t\t\n\t\t\tHTablePool hTablePool = new HTablePool(conf, 10);\n\t\t\t\n\t\t\tHTableInterface seq = hTablePool.getTable(\"DocKeyIdMap\");\t\t\t\n\n\t\t\tString globalId = \"0089210673:0000540572:309AB023-orig.jpg\";\n\t\t\tGet get = new Get(Bytes.toBytes(globalId));\n\t\t\t\n\t\t\tResult result = seq.get(get);\n\t\t\t\n\t\t\tbyte[] docId = result.getValue(Bytes.toBytes(\"docId\"), Bytes.toBytes(\"\"));\n\n\t\t\tint docNumber = 384900472;\n\t\t\t\n\t\t\tSolrInputDocument doc = new SolrInputDocument();\t\t\t\n\t\t\tif(docId != null) {\n\t\t\t\tSystem.out.println(Bytes.toInt(docId));\n\t\t\t\tdocNumber = Bytes.toInt(docId);\n\t\t\t\tdoc.addField(\"edit\", true);\n\t\t\t}\n\t\t\t\n\t\t\tCommonsHttpSolrServer solbaseServer = new CommonsHttpSolrServer(\"http://localhost:8080/solbase/pbimages~1\");\n\n\t\t\tdoc.addField(\"docId\", docNumber);\n\t\t\tdoc.addField(\"global_uniq_id\", globalId);\n\t\t\tdoc.addField(\"title\", \"tom\");\n\t\t\tdoc.addField(\"description\", \"Uploaded with Snapbucket\");\n\t\t\tdoc.addField(\"tags\", \"Snapbucket\");\n\t\t\tdoc.addField(\"path\", \"/albums/tt262/koh_tester/309AB021-orig.jpg\");\n\t\t\tdoc.addField(\"subdomain\", \"i618\");\n\t\t\tdoc.addField(\"lastModified\", new Integer(SolbaseUtil.getEpochSinceSolbase(System.currentTimeMillis() / 60000)).toString());\n\t\t\tdoc.addField(\"media_type\", new Integer(1).toString());\n\t\t\tdoc.addField(\"total_view_count\", new Long(10).toString());\n\t\t\tdoc.addField(\"sevendays_view_count\", new Integer(5).toString());\n\t\t\tdoc.addField(\"total_likes_count\", new Long(5).toString());\n\t\t\tdoc.addField(\"sevendays_likes_count\", new Integer(1).toString());\n\t\t\tdoc.addField(\"total_comments_count\", new Long(5).toString());\n\t\t\tdoc.addField(\"sevendays_comments_count\", new Integer(1).toString());\n\t\t\tdoc.addField(\"contents\", \"audi tom solbase Uploaded with Snapbucket \");\n\t\t\tdoc.addField(\"updateStore\", true);\n\t\t\t\n\t\t\tsolbaseServer.add(doc);\n\n\t\t} catch (MalformedURLException e) {\n\n\t\t} catch (SolrServerException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private static void print(int values[], int start, int end,\n                              int middle, int target) {\n\n        if (DEBUG_IDS) {\n            System.out.print(start);\n            System.out.print(\" [\");\n            for (int i = start; i < end; i++) {\n                if (middle == i) {\n                    System.out.print(\"!\");\n                }\n                System.out.print(values[i]);\n                if (values[i] == target) {\n                    System.out.print(\"*\");\n                }\n                if (i < end - 1) {\n                    System.out.print(\" \");\n                }\n            }\n            System.out.println(\"] \"+end);\n        }\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic <A extends Closeable> A api(Class<A> apitype, final String provider, final String credId, final String url,\n            final String zones, final boolean trustAll) {\n        return api(apitype, provider, credId, buildJcloudsOverrides(url, zones, trustAll));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void printMethods(Class<?> cls) {\n\t\tMethod[] methods = cls.getDeclaredMethods();\n\t\tfor (Method method : methods) {\n\t\t\tString name = method.getName();\n\t\t\tClass<?>[] parameterType = method.getParameterTypes();\n\t\t\tClass<?> returnType = method.getReturnType();\n\t\t\tSystem.out.println(name);\n\t\t\tSystem.out.println(returnType.getName());\n\t\t\tfor (Class<?> class1 : parameterType)\n\t\t\t\tSystem.out.println(class1);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void removePropertyChangeListener(\n                                                          String propertyName,\n                                                          PropertyChangeListener listener) {\n        synchronized (getObjectLock()) {\n            if (listener == null || changeSupport == null) {\n                return;\n            }\n            changeSupport.removePropertyChangeListener(propertyName, listener);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic ExternalCarrierBillingInstrumentProto(String instrumentKey, String subscriberIdentifier, String accountType, String subscriberCurrency, Long transactionLimit, String subscriberName, String address1, String address2, String city, String state, String postalCode, String country, EncryptedSubscriberInfo encryptedSubscriberInfo) {\n    this.instrumentKey = instrumentKey;\n    this.subscriberIdentifier = subscriberIdentifier;\n    this.accountType = accountType;\n    this.subscriberCurrency = subscriberCurrency;\n    this.transactionLimit = transactionLimit;\n    this.subscriberName = subscriberName;\n    this.address1 = address1;\n    this.address2 = address2;\n    this.city = city;\n    this.state = state;\n    this.postalCode = postalCode;\n    this.country = country;\n    this.encryptedSubscriberInfo = encryptedSubscriberInfo;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate ProductSceneView getProductSceneView(MouseEvent event) {\n        final Component eventComponent = event.getComponent();\n        if (eventComponent instanceof ProductSceneView) {\n            return (ProductSceneView) eventComponent;\n        }\n        final Container parentComponent = eventComponent.getParent();\n        if (parentComponent instanceof ProductSceneView) {\n            return (ProductSceneView) parentComponent;\n        }\n        if (parentComponent.getParent() instanceof ProductSceneView) {\n            return (ProductSceneView) parentComponent.getParent();\n        }\n        return null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"net.chrisrichardson.eventstore.examples.customersandorders\"))\n                .build()\n                .pathMapping(\"/\")\n                .genericModelSubstitutes(ResponseEntity.class, CompletableFuture.class)\n                .alternateTypeRules(\n                        newRule(typeResolver.resolve(DeferredResult.class,\n                                        typeResolver.resolve(ResponseEntity.class, WildcardType.class)),\n                                typeResolver.resolve(WildcardType.class))\n                )\n                .useDefaultResponseMessages(false)\n                ;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void expandPostprocessPrintAndCompare(\n\t\t\tFile inputFile,\n\t\t\tString inputSubDir,\n\t\t\tString expectedSubDir,\n\t\t\tPrinterInterface printer) throws IOException, LinkTargetException, EngineException\n\t{\n\t\tExpansionCallback callback = new TestExpansionCallback(inputSubDir);\n\n\t\tboolean forInclusion = false;\n\n\t\texpandPostprocessPrintAndCompare(\n\t\t\t\tinputFile,\n\t\t\t\tinputSubDir,\n\t\t\t\texpectedSubDir,\n\t\t\t\tcallback,\n\t\t\t\tforInclusion,\n\t\t\t\tprinter);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static String stringFromStream(InputStream inputStream) throws IOException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        byte[] buffer = new byte[1024];\n        while (true) {\n            int length = inputStream.read(buffer);\n            if (length == -1) {\n                return new String(baos.toByteArray(), \"UTF-8\");\n            }\n            baos.write(buffer, 0, length);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\n\n    \n\n\n    @Override\n    public DataInputStream getFileObject(URI fileUri, int start, int limit)\n            throws CatalogIOException {\n\n        Path objectPath = Paths.get(fileUri);\n\n        if (Files.isRegularFile(objectPath)) {\n            try {\n                if (start == -1 && limit == -1) {\n                    return new DataInputStream(Files.newInputStream(objectPath));\n                } else {\n                    return new DataInputStream(IOUtils.headOffset(objectPath, start, limit));\n                }\n            } catch (IOException e) {\n                throw new CatalogIOException(\"Unable to read file\", e);\n            }\n        } else {\n            throw new CatalogIOException(\"Not a regular file: \" + objectPath.toAbsolutePath().toString());\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void addShaped(RecipeDifficulty difficulty, ItemStack result, Object... recipe) {\n        if (difficulty != ALL && RecipeDifficulty.getDifficulty() != difficulty) {\n            return;\n        }\n\n        boolean isOre = false;\n\n        if (!isEnabled(result)) {\n            return;\n        }\n\n        for (int i = 3; i < recipe.length; i++) {\n            if (recipe[i] instanceof String) {\n                isOre = true;\n            }\n\n            if (!isEnabled(recipe[i])) {\n                return;\n            }\n        }\n\n        if (isOre) {\n            IRecipe iRecipe = new ShapedOreRecipe(result, recipe);\n            activeCrafting.add(iRecipe);\n            GameRegistry.addRecipe(iRecipe);\n        }\n        else {\n            activeCrafting.add(GameRegistry.addShapedRecipe(result, recipe));\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void shouldCreateKeyIfCASIsAttemptedForKeyThatDoesNotExist() throws Exception {\n        final long newCommandIndex = 66;\n        KeyValue keyValue = localStore.compareAndSet(newCommandIndex, KEY, null, NEW_VALUE);\n        keyValue = checkNotNull(keyValue);\n\n        assertThat(keyValue.getKey(), equalTo(KEY));\n        assertThat(keyValue.getValue(), equalTo(NEW_VALUE));\n\n        assertThatBackingStoreHasKeyValue(KEY, NEW_VALUE);\n        assertThatLastAppliedCommandIndexHasValue(newCommandIndex);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n  public final BlockTermState writeTerm(BytesRef term, TermsEnum termsEnum, FixedBitSet docsSeen) throws IOException {\n    startTerm();\n    if (writePositions == false) {\n      docsEnum = termsEnum.docs(null, docsEnum, enumFlags);\n    } else {\n      posEnum = termsEnum.docsAndPositions(null, posEnum, enumFlags);\n      docsEnum = posEnum;\n    }\n    assert docsEnum != null;\n\n    int docFreq = 0;\n    long totalTermFreq = 0;\n    while (true) {\n      int docID = docsEnum.nextDoc();\n      if (docID == DocsEnum.NO_MORE_DOCS) {\n        break;\n      }\n      docFreq++;\n      docsSeen.set(docID);\n      int freq;\n      if (writeFreqs) {\n        freq = docsEnum.freq();\n        totalTermFreq += freq;\n      } else {\n        freq = -1;\n      }\n      startDoc(docID, freq);\n\n      if (writePositions) {\n        for(int i=0;i<freq;i++) {\n          int pos = posEnum.nextPosition();\n          BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n          int startOffset;\n          int endOffset;\n          if (writeOffsets) {\n            startOffset = posEnum.startOffset();\n            endOffset = posEnum.endOffset();\n          } else {\n            startOffset = -1;\n            endOffset = -1;\n          }\n          addPosition(pos, payload, startOffset, endOffset);\n        }\n      }\n\n      finishDoc();\n    }\n\n    if (docFreq == 0) {\n      return null;\n    } else {\n      BlockTermState state = newTermState();\n      state.docFreq = docFreq;\n      state.totalTermFreq = writeFreqs ? totalTermFreq : -1;\n      finishTerm(state);\n      return state;\n    }\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Kernel(int width, int height, double factor, double data[]) {\n        this(width, height, (width - 1) / 2, (height - 1) / 2, factor, data);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static CombinedConfiguration buildConfig(Collection<? extends AbstractConfiguration> intermediateConfigs) {\n        final CombinedConfiguration result = new CombinedConfiguration(new OverrideCombiner());\n        result.addConfiguration(buildtimeConfig); // buildtime config cannot be overridden\n        result.addConfiguration(clConfig);\n        result.addConfiguration(sysConfig);\n        for( AbstractConfiguration moduleConfig : intermediateConfigs )\n            result.addConfiguration(moduleConfig);\n        if( !userConfig.isEmpty() )\n            result.addConfiguration(userConfig);\n        result.addConfiguration(defaultConfig);\n        return result;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tprotected void initEnablementBehaviours(List<EnablementBehaviour> enablementBehaviours) {\n\t\t\n\t\tenablementBehaviours.add(new ValidToolDetectionActivator(new Class[] {\n\t\t\t\tLineString.class,\n\t\t\t\tMultiLineString.class,\n\t\t\t\tMultiPolygon.class,\n\t\t\t\tPolygon.class}));\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\tpublic boolean cleanData(Object[] params) {\n\t\tboolean flag = false;\n\t\tSQLiteDatabase database = null;\n\t\ttry {\n\t\t\tString sql1 = \"delete from blog\";\n\t\t\tString sql2 = \"select * from sqlite_sequence\";\n\t\t\tString sql3 = \"update sqlite_sequence set seq=0 where name = blog\";\n\t\t\tdatabase = helper.getWritableDatabase();\n\t\t\tdatabase.execSQL(sql1, params);\n\t\t\tdatabase.execSQL(sql2, params);\n\t\t\tdatabase.execSQL(sql3, params);\n\t\t\tflag = true;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (database != null) {\n\t\t\t\tdatabase.close();\n\t\t\t}\n\t\t}\n\n\t\treturn flag;\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public void changeSelection(int row, int column, boolean toggle, boolean extend) {\n        lastRow = currentRow;\n        int lastColumn = currentColumn;\n        currentRow = row;\n        currentColumn = column;\n\n        super.changeSelection(row, column, toggle, extend);\n\n        if (getSelectedRow() == lastSelectedRow && getSelectedColumn() == lastSelectedCol) {\n            lastSelectedEqCnt++;\n\n            if (lastSelectedEqCnt == 10) {\n                System.out.println(\"Sticky cursor!\");\n                throw new RuntimeException(\"Sticky cursor!\");\n               \n            }\n        } else {\n            lastSelectedEqCnt = 0;\n            lastSelectedRow = row;\n            lastSelectedCol = column;\n        }\n        if (currentRow != lastRow || (currentColumn != lastColumn && viewMode != TableViewMode.FULL)) {\n            selectionChangedTimestamp = System.currentTimeMillis();\n            fireSelectedFileChangedEvent();\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public void onPlayerStateChange(PlayerState oldState, PlayerState newState, Bundle extra) {\n\n        mPrevState = mCurrentState;\n        mCurrentState = newState;\n        Log.d(TAG, \"State change event! Oldstate= \" + oldState + \" NewState= \" + newState);\n        if (mPrevState == mCurrentState) {\n            Log.w(TAG, \"Duplicate state change message!!! \");\n        }\n        if (mPrevState == PlayerState.BUFFERING && mCurrentState != PlayerState.BUFFERING) {\n            AnalyticsHelper.trackPlaybackControlAction(AnalyticsTags.ACTION_PLAYBACK_BUFFER_END,\n                                                       mSelectedContent, getCurrentPosition());\n        }\n        switch (newState) {\n            case IDLE:\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mIsContentChangeRequested) {\n                    openSelectedContent();\n                }\n                break;\n            case OPENING:\n                break;\n            case OPENED:\n                if (mPlayer != null && mIsActivityResumed) {\n                    mPlayer.prepare();\n                }\n                else {\n                    mIsContentChangeRequested = false;\n                }\n                if (mIsContentSupportCC && mIsCloseCaptionEnabled) {\n                    if (mPlaybackOverlayFragment != null) {\n                        mPlaybackOverlayFragment.updateCCButtonState(true, true);\n                    }\n                    if (mPlayer != null) {\n                        mPlayer.enableTextTrack(TrackType.SUBTITLE, true);\n                    }\n                }\n                break;\n            case PREPARING:\n                if (mPlaybackOverlayFragment != null && mPlaybackOverlayFragment.getView() !=\n                        null) {\n                    mPlaybackOverlayFragment.getView().setVisibility(View.VISIBLE);\n                }\n                break;\n            case READY:\n                mPlaybackState = LeanbackPlaybackState.PAUSED;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(false);\n                }\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mPrevState == PlayerState.PREPARING) {\n                    if (mPlaybackOverlayFragment != null) {\n                        mPlaybackOverlayFragment.updatePlayback();\n                        mPlaybackOverlayFragment.startProgressAutomation();\n                    }\n                    if (mCurrentPlaybackPosition > 0) {\n                        mPlayer.seekTo(mCurrentPlaybackPosition);\n                    }\n                    if (mAutoPlay || mIsContentChangeRequested) {\n                        play();\n                        mAutoPlay = false;\n                        if (mIsContentChangeRequested) {\n                            mIsContentChangeRequested = false;\n                        }\n                    }\n                }\n                else if (mAudioFocusState == AudioFocusState.NoFocusNoDuck) {\n                    play();\n                }\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PAUSED);\n                }\n                break;\n            case PLAYING:\n                mPlaybackState = LeanbackPlaybackState.PLAYING;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(true);\n                }\n                hideProgress();\n                mWindow.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PLAYING);\n                }\n                break;\n            case BUFFERING:\n                showProgress();\n                AnalyticsHelper.trackPlaybackControlAction(AnalyticsTags\n                                                                   .ACTION_PLAYBACK_BUFFER_START,\n                                                           mSelectedContent, getCurrentPosition());\n                break;\n            case SEEKING:\n                showProgress();\n                break;\n            case ENDED:\n                hideProgress();\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.playbackFinished();\n                }\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.COMPLETED);\n                }\n                break;\n            case CLOSING:\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.stopProgressAutomation();\n                }\n                break;\n            case ERROR:\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                Log.e(TAG, \"Player encountered an error!\");\n                break;\n            default:\n                Log.e(TAG, \"Unknown state!!!!!\");\n                break;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void visitLdcInsn(final Object cst) {\n        if (mv != null) {\n            mv.visitLdcInsn(cst);\n        }\n        if (this.locals == null) {\n            labels = null;\n            return;\n        }\n        if (cst instanceof Integer) {\n            push(Opcodes.INTEGER);\n        } else if (cst instanceof Long) {\n            push(Opcodes.LONG);\n            push(Opcodes.TOP);\n        } else if (cst instanceof Float) {\n            push(Opcodes.FLOAT);\n        } else if (cst instanceof Double) {\n            push(Opcodes.DOUBLE);\n            push(Opcodes.TOP);\n        } else if (cst instanceof String) {\n            push(\"java/lang/String\");\n        } else if (cst instanceof Type) {\n            int sort = ((Type) cst).getSort();\n            if (sort == Type.OBJECT || sort == Type.ARRAY) {\n                push(\"java/lang/Class\");\n            } else if (sort == Type.METHOD) {\n                push(\"java/lang/invoke/MethodType\");\n            } else {\n                throw new IllegalArgumentException();\n            }\n        } else if (cst instanceof Handle) {\n            push(\"java/lang/invoke/MethodHandle\");\n        } else {\n            throw new IllegalArgumentException();\n        }\n        labels = null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic ExternalCarrierBillingInstrumentProto(String instrumentKey, String subscriberIdentifier, String accountType, String subscriberCurrency, Long transactionLimit, String subscriberName, String address1, String address2, String city, String state, String postalCode, String country, EncryptedSubscriberInfo encryptedSubscriberInfo) {\n    this.instrumentKey = instrumentKey;\n    this.subscriberIdentifier = subscriberIdentifier;\n    this.accountType = accountType;\n    this.subscriberCurrency = subscriberCurrency;\n    this.transactionLimit = transactionLimit;\n    this.subscriberName = subscriberName;\n    this.address1 = address1;\n    this.address2 = address2;\n    this.city = city;\n    this.state = state;\n    this.postalCode = postalCode;\n    this.country = country;\n    this.encryptedSubscriberInfo = encryptedSubscriberInfo;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void initEnablementBehaviours( List<EnablementBehaviour> helper ) {\n        helper.add(new WithinLegalLayerBoundsBehaviour());\n        helper.add(new ValidToolDetectionActivator(new Class[]{Geometry.class, Polygon.class, MultiPolygon.class, LineString.class, MultiLineString.class}));\n   }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        boolean bIdentifierIgnorable = false;\n\n        if (codePoint >= MIN_CODE_POINT && codePoint <= FAST_PATH_MAX) {\n            bIdentifierIgnorable = CharacterDataLatin1.isIdentifierIgnorable(codePoint);\n        } else {\n            int plane = getPlane(codePoint);\n            switch(plane) {\n            case(0):\n                bIdentifierIgnorable = CharacterData00.isIdentifierIgnorable(codePoint);\n                break;\n            case(1):\n                bIdentifierIgnorable = CharacterData01.isIdentifierIgnorable(codePoint);\n                break;\n            case(2):\n                bIdentifierIgnorable = CharacterData02.isIdentifierIgnorable(codePoint);\n                break;\n            case(3): // Undefined\n            case(4): // Undefined\n            case(5): // Undefined\n            case(6): // Undefined\n            case(7): // Undefined\n            case(8): // Undefined\n            case(9): // Undefined\n            case(10): // Undefined\n            case(11): // Undefined\n            case(12): // Undefined\n            case(13): // Undefined\n                bIdentifierIgnorable = CharacterDataUndefined.isIdentifierIgnorable(codePoint);\n                break;\n            case(14): \n                bIdentifierIgnorable = CharacterData0E.isIdentifierIgnorable(codePoint);\n                break;\n            case(15): // Private Use\n            case(16): // Private Use\n                bIdentifierIgnorable = CharacterDataPrivateUse.isIdentifierIgnorable(codePoint);\n                break;\n            default:\n                break;\n            }\n        }\n        return bIdentifierIgnorable;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    protected MimeMessagePreparator generateMimeMessagePreparator(final Email email, final String encoding) {\n        return new MimeMessagePreparator() {\n            public void prepare(MimeMessage mimeMessage) throws Exception {\n                mimeMessage.setHeader(HEADER_PRIORITY, String.valueOf(email.getPriority().getRank()));\n                for (Iterator iter = email.getHeaders().entrySet().iterator(); iter.hasNext();) {\n                    Map.Entry entry = (Map.Entry)iter.next();\n                    mimeMessage.setHeader(String.valueOf(entry.getKey()), String.valueOf(entry.getValue()));\n                }\n                MimeMessageHelper message =\n                    new MimeMessageHelper(mimeMessage, MimeMessageHelper.MULTIPART_MODE_RELATED, encoding);\n\n                message.setTo(email.getTo());\n                message.setBcc(email.getBcc());\n                message.setCc(email.getCc());\n                message.setFrom(email.getFrom());\n                message.setSubject(email.getSubject());\n                if (email.getTextBody() != null && email.getHtmlBody() != null) {\n                    message.setText(email.getTextBody(), email.getHtmlBody());\n                } else {\n                    if (email.getTextBody() != null) {\n                        message.setText(email.getTextBody(), false);\n                    }\n                    if (email.getHtmlBody() != null) {\n                        message.setText(email.getHtmlBody(), true);\n                    }\n                }\n                if (email.getReplyTo() != null) {\n                    message.setReplyTo(email.getReplyTo());\n                }\n                for (Iterator iter = email.getAttachments().iterator(); iter.hasNext();) {\n                    Attachment attachment = (Attachment) iter.next();\n                    message.addAttachment(attachment.getName(), attachment.getResource());\n                }\n                for (Iterator iter = email.getInlineAttachments().iterator(); iter.hasNext();) {\n                    Attachment attachment = (Attachment) iter.next();\n                    message.addInline(attachment.getName(), attachment.getResource());\n                }\n            }\n        };\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic <A extends Closeable> A api(Class<A> apitype, final String provider, final String credId, final String url,\n            final String zones) {\n        return api(apitype, provider, credId, buildJcloudsOverrides(url, zones, false));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.google.bigtable.v2.Column parseFrom(\n      com.google.protobuf.CodedInputStream input,\n      com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n      throws java.io.IOException {\n    return com.google.protobuf.GeneratedMessageV3\n        .parseWithIOException(PARSER, input, extensionRegistry);\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public boolean isSourceEncodingSupported(AudioFormat.Encoding sourceEncoding){\n\n        AudioFormat.Encoding sourceEncodings[] = getSourceEncodings();\n\n        for(int i=0; i<sourceEncodings.length; i++) {\n            if( sourceEncoding.equals( sourceEncodings[i]) ) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@RequestMapping(\"/\")\n    public void api(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        String reqUrl = request.getRequestURL().toString();\n        reqUrl = reqUrl.replace(\"api\", \"api\") + \"index.html\";\n        HttpClient client = new HttpClient();\n        HttpMethod method = new GetMethod(reqUrl);\n        client.executeMethod(method);\n        String apiUrl = request.getServerName() + COLON + request.getServerPort() + API_DOC;\n \n        String html = method.getResponseBodyAsString();\n        String body = html.replace(\"petstore.swagger.io/v2/swagger.json\", apiUrl)\n                .replace(\"css/\", \"/api/css/\")\n                .replace(\"lib/\", \"/api/lib/\")\n                .replace(\"swagger-ui.js\", \"/api/swagger-ui.js\");\n        response.getWriter().write(body);\n        response.getWriter().flush();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public PartitionLoad getLoad() throws IOException{\n        Map<ServerName, List<HRegionInfo>> serverToRegionMap=new HashMap<>();\n        try(RegionLocator rl=connection.getRegionLocator(tableName)){\n            List<HRegionLocation> locations=rl.getAllRegionLocations();\n            for(HRegionLocation location : locations){\n                List<HRegionInfo> info=serverToRegionMap.get(location.getServerName());\n                if(info==null){\n                    info = new LinkedList<>();\n                    serverToRegionMap.put(location.getServerName(),info);\n                }\n                info.add(location.getRegionInfo());\n            }\n        }\n        int totalStoreFileSizeMB = 0;\n        int totalMemstoreSieMB = 0;\n        int storefileIndexSizeMB = 0;\n        try(Admin admin=connection.getAdmin()){\n            ClusterStatus clusterStatus=admin.getClusterStatus();\n            for(Map.Entry<ServerName,List<HRegionInfo>> entry:serverToRegionMap.entrySet()){\n                ServerLoad load=clusterStatus.getLoad(entry.getKey());\n                Map<byte[], RegionLoad> regionsLoad=load.getRegionsLoad();\n                for(HRegionInfo info:entry.getValue()){\n                    RegionLoad rl = regionsLoad.get(info.getRegionName());\n                    totalStoreFileSizeMB+=rl.getStorefileSizeMB();\n                    totalMemstoreSieMB+=rl.getMemStoreSizeMB();\n                    storefileIndexSizeMB+=rl.getStorefileIndexSizeMB();\n                }\n            }\n        }\n        return new HPartitionLoad(getName(),totalStoreFileSizeMB,totalMemstoreSieMB,storefileIndexSizeMB);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n  \n\tprivate void sendCrashLog2PM(String fileName){  \n\t\tif(!new File(fileName).exists()){  \n\t\t\treturn;  \n\t\t}  \n\t\tFileInputStream fis = null;  \n\t\tBufferedReader reader = null;  \n\t\tString s = null;  \n\t\ttry {  \n\t\t\tfis = new FileInputStream(fileName);  \n\t\t\treader = new BufferedReader(new InputStreamReader(fis, \"GBK\"));  \n\t\t\twhile(true){  \n\t\t\t\ts = reader.readLine();  \n\t\t\t\tif(s == null) break;  \n\t\t\t\tLog.i(\"info\", s.toString());  \n\t\t\t}  \n\t\t} catch (FileNotFoundException e) {  \n\t\t\te.printStackTrace();  \n\t\t} catch (IOException e) {  \n\t\t\te.printStackTrace();  \n\t\t}finally{   \n\t\t\ttry {  \n\t\t\t\treader.close();  \n\t\t\t\tfis.close();  \n\t\t\t} catch (IOException e) {  \n\t\t\t\te.printStackTrace();  \n\t\t\t}  \n\t\t}  \n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps) {\n            return setImageAttachmentsForObject(objectProperty, bitmaps, false);\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n        logger.trace(\"Start handling inactive event for client {}\", this.clientId);\n\n        if (this.connected) {\n\n            logger.debug(\"Connection closed: Connection lost from client {} user {}\", this.clientId, this.userName);\n\n            boolean redirect = handleConnectLost(ctx);\n\n            if (redirect)\n                logger.trace(\"Send a copy of DISCONNECT message from client {} to 3rd party application\", this.clientId);\n            this.cluster.sendToApplication(new Message<>(\n                    new MqttFixedHeader(MqttMessageType.DISCONNECT, false, MqttQoS.AT_MOST_ONCE, false, 0),\n                    new MqttAdditionalHeader(this.version, this.clientId, this.userName, this.brokerId), null, null));\n\n            if (this.willMessage != null) {\n\n                MqttQoS willQos = this.willMessage.fixedHeader().qos();\n                String willTopic = this.willMessage.variableHeader().topicName();\n                boolean willRetain = this.willMessage.fixedHeader().retain();\n\n                AuthorizeResult result = this.authenticator.authPublish(this.clientId, this.userName, willTopic, willQos.value(), willRetain);\n                if (result == AuthorizeResult.OK) {\n                    logger.trace(\"Authorization WILL message succeeded on topic {} for client {}\", willTopic, this.clientId);\n\n                    onwardRecipients(this.willMessage, Message.fromMqttMessage(this.willMessage, this.version, this.clientId, this.userName, this.brokerId).payload());\n                }\n                else {\n                    logger.trace(\"Authorization WILL message failed on topic {} for client {}\", willTopic, this.clientId);\n                }\n            }\n        }\n\n        logger.trace(\"Finish handling inactive event for client {}\", this.clientId);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr graph) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), graph});\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Constructor[] getDeclaredConstructors() throws SecurityException {\n    \t_throw();\n    \treturn null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        \n        byte[] byteArray = new byte[bytes.size()]; \n        bytes.getBytes(byteArray, 0);\n        return Utf8Utils.utf8BytesToString(byteArray);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(java.io.Reader r) throws org.apache.xmlbeans.XmlException, java.io.IOException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( r, type, null ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@RequestMapping(value = \"guid.do\",method= RequestMethod.POST)\n    @ResponseBody\n    public String getGuid(int proxy, Long proxyId, String ip, Integer port, String password, HttpServletResponse response) {\n        Agent agent = new Agent();\n        agent.setProxy(proxy);\n        agent.setIp(ip);\n        agent.setPort(port);\n        agent.setPassword(password);\n\n        if (proxy == Opencron.ConnType.PROXY.getType()) {\n            agent.setProxy(Opencron.ConnType.CONN.getType());\n            if (proxyId != null) {\n                Agent proxyAgent = agentService.getAgent(proxyId);\n                if (proxyAgent == null) {\n                    return null;\n                }\n                agent.setProxyAgent(proxyId);\n                agent.setProxy(Opencron.ConnType.PROXY.getType());\n            }\n        }\n       return executeService.guid(agent);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1],\n                col = (int)val[2];\n            float toAdd = val[3];\n            \n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            table.setVal(row-1, col-1, (Float)table.value(row-1, col-1) + toAdd);\n            return toAdd;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0];\n\n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return -1f;\n            \n            Object[] row = new Object[val.length - 1];\n            for(int i = 1; i <= row.length; i++)\n                row[i - 1] = val[i];\n            table.addRow(row);\n            return 1f;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\tprotected void initEnablementBehaviours(List<EnablementBehaviour> enablementBehaviours) {\n\t\tenablementBehaviours.add(new WithinLegalLayerBoundsBehaviour());\n\t\tenablementBehaviours.add(new ValidToolDetectionActivator(new Class[] {\n\t\t\t\tGeometry.class,\n\t\t\t\tPolygon.class,\n\t\t\t\tMultiPolygon.class,\n\t\t\t\tLineString.class,\n\t\t\t\tMultiLineString.class }));\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprotected void fireVetoableChange (String name, Object o, Object n)\n\t\tthrows PropertyVetoException\n\t{\n\t\tif (_vetoableSupport != null)\n\t\t\t_vetoableSupport.fireVetoableChange(name, o, n);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void actionPerformed(ActionEvent e) {\n                                                                                                final Element element = UIPool\n                                                                                                    .poll();\n                                                                                                if (null != element) {\n                                                                                                    Display\n                                                                                                        .getDefault()\n                                                                                                        .asyncExec(\n                                                                                                            new Runnable() {\n                                                                                                                public void run() {\n                                                                                                                    if (element\n                                                                                                                        .getElement()\n                                                                                                                        .equals(\n                                                                                                                            UIElement.TASK_PROGRESS_BAR)) {\n                                                                                                                        if (((Integer) element\n                                                                                                                            .getValue()) > 0)\n                                                                                                                            setProgressBarMax(\n                                                                                                                                element\n                                                                                                                                    .getSN(),\n                                                                                                                                element\n                                                                                                                                    .getTaskName(),\n                                                                                                                                element\n                                                                                                                                    .getScriptName());\n                                                                                                                        else\n                                                                                                                            setProgressBarCount(\n                                                                                                                                element\n                                                                                                                                    .getSN(),\n                                                                                                                                element\n                                                                                                                                    .getTaskName(),\n                                                                                                                                element\n                                                                                                                                    .getScriptName());\n                                                                                                                    } else if (element\n                                                                                                                        .getElement()\n                                                                                                                        .equals(\n                                                                                                                            UIElement.TASK_START_TIME)) {\n                                                                                                                        setBeginTime(\n                                                                                                                            element\n                                                                                                                                .getSN(),\n                                                                                                                            element\n                                                                                                                                .getTaskName(),\n                                                                                                                            element\n                                                                                                                                .getScriptName(),\n                                                                                                                            String\n                                                                                                                                .valueOf(element\n                                                                                                                                    .getValue()));\n                                                                                                                    } else if (element\n                                                                                                                        .getElement()\n                                                                                                                        .equals(\n                                                                                                                            UIElement.TASK_TEST_RESULT)) {\n                                                                                                                        setPassOrFailCount(\n                                                                                                                            element\n                                                                                                                                .getSN(),\n                                                                                                                            element\n                                                                                                                                .getTaskName(),\n                                                                                                                            element\n                                                                                                                                .getScriptName(),\n                                                                                                                            Boolean\n                                                                                                                                .parseBoolean((String) element\n                                                                                                                                    .getValue()));\n                                                                                                                    }\n                                                                                                                }\n                                                                                                            });\n\n                                                                                                }\n                                                                                            }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public <T> List<T> toBeanList(ResultSet rs, Class<? extends T> type) throws SQLException {\n        List<T> results = new ArrayList<T>();\n\n        if (!rs.next()) {\n            return results;\n        }\n\n        PropertyDescriptor[] props = this.propertyDescriptors(type);\n        ResultSetMetaData rsmd = rs.getMetaData();\n        int[] columnToProperty = this.mapColumnsToProperties(rsmd, props);\n\n        do {\n            results.add(this.createBean(rs, type, props, columnToProperty));\n        } while (rs.next());\n\n        return results;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic Transformation(BigInteger q, BigInteger r, BigInteger s, BigInteger t){\n      this.q = q;\n      this.r = r;\n      this.s = s;\n      this.t = t;                  \n      k = 0;\n   }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void testMultipleUnknown() throws Exception\n    {\n        MoreNestedField moreNestedField = new MoreNestedField();\n        NestedTwoField nestedTwoField = new NestedTwoField();\n        nestedTwoField.setNested1(1);\n        nestedTwoField.setNested2(2);\n        moreNestedField.setF1(nestedTwoField);\n\n        byte[] in = MAPPER.writerFor(MoreNestedField.class)\n                .with(MAPPER.generateSchemaFor(MoreNestedField.class))\n                .writeValueAsBytes(moreNestedField);\n\n        LessNestedField lesser = MAPPER.readerFor(LessNestedField.class)\n                .with(MAPPER.generateSchemaFor(LessNestedField.class))\n                .with(JsonParser.Feature.IGNORE_UNDEFINED)\n                .readValue(in);\n\n        assertEquals(moreNestedField.getF1().getNested2(), lesser.getF1().getNested2());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic WebSocketServer(InetSocketAddress address, int decodercount,\n\t\t\tList<Draft> drafts, Collection<WebSocket> connectionscontainer) {\n\t\tif (address == null || decodercount < 1 || connectionscontainer == null) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"address and connectionscontainer must not be null and you need at least 1 decoder\");\n\t\t}\n\n\t\tif (drafts == null)\n\t\t\tthis.drafts = Collections.emptyList();\n\t\telse\n\t\t\tthis.drafts = drafts;\n\n\t\tthis.address = address;\n\t\tthis.connections = connectionscontainer;\n\n\t\tiqueue = new LinkedList<WebSocketImpl>();\n\n\t\tdecoders = new ArrayList<WebSocketWorker>(decodercount);\n\t\tbuffers = new LinkedBlockingQueue<ByteBuffer>();\n\t\tfor (int i = 0; i < decodercount; i++) {\n\t\t\tWebSocketWorker ex = new WebSocketWorker();\n\t\t\tdecoders.add(ex);\n\t\t\tex.start();\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean performAction(ActionParameters actionParameters, MainFrame mainFrame) {\n        MuAction action = getActionInstance(actionParameters, mainFrame);\n\n        if (action == null) {\n            return false;\n        }\n\n        action.performAction();\n\n        return true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic JMethod addGetter(final JDefinedClass definedClass, final JFieldVar field) {\n        final JMethod method = definedClass.method(JMod.PUBLIC, field.type(), getGetterName(field));\n        final JBlock block = method.body();\n        block._return(field);\n        return method;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode parse(org.apache.xmlbeans.xml.stream.XMLInputStream xis) throws org.apache.xmlbeans.XmlException, org.apache.xmlbeans.xml.stream.XMLStreamException {\n          return (com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( xis, type, null ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public Value<Integer> run(String userEmail) {\n      PromisedValue<Integer> x = newPromise();\n      PromisedValue<Integer> y = newPromise();\n      PromisedValue<Integer> z = newPromise();\n      FutureValue<Integer> intermediate = futureCall(new ComplexJob(), x, y, z);\n\n      getIntFromUser(\"Please give 1st int\", userEmail, x.getHandle());\n      getIntFromUser(\"Please give 2nd int\", userEmail, y.getHandle());\n      getIntFromUser(\"Please give 3rd int\", userEmail, z.getHandle());\n\n      FutureValue<Integer> oneMoreInt =\n        futureCall(new PromptJob(), intermediate, immediate(userEmail));\n\n      return futureCall(new MultJob(), intermediate, oneMoreInt);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n  private float determinant3x3(float t00, float t01, float t02,\n                               float t10, float t11, float t12,\n                               float t20, float t21, float t22) {\n    return (t00 * (t11 * t22 - t12 * t21) +\n            t01 * (t12 * t20 - t10 * t22) +\n            t02 * (t10 * t21 - t11 * t20));\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr graph) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), graph});\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n  public void testSum() throws Exception {\n    Double act = Aggregations.sum(Arrays.asList(1, 2, 3.8));  // check with mixed Number\n    Double exp = 1 + 2 + 3.8;\n    assertEquals(exp, act, 0.01);\n\n    act = Aggregations.sum(Arrays.asList());\n    exp = 0.0;\n    assertEquals(exp, act, 0.01);\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; } \n        return retVal;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean isWhitespace(String str) {\n        if (str == null) {\n            return false;\n        }\n\n        int length = str.length();\n\n        for (int i = 0; i < length; i++) {\n            if (!Character.isWhitespace(str.charAt(i))) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic final DenseMatrix zeros(ValueType valueType, long... size) {\n\t\tswitch (size.length) {\n\t\tcase 0:\n\t\t\tthrow new RuntimeException(\"Size not defined\");\n\t\tcase 1:\n\t\t\tthrow new RuntimeException(\"Size must be at least 2-dimensional\");\n\t\tdefault:\n\t\t\tswitch (valueType) {\n\t\t\tcase BIGDECIMAL:\n\t\t\t\treturn new DefaultDenseBigDecimalMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BIGINTEGER:\n\t\t\t\treturn new DefaultDenseBigIntegerMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BOOLEAN:\n\t\t\t\treturn new ArrayDenseBooleanMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BYTE:\n\t\t\t\treturn new DefaultDenseByteMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase CHAR:\n\t\t\t\treturn new DefaultDenseCharMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase DOUBLE:\n\t\t\t\tif (size.length == 2) {\n\t\t\t\t\treturn new DefaultDenseDoubleMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\t\t} else {\n\t\t\t\t\treturn new DefaultDenseDoubleMatrixMultiD(size);\n\t\t\t\t}\n\t\t\tcase FLOAT:\n\t\t\t\treturn new DefaultDenseFloatMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase INT:\n\t\t\t\treturn new DefaultDenseIntMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase LONG:\n\t\t\t\treturn new DefaultDenseLongMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase OBJECT:\n\t\t\t\treturn ObjectMatrix.Factory.zeros(size);\n\t\t\tcase SHORT:\n\t\t\t\treturn new DefaultDenseShortMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase STRING:\n\t\t\t\treturn new DefaultDenseStringMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tdefault:\n\t\t\t\tthrow new RuntimeException(\"unknown value type: \" + valueType);\n\t\t\t}\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0];\n\n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return -1f;\n            \n            Object[] row = new Object[val.length - 1];\n            for(int i = 1; i <= row.length; i++)\n                row[i - 1] = val[i];\n            table.addRow(row);\n            return 1f;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic ShortcutView(final Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t\tpm = context.getPackageManager();\n\t\t\n\t\tsec = PreferenceManager.getDefaultSharedPreferences(getContext());\n\n\t\tpkg = sec.getString(\"pkg\", \"\");\n\t\tpin = sec.getString(\"pin\", \"\");\t\t\n\t\t\n\t\t\n\t\tfor (int i = 0; i < CAPACITY; i++) {\n\t\t\tfinal int b = i;\n\t\t\tApplicationInfo ai = null;\n\t\t\tString sv = null;\n\t\t\tString s = Settings.System.getString(context.getContentResolver(), \"PiSC\" + i);\n\n\t\t\tif (s == null | s == \"\") {\n\n\t\t\t\tSettings.System.putString(context.getContentResolver(), \"PiSC\"+b, \"com.pilockerstable\");\n\t\t\t}\n\t\t\tsv = s;\n\n\t\t\ttry {\n\t\t\t\tai = pm.getApplicationInfo(sv, 0);\n\t\t\t} catch (NameNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tShortCut sc = new ShortCut(context, attrs);\n\t\t\tString App_Name = (String) pm.getApplicationLabel(ai);\n\t\t\tDrawable Icon = pm.getApplicationIcon(ai);\n\t\t\tShortcutter st = new Shortcutter(App_Name, Icon);\n\t\t\tsc.setName(st.getName());\n\t\t\tsc.setImage(st.getIcon());\n\n\t\t\taddView(sc);\n\t\t\tsc.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t\n\t\t\t\tString sv = Settings.System.getString( context.getContentResolver(), \"PiSC\" + b);\n\n\t\t\t\t@Override \n\t\t\t\tpublic void onClick(View arg0) {\n\n\t\t\t\t\tif( pin.equals(\"\") || pin.equals(null) || pin.isEmpty()) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t((Activity) context).finish();\n\t\t\t\t\t\tIntent i = new Intent();\n\t\t\t\t\t\ti.setClass(getContext(), LockerService.class);\n\t\t\t\t\t\tcontext.startService(i);\n\t\t\t\t\t\tIntent LaunchIntent = context.getPackageManager().getLaunchIntentForPackage(sv);\n\t\t\t\t\t\tcontext.startActivity(LaunchIntent);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t} else{\n\t\t\t\t\t\n\t\t\t\t\tsave(\"pkg\", \"true\");\n\t\t\t\t\tIntent x = new Intent(getContext(), PinActivity.class);\n\t\t\t\t\tx.putExtra(\"sv\", sv);\n\t\t\t\t\tcontext.startActivity(x);\n\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void setJoinType(Player player, int joinType)\n\t{\n\t\tLegion legion = player.getLegion();\n\t\t\n\t\tif (legion == null)\n\t\t\treturn;\n\n\t\tif (legionRestrictions.canChangeLegionJoinSetting(player))\n\t\t{\n\t\t\tlegion.setJoinType(joinType);\n\t\t\tPacketSendUtility.sendPacket(player, new SM_LEGION_EDIT(0x0D , legion));\n\t\t\tDAOManager.getDAO(LegionDAO.class).updateLegionDescription(legion);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic Object toClass(InputEvent event) throws IOException {\n        ByteArrayInputStream bis = new ByteArrayInputStream(event.getData());\n        ObjectInput in = null;\n        try {\n            in = new ObjectInputStream(bis);\n            return in.readObject();\n        } catch (ClassNotFoundException e) {\n            throw new IOException(e);\n        } finally {\n            try {\n                bis.close();\n            } catch (IOException ex) {\n                ;\n            }\n            try {\n                if (in != null) {\n                    in.close();\n                }\n            } catch (IOException ex) {\n            }\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void addShaped(RecipeDifficulty difficulty, ItemStack result, Object... recipe) {\n        if (difficulty != ALL && RecipeDifficulty.getDifficulty() != difficulty) {\n            return;\n        }\n\n        boolean isOre = false;\n\n        if (!isEnabled(result)) {\n            return;\n        }\n\n        for (int i = 3; i < recipe.length; i++) {\n            if (recipe[i] instanceof String) {\n                isOre = true;\n            }\n\n            if (!isEnabled(recipe[i])) {\n                return;\n            }\n        }\n\n        if (isOre) {\n            ResourceLocation location = getNameForRecipe(result);\n            ShapedOreRecipe shapedOreRecipe = new ShapedOreRecipe(location, result, recipe);\n            shapedOreRecipe.setRegistryName(location);\n            GameData.register_impl(shapedOreRecipe);\n        }\n        else {\n            ResourceLocation location = getNameForRecipe(result);\n            CraftingHelper.ShapedPrimer primer = CraftingHelper.parseShaped(recipe);\n            ShapedRecipes shapedRecipes = new ShapedRecipes(result.getItem().getRegistryName().toString(), primer.width, primer.height, primer.input, result);\n            shapedRecipes.setRegistryName(location);\n            GameData.register_impl(shapedRecipes);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintWriter writer, boolean suppressLogin, char eolMarker, boolean showDirection)\n    {\n        __writer = writer;\n        __nologin = suppressLogin;\n        __eolMarker = eolMarker;\n        __directionMarker = showDirection;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public CompositeDataSupport(\n            CompositeType compositeType, String[] itemNames, Object[] itemValues)\n            throws OpenDataException {\n        this(makeMap(itemNames, itemValues), compositeType);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static String getMsgWithLineNumber(String msg) {\n        try {\n            for (StackTraceElement st : (new Throwable()).getStackTrace()) {\n                if (mClassname.equals(st.getClassName()) || mMethods.contains(st.getMethodName())) {\n                    continue;\n                } else {\n                    int b = st.getClassName().lastIndexOf(\".\") + 1;\n                    String message = new StringBuilder(st.getClassName().substring(b)).append(\"->\").append(st.getMethodName())\n                            .append(\"():\").append(st.getLineNumber()).append(msg).toString();\n                    return message;\n                }\n\n            }\n        } catch (Exception e) {\n\n        }\n        return msg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void setPrototype(IReference ref) {\n\t\tfor (int i = 0; i < lstReferences.size(); i++) {\n\t\t\tIReference element = (IReference) lstReferences.get(i);\n\t\t\telement.setPrototype(ref);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker, boolean showDirection) {\n        this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .directModelSubstitute(LocalDate.class, java.sql.Date.class)\n                .directModelSubstitute(LocalDateTime.class, java.util.Date.class)\n                .select()\n                .apis(requestHandler -> {\n                    String packageName = requestHandler.getHandlerMethod().getMethod()\n                            .getDeclaringClass().getPackage().getName();\n                    return packageName.startsWith(\"com.akkafun.\") && packageName.contains(\".web\");\n                })\n                .paths(PathSelectors.any())\n                .build();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void setPrototype(IReference ref) {\n\t\tfor (int i = 0; i < lstReferences.size(); i++) {\n\t\t\tIReference element = (IReference) lstReferences.get(i);\n\t\t\telement.setPrototype(ref);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void hookDialogIsOpen() {\n        \n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                UIHelpers.runOnUIThread(true, new Runnable() {\n                    @Override\n                    public void run() {\n                        if (!browser.isDisposed()) {\n                            browser.setUrl(serverSigninURL.toString());\n                        }\n                    }\n                });\n            }\n        }).start();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Vector4 multiplyLocal(final ReadOnlyVector4 scale) {\n        return set(getX() * scale.getX(), getY() * scale.getY(), getZ() * scale.getZ(), getW() * scale.getW());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public CharSequence logestCommonSubsequence(final CharSequence left, final CharSequence right) {\n        if (left == null || right == null) {\n            throw new IllegalArgumentException(\"Inputs must not be null\");\n        }\n        final StringBuilder longestCommonSubstringArray = new StringBuilder(Math.max(left.length(), right.length()));\n        final int[][] lcsLengthArray = longestCommonSubstringLengthArray(left, right);\n        int i = left.length() - 1;\n        int j = right.length() - 1;\n        int k = lcsLengthArray[left.length()][right.length()] - 1;\n        while (k >= 0) {\n            if (left.charAt(i) == right.charAt(j)) {\n                longestCommonSubstringArray.append(left.charAt(i));\n                i = i - 1;\n                j = j - 1;\n                k = k - 1;\n            } else if (lcsLengthArray[i + 1][j] < lcsLengthArray[i][j + 1]) {\n                i = i - 1;\n            } else {\n                j = j - 1;\n            }\n        }\n        return longestCommonSubstringArray.reverse().toString();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic ExecutionEvent(final Command command, @SuppressWarnings(\"rawtypes\") final Map parameters,\n\t\t\tfinal Object trigger, final Object applicationContext) {\n\t\tif (parameters == null) {\n\t\t\tthrow new NullPointerException(\"An execution event must have a non-null map of parameters\"); //$NON-NLS-1$\n\t\t}\n\n\t\tthis.command = command;\n\t\tthis.parameters = parameters;\n\t\tthis.trigger = trigger;\n\t\tthis.applicationContext = applicationContext;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprotected SynonymParser getParser(Analyzer analyzer) {\n    \t\n    \tchar sep = ',';\n    \tif (args.containsKey(\"format\") && args.get(\"format\").equals(\"semicolon\")) {\n    \t\tsep = ';';\n    \t};\n    \t\n    \tfinal Character charSeparator = sep;\n    \t\n      return new NewSolrSynonymParser(true, true, analyzer) {\n\n        public void add(Reader in) throws IOException, ParseException {\n          LineNumberReader br = new LineNumberReader(in);\n          StringBuffer newBr = new StringBuffer();\n          String line = null;\n          \n          String[] parts;\n          \n          try {\n            while ((line = br.readLine()) != null) {\n              if (line.length() == 0 || line.charAt(0) == '#') {\n                continue; // ignore empty lines and comments\n              }\n              String[] sides = line.split(\"=>\");\n              if (sides.length > 1) { // explicit mapping\n                String[] names = getNames(sides[1]);\n                parts = AuthorUtils.splitName(sides[0]);\n                if (isLongForm(parts) && containsLongForm(names) > 0) {\n                  newBr.append(escape(makeShortForm(parts)) + \"=>\" +\n                      sides[0] + \",\" +\n                      buildLine(names));\n                  newBr.append(\"\\n\");\n                }\n              }\n              else {\n                String[] names = getNames(sides[0]);\n                if (containsLongForm(names) > 1) {\n                  String newLine = buildLine(names);\n                  for (int i=0;i<names.length;i++) {\n                  \tparts = AuthorUtils.splitName(sides[i]);\n                    if (isLongForm(parts)) {\n                      newBr.append(escape(makeShortForm(parts)) + \"=>\" +\n                          newLine);\n                      newBr.append(\"\\n\");\n                    }\n                  }\n                }\n              }\n            }\n          } catch (IllegalArgumentException e) {\n            ParseException ex = new ParseException(\"Invalid synonym rule at line \" + br.getLineNumber(), 0);\n            ex.initCause(e);\n            throw ex;\n          } finally {\n            br.close();\n          }\n          \n          super.add(new InputStreamReader(new ByteArrayInputStream(newBr.toString().getBytes()),\n              Charset.forName(\"UTF-8\").newDecoder()));\n\n        }\n        @Override\n        public void add(CharsRef input, CharsRef output, boolean includeOrig) {\n          super.add(input, output, true);\n        }\n        \n        private String[] getNames(String vals) {\n          List<String> nn = StrUtils.splitSmart(vals, charSeparator);\n          String names[] = new String[nn.size()];\n          int j = 0;\n          for (String n: nn) {\n            names[j] = unescape(n);\n            j++;\n          }\n          return names;\n        }\n        private String buildLine(String[] names) {\n          HashSet<String> set = new HashSet<String>();\n          StringBuilder out = new StringBuilder();\n          boolean notFirst = false;\n          \n          for (String name: names) {\n            \n            String[] p = AuthorUtils.splitName(name);\n            if (isLongForm(p)) {\n              set.add(makeShortForm(p));\n            }\n            set.add(name);\n          }\n          for (String name: set) {\n            if (notFirst) out.append(\",\");\n            out.append(escape(name));\n            notFirst = true;\n          }\n          return out.toString();\n        }\n        \n        \n        private String unescape(String s) {\n          return s.replace(\"\\\\ \", \" \").replace(\"\\\\\" + charSeparator, charSeparator.toString());\n        }\n        \n        \n        private String escape(String s) {\n          return s.replace(\" \", \"\\\\ \").replace(\",\", \"\\\\,\");\n        }\n        \n        \n        private String makeShortForm(String[] parts) {\n          StringBuilder out = new StringBuilder();\n          out.append(parts[0]);\n          for (int i=1;i<parts.length;i++) {\n            out.append(\" \");\n            out.append(parts[i].substring(0, 1));\n          }\n          return out.toString();\n        }\n        \n        private boolean isLongForm(String[] parts) {\n          boolean res = false;\n          for (int i=1;i<parts.length;i++) {\n            if (parts[i].length() > 1)\n              return true;\n          }\n          return res;\n        }\n        private int containsLongForm(String[] names) {\n          int i = 0;\n          for (String name: names) {\n            if (isLongForm(AuthorUtils.splitName(name))) {\n              i++;\n            }\n          }\n          return i;\n        }\n      };\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Accessor getAccessor(String poolName, AbstractSession session, DatabaseQuery query, boolean returnNullIfDead) {\n        Accessor accessor = null;\n        if (session.isClientSession()) {\n            ClientSession client = (ClientSession)session;\n            if (client.isExclusiveIsolatedClientSession() && client.hasWriteConnection()) {\n                accessor = client.getWriteConnection();\n            } else {\n                accessor = client.getWriteConnections().get(poolName);\n                if (accessor == null) {\n                    accessor = acquireAccessor(poolName, client.getParent(), query, returnNullIfDead);\n                    if (client.isExclusiveIsolatedClientSession() || session.isInTransaction()) {\n                        accessor = client.addWriteConnection(poolName, accessor);\n                    }\n                }\n            }\n        } else if (session.isServerSession()) {\n            accessor = acquireAccessor(poolName, (ServerSession)session, query, returnNullIfDead);\n        } else {\n            throw QueryException.partitioningNotSupported(session, query);\n        }\n        return accessor;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testNotEquals() {\n        BitSet bset = new BitSet();\n        bset.set(100);\n\n        ImmutableBitSet ibset = new ImmutableBitSet(bset);\n\n        BitSet bset2 = new BitSet();\n        bset2.set(101);\n\n        ImmutableBitSet ibset2 = new ImmutableBitSet(bset2);\n\n        assertFalse(ibset.equals(ibset2));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void onReply(final CharSequence content) {\n        TrackerUtils.onTopicReply();\n\n        doActionRequest(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    RequestHelper.INSTANCE.reply(mTopic, content.toString(), mOnceToken);\n                } catch (ConnectionException | RemoteException e) {\n                    ExecutorUtils.runInUiThread(new Runnable() {\n                        @Override\n                        public void run() {\n                            TopicFragment.this.doActionException(e);\n                        }\n                    });\n                    return;\n                }\n\n                AppCtx.getEventBus().post(new TopicEvent(TopicEvent.TYPE_REPLY));\n            }\n        }, new Function<Future<?>, Void>() {\n            @Override\n            public Void apply(Future<?> future) {\n                if (TopicFragment.this.cancelRequest(future)) {\n                    mReplyForm.setContent(content);\n                    if (!mReplyForm.getVisibility()) {\n                        mReplyForm.toggle();\n                    }\n                }\n                return null;\n            }\n        });\n\n        mReplyForm.setVisibility(false);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n   public static void printMethods(Class cl)\n   {\n      Method[] methods = cl.getDeclaredMethods();\n\n      for (Method m : methods)\n      {\n         Class retType = m.getReturnType();\n         String name = m.getName();\n\n         System.out.print(\"   \");\n         String modifiers = Modifier.toString(m.getModifiers());\n         if (modifiers.length() > 0) System.out.print(modifiers + \" \");         \n         System.out.print(retType.getName() + \" \" + name + \"(\");\n\n         Class[] paramTypes = m.getParameterTypes();\n         for (int j = 0; j < paramTypes.length; j++)\n         {\n            if (j > 0) System.out.print(\", \");\n            System.out.print(paramTypes[j].getName());\n         }\n         System.out.println(\");\");\n      }\n   }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n  public boolean feed_publishTemplatizedAction(Integer actorId, CharSequence titleTemplate,\n                                               Map<String, CharSequence> titleData,\n                                               CharSequence bodyTemplate,\n                                               Map<String, CharSequence> bodyData,\n                                               CharSequence bodyGeneral,\n                                               Collection<Integer> targetIds,\n                                               Collection<IFeedImage> images)\n  throws FacebookException, IOException {\n    return feed_publishTemplatizedAction(titleTemplate, titleData, bodyTemplate, bodyData, bodyGeneral,\n                                         targetIds, images,  null);\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n        \n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n        \n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n        \n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void requestListViewData() {\n        mBllUser = new BusinessUser(this);\n        mBllServer = new BusinessServer(this);\n        mListMap = new ArrayList<Map<String, Object>>();\n        mBllUser.userServerOrderList((position + 1) + \"\", pageNum + \"\");\n\n\n            mAdapterNotake = new AdapterFrgServerOrderComplete(getActivity(), this, mListMap);\n            mListView.setAdapter(mAdapterNotake);\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void drawQuad() {\n        \n        if (!Debug.noVBO) {\n            vertex_VBO.bindWithFormat(3, Format.FLOAT, 0, 0); \n    \n            texture_VBO.bindWithFormat(2, Format.FLOAT, 0, 0); \n            \n            index_VBO.bindAsIndex();\n            \n            VBO.render(6, Format.UNSIGNED_SHORT);\n        } else {\n            vertex_VBO.bindImmediate(3, Format.FLOAT, 0); \n    \n            texture_VBO.bindImmediate(2, Format.FLOAT, 0); \n            \n            index_VBO.renderImmediate(6, Format.UNSIGNED_SHORT);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\n\n    \n\n\n    @Override\n    public DataInputStream getFileObject(URI fileUri, int start, int limit)\n            throws CatalogIOException {\n\n        Path objectPath = Paths.get(fileUri);\n\n        if (Files.isRegularFile(objectPath)) {\n            try {\n                if (start == -1 && limit == -1) {\n                    return new DataInputStream(Files.newInputStream(objectPath));\n                } else {\n                    return new DataInputStream(IOUtils.headOffset(objectPath, start, limit));\n                }\n            } catch (IOException e) {\n                throw new CatalogIOException(\"Unable to read file\", e);\n            }\n        } else {\n            throw new CatalogIOException(\"Not a regular file: \" + objectPath.toAbsolutePath().toString());\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static List<ExtractedResult> extractSorted(String query, Collection<String> choices) {\n\n        Extractor extractor = new Extractor();\n\n        return extractor.extractTop(query, choices, new WeightedRatio());\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n        if (headerWrite.compareAndSet(false, true)) {\n            NetworkUtil.releaseMsgCompletely(initBuf);\n        }\n        if (!decodeFinished) {\n            String msg = \"Server channel inactive while decoding response body\";\n            LOGGER.info(msg);\n            listener.onThrowable(msg, ServerChannelInactiveException.INSTANCE);\n        }\n        super.channelInactive(ctx);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tpublic synchronized void clearContexts(Resource... contexts)\n\t\tthrows IOException\n\t{\n\n\n\t\tlogger.debug(\"deleting contexts: {}\", Arrays.toString(contexts));\n\n\t\tfor (Resource context : contexts) {\n\t\t\tString contextString = SearchFields.getContextID(context);\n\n\n\t\t\tclient.prepareDeleteByQuery(indexName).setQuery(QueryBuilders.termQuery(\n\t\t\t\t\tSearchFields.CONTEXT_FIELD_NAME, contextString)).execute().actionGet();\n\t\t}\n\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    void sampleValueAboveMaximumExpectedValue() {\n        TimeWindowHistogram histogram = new TimeWindowHistogram(new MockClock(), HistogramConfig.builder()\n            .maximumExpectedValue(2L)\n            .build()\n            .merge(HistogramConfig.DEFAULT));\n        histogram.record(3);\n        assertThat(histogram.histogramCountAtValue(3)).isEqualTo(1);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic byte[] getRawOffsetIndices() {\n\t\tbyte abyte0[] = null;\n\t\tSoftReference softreference = rawOffsetIndices;\n\t\tif (softreference != null) {\n\t\t\tabyte0 = (byte[]) softreference.get();\n\t\t\tif (abyte0 != null)\n\t\t\t\treturn abyte0;\n\t\t}\n\t\tbyte abyte1[] = getZoneInfoMappings();\n\t\tint i = JAVAZM_LABEL_LENGTH + 1;\n\t\tint j = abyte1.length;\n\t\ttry {\n\t\t\tlabel0: do {\n\t\t\t\tif (i >= j)\n\t\t\t\t\tbreak;\n\t\t\t\tbyte byte0 = abyte1[i++];\n\t\t\t\tint k = ((abyte1[i++] & 255) << 8) + (abyte1[i++] & 255);\n\t\t\t\tswitch (byte0) {\n\t\t\t\tcase 66: // 'B'\n\t\t\t\t\tabyte0 = new byte[k];\n\t\t\t\t\tfor (int l = 0; l < k; l++)\n\t\t\t\t\t\tabyte0[l] = abyte1[i++];\n\n\t\t\t\t\tbreak label0;\n\n\t\t\t\tdefault:\n\t\t\t\t\ti += k;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} while (true);\n\t\t} catch (ArrayIndexOutOfBoundsException arrayindexoutofboundsexception) {\n\t\t\tSystem.err.println(\"ZoneInfo: corrupted ZoneInfoMappings\");\n\t\t}\n\t\trawOffsetIndices = new SoftReference(abyte0);\n\t\treturn abyte0;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public URI resolve(URI uri) {\n        return resolve(this, uri);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@NotNull\n    @Parameterized.Parameters\n    public static Collection<Object[]> combinations() {\n        @NotNull List<Object[]> list = new ArrayList<>();\n        @NotNull Marshallable[] objects = {\n                new Nested(new ScalarValues(), Collections.emptyList(), Collections.emptySet(), Collections.emptyMap(), \"\".split(\"\")),\n                new ScalarValues(1),\n        };\n        @NotNull String[] fields = {\n                \"[!FieldInfo {\\n\" +\n                        \"  name: values,\\n\" +\n                        \"  type: !type net.openhft.chronicle.wire.marshallable.ScalarValues,\\n\" +\n                        \"  bracketType: MAP,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: strings,\\n\" +\n                        \"  type: !type !seq,\\n\" +\n                        \"  bracketType: SEQ,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: ints,\\n\" +\n                        \"  type: !type !set,\\n\" +\n                        \"  bracketType: SEQ,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: map,\\n\" +\n                        \"  type: !type !map,\\n\" +\n                        \"  bracketType: MAP,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: array,\\n\" +\n                        \"  type: !type String[],\\n\" +\n                        \"  bracketType: SEQ,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.Nested\\n\" +\n                        \"}\\n\" +\n                        \"]\",\n                \"[!FieldInfo {\\n\" +\n                        \"  name: flag,\\n\" +\n                        \"  type: !type boolean,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: b,\\n\" +\n                        \"  type: !type byte,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: s,\\n\" +\n                        \"  type: !type short,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: ch,\\n\" +\n                        \"  type: !type char,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: i,\\n\" +\n                        \"  type: !type int,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: f,\\n\" +\n                        \"  type: !type float,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: l,\\n\" +\n                        \"  type: !type long,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: d,\\n\" +\n                        \"  type: !type double,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: flag2,\\n\" +\n                        \"  type: !type java.lang.Boolean,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: b2,\\n\" +\n                        \"  type: !type byte,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: s2,\\n\" +\n                        \"  type: !type short,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: ch2,\\n\" +\n                        \"  type: !type Char,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: i2,\\n\" +\n                        \"  type: !type int,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: f2,\\n\" +\n                        \"  type: !type Float32,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: l2,\\n\" +\n                        \"  type: !type long,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: d2,\\n\" +\n                        \"  type: !type Float64,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: aClass,\\n\" +\n                        \"  type: !type type,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: policy,\\n\" +\n                        \"  type: !type java.lang.annotation.RetentionPolicy,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: text,\\n\" +\n                        \"  type: !type String,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: date,\\n\" +\n                        \"  type: !type Date,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: time,\\n\" +\n                        \"  type: !type Time,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: dateTime,\\n\" +\n                        \"  type: !type DateTime,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: zonedDateTime,\\n\" +\n                        \"  type: !type ZonedDateTime,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: uuid,\\n\" +\n                        \"  type: !type java.util.UUID,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: bi,\\n\" +\n                        \"  type: !type java.math.BigInteger,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: bd,\\n\" +\n                        \"  type: !type java.math.BigDecimal,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \", !FieldInfo {\\n\" +\n                        \"  name: file,\\n\" +\n                        \"  type: !type java.io.File,\\n\" +\n                        \"  bracketType: NONE,\\n\" +\n                        \"  parent: !type net.openhft.chronicle.wire.marshallable.ScalarValues\\n\" +\n                        \"}\\n\" +\n                        \"]\",\n        };\n        for (int i = 0; i < objects.length; i++) {\n            Marshallable object = objects[i];\n            String fi = fields[i];\n            @NotNull Object[] test = {object, fi};\n            list.add(test);\n        }\n        return list;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintWriter writer, boolean suppressLogin, char eolMarker, boolean showDirection)\n    {\n        __writer = writer;\n        __nologin = suppressLogin;\n        __eolMarker = eolMarker;\n        __directionMarker = showDirection;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintWriter writer, boolean suppressLogin, char eolMarker, boolean showDirection)\n    {\n        __writer = writer;\n        __nologin = suppressLogin;\n        __eolMarker = eolMarker;\n        __directionMarker = showDirection;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic boolean handleControlWord(RtfCtrlWordData ctrlWordData) {\n\t\tif(ctrlWordData.ctrlWord.equals(\"blue\")) this.setBlue(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"red\")) this.setRed(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"green\")) this.setGreen(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"cshade\")) this.setShade(ctrlWordData.intValue());\n\t\tif(ctrlWordData.ctrlWord.equals(\"ctint\")) this.setTint(ctrlWordData.intValue());\n\treturn true;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        PartialSufficientSatistics partialSufficientSatistics = PartialSufficientSatistics.createZeroPartialSufficientStatistics(efBayesianNetwork);\n        partialSufficientSatistics.copy(this.sumSS);\n        partialSufficientSatistics.normalize();\n        SufficientStatistics finalSS = efBayesianNetwork.createZeroSufficientStatistics();\n        finalSS.sum(partialSufficientSatistics.getCompoundVector());\n\n        efBayesianNetwork.setMomentParameters(finalSS);\n        return efBayesianNetwork.toBayesianNetwork(dag);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        \n        byte[] byteArray = new byte[bytes.size()]; \n        bytes.getBytes(byteArray, 0);\n        return Utf8Utils.utf8BytesToString(byteArray);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                col = (int)val[1];\n\n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            Float sum = 0f;\n            for(int i = 0; i < table.data.size(); i++)\n            {\n                Object o = table.data.get(i)[col-1];\n                if (o instanceof Float)\n                    sum += (Float)o;\n            }\n            return sum;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,\n            boolean serializeType) throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {\n\n        java.lang.String prefix = null;\n        java.lang.String namespace = null;\n\n        prefix = parentQName.getPrefix();\n        namespace = parentQName.getNamespaceURI();\n        writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);\n\n        if (serializeType) {\n\n            java.lang.String namespacePrefix = registerPrefix(xmlWriter, \"urn:partner.soap.sforce.com\");\n            if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {\n                writeAttribute(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\", \"type\", namespacePrefix + \":DescribeIcon\",\n                        xmlWriter);\n            } else {\n                writeAttribute(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\", \"type\", \"DescribeIcon\", xmlWriter);\n            }\n\n        }\n\n        namespace = \"urn:partner.soap.sforce.com\";\n        writeStartElement(null, namespace, \"contentType\", xmlWriter);\n\n        if (localContentType == null) {\n\n            throw new org.apache.axis2.databinding.ADBException(\"contentType cannot be null!!\");\n\n        } else {\n\n            xmlWriter.writeCharacters(localContentType);\n\n        }\n\n        xmlWriter.writeEndElement();\n\n        namespace = \"urn:partner.soap.sforce.com\";\n        writeStartElement(null, namespace, \"height\", xmlWriter);\n\n        if (localHeight == java.lang.Integer.MIN_VALUE) {\n\n            writeAttribute(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\", \"nil\", \"1\", xmlWriter);\n\n        } else {\n            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHeight));\n        }\n\n        xmlWriter.writeEndElement();\n\n        namespace = \"urn:partner.soap.sforce.com\";\n        writeStartElement(null, namespace, \"theme\", xmlWriter);\n\n        if (localTheme == null) {\n\n            throw new org.apache.axis2.databinding.ADBException(\"theme cannot be null!!\");\n\n        } else {\n\n            xmlWriter.writeCharacters(localTheme);\n\n        }\n\n        xmlWriter.writeEndElement();\n\n        namespace = \"urn:partner.soap.sforce.com\";\n        writeStartElement(null, namespace, \"url\", xmlWriter);\n\n        if (localUrl == null) {\n\n            throw new org.apache.axis2.databinding.ADBException(\"url cannot be null!!\");\n\n        } else {\n\n            xmlWriter.writeCharacters(localUrl);\n\n        }\n\n        xmlWriter.writeEndElement();\n\n        namespace = \"urn:partner.soap.sforce.com\";\n        writeStartElement(null, namespace, \"width\", xmlWriter);\n\n        if (localWidth == java.lang.Integer.MIN_VALUE) {\n\n            writeAttribute(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\", \"nil\", \"1\", xmlWriter);\n\n        } else {\n            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWidth));\n        }\n\n        xmlWriter.writeEndElement();\n\n        xmlWriter.writeEndElement();\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static Class toClass(String str, boolean resolve,\n                                ClassLoader loader) {\n        if (str == null) {\n            throw new NullPointerException(\"str == null\");\n        }\n\n        int dims = 0;\n        while (str.endsWith(\"[]\")) {\n            dims++;\n            str = str.substring(0, str.length() - 2);\n        }\n\n        boolean primitive = false;\n        if (str.indexOf('.') == -1) {\n            for (int i = 0; !primitive && (i < _codes.length); i++) {\n                if (_codes[i][1].equals(str)) {\n                    if (dims == 0) {\n                        return (Class) _codes[i][0];\n                    }\n                    str = (String) _codes[i][2];\n                    primitive = true;\n                }\n            }\n        }\n\n        if (dims > 0) {\n            StringBuilder buf = new StringBuilder(str.length() + dims + 2);\n            for (int i = 0; i < dims; i++) {\n                buf.append('[');\n            }\n            if (!primitive) {\n                buf.append('L');\n            }\n            buf.append(str);\n            if (!primitive) {\n                buf.append(';');\n            }\n            str = buf.toString();\n        }\n\n        if (loader == null) {\n            loader = Thread.currentThread().getContextClassLoader();\n        }\n\n        try {\n            return Class.forName(str, resolve, loader);\n        }\n        catch (ClassNotFoundException | NoClassDefFoundError e) {\n            throw new IllegalArgumentException(e.getMessage());\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void quickSendFail( int classHandle, Map<Integer,byte[]> parameters, byte[] tag )\n\t{\n\t\ttry\n\t\t{\n\t\t\tSuppliedParameters toSend = TestSetup.getRTIFactory().createSuppliedParameters();\n\t\t\tif( parameters != null )\n\t\t\t{\n\t\t\t\tfor( Integer key : parameters.keySet() )\n\t\t\t\t\ttoSend.add( key, parameters.get(key) );\n\t\t\t}\n\t\t\t\n\t\t\trtiamb.sendInteraction( classHandle, toSend, tag );\n\t\t\t\n\t\t\tAssert.fail( \"Was expecting the sending of interaction [\" + classHandle + \"] to fail\" );\n\t\t}\n\t\tcatch( Exception e )\n\t\t{\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public PartitionLoad getLoad() throws IOException{\n        Map<ServerName, List<HRegionInfo>> serverToRegionMap=new HashMap<>();\n        try(RegionLocator rl=connection.getRegionLocator(tableName)){\n            List<HRegionLocation> locations=rl.getAllRegionLocations();\n            for(HRegionLocation location : locations){\n                List<HRegionInfo> info=serverToRegionMap.get(location.getServerName());\n                if(info==null){\n                    info = new LinkedList<>();\n                    serverToRegionMap.put(location.getServerName(),info);\n                }\n                info.add(location.getRegionInfo());\n            }\n        }\n        int totalStoreFileSizeMB = 0;\n        int totalMemstoreSieMB = 0;\n        int storefileIndexSizeMB = 0;\n        try(Admin admin=connection.getAdmin()){\n            ClusterStatus clusterStatus=admin.getClusterStatus();\n            for(Map.Entry<ServerName,List<HRegionInfo>> entry:serverToRegionMap.entrySet()){\n                ServerLoad load=clusterStatus.getLoad(entry.getKey());\n                Map<byte[], RegionLoad> regionsLoad=load.getRegionsLoad();\n                for(HRegionInfo info:entry.getValue()){\n                    RegionLoad rl = regionsLoad.get(info.getRegionName());\n                    totalStoreFileSizeMB+=rl.getStorefileSizeMB();\n                    totalMemstoreSieMB+=rl.getMemStoreSizeMB();\n                    storefileIndexSizeMB+=rl.getStorefileIndexSizeMB();\n                }\n            }\n        }\n        return new HPartitionLoad(getName(),totalStoreFileSizeMB,totalMemstoreSieMB,storefileIndexSizeMB);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic TabbedPane(String title, Displayable[] tabs, Image[] tabIcons, boolean useTabTitle)\n\t{\n\t\tthis( title, tabs, tabIcons, useTabTitle, null );\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintWriter writer, boolean suppressLogin, char eolMarker, boolean showDirection)\n    {\n        __writer = writer;\n        __nologin = suppressLogin;\n        __eolMarker = eolMarker;\n        __directionMarker = showDirection;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic ExternalCarrierBillingInstrumentProto(String instrumentKey, String subscriberIdentifier, String accountType, String subscriberCurrency, Long transactionLimit, String subscriberName, String address1, String address2, String city, String state, String postalCode, String country, EncryptedSubscriberInfo encryptedSubscriberInfo) {\n    this.instrumentKey = instrumentKey;\n    this.subscriberIdentifier = subscriberIdentifier;\n    this.accountType = accountType;\n    this.subscriberCurrency = subscriberCurrency;\n    this.transactionLimit = transactionLimit;\n    this.subscriberName = subscriberName;\n    this.address1 = address1;\n    this.address2 = address2;\n    this.city = city;\n    this.state = state;\n    this.postalCode = postalCode;\n    this.country = country;\n    this.encryptedSubscriberInfo = encryptedSubscriberInfo;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public void onPlayerStateChange(PlayerState oldState, PlayerState newState, Bundle extra) {\n\n        mPrevState = mCurrentState;\n        mCurrentState = newState;\n        Log.d(TAG, \"State change event! Oldstate= \" + oldState + \" NewState= \" + newState);\n        if (mPrevState == mCurrentState) {\n            Log.w(TAG, \"Duplicate state change message!!! \");\n        }\n        Log.d(TAG, \"State change event! OldState= \" + oldState + \" NewState= \" + newState);\n        switch (newState) {\n            case IDLE:\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mIsContentChangeRequested) {\n                    openContent(mSelectedContent);\n                }\n                break;\n            case OPENING:\n                break;\n            case OPENED:\n                if (mPlayer != null && mIsActivityResumed) {\n                    mPlayer.prepare();\n                }\n                else {\n                    mIsContentChangeRequested = false;\n                }\n                if (mIsContentSupportCC && mIsCloseCaptionEnabled) {\n                    if (mPlaybackOverlayFragment != null) {\n                        mPlaybackOverlayFragment.updateCCButtonState(true, true);\n                    }\n                    if (mPlayer != null) {\n                        mPlayer.enableTextTrack(TrackType.SUBTITLE, true);\n                    }\n                }\n                break;\n            case PREPARING:\n                if (mPlaybackOverlayFragment != null && mPlaybackOverlayFragment.getView() !=\n                        null) {\n                    mPlaybackOverlayFragment.getView().setVisibility(View.VISIBLE);\n                }\n                break;\n            case READY:\n                mPlaybackState = LeanbackPlaybackState.PAUSED;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(false);\n                }\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mPrevState == PlayerState.PREPARING) {\n                    if (mPlaybackOverlayFragment != null) {\n                        mPlaybackOverlayFragment.updatePlayback();\n                        mPlaybackOverlayFragment.startProgressAutomation();\n                    }\n                    if (mCurrentPlaybackPosition > 0) {\n                        mPlayer.seekTo(mCurrentPlaybackPosition);\n                    }\n                    if (mAutoPlay || mIsContentChangeRequested) {\n                        play();\n                        mAutoPlay = false;\n                        if (mIsContentChangeRequested) {\n                            mIsContentChangeRequested = false;\n                        }\n                    }\n                }\n                else if (mAudioFocusState == AudioFocusState.NoFocusNoDuck) {\n                    play();\n                }\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PAUSED);\n                }\n                break;\n            case PLAYING:\n                mPlaybackState = LeanbackPlaybackState.PLAYING;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(true);\n                }\n                hideProgress();\n                mWindow.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PLAYING);\n                }\n                break;\n            case BUFFERING:\n                showProgress();\n                break;\n            case SEEKING:\n                showProgress();\n                break;\n            case ENDED:\n                hideProgress();\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.playbackFinished();\n                }\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.COMPLETED);\n                }\n                break;\n            case CLOSING:\n\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.stopProgressAutomation();\n                }\n                if (!isContentLive(mSelectedContent)) {\n                    trackContentFinished(mCurrentContent, mCurrentPlaybackPosition);\n                }\n                break;\n            case ERROR:\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                Log.e(TAG, \"Player encountered an error!\");\n                break;\n            default:\n                Log.e(TAG, \"Unknown state!!!!!\");\n                break;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate ProductSceneView getProductSceneView(MouseEvent event) {\n        final Component eventComponent = event.getComponent();\n        if (eventComponent instanceof ProductSceneView) {\n            return (ProductSceneView) eventComponent;\n        }\n        final Container parentComponent = eventComponent.getParent();\n        if (parentComponent instanceof ProductSceneView) {\n            return (ProductSceneView) parentComponent;\n        }\n        if (parentComponent.getParent() instanceof ProductSceneView) {\n            return (ProductSceneView) parentComponent.getParent();\n        }\n        return null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void hookDialogIsOpen() {\n        \n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                UIHelpers.runOnUIThread(true, new Runnable() {\n                    @Override\n                    public void run() {\n                        if (!browser.isDisposed()) {\n                            log.debug(\"Go to the ACS authentication URL: \" + serverSigninURL.toString()); //$NON-NLS-1$\n                            browser.setUrl(serverSigninURL.toString());\n\n                            \n                            notifyToken = new NotifyTokenBrowserFunction(browser.getBrowser(), \"notifyToken\"); //$NON-NLS-1$\n                        }\n                    }\n                });\n            }\n        }).start();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void load() {\n        List<ListItemViewModel> viewModels = new ArrayList<>(DUMMY_MODEL_COUNT);\n        for (int i = 0; i < DUMMY_MODEL_COUNT; i++) {\n            ListItemViewModel vm = new ListItemViewModel();\n            if (i % 10 == 0 && isAddingHeaders) {\n                vm.primary = \"Heading \" + i;\n                vm.layout = R.layout.list_group_heading;\n            } else {\n                vm.primary = \"Primary \" + i;\n                vm.secondary = \"Secondary \" + i;\n                vm.tertiary = \"Tertiary \" + i;\n                vm.imageUrl = \"http://rdiodynimages0-a.akamaihd.net/?l=a\" + (i + 100000) + \"-0\";\n            }\n            viewModels.add(vm);\n            if (vm.layout == R.layout.list_group_heading) {\n                onHeaderAdded(vm, i);\n            } else {\n                onItemAdded(vm, i);\n            }\n        }\n        setViewModels(viewModels);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Kernel(int width, int height, double factor, double data[]) {\n        this(width, height, (width - 1) / 2, (height - 1) / 2, factor, data);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void addShaped(IItemStack output, IIngredient[][] ingredients, IRecipeFunction function, boolean mirrored) {\n\t\tShapedRecipe recipe = new ShapedRecipe(output, ingredients, function, mirrored);\n\t\tIRecipe irecipe = RecipeConverter.convert(recipe);\n\t\tMineTweakerAPI.apply(new ActionAddRecipe(irecipe, recipe));\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testExamples() throws EncoderException {\n        final String[][] data = {\n            {\"m\\u00DCller\", \"657\"}, // m\u813aller - why upper case U-umlaut?\n            {\"schmidt\", \"862\"},\n            {\"schneider\", \"8627\"},\n            {\"fischer\", \"387\"},\n            {\"weber\", \"317\"},\n            {\"wagner\", \"3467\"},\n            {\"becker\", \"147\"},\n            {\"hoffmann\", \"0366\"},\n            {\"sch\\u00C4fer\", \"837\"}, // sch\u811bfer - why upper case A-umlaut ?\n            {\"Breschnew\", \"17863\"},\n            {\"Wikipedia\", \"3412\"},\n            {\"peter\", \"127\"},\n            {\"pharma\", \"376\"},\n            {\"m\\u00f6nchengladbach\", \"664645214\"}, // m\u679anchengladbach\n            {\"deutsch\", \"28\"},\n            {\"deutz\", \"28\"},\n            {\"hamburg\", \"06174\"},\n            {\"hannover\", \"0637\"},\n            {\"christstollen\", \"478256\"},\n            {\"Xanthippe\", \"48621\"},\n            {\"Zacharias\", \"8478\"},\n            {\"Holzbau\", \"0581\"},\n            {\"matsch\", \"68\"},\n            {\"matz\", \"68\"},\n            {\"Arbeitsamt\", \"071862\"},\n            {\"Eberhard\", \"01772\"},\n            {\"Eberhardt\", \"01772\"},\n            {\"heithabu\", \"021\"}};\n        this.checkEncodings(data);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void insert(int itemNum, Item item, Style itemStyle)\n\t{\n\t\tif (itemNum == this.container.size()) {\n\t\t\tthis.container.add(item, itemStyle);\n\t\t} else {\n\t\t\tif (itemStyle != null) {\n\t\t\t\titem.setStyle(itemStyle);\n\t\t\t}\n\t\t\tthis.container.add( itemNum, item );\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    protected XMLElement(HashMap entities,\n                         boolean skipLeadingWhitespace,\n                         boolean fillBasicConversionTable,\n                         boolean ignoreCase) {\n        this.ignoreWhitespace = skipLeadingWhitespace;\n        this.ignoreCase = ignoreCase;\n        this.name = null;\n        this.contents = \"\";\n        this.attributes = new HashMap();\n        this.children = new ArrayList();\n        this.entities = entities;\n        this.lineNr = 0;\n        Iterator iter = this.entities.keySet().iterator();\n        while (iter.hasNext()) {\n            Object key = iter.next();\n            Object value = this.entities.get(key);\n            if (value instanceof String) {\n                value = ((String) value).toCharArray();\n                this.entities.put(key, value);\n            }\n        }\n        if (fillBasicConversionTable) {\n            this.entities.put(\"amp\", new char[]{'&'});\n            this.entities.put(\"quot\", new char[]{'\"'});\n            this.entities.put(\"apos\", new char[]{'\\''});\n            this.entities.put(\"lt\", new char[]{'<'});\n            this.entities.put(\"gt\", new char[]{'>'});\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void printMethods(Class<?> cls) {\n\t\tMethod[] methods = cls.getDeclaredMethods();\n\t\tfor (Method method : methods) {\n\t\t\tString name = method.getName();\n\t\t\tClass<?>[] parameterType = method.getParameterTypes();\n\t\t\tClass<?> returnType = method.getReturnType();\n\t\t\tSystem.out.println(name);\n\t\t\tSystem.out.println(returnType.getName());\n\t\t\tfor (Class<?> class1 : parameterType)\n\t\t\t\tSystem.out.println(class1);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic List<Instance<String>> createInstances() {\n    List<Instance<String>> instances = new ArrayList<Instance<String>>();\n    instances.add(createInstance(\"O Word_Three LCWord_three CapitalType_INITIAL_UPPERCASE L0OOB1 L1OOB2 R0_sequence R0_TypePath_Pos_NN R0_TypePath_Stem_sequenc R1_elements R1_TypePath_Pos_NNS R1_TypePath_Stem_element TypePath_Pos_CD TypePath_Stem_Three PrevNEMTokenLabel_L0OOB1 PrevNEMTokenLabel_L1OOB2\"));\n    instances.add(createInstance(\"O Word_sequence LCWord_sequence CapitalType_ALL_LOWERCASE Prefix3_seq Suffix3_nce Suffix4_ence Suffix5_uence L0_Three L0_TypePath_Pos_CD L0_TypePath_Stem_Three L1OOB1 R0_elements R0_TypePath_Pos_NNS R0_TypePath_Stem_element R1_are R1_TypePath_Pos_VBP R1_TypePath_Stem_are TypePath_Pos_NN TypePath_Stem_sequenc PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1OOB1\"));\n    instances.add(createInstance(\"O Word_elements LCWord_elements CapitalType_ALL_LOWERCASE Prefix3_ele Suffix3_nts Suffix4_ents Suffix5_ments L0_sequence L0_TypePath_Pos_NN L0_TypePath_Stem_sequenc L1_Three L1_TypePath_Pos_CD L1_TypePath_Stem_Three R0_are R0_TypePath_Pos_VBP R0_TypePath_Stem_are R1_shown R1_TypePath_Pos_VBN R1_TypePath_Stem_shown TypePath_Pos_NNS TypePath_Stem_element PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_are LCWord_are CapitalType_ALL_LOWERCASE L0_elements L0_TypePath_Pos_NNS L0_TypePath_Stem_element L1_sequence L1_TypePath_Pos_NN L1_TypePath_Stem_sequenc R0_shown R0_TypePath_Pos_VBN R0_TypePath_Stem_shown R1_to R1_TypePath_Pos_TO R1_TypePath_Stem_to TypePath_Pos_VBP TypePath_Stem_are PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_shown LCWord_shown CapitalType_ALL_LOWERCASE L0_are L0_TypePath_Pos_VBP L0_TypePath_Stem_are L1_elements L1_TypePath_Pos_NNS L1_TypePath_Stem_element R0_to R0_TypePath_Pos_TO R0_TypePath_Stem_to R1_be R1_TypePath_Pos_VB R1_TypePath_Stem_be TypePath_Pos_VBN TypePath_Stem_shown PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_to LCWord_to CapitalType_ALL_LOWERCASE L0_shown L0_TypePath_Pos_VBN L0_TypePath_Stem_shown L1_are L1_TypePath_Pos_VBP L1_TypePath_Stem_are R0_be R0_TypePath_Pos_VB R0_TypePath_Stem_be R1_required R1_TypePath_Pos_VBN R1_TypePath_Stem_requir TypePath_Pos_TO TypePath_Stem_to PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_be LCWord_be CapitalType_ALL_LOWERCASE L0_to L0_TypePath_Pos_TO L0_TypePath_Stem_to L1_shown L1_TypePath_Pos_VBN L1_TypePath_Stem_shown R0_required R0_TypePath_Pos_VBN R0_TypePath_Stem_requir R1_for R1_TypePath_Pos_IN R1_TypePath_Stem_for TypePath_Pos_VB TypePath_Stem_be PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_required LCWord_required CapitalType_ALL_LOWERCASE Prefix3_req Suffix3_red Suffix4_ired Suffix5_uired L0_be L0_TypePath_Pos_VB L0_TypePath_Stem_be L1_to L1_TypePath_Pos_TO L1_TypePath_Stem_to R0_for R0_TypePath_Pos_IN R0_TypePath_Stem_for R1_accurate R1_TypePath_Pos_JJ R1_TypePath_Stem_accur TypePath_Pos_VBN TypePath_Stem_requir PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_for LCWord_for CapitalType_ALL_LOWERCASE L0_required L0_TypePath_Pos_VBN L0_TypePath_Stem_requir L1_be L1_TypePath_Pos_VB L1_TypePath_Stem_be R0_accurate R0_TypePath_Pos_JJ R0_TypePath_Stem_accur R1_and R1_TypePath_Pos_CC R1_TypePath_Stem_and TypePath_Pos_IN TypePath_Stem_for PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_accurate LCWord_accurate CapitalType_ALL_LOWERCASE Prefix3_acc Suffix3_ate Suffix4_rate Suffix5_urate L0_for L0_TypePath_Pos_IN L0_TypePath_Stem_for L1_required L1_TypePath_Pos_VBN L1_TypePath_Stem_requir R0_and R0_TypePath_Pos_CC R0_TypePath_Stem_and R1_efficient R1_TypePath_Pos_JJ R1_TypePath_Stem_effici TypePath_Pos_JJ TypePath_Stem_accur PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_and LCWord_and CapitalType_ALL_LOWERCASE L0_accurate L0_TypePath_Pos_JJ L0_TypePath_Stem_accur L1_for L1_TypePath_Pos_IN L1_TypePath_Stem_for R0_efficient R0_TypePath_Pos_JJ R0_TypePath_Stem_effici R1_transcription R1_TypePath_Pos_NN R1_TypePath_Stem_transcript TypePath_Pos_CC TypePath_Stem_and PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_efficient LCWord_efficient CapitalType_ALL_LOWERCASE Prefix3_eff Suffix3_ent Suffix4_ient Suffix5_cient L0_and L0_TypePath_Pos_CC L0_TypePath_Stem_and L1_accurate L1_TypePath_Pos_JJ L1_TypePath_Stem_accur R0_transcription R0_TypePath_Pos_NN R0_TypePath_Stem_transcript R1_termination R1_TypePath_Pos_NN R1_TypePath_Stem_termin TypePath_Pos_JJ TypePath_Stem_effici PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_transcription LCWord_transcription CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ption L0_efficient L0_TypePath_Pos_JJ L0_TypePath_Stem_effici L1_and L1_TypePath_Pos_CC L1_TypePath_Stem_and R0_termination R0_TypePath_Pos_NN R0_TypePath_Stem_termin R1_by R1_TypePath_Pos_IN R1_TypePath_Stem_by TypePath_Pos_NN TypePath_Stem_transcript PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_termination LCWord_termination CapitalType_ALL_LOWERCASE Prefix3_ter Suffix3_ion Suffix4_tion Suffix5_ation L0_transcription L0_TypePath_Pos_NN L0_TypePath_Stem_transcript L1_efficient L1_TypePath_Pos_JJ L1_TypePath_Stem_effici R0_by R0_TypePath_Pos_IN R0_TypePath_Stem_by R1_RNA R1_TypePath_Pos_NNP R1_TypePath_Stem_RNA TypePath_Pos_NN TypePath_Stem_termin PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_by LCWord_by CapitalType_ALL_LOWERCASE L0_termination L0_TypePath_Pos_NN L0_TypePath_Stem_termin L1_transcription L1_TypePath_Pos_NN L1_TypePath_Stem_transcript R0_RNA R0_TypePath_Pos_NNP R0_TypePath_Stem_RNA R1_polymerase R1_TypePath_Pos_NN R1_TypePath_Stem_polymeras TypePath_Pos_IN TypePath_Stem_by PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"B-GENE Word_RNA LCWord_rna CapitalType_ALL_UPPERCASE L0_by L0_TypePath_Pos_IN L0_TypePath_Stem_by L1_termination L1_TypePath_Pos_NN L1_TypePath_Stem_termin R0_polymerase R0_TypePath_Pos_NN R0_TypePath_Stem_polymeras R1_I R1_TypePath_Pos_PRP R1_TypePath_Stem_I TypePath_Pos_NNP TypePath_Stem_RNA PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"I-GENE Word_polymerase LCWord_polymerase CapitalType_ALL_LOWERCASE Prefix3_pol Suffix3_ase Suffix4_rase Suffix5_erase L0_RNA L0_TypePath_Pos_NNP L0_TypePath_Stem_RNA L1_by L1_TypePath_Pos_IN L1_TypePath_Stem_by R0_I R0_TypePath_Pos_PRP R0_TypePath_Stem_I R1_( R1_TypePath_Pos_-LRB- R1_TypePath_Stem_( TypePath_Pos_NN TypePath_Stem_polymeras PrevNEMTokenLabel_L0_B-GENE PrevNEMTokenLabel_L1_O Gazetteer_entrez_genes.txt Gazetteer_entrez_genes.txt\"));\n    instances.add(createInstance(\"I-GENE Word_I LCWord_i CapitalType_ALL_UPPERCASE NumericType_ROMAN_NUMERAL L0_polymerase L0_TypePath_Pos_NN L0_TypePath_Stem_polymeras L1_RNA L1_TypePath_Pos_NNP L1_TypePath_Stem_RNA R0_( R0_TypePath_Pos_-LRB- R0_TypePath_Stem_( R1_pol R1_TypePath_Pos_NN R1_TypePath_Stem_pol TypePath_Pos_PRP TypePath_Stem_I PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_B-GENE\"));\n    instances.add(createInstance(\"O Word_( LCWord_( L0_I L0_TypePath_Pos_PRP L0_TypePath_Stem_I L1_polymerase L1_TypePath_Pos_NN L1_TypePath_Stem_polymeras R0_pol R0_TypePath_Pos_NN R0_TypePath_Stem_pol R1_I R1_TypePath_Pos_PRP R1_TypePath_Stem_I TypePath_Pos_-LRB- TypePath_Stem_( PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_I-GENE\"));\n    instances.add(createInstance(\"B-GENE Word_pol LCWord_pol CapitalType_ALL_LOWERCASE L0_( L0_TypePath_Pos_-LRB- L0_TypePath_Stem_( L1_I L1_TypePath_Pos_PRP L1_TypePath_Stem_I R0_I R0_TypePath_Pos_PRP R0_TypePath_Stem_I R1_) R1_TypePath_Pos_-RRB- R1_TypePath_Stem_) TypePath_Pos_NN TypePath_Stem_pol PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_I-GENE Gazetteer_entrez_genes.txt\"));\n    instances.add(createInstance(\"I-GENE Word_I LCWord_i CapitalType_ALL_UPPERCASE NumericType_ROMAN_NUMERAL L0_pol L0_TypePath_Pos_NN L0_TypePath_Stem_pol L1_( L1_TypePath_Pos_-LRB- L1_TypePath_Stem_( R0_) R0_TypePath_Pos_-RRB- R0_TypePath_Stem_) R1_assayed R1_TypePath_Pos_VBD R1_TypePath_Stem_assay TypePath_Pos_PRP TypePath_Stem_I PrevNEMTokenLabel_L0_B-GENE PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_) LCWord_) L0_I L0_TypePath_Pos_PRP L0_TypePath_Stem_I L1_pol L1_TypePath_Pos_NN L1_TypePath_Stem_pol R0_assayed R0_TypePath_Pos_VBD R0_TypePath_Stem_assay R1_both R1_TypePath_Pos_DT R1_TypePath_Stem_both TypePath_Pos_-RRB- TypePath_Stem_) PrevNEMTokenLabel_L0_I-GENE PrevNEMTokenLabel_L1_B-GENE\"));\n    instances.add(createInstance(\"O Word_assayed LCWord_assayed CapitalType_ALL_LOWERCASE Prefix3_ass Suffix3_yed Suffix4_ayed L0_) L0_TypePath_Pos_-RRB- L0_TypePath_Stem_) L1_I L1_TypePath_Pos_PRP L1_TypePath_Stem_I R0_both R0_TypePath_Pos_DT R0_TypePath_Stem_both R1_in R1_TypePath_Pos_IN R1_TypePath_Stem_in TypePath_Pos_VBD TypePath_Stem_assay PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_I-GENE\"));\n    instances.add(createInstance(\"O Word_both LCWord_both CapitalType_ALL_LOWERCASE L0_assayed L0_TypePath_Pos_VBD L0_TypePath_Stem_assay L1_) L1_TypePath_Pos_-RRB- L1_TypePath_Stem_) R0_in R0_TypePath_Pos_IN R0_TypePath_Stem_in R1_a R1_TypePath_Pos_DT R1_TypePath_Stem_a TypePath_Pos_DT TypePath_Stem_both PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_in LCWord_in CapitalType_ALL_LOWERCASE L0_both L0_TypePath_Pos_DT L0_TypePath_Stem_both L1_assayed L1_TypePath_Pos_VBD L1_TypePath_Stem_assay R0_a R0_TypePath_Pos_DT R0_TypePath_Stem_a R1_cell-free R1_TypePath_Pos_JJ R1_TypePath_Stem_cell-fre TypePath_Pos_IN TypePath_Stem_in PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_a LCWord_a CapitalType_ALL_LOWERCASE L0_in L0_TypePath_Pos_IN L0_TypePath_Stem_in L1_both L1_TypePath_Pos_DT L1_TypePath_Stem_both R0_cell-free R0_TypePath_Pos_JJ R0_TypePath_Stem_cell-fre R1_transcription R1_TypePath_Pos_NN R1_TypePath_Stem_transcript TypePath_Pos_DT TypePath_Stem_a PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_cell-free LCWord_cell-free CapitalType_ALL_LOWERCASE ContainsHyphen_CONTAINS_HYPHEN Prefix3_cel Suffix3_ree Suffix4_free Suffix5_-free L0_a L0_TypePath_Pos_DT L0_TypePath_Stem_a L1_in L1_TypePath_Pos_IN L1_TypePath_Stem_in R0_transcription R0_TypePath_Pos_NN R0_TypePath_Stem_transcript R1_system R1_TypePath_Pos_NN R1_TypePath_Stem_system TypePath_Pos_JJ TypePath_Stem_cell-fre PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_transcription LCWord_transcription CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ption L0_cell-free L0_TypePath_Pos_JJ L0_TypePath_Stem_cell-fre L1_a L1_TypePath_Pos_DT L1_TypePath_Stem_a R0_system R0_TypePath_Pos_NN R0_TypePath_Stem_system R1_and R1_TypePath_Pos_CC R1_TypePath_Stem_and TypePath_Pos_NN TypePath_Stem_transcript PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_system LCWord_system CapitalType_ALL_LOWERCASE Prefix3_sys Suffix3_tem L0_transcription L0_TypePath_Pos_NN L0_TypePath_Stem_transcript L1_cell-free L1_TypePath_Pos_JJ L1_TypePath_Stem_cell-fre R0_and R0_TypePath_Pos_CC R0_TypePath_Stem_and R1_in R1_TypePath_Pos_IN R1_TypePath_Stem_in TypePath_Pos_NN TypePath_Stem_system PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_and LCWord_and CapitalType_ALL_LOWERCASE L0_system L0_TypePath_Pos_NN L0_TypePath_Stem_system L1_transcription L1_TypePath_Pos_NN L1_TypePath_Stem_transcript R0_in R0_TypePath_Pos_IN R0_TypePath_Stem_in R1_vivo R1_TypePath_Pos_RB R1_TypePath_Stem_vivo TypePath_Pos_CC TypePath_Stem_and PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_in LCWord_in CapitalType_ALL_LOWERCASE L0_and L0_TypePath_Pos_CC L0_TypePath_Stem_and L1_system L1_TypePath_Pos_NN L1_TypePath_Stem_system R0_vivo R0_TypePath_Pos_RB R0_TypePath_Stem_vivo R1_after R1_TypePath_Pos_IN R1_TypePath_Stem_after TypePath_Pos_IN TypePath_Stem_in PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_vivo LCWord_vivo CapitalType_ALL_LOWERCASE L0_in L0_TypePath_Pos_IN L0_TypePath_Stem_in L1_and L1_TypePath_Pos_CC L1_TypePath_Stem_and R0_after R0_TypePath_Pos_IN R0_TypePath_Stem_after R1_transfection R1_TypePath_Pos_NN R1_TypePath_Stem_transfect TypePath_Pos_RB TypePath_Stem_vivo PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_after LCWord_after CapitalType_ALL_LOWERCASE L0_vivo L0_TypePath_Pos_RB L0_TypePath_Stem_vivo L1_in L1_TypePath_Pos_IN L1_TypePath_Stem_in R0_transfection R0_TypePath_Pos_NN R0_TypePath_Stem_transfect R1_of R1_TypePath_Pos_IN R1_TypePath_Stem_of TypePath_Pos_IN TypePath_Stem_after PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_transfection LCWord_transfection CapitalType_ALL_LOWERCASE Prefix3_tra Suffix3_ion Suffix4_tion Suffix5_ction L0_after L0_TypePath_Pos_IN L0_TypePath_Stem_after L1_vivo L1_TypePath_Pos_RB L1_TypePath_Stem_vivo R0_of R0_TypePath_Pos_IN R0_TypePath_Stem_of R1_rDNA R1_TypePath_Pos_NNP R1_TypePath_Stem_rDNA TypePath_Pos_NN TypePath_Stem_transfect PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_of LCWord_of CapitalType_ALL_LOWERCASE L0_transfection L0_TypePath_Pos_NN L0_TypePath_Stem_transfect L1_after L1_TypePath_Pos_IN L1_TypePath_Stem_after R0_rDNA R0_TypePath_Pos_NNP R0_TypePath_Stem_rDNA R1_minigene R1_TypePath_Pos_NN R1_TypePath_Stem_minigen TypePath_Pos_IN TypePath_Stem_of PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_rDNA LCWord_rdna CapitalType_MIXED_CASE L0_of L0_TypePath_Pos_IN L0_TypePath_Stem_of L1_transfection L1_TypePath_Pos_NN L1_TypePath_Stem_transfect R0_minigene R0_TypePath_Pos_NN R0_TypePath_Stem_minigen R1_constructs R1_TypePath_Pos_NNS R1_TypePath_Stem_construct TypePath_Pos_NNP TypePath_Stem_rDNA PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_minigene LCWord_minigene CapitalType_ALL_LOWERCASE Prefix3_min Suffix3_ene Suffix4_gene Suffix5_igene L0_rDNA L0_TypePath_Pos_NNP L0_TypePath_Stem_rDNA L1_of L1_TypePath_Pos_IN L1_TypePath_Stem_of R0_constructs R0_TypePath_Pos_NNS R0_TypePath_Stem_construct R1_into R1_TypePath_Pos_IN R1_TypePath_Stem_into TypePath_Pos_NN TypePath_Stem_minigen PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_constructs LCWord_constructs CapitalType_ALL_LOWERCASE Prefix3_con Suffix3_cts Suffix4_ucts Suffix5_ructs L0_minigene L0_TypePath_Pos_NN L0_TypePath_Stem_minigen L1_rDNA L1_TypePath_Pos_NNP L1_TypePath_Stem_rDNA R0_into R0_TypePath_Pos_IN R0_TypePath_Stem_into R1_3T6 R1_TypePath_Pos_CD R1_TypePath_Stem_3T6 TypePath_Pos_NNS TypePath_Stem_construct PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_into LCWord_into CapitalType_ALL_LOWERCASE L0_constructs L0_TypePath_Pos_NNS L0_TypePath_Stem_construct L1_minigene L1_TypePath_Pos_NN L1_TypePath_Stem_minigen R0_3T6 R0_TypePath_Pos_CD R0_TypePath_Stem_3T6 R1_cells R1_TypePath_Pos_NNS R1_TypePath_Stem_cell TypePath_Pos_IN TypePath_Stem_into PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_3T6 LCWord_3t6 CapitalType_ALL_UPPERCASE NumericType_ALPHANUMERIC L0_into L0_TypePath_Pos_IN L0_TypePath_Stem_into L1_constructs L1_TypePath_Pos_NNS L1_TypePath_Stem_construct R0_cells R0_TypePath_Pos_NNS R0_TypePath_Stem_cell R1_. R1_TypePath_Pos_. R1_TypePath_Stem_. TypePath_Pos_CD TypePath_Stem_3T6 PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_cells LCWord_cells CapitalType_ALL_LOWERCASE L0_3T6 L0_TypePath_Pos_CD L0_TypePath_Stem_3T6 L1_into L1_TypePath_Pos_IN L1_TypePath_Stem_into R0_. R0_TypePath_Pos_. R0_TypePath_Stem_. R1OOB1 TypePath_Pos_NNS TypePath_Stem_cell PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    instances.add(createInstance(\"O Word_. LCWord_. L0_cells L0_TypePath_Pos_NNS L0_TypePath_Stem_cell L1_3T6 L1_TypePath_Pos_CD L1_TypePath_Stem_3T6 R0OOB1 R1OOB2 TypePath_Pos_. TypePath_Stem_. PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O\"));\n    return instances;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void doGenerate(String excludeTables) {\n\n        System.out.println(\"start generate...\");\n        List<TableMeta> tableMetaList = CodeGenHelpler.createMetaBuilder().build();\n        CodeGenHelpler.excludeTables(tableMetaList, excludeTables);\n\n        new JbootServiceInterfaceGenerator(basePackage, modelPacket).generate(tableMetaList);\n        new JbootServiceImplGenerator(basePackage + \".impl\", modelPacket).generate(tableMetaList);\n\n\n        System.out.println(\"service generate finished !!!\");\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void performDefaults() {\n        IPreferenceStore prefs = getPreferenceStore();\n        showGeneratedBy.setSelection(prefs.getDefaultBoolean(\n                RBEPreferences.SHOW_GENERATOR));\n        convertUnicodeToEncoded.setSelection(prefs.getDefaultBoolean(\n                RBEPreferences.CONVERT_UNICODE_TO_ENCODED));\n        convertUnicodeToEncoded.setSelection(prefs.getDefaultBoolean(\n                RBEPreferences.CONVERT_UNICODE_TO_ENCODED_UPPER));\n        alignEqualSigns.setSelection(\n                prefs.getDefaultBoolean(RBEPreferences.ALIGN_EQUAL_SIGNS));\n        alignEqualSigns.setSelection(prefs.getDefaultBoolean(\n                RBEPreferences.SPACES_AROUND_EQUAL_SIGNS));\n        groupKeys.setSelection(\n                prefs.getDefaultBoolean(RBEPreferences.GROUP_KEYS));\n        groupLevelDeep.setText(\n                prefs.getDefaultString(RBEPreferences.GROUP_LEVEL_DEPTH));\n        groupLineBreaks.setText(\n                prefs.getDefaultString(RBEPreferences.GROUP_LINE_BREAKS));\n        groupAlignEqualSigns.setSelection(prefs.getDefaultBoolean(\n                RBEPreferences.GROUP_ALIGN_EQUAL_SIGNS));\n        wrapLines.setSelection(\n                prefs.getDefaultBoolean(RBEPreferences.WRAP_LINES));\n        wrapCharLimit.setText(\n                prefs.getDefaultString(RBEPreferences.WRAP_CHAR_LIMIT));\n        wrapAlignEqualSigns.setSelection(\n                prefs.getDefaultBoolean(RBEPreferences.WRAP_ALIGN_EQUAL_SIGNS));\n        wrapIndentSpaces.setText(\n                prefs.getDefaultString(RBEPreferences.WRAP_INDENT_SPACES));\n        wrapNewLine.setSelection(\n                prefs.getDefaultBoolean(RBEPreferences.NEW_LINE_NICE));\n        newLineTypeForce.setSelection(\n                prefs.getDefaultBoolean(RBEPreferences.FORCE_NEW_LINE_TYPE));\n        newLineTypes[prefs.getDefaultInt(\n                RBEPreferences.NEW_LINE_TYPE)].setSelection(true);\n        keepEmptyFields.setSelection(\n                prefs.getDefaultBoolean(RBEPreferences.KEEP_EMPTY_FIELDS));\n        refreshEnabledStatuses();\n        super.performDefaults();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    protected void performDismiss(final View dismissView, final int dismissPosition, boolean doPendingDismiss) {\n        final ViewGroup.LayoutParams lp = dismissView.getLayoutParams();\n        final int originalHeight = dismissView.getHeight();\n\n        ValueAnimator animator = ValueAnimator.ofInt(originalHeight, 1).setDuration(animationTime);\n\n        if (doPendingDismiss) {\n            animator.addListener(new AnimatorListenerAdapter() {\n                @Override\n                public void onAnimationEnd(Animator animation) {\n                    --dismissAnimationRefCount;\n                    if (dismissAnimationRefCount == 0) {\n                        removePendingDismisses(originalHeight);\n                    }\n                }\n            });\n        }\n\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                lp.height = (Integer) valueAnimator.getAnimatedValue();\n                dismissView.setLayoutParams(lp);\n            }\n        });\n\n        pendingDismisses.add(new PendingDismissData(dismissPosition, dismissView));\n        animator.start();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode parse(java.lang.String xmlAsString) throws org.apache.xmlbeans.XmlException {\n          return (com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( xmlAsString, type, null ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static boolean checkExtensions(final String path, String... extensions) {\n\t\tString pathLower = path.toLowerCase();\n\t\tfor (String ext : extensions) {\n\t\t\tif (!ext.startsWith(\".\"))\n\t\t\t\text = \".\" + ext;\n\t\t\tif (pathLower.endsWith(ext))\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprivate void completeAddAppWidget(Intent data, CellLayout.CellInfo cellInfo) {\n\t\tBundle extras = data.getExtras();\n\t\tint appWidgetId = extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID, -1);\n\n\t\tLog.d(LOG_TAG, \"dumping extras content=\" + extras.toString());\n\n\t\tAppWidgetProviderInfo appWidgetInfo = appWidgetManager.getAppWidgetInfo(appWidgetId);\n\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nvoid appendHeader(final SafeHtmlBuilder m) {\n      m.openTr();\n\n      m.openTd();\n      m.addStyleName(Gerrit.RESOURCES.css().iconHeader());\n      m.addStyleName(Gerrit.RESOURCES.css().leftMostCell());\n      m.nbsp();\n      m.closeTd();\n\n      m.openTd();\n      m.setStyleName(Gerrit.RESOURCES.css().iconHeader());\n      m.nbsp();\n      m.closeTd();\n\n      m.openTd();\n      m.setStyleName(Gerrit.RESOURCES.css().dataHeader());\n      m.append(Util.C.patchTableColumnName());\n      m.closeTd();\n\n      m.openTd();\n      m.setStyleName(Gerrit.RESOURCES.css().dataHeader());\n      m.append(Util.C.patchTableColumnComments());\n      m.closeTd();\n\n      m.openTd();\n      m.setStyleName(Gerrit.RESOURCES.css().dataHeader());\n      m.append(Util.C.patchTableColumnSize());\n      m.closeTd();\n\n      m.openTd();\n      m.setStyleName(Gerrit.RESOURCES.css().dataHeader());\n      m.setAttribute(\"colspan\", 3);\n      m.append(Util.C.patchTableColumnDiff());\n      m.closeTd();\n\n      if (Gerrit.isSignedIn()) {\n        m.openTd();\n        m.setStyleName(Gerrit.RESOURCES.css().iconHeader());\n        m.addStyleName(Gerrit.RESOURCES.css().dataHeader());\n        m.append(Util.C.reviewed());\n        m.closeTd();\n      }\n\n      m.closeTr();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testNotEquals() {\n        BitSet bset = new BitSet();\n        bset.set(100);\n\n        ImmutableBitSet ibset = new ImmutableBitSet(bset);\n\n        BitSet bset2 = new BitSet();\n        bset2.set(101);\n\n        ImmutableBitSet ibset2 = new ImmutableBitSet(bset2);\n\n        assertFalse(ibset.equals(ibset2));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void setSceneRasterStartAndStopTime(Product product) {\n        final Product sourceProduct = getSourceProduct();\n        final ProductData.UTC startTime = sourceProduct.getStartTime();\n        final ProductData.UTC stopTime = sourceProduct.getEndTime();\n        final ProductSubsetDef subsetDef = getSubsetDef();\n        if (startTime != null && stopTime != null && subsetDef != null && subsetDef.getRegion() != null) {\n            final double height = sourceProduct.getSceneRasterHeight();\n            final Rectangle region = subsetDef.getRegion();\n            final double regionY = region.getY();\n            final double regionHeight = region.getHeight();\n            final double dStart = startTime.getMJD();\n            final double dStop = stopTime.getMJD();\n            final double vPerLine = (dStop - dStart) / (height - 1);\n            final double newStart = vPerLine * regionY + dStart;\n            final double newStop = vPerLine * (regionHeight - 1) + newStart;\n            product.setStartTime(new ProductData.UTC(newStart));\n            product.setEndTime(new ProductData.UTC(newStop));\n        } else {\n            product.setStartTime(startTime);\n            product.setEndTime(stopTime);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public ConeSound(MediaContainer soundData,\n                     float initialGain,\n                     int loopCount,\n                     boolean release,\n                     boolean continuous,\n                     boolean enable,\n                     Bounds  region,\n                     float   priority,\n                     float posX, float posY, float posZ,\n                     float[] frontDistance,\n                     float[] frontDistanceGain,\n                     float[] backDistance,\n                     float[] backDistanceGain,\n                     float dirX, float dirY, float dirZ ) {\n        super(soundData, initialGain, loopCount, release, continuous, enable,\n                     region, priority, posX, posY, posZ,\n                     frontDistance, frontDistanceGain );\n\n        setDefaultReadCapabilities(readCapabilities);\n\n        ((ConeSoundRetained)this.retained).setDirection(dirX, dirY, dirZ);\n        ((ConeSoundRetained)this.retained).setBackDistanceGain(\n                     backDistance, backDistanceGain );\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\n\tprivate void topologicalSort( Collection<TopologicalElement> unmarkedNodes, List<Element> sorted ) {\n\n\t\twhile ( !unmarkedNodes.isEmpty() ) {\n\n\t\t\tTopologicalElement node = unmarkedNodes.iterator().next();\n\t\t\ttopologicalVisit( node, unmarkedNodes, sorted, unmarkedNodes.size() );\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n  @SuppressWarnings(\"unchecked\")\n  public int compareValues(T first, T second) {\n    if (first == null) {\n      if (second == null) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (second == null) {\n      return 1;\n    } else {\n      return ((Comparable<T>) first).compareTo(second);\n    }\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void handlePatch(final PatchParam patchParam) throws Throwable {\n        {\n            Class<?> cls = null;\n            try {\n                cls= patchParam.context.getClass().getClassLoader().loadClass(\"com.taobao.dexposed.TestFragment\");\n            } catch (Exception e) {\n                e.printStackTrace();\n                return;\n            }\n            Log.e(TAG, \"cls:\" + cls);\n            DexposedBridge.findAndHookMethod(cls, \"getText\", new XC_MethodReplacement() {\n                @Override\n                protected Object replaceHookedMethod(MethodHookParam methodHookParam) throws Throwable {\n                    Log.e(TAG, \"methodHookParam:\" + methodHookParam.method.getName());\n                    return \"from patch\";\n                }\n            });\n\n            DexposedBridge.findAndHookMethod(cls, \"onCreateView\", LayoutInflater.class, ViewGroup.class, Bundle.class, new XC_MethodReplacement() {\n                @Override\n                protected Object replaceHookedMethod(MethodHookParam methodHookParam) throws Throwable {\n                    ViewGroup view = (ViewGroup) methodHookParam.args[1];\n                    TextView tv = new TextView(view.getContext());\n                    tv.setText(\"replace onCreateView\");\n                    return tv;\n                }\n            });\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static List<ActiveDescriptor<?>> addClasses(ServiceLocator locator, Class<?>... toAdd) {\n        return addClasses(locator, false, toAdd);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static <V> Iterable<V> topologicalSort(\n            @Nonnull Map<V, List<V>> adjacencyMap, @Nonnull Function<V, String> vertexNameFn\n    ) {\n        Map<V, TarjanVertex<V>> tarjanVertices =\n                adjacencyMap.keySet().stream()\n                            .map(v -> entry(v, new TarjanVertex<>(v)))\n                            .collect(toMap(Entry::getKey, Entry::getValue));\n        Map<TarjanVertex<V>, List<TarjanVertex<V>>> tarjanAdjacencyMap =\n                adjacencyMap.entrySet().stream()\n                            .collect(toMap(e -> tarjanVertices.get(e.getKey()),\n                                           e -> e.getValue().stream()\n                                                 .map(tarjanVertices::get)\n                                                 .collect(toList())));\n        return new TopologicalSorter<>(tarjanAdjacencyMap, vertexNameFn).go();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private static void print(int values[], int start, int end,\n                              int middle, int target) {\n\n        if (DEBUG_IDS) {\n            System.out.print(start);\n            System.out.print(\" [\");\n            for (int i = start; i < end; i++) {\n                if (middle == i) {\n                    System.out.print(\"!\");\n                }\n                System.out.print(values[i]);\n                if (values[i] == target) {\n                    System.out.print(\"*\");\n                }\n                if (i < end - 1) {\n                    System.out.print(\" \");\n                }\n            }\n            System.out.println(\"] \"+end);\n        }\n\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static Bitmap fastblur(Context context, Bitmap sentBitmap, int radius) {\n        Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n        if (radius < 1) {\n            return (null);\n        }\n        int w = bitmap.getWidth();\n        int h = bitmap.getHeight();\n        int[] pix = new int[w * h];\n        bitmap.getPixels(pix, 0, w, 0, 0, w, h);\n        int wm = w - 1;\n        int hm = h - 1;\n        int wh = w * h;\n        int div = radius + radius + 1;\n        int r[] = new int[wh];\n        int g[] = new int[wh];\n        int b[] = new int[wh];\n        int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;\n        int vmin[] = new int[Math.max(w, h)];\n        int divsum = (div + 1) >> 1;\n        divsum *= divsum;\n        int temp = 256 * divsum;\n        int dv[] = new int[temp];\n        for (i = 0; i < temp; i++) {\n            dv[i] = (i / divsum);\n        }\n        yw = yi = 0;\n        int[][] stack = new int[div][3];\n        int stackpointer;\n        int stackstart;\n        int[] sir;\n        int rbs;\n        int r1 = radius + 1;\n        int routsum, goutsum, boutsum;\n        int rinsum, ginsum, binsum;\n        for (y = 0; y < h; y++) {\n            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n            for (i = -radius; i <= radius; i++) {\n                p = pix[yi + Math.min(wm, Math.max(i, 0))];\n                sir = stack[i + radius];\n                sir[0] = (p & 0xff0000) >> 16;\n                sir[1] = (p & 0x00ff00) >> 8;\n                sir[2] = (p & 0x0000ff);\n                rbs = r1 - Math.abs(i);\n                rsum += sir[0] * rbs;\n                gsum += sir[1] * rbs;\n                bsum += sir[2] * rbs;\n                if (i > 0) {\n                    rinsum += sir[0];\n                    ginsum += sir[1];\n                    binsum += sir[2];\n                } else {\n                    routsum += sir[0];\n                    goutsum += sir[1];\n                    boutsum += sir[2];\n                }\n            }\n            stackpointer = radius;\n            for (x = 0; x < w; x++) {\n                r[yi] = dv[rsum];\n                g[yi] = dv[gsum];\n                b[yi] = dv[bsum];\n                rsum -= routsum;\n                gsum -= goutsum;\n                bsum -= boutsum;\n                stackstart = stackpointer - radius + div;\n                sir = stack[stackstart % div];\n                routsum -= sir[0];\n                goutsum -= sir[1];\n                boutsum -= sir[2];\n                if (y == 0) {\n                    vmin[x] = Math.min(x + radius + 1, wm);\n                }\n                p = pix[yw + vmin[x]];\n                sir[0] = (p & 0xff0000) >> 16;\n                sir[1] = (p & 0x00ff00) >> 8;\n                sir[2] = (p & 0x0000ff);\n                rinsum += sir[0];\n                ginsum += sir[1];\n                binsum += sir[2];\n                rsum += rinsum;\n                gsum += ginsum;\n                bsum += binsum;\n                stackpointer = (stackpointer + 1) % div;\n                sir = stack[(stackpointer) % div];\n                routsum += sir[0];\n                goutsum += sir[1];\n                boutsum += sir[2];\n                rinsum -= sir[0];\n                ginsum -= sir[1];\n                binsum -= sir[2];\n                yi++;\n            }\n            yw += w;\n        }\n        for (x = 0; x < w; x++) {\n            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n            yp = -radius * w;\n            for (i = -radius; i <= radius; i++) {\n                yi = Math.max(0, yp) + x;\n                sir = stack[i + radius];\n                sir[0] = r[yi];\n                sir[1] = g[yi];\n                sir[2] = b[yi];\n                rbs = r1 - Math.abs(i);\n                rsum += r[yi] * rbs;\n                gsum += g[yi] * rbs;\n                bsum += b[yi] * rbs;\n                if (i > 0) {\n                    rinsum += sir[0];\n                    ginsum += sir[1];\n                    binsum += sir[2];\n                } else {\n                    routsum += sir[0];\n                    goutsum += sir[1];\n                    boutsum += sir[2];\n                }\n                if (i < hm) {\n                    yp += w;\n               }\n            }\n            yi = x;\n            stackpointer = radius;\n            for (y = 0; y < h; y++) {\n                pix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16)\n                        | (dv[gsum] << 8) | dv[bsum];\n                rsum -= routsum;\n                gsum -= goutsum;\n                bsum -= boutsum;\n                stackstart = stackpointer - radius + div;\n                sir = stack[stackstart % div];\n                routsum -= sir[0];\n                goutsum -= sir[1];\n                boutsum -= sir[2];\n                if (x == 0) {\n                    vmin[y] = Math.min(y + r1, hm) * w;\n                }\n                p = x + vmin[y];\n                sir[0] = r[p];\n                sir[1] = g[p];\n                sir[2] = b[p];\n                rinsum += sir[0];\n                ginsum += sir[1];\n                binsum += sir[2];\n                rsum += rinsum;\n                gsum += ginsum;\n                bsum += binsum;\n                stackpointer = (stackpointer + 1) % div;\n                sir = stack[stackpointer];\n                routsum += sir[0];\n                goutsum += sir[1];\n                boutsum += sir[2];\n                rinsum -= sir[0];\n                ginsum -= sir[1];\n                binsum -= sir[2];\n                yi += w;\n            }\n        }\n        bitmap.setPixels(pix, 0, w, 0, 0, w, h);\n        return (bitmap);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static Endpoint create(Object implementor, WebServiceFeature ... features) {\n        return create(null, implementor, features);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode parse(java.lang.String xmlAsString, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException {\n          return (com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( xmlAsString, type, options ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic void registerResources() {\n        if (sInitialized) {\n            return;\n        }\n        \n        org.chromium.content.R.attr.select_dialog_multichoice =\n                R.attr.select_dialog_multichoice;\n        org.chromium.content.R.attr.select_dialog_singlechoice =\n                R.attr.select_dialog_singlechoice;\n        org.chromium.ui.R.color.dropdown_dark_divider_color =\n                R.color.dropdown_dark_divider_color;\n        org.chromium.ui.R.color.dropdown_divider_color =\n                R.color.dropdown_divider_color;\n        org.chromium.ui.R.color.color_picker_border_color =\n                R.color.color_picker_border_color;\n        org.chromium.content.R.dimen.link_preview_overlay_radius =\n                R.dimen.link_preview_overlay_radius;\n        org.chromium.ui.R.dimen.dropdown_item_height =\n                R.dimen.dropdown_item_height;\n        org.chromium.ui.R.dimen.dropdown_item_divider_height =\n                R.dimen.dropdown_item_divider_height;\n        org.chromium.ui.R.dimen.color_button_height =\n                R.dimen.color_button_height;\n        org.chromium.ui.R.dimen.config_min_scaling_span =\n                R.dimen.config_min_scaling_span;\n        org.chromium.ui.R.dimen.config_min_scaling_touch_major =\n                R.dimen.config_min_scaling_touch_major;\n        org.chromium.content.R.drawable.ondemand_overlay =\n                R.drawable.ondemand_overlay;\n        org.chromium.ui.R.drawable.color_button_background =\n                R.drawable.color_button_background;\n        org.chromium.ui.R.drawable.color_picker_advanced_select_handle =\n                R.drawable.color_picker_advanced_select_handle;\n        org.chromium.ui.R.id.ampm = R.id.ampm;\n        org.chromium.ui.R.id.date_picker =\n                R.id.date_picker;\n        org.chromium.ui.R.id.date_time_suggestion_value =\n                R.id.date_time_suggestion_value;\n        org.chromium.ui.R.id.date_time_suggestion_label =\n                R.id.date_time_suggestion_label;\n        org.chromium.ui.R.id.hour = R.id.hour;\n        org.chromium.ui.R.id.milli = R.id.milli;\n        org.chromium.ui.R.id.minute = R.id.minute;\n        org.chromium.ui.R.id.pickers = R.id.pickers;\n        org.chromium.ui.R.id.position_in_year =\n                R.id.position_in_year;\n        org.chromium.ui.R.id.second = R.id.second;\n        org.chromium.ui.R.id.second_colon =\n                R.id.second_colon;\n        org.chromium.ui.R.id.second_dot =\n                R.id.second_dot;\n        org.chromium.content.R.id.select_action_menu_select_all =\n                R.id.select_action_menu_select_all;\n        org.chromium.content.R.id.select_action_menu_cut =\n                R.id.select_action_menu_cut;\n        org.chromium.content.R.id.select_action_menu_copy =\n                R.id.select_action_menu_copy;\n        org.chromium.content.R.id.select_action_menu_paste =\n                R.id.select_action_menu_paste;\n        org.chromium.content.R.id.select_action_menu_share =\n                R.id.select_action_menu_share;\n        org.chromium.content.R.id.select_action_menu_web_search =\n                R.id.select_action_menu_web_search;\n        org.chromium.ui.R.id.time_picker =\n                R.id.time_picker;\n        org.chromium.ui.R.id.year = R.id.year;\n        org.chromium.content.R.id.main_text =\n                R.id.main_text;\n        org.chromium.content.R.id.sub_text =\n                R.id.sub_text;\n        org.chromium.content.R.id.arrow_image =\n                R.id.arrow_image;\n        org.chromium.ui.R.id.selected_color_view =\n                R.id.selected_color_view;\n        org.chromium.ui.R.id.title =\n                R.id.title;\n        org.chromium.ui.R.id.more_colors_button =\n                R.id.more_colors_button;\n        org.chromium.ui.R.id.color_picker_advanced =\n                R.id.color_picker_advanced;\n        org.chromium.ui.R.id.color_picker_simple =\n                R.id.color_picker_simple;\n        org.chromium.ui.R.id.color_button_swatch =\n                R.id.color_button_swatch;\n        org.chromium.ui.R.id.more_colors_button_border =\n                R.id.more_colors_button_border;\n        org.chromium.ui.R.id.gradient =\n                R.id.gradient;\n        org.chromium.ui.R.id.text =\n                R.id.text;\n        org.chromium.ui.R.id.seek_bar =\n                R.id.seek_bar;\n        org.chromium.ui.R.id.dropdown_label =\n                R.id.dropdown_label;\n        org.chromium.ui.R.id.dropdown_popup_window =\n                R.id.dropdown_popup_window;\n        org.chromium.ui.R.id.dropdown_sublabel =\n                R.id.dropdown_sublabel;\n        org.chromium.ui.R.layout.date_time_picker_dialog =\n                R.layout.date_time_picker_dialog;\n        org.chromium.ui.R.layout.date_time_suggestion =\n                R.layout.date_time_suggestion;\n        org.chromium.ui.R.layout.two_field_date_picker =\n                R.layout.two_field_date_picker;\n        org.chromium.ui.R.layout.multi_field_time_picker_dialog =\n                R.layout.multi_field_time_picker_dialog;\n        org.chromium.content.R.layout.validation_message_bubble =\n                R.layout.validation_message_bubble;\n        org.chromium.ui.R.layout.color_picker_dialog_title =\n                R.layout.color_picker_dialog_title;\n        org.chromium.ui.R.layout.color_picker_dialog_content =\n                R.layout.color_picker_dialog_content;\n        org.chromium.ui.R.layout.color_picker_advanced_component =\n                R.layout.color_picker_advanced_component;\n        org.chromium.ui.R.layout.dropdown_item =\n                R.layout.dropdown_item;\n        org.chromium.content.R.menu.select_action_menu =\n                R.menu.select_action_menu;\n        org.chromium.content.R.string.accessibility_content_view =\n                R.string.accessibility_content_view;\n        org.chromium.ui.R.string.accessibility_date_picker_month =\n                R.string.accessibility_date_picker_month;\n        org.chromium.ui.R.string.accessibility_date_picker_week =\n                R.string.accessibility_date_picker_week;\n        org.chromium.ui.R.string.accessibility_date_picker_year =\n                R.string.accessibility_date_picker_year;\n        org.chromium.ui.R.string.accessibility_datetime_picker_date =\n                R.string.accessibility_datetime_picker_date;\n        org.chromium.ui.R.string.accessibility_datetime_picker_time =\n                R.string.accessibility_datetime_picker_time;\n        org.chromium.content.R.string.actionbar_share =\n                R.string.actionbar_share;\n        org.chromium.content.R.string.actionbar_web_search =\n                R.string.actionbar_web_search;\n        org.chromium.ui.R.string.date_picker_dialog_clear =\n                R.string.date_picker_dialog_clear;\n        org.chromium.ui.R.string.date_picker_dialog_set =\n                R.string.date_picker_dialog_set;\n        org.chromium.ui.R.string.date_picker_dialog_title =\n                R.string.date_picker_dialog_title;\n        org.chromium.ui.R.string.date_picker_dialog_other_button_label =\n                R.string.date_picker_dialog_other_button_label;\n        org.chromium.ui.R.string.date_time_picker_dialog_title =\n                R.string.date_time_picker_dialog_title;\n        org.chromium.content.R.string.media_player_error_button =\n                R.string.media_player_error_button;\n        org.chromium.content.R.string.media_player_error_text_invalid_progressive_playback =\n                R.string.media_player_error_text_invalid_progressive_playback;\n        org.chromium.content.R.string.media_player_error_text_unknown =\n                R.string.media_player_error_text_unknown;\n        org.chromium.content.R.string.media_player_error_title =\n                R.string.media_player_error_title;\n        org.chromium.content.R.string.media_player_loading_video =\n                R.string.media_player_loading_video;\n        org.chromium.ui.R.string.month_picker_dialog_title =\n                R.string.month_picker_dialog_title;\n        org.chromium.content.R.string.profiler_error_toast =\n                R.string.profiler_error_toast;\n        org.chromium.content.R.string.profiler_no_storage_toast =\n                R.string.profiler_no_storage_toast;\n        org.chromium.content.R.string.profiler_started_toast =\n                R.string.profiler_started_toast;\n        org.chromium.content.R.string.profiler_stopped_toast =\n                R.string.profiler_stopped_toast;\n        org.chromium.ui.R.string.time_picker_dialog_am =\n                R.string.time_picker_dialog_am;\n        org.chromium.ui.R.string.time_picker_dialog_pm =\n                R.string.time_picker_dialog_pm;\n        org.chromium.ui.R.string.time_picker_dialog_hour_minute_separator =\n                R.string.time_picker_dialog_hour_minute_separator;\n        org.chromium.ui.R.string.time_picker_dialog_hour_minute_separator =\n                R.string.time_picker_dialog_hour_minute_separator;\n        org.chromium.ui.R.string.time_picker_dialog_minute_second_separator =\n                R.string.time_picker_dialog_minute_second_separator;\n        org.chromium.ui.R.string.time_picker_dialog_second_subsecond_separator =\n                R.string.time_picker_dialog_second_subsecond_separator;\n        org.chromium.ui.R.string.time_picker_dialog_title =\n                R.string.time_picker_dialog_title;\n        org.chromium.ui.R.string.week_picker_dialog_title =\n                R.string.week_picker_dialog_title;\n        org.chromium.ui.R.string.copy_to_clipboard_failure_message =\n                R.string.copy_to_clipboard_failure_message;\n        org.chromium.ui.R.string.low_memory_error =\n                R.string.low_memory_error;\n        org.chromium.ui.R.string.opening_file_error =\n                R.string.opening_file_error;\n        org.chromium.ui.R.string.color_picker_button_more =\n                R.string.color_picker_button_more;\n        org.chromium.ui.R.string.color_picker_hue =\n                R.string.color_picker_hue;\n        org.chromium.ui.R.string.color_picker_saturation =\n                R.string.color_picker_saturation;\n        org.chromium.ui.R.string.color_picker_value =\n                R.string.color_picker_value;\n        org.chromium.ui.R.string.color_picker_button_set =\n                R.string.color_picker_button_set;\n        org.chromium.ui.R.string.color_picker_button_cancel =\n                R.string.color_picker_button_cancel;\n        org.chromium.ui.R.string.color_picker_dialog_title =\n                R.string.color_picker_dialog_title;\n        org.chromium.ui.R.string.color_picker_button_red =\n                R.string.color_picker_button_red;\n        org.chromium.ui.R.string.color_picker_button_cyan =\n                R.string.color_picker_button_cyan;\n        org.chromium.ui.R.string.color_picker_button_blue =\n                R.string.color_picker_button_blue;\n        org.chromium.ui.R.string.color_picker_button_green =\n                R.string.color_picker_button_green;\n        org.chromium.ui.R.string.color_picker_button_magenta =\n                R.string.color_picker_button_magenta;\n        org.chromium.ui.R.string.color_picker_button_yellow =\n                R.string.color_picker_button_yellow;\n        org.chromium.ui.R.string.color_picker_button_black =\n                R.string.color_picker_button_black;\n        org.chromium.ui.R.string.color_picker_button_white =\n                R.string.color_picker_button_white;\n        org.chromium.content.R.style.SelectPopupDialog =\n                R.style.SelectPopupDialog;\n        org.chromium.ui.R.style.DropdownPopupWindow =\n                R.style.DropdownPopupWindow;\n\n\n        if (false) {\n            verifyFields(org.chromium.content.R.class);\n            verifyFields(org.chromium.ui.R.class);\n        }\n\n\n        \n\n        sInitialized = true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static Filter methodFilter(java.lang.reflect.Method m, Object[] extraArgs,\n            Object falseResult) {\n        return methodFilter(m, false, extraArgs, falseResult);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void main(String[] args){\n\t\ttry {\n\t\t\t@SuppressWarnings(\"deprecation\")\n\t\t\tHBaseConfiguration conf = new HBaseConfiguration();\n\t\t\tconf.set(\"hbase.zookeeper.quorum\", \"den3dhdptk01.int.photobucket.com\");\n\t\t\tconf.set(\"hbase.zookeeper.property.clientPort\", \"2181\");\n\t\t\tconf.setInt(\"hbase.client.retries.number\", 7);\n\t\t\tconf.setInt(\"ipc.client.connect.max.retries\", 3);\n\n\t\t\t\n\t\t\t\n\t\t\tHTablePool hTablePool = new HTablePool(conf, 10);\n\t\t\t\n\t\t\tHTableInterface seq = hTablePool.getTable(\"DocKeyIdMap\");\t\t\t\n\n\t\t\tString globalId = \"0089210673:0000540572:309AB023-orig.jpg\";\n\t\t\tGet get = new Get(Bytes.toBytes(globalId));\n\t\t\t\n\t\t\tResult result = seq.get(get);\n\t\t\t\n\t\t\tbyte[] docId = result.getValue(Bytes.toBytes(\"docId\"), Bytes.toBytes(\"\"));\n\n\t\t\tint docNumber = 384900472;\n\t\t\t\n\t\t\tSolrInputDocument doc = new SolrInputDocument();\t\t\t\n\t\t\tif(docId != null) {\n\t\t\t\tSystem.out.println(Bytes.toInt(docId));\n\t\t\t\tdocNumber = Bytes.toInt(docId);\n\t\t\t\tdoc.addField(\"edit\", true);\n\t\t\t}\n\t\t\t\n\t\t\tCommonsHttpSolrServer solbaseServer = new CommonsHttpSolrServer(\"http://localhost:8080/solbase/pbimages~1\");\n\n\t\t\tdoc.addField(\"docId\", docNumber);\n\t\t\tdoc.addField(\"global_uniq_id\", globalId);\n\t\t\tdoc.addField(\"title\", \"tom\");\n\t\t\tdoc.addField(\"description\", \"Uploaded with Snapbucket\");\n\t\t\tdoc.addField(\"tags\", \"Snapbucket\");\n\t\t\tdoc.addField(\"path\", \"/albums/tt262/koh_tester/309AB021-orig.jpg\");\n\t\t\tdoc.addField(\"subdomain\", \"i618\");\n\t\t\tdoc.addField(\"lastModified\", new Integer(SolbaseUtil.getEpochSinceSolbase(System.currentTimeMillis() / 60000)).toString());\n\t\t\tdoc.addField(\"media_type\", new Integer(1).toString());\n\t\t\tdoc.addField(\"total_view_count\", new Long(10).toString());\n\t\t\tdoc.addField(\"sevendays_view_count\", new Integer(5).toString());\n\t\t\tdoc.addField(\"total_likes_count\", new Long(5).toString());\n\t\t\tdoc.addField(\"sevendays_likes_count\", new Integer(1).toString());\n\t\t\tdoc.addField(\"total_comments_count\", new Long(5).toString());\n\t\t\tdoc.addField(\"sevendays_comments_count\", new Integer(1).toString());\n\t\t\tdoc.addField(\"contents\", \"audi tom solbase Uploaded with Snapbucket \");\n\t\t\tdoc.addField(\"updateStore\", true);\n\t\t\t\n\t\t\tsolbaseServer.add(doc);\n\n\t\t} catch (MalformedURLException e) {\n\n\t\t} catch (SolrServerException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void parseTypes(Element typesElement, String parentName) {\n        if (typesElement != null) {\n            for (Element type : XmlElementUtil.getNamedChildElements(typesElement, \"Type\")) {\n                String name = parentName + \".\" + getString(type, \"Name\");\n\n                parseMessages(XmlElementUtil.getFirstElementByTagName(type, \"Messages\"), name);\n                parseMembers(XmlElementUtil.getFirstElementByTagName(type, \"Members\"), name);\n            }\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public String getReplyString()\n    {\n        StringBuilder buffer = new StringBuilder(256);\n        for (String s : _replyLines)\n        {\n            buffer.append(s);\n            buffer.append(SocketClient.NETASCII_EOL);\n        }\n\n        return buffer.toString();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void hookDialogIsOpen() {\n        \n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                UIHelpers.runOnUIThread(true, new Runnable() {\n                    @Override\n                    public void run() {\n                        if (!browser.isDisposed()) {\n                            log.debug(\"Go to the ACS authentication URL: \" + serverSigninURL.toString()); //$NON-NLS-1$\n                            browser.setUrl(serverSigninURL.toString());\n\n                            \n                            notifyToken = new NotifyTokenBrowserFunction(browser.getBrowser(), \"notifyToken\"); //$NON-NLS-1$\n                        }\n                    }\n                });\n            }\n        }).start();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n   public static void printMethods(Class cl)\n   {\n      Method[] methods = cl.getDeclaredMethods();\n\n      for (Method m : methods)\n      {\n         Class retType = m.getReturnType();\n         String name = m.getName();\n\n         System.out.print(\"   \");\n         String modifiers = Modifier.toString(m.getModifiers());\n         if (modifiers.length() > 0) System.out.print(modifiers + \" \");         \n         System.out.print(retType.getName() + \" \" + name + \"(\");\n\n         Class[] paramTypes = m.getParameterTypes();\n         for (int j = 0; j < paramTypes.length; j++)\n         {\n            if (j > 0) System.out.print(\", \");\n            System.out.print(paramTypes[j].getName());\n         }\n         System.out.println(\");\");\n      }\n   }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n  public void testNotEquals() {\n    Point p1 = Point.of(2.0, 3.0);\n    Point p2 = Point.of(2.0, 4.0);\n    Point p3 = Point.of(1.0, 3.0);\n    \n    assertNotEquals(p1, p2);\n    assertNotEquals(p1, p3);\n    assertNotEquals(p2, p3);\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void hookDialogIsOpen() {\n        \n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                UIHelpers.runOnUIThread(true, new Runnable() {\n                    @Override\n                    public void run() {\n                        if (!browser.isDisposed()) {\n                            browser.setUrl(serverSigninURL.toString());\n                        }\n                    }\n                });\n            }\n        }).start();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n  public void prepareAMAndConfigForLaunch(SliderFileSystem fileSystem,\n                                          Configuration serviceConf,\n                                          AbstractLauncher launcher,\n                                          AggregateConf instanceDefinition,\n                                          Path snapshotConfDirPath,\n                                          Path generatedConfDirPath,\n                                          Configuration clientConfExtras,\n                                          String libdir,\n                                          Path tempPath,\n                                          boolean miniClusterTestRun) throws\n      IOException,\n      SliderException {\n    String agentImage = instanceDefinition.getInternalOperations().\n        get(InternalKeys.INTERNAL_APPLICATION_IMAGE_PATH);\n    if (SliderUtils.isUnset(agentImage)) {\n      Path agentPath = new Path(tempPath.getParent(), AgentKeys.PROVIDER_AGENT);\n      log.info(\"Automatically uploading the agent tarball at {}\", agentPath);\n      fileSystem.getFileSystem().mkdirs(agentPath);\n      if(ProviderUtils.addAgentTar(this, AGENT_TAR, fileSystem, agentPath)) {\n        instanceDefinition.getInternalOperations().set(\n            InternalKeys.INTERNAL_APPLICATION_IMAGE_PATH,\n            new Path(agentPath, AGENT_TAR).toUri());\n      }\n    }\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void adaptToEnablementChange(HighlightingStyle highlighting, PropertyChangeEvent event) {\n\t\tObject value = event.getNewValue();\n\t\tboolean eventValue;\n\t\tif (value instanceof Boolean)\n\t\t\teventValue = ((Boolean) value).booleanValue();\n\t\telse if (IPreferenceStore.TRUE.equals(value))\n\t\t\teventValue = true;\n\t\telse\n\t\t\teventValue = false;\n\t\thighlighting.setEnabled(eventValue);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void addTail(T item){\n\t\tif(!isEmpty()){\n\t\t\ttail.next=new Node<T>(item);\n\t\t\ttail=tail.next;\n\t\t}else{\n\t\t\thead=tail=new Node<T>(item);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        boolean bIdentifierIgnorable = false;\n\n        if (codePoint >= MIN_CODE_POINT && codePoint <= FAST_PATH_MAX) {\n            bIdentifierIgnorable = CharacterDataLatin1.isIdentifierIgnorable(codePoint);\n        } else {\n            int plane = getPlane(codePoint);\n            switch(plane) {\n            case(0):\n                bIdentifierIgnorable = CharacterData00.isIdentifierIgnorable(codePoint);\n                break;\n            case(1):\n                bIdentifierIgnorable = CharacterData01.isIdentifierIgnorable(codePoint);\n                break;\n            case(2):\n                bIdentifierIgnorable = CharacterData02.isIdentifierIgnorable(codePoint);\n                break;\n            case(3): // Undefined\n            case(4): // Undefined\n            case(5): // Undefined\n            case(6): // Undefined\n            case(7): // Undefined\n            case(8): // Undefined\n            case(9): // Undefined\n            case(10): // Undefined\n            case(11): // Undefined\n            case(12): // Undefined\n            case(13): // Undefined\n                bIdentifierIgnorable = CharacterDataUndefined.isIdentifierIgnorable(codePoint);\n                break;\n            case(14): \n                bIdentifierIgnorable = CharacterData0E.isIdentifierIgnorable(codePoint);\n                break;\n            case(15): // Private Use\n            case(16): // Private Use\n                bIdentifierIgnorable = CharacterDataPrivateUse.isIdentifierIgnorable(codePoint);\n                break;\n            default:\n                break;\n            }\n        }\n        return bIdentifierIgnorable;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testBlock() throws HyperLedgerException, IOException {\n        Block b1 =\n                Block.fromWireDump(\"\", formatter, BitcoinHeader.class);\n        assertTrue(b1.getID().equals(new BID(\"0000000000000449ee5b94ba7a051caffff5c23d6a03335f6e20e3985b5ffa61\")));\n        Block b2 = Block.fromWireDump(b1.toWireDump(), formatter, BitcoinHeader.class);\n        assertTrue(b1.getID().equals(b2.getID()));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate <T> List<T> arrayToList(T[] array) {\n\t\tList<T> list = new ArrayList<T>(array.length);\n\t\tfor (T t : array) {\n\t\t\tlist.add(t);\n\t\t}\n\t\treturn list;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static void printMethods(Class<?> cls) {\n\t\tMethod[] methods = cls.getDeclaredMethods();\n\t\tfor (Method method : methods) {\n\t\t\tString name = method.getName();\n\t\t\tClass<?>[] parameterType = method.getParameterTypes();\n\t\t\tClass<?> returnType = method.getReturnType();\n\t\t\tSystem.out.println(name);\n\t\t\tSystem.out.println(returnType.getName());\n\t\t\tfor (Class<?> class1 : parameterType)\n\t\t\t\tSystem.out.println(class1);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static List<Integer> topologicalSort(List<Integer>[] graph) {\n\t\tint n = graph.length;\n\t\tboolean[] used = new boolean[n];\n\t\tLinkedList<Integer> res = new LinkedList<>();\n\t\tused = new boolean[n];\n\t\tfor (int i = 0; i < n; i++){\n\t\t\tif (!used[i])\n\t\t\t\tdfs(graph, used, res, i);\n\t\t}\n\t\t\t\t\n\t\tCollections.reverse(res);\n\t\treturn res;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static CombinedConfiguration buildConfig(Collection<? extends AbstractConfiguration> intermediateConfigs) {\n        final CombinedConfiguration result = new CombinedConfiguration(new OverrideCombiner());\n        result.addConfiguration(buildtimeConfig); // buildtime config cannot be overridden\n        result.addConfiguration(clConfig);\n        result.addConfiguration(sysConfig);\n        for( AbstractConfiguration moduleConfig : intermediateConfigs )\n            result.addConfiguration(moduleConfig);\n        if( !userConfig.isEmpty() )\n            result.addConfiguration(userConfig);\n        result.addConfiguration(defaultConfig);\n        return result;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void expandPostprocessPrintAndCompare(\n\t\t\tFile inputFile,\n\t\t\tString inputSubDir,\n\t\t\tString expectedSubDir,\n\t\t\tPrinterInterface printer) throws IOException, LinkTargetException, EngineException\n\t{\n\t\tExpansionCallback callback = new TestExpansionCallback(inputSubDir);\n\n\t\tboolean forInclusion = false;\n\n\t\texpandPostprocessPrintAndCompare(\n\t\t\t\tinputFile,\n\t\t\t\tinputSubDir,\n\t\t\t\texpectedSubDir,\n\t\t\t\tcallback,\n\t\t\t\tforInclusion,\n\t\t\t\tprinter);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Constructor[] getDeclaredConstructors() throws SecurityException {\n    \t_throw();\n    \treturn null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String[] appendSelectionArgs(String[] originalValues, String[] newValues) {\n        if (originalValues == null || originalValues.length == 0) {\n            return newValues;\n        }\n        String[] result = new String[originalValues.length + newValues.length ];\n        System.arraycopy(originalValues, 0, result, 0, originalValues.length);\n        System.arraycopy(newValues, 0, result, originalValues.length, newValues.length);\n        return result;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public boolean isSourceEncodingSupported(AudioFormat.Encoding sourceEncoding){\n\n        AudioFormat.Encoding sourceEncodings[] = getSourceEncodings();\n\n        for(int i=0; i<sourceEncodings.length; i++) {\n            if( sourceEncoding.equals( sourceEncodings[i]) ) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void startGather() {\n        if (!playerManager.isPlayerMoving() && !playerManager.isPlayerPerformingAction()) {\n            if (!playerManager.isPlayerInsideRobot()) {\n                String rid = resourceManager.startGather(playerManager.getCurrentPlayer(), playerManager.getCenterPoint(), MAX_RESOURCE_DISTANCE);\n                if (!rid.isEmpty()) {\n                    playerManager.playerStartGather(rid);\n                } else if (placeableManager.startDestroy(playerManager.getCurrentPlayer())) {\n                    playerManager.playerStartGather(null);\n                } else if (playerManager.playerToggleInsideRobot()) {\n                }\n            } else if (playerManager.playerToggleInsideRobot()) {\n            }\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static byte[] decodeHex(char[] hexData) {\n\n\t\tint len = hexData.length;\n\n\t\tif ((len & 0x01) != 0) {\n\t\t\tthrow new RuntimeException(\"Odd number of characters.\");\n\t\t}\n\n\t\tbyte[] out = new byte[len >> 1];\n\n\t\tfor (int i = 0, j = 0; j < len; i++) {\n\t\t\tint f = toDigit(hexData[j], j) << 4;\n\t\t\tj++;\n\t\t\tf = f | toDigit(hexData[j], j);\n\t\t\tj++;\n\t\t\tout[i] = (byte) (f & 0xFF);\n\t\t}\n\n\t\treturn out;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprotected List<EMConversation> loadConversationList() {\n\t\tMap<String, EMConversation> conversations = EMClient.getInstance().chatManager().getAllConversations();\n\t\t\n\t\tList<Pair<Long, EMConversation>> sortList = new ArrayList<Pair<Long, EMConversation>>();\n\t\tsynchronized (conversations) {\n\t\t\tfor (EMConversation conversation : conversations.values()) {\n\t\t\t\tif (conversation.getAllMessages().size() != 0) {\n\t\t\t\t\tsortList.add(\n\t\t\t\t\t\t\tnew Pair<Long, EMConversation>(conversation.getLastMessage().getMsgTime(), conversation));\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\tsortConversationByLastChatTime(sortList);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tList<EMConversation> list = new ArrayList<EMConversation>();\n\t\tfor (Pair<Long, EMConversation> sortItem : sortList) {\n\t\t\tlist.add(sortItem.second);\n\t\t}\n\t\treturn list;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void deliverIncomingMessage(final IIPCHandle handle, long mid, long rmid, Object payload,\n            Exception exception) {\n        CCNCFunctions.Function fn = (Function) payload;\n        switch (fn.getFunctionId()) {\n            case REGISTER_NODE:\n                CCNCFunctions.RegisterNodeFunction rnf = (CCNCFunctions.RegisterNodeFunction) fn;\n                ccs.getWorkQueue().schedule(new RegisterNodeWork(ccs, rnf.getNodeRegistration()));\n                break;\n            case UNREGISTER_NODE:\n                CCNCFunctions.UnregisterNodeFunction unf = (CCNCFunctions.UnregisterNodeFunction) fn;\n                ccs.getWorkQueue().schedule(new UnregisterNodeWork(ccs.getNodeManager(), unf.getNodeId()));\n                break;\n            case NODE_HEARTBEAT:\n                CCNCFunctions.NodeHeartbeatFunction nhf = (CCNCFunctions.NodeHeartbeatFunction) fn;\n                ccs.getWorkQueue().schedule(new NodeHeartbeatWork(ccs, nhf.getNodeId(),\n                        nhf.getHeartbeatData()));\n                break;\n            case NOTIFY_JOBLET_CLEANUP:\n                CCNCFunctions.NotifyJobletCleanupFunction njcf = (CCNCFunctions.NotifyJobletCleanupFunction) fn;\n                ccs.getWorkQueue().schedule(new JobletCleanupNotificationWork(ccs, njcf.getJobId(),\n                        njcf.getNodeId()));\n                break;\n            case NOTIFY_DEPLOY_BINARY:\n                CCNCFunctions.NotifyDeployBinaryFunction ndbf = (CCNCFunctions.NotifyDeployBinaryFunction) fn;\n                ccs.getWorkQueue().schedule(new NotifyDeployBinaryWork(ccs, ndbf.getDeploymentId(),\n                        ndbf.getNodeId(), ndbf.getDeploymentStatus()));\n                break;\n            case REPORT_PROFILE:\n                CCNCFunctions.ReportProfileFunction rpf = (CCNCFunctions.ReportProfileFunction) fn;\n                ccs.getWorkQueue().schedule(new ReportProfilesWork(ccs.getJobManager(), rpf.getProfiles()));\n                break;\n            case NOTIFY_TASK_COMPLETE:\n                CCNCFunctions.NotifyTaskCompleteFunction ntcf = (CCNCFunctions.NotifyTaskCompleteFunction) fn;\n                ccs.getWorkQueue().schedule(new TaskCompleteWork(ccs, ntcf.getJobId(),\n                        ntcf.getTaskId(), ntcf.getNodeId(), ntcf.getStatistics()));\n                break;\n            case NOTIFY_TASK_FAILURE:\n                CCNCFunctions.NotifyTaskFailureFunction ntff = (CCNCFunctions.NotifyTaskFailureFunction) fn;\n                ccs.getWorkQueue().schedule(new TaskFailureWork(ccs, ntff.getJobId(),\n                        ntff.getTaskId(), ntff.getNodeId(), ntff.getExceptions()));\n                break;\n            case DISTRIBUTED_JOB_FAILURE:\n                CCNCFunctions.ReportDistributedJobFailureFunction rdjf =\n                        (CCNCFunctions.ReportDistributedJobFailureFunction) fn;\n                ccs.getWorkQueue().schedule(new DistributedJobFailureWork(rdjf.getJobId(), rdjf.getNodeId()));\n                break;\n            case REGISTER_PARTITION_PROVIDER:\n                CCNCFunctions.RegisterPartitionProviderFunction rppf =\n                        (CCNCFunctions.RegisterPartitionProviderFunction) fn;\n                ccs.getWorkQueue().schedule(new RegisterPartitionAvailibilityWork(ccs,\n                        rppf.getPartitionDescriptor()));\n                break;\n            case REGISTER_PARTITION_REQUEST:\n                CCNCFunctions.RegisterPartitionRequestFunction rprf =\n                        (CCNCFunctions.RegisterPartitionRequestFunction) fn;\n                ccs.getWorkQueue().schedule(new RegisterPartitionRequestWork(ccs,\n                        rprf.getPartitionRequest()));\n                break;\n            case REGISTER_RESULT_PARTITION_LOCATION:\n                CCNCFunctions.RegisterResultPartitionLocationFunction rrplf =\n                        (CCNCFunctions.RegisterResultPartitionLocationFunction) fn;\n                ccs.getWorkQueue().schedule(new RegisterResultPartitionLocationWork(ccs,\n                        rrplf.getJobId(), rrplf.getResultSetId(), rrplf.getOrderedResult(), rrplf.getEmptyResult(),\n                        rrplf.getPartition(), rrplf.getNPartitions(), rrplf.getNetworkAddress()));\n                break;\n            case REPORT_RESULT_PARTITION_WRITE_COMPLETION:\n                CCNCFunctions.ReportResultPartitionWriteCompletionFunction rrpwc =\n                        (CCNCFunctions.ReportResultPartitionWriteCompletionFunction) fn;\n                ccs.getWorkQueue().schedule(new ReportResultPartitionWriteCompletionWork(ccs,\n                        rrpwc.getJobId(), rrpwc.getResultSetId(), rrpwc.getPartition()));\n                break;\n            case SEND_APPLICATION_MESSAGE:\n                CCNCFunctions.SendApplicationMessageFunction rsf =\n                        (CCNCFunctions.SendApplicationMessageFunction) fn;\n                ccs.getWorkQueue().schedule(new ApplicationMessageWork(ccs, rsf.getMessage(),\n                        rsf.getDeploymentId(), rsf.getNodeId()));\n                break;\n            case GET_NODE_CONTROLLERS_INFO:\n                ccs.getWorkQueue().schedule(new GetNodeControllersInfoWork(ccs.getNodeManager(),\n                        new IResultCallback<Map<String, NodeControllerInfo>>() {\n                            @Override\n                            public void setValue(Map<String, NodeControllerInfo> result) {\n                                new IPCResponder<CCNCFunctions.GetNodeControllersInfoResponseFunction>(handle, -1)\n                                        .setValue(new CCNCFunctions.GetNodeControllersInfoResponseFunction(result));\n                            }\n\n                            @Override\n                            public void setException(Exception e) {\n                            }\n                        }));\n                break;\n            case STATE_DUMP_RESPONSE:\n                CCNCFunctions.StateDumpResponseFunction dsrf = (StateDumpResponseFunction) fn;\n                ccs.getWorkQueue().schedule(new NotifyStateDumpResponse(ccs, dsrf.getNodeId(),\n                        dsrf.getStateDumpId(), dsrf.getState()));\n                break;\n            case SHUTDOWN_RESPONSE:\n                CCNCFunctions.ShutdownResponseFunction sdrf = (ShutdownResponseFunction) fn;\n                ccs.getWorkQueue().schedule(new NotifyShutdownWork(ccs, sdrf.getNodeId()));\n                break;\n            case THREAD_DUMP_RESPONSE:\n                CCNCFunctions.ThreadDumpResponseFunction tdrf =\n                        (CCNCFunctions.ThreadDumpResponseFunction)fn;\n                ccs.getWorkQueue().schedule(new NotifyThreadDumpResponse(ccs,\n                        tdrf.getRequestId(), tdrf.getThreadDumpJSON()));\n                break;\n            default:\n                LOGGER.warning(\"Unknown function: \" + fn.getFunctionId());\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public boolean transformOne(GlyphLine line) {\n        if (line.idx >= line.end) {\n            return false;\n        }\n        Glyph g = line.get(line.idx);\n        boolean changed = false;\n        if (!openReader.isSkip(g.getCode(), lookupFlag)) {\n            int substCode = substMap.get(g.getCode());\n            if (substCode != 0) {\n                line.substituteOneToOne(openReader, substCode);\n                changed = true;\n            }\n        }\n        line.idx++;\n        return changed;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        boolean bIdentifierIgnorable = false;\n\n        if (codePoint >= MIN_CODE_POINT && codePoint <= FAST_PATH_MAX) {\n            bIdentifierIgnorable = CharacterDataLatin1.isIdentifierIgnorable(codePoint);\n        } else {\n            int plane = getPlane(codePoint);\n            switch(plane) {\n            case(0):\n                bIdentifierIgnorable = CharacterData00.isIdentifierIgnorable(codePoint);\n                break;\n            case(1):\n                bIdentifierIgnorable = CharacterData01.isIdentifierIgnorable(codePoint);\n                break;\n            case(2):\n                bIdentifierIgnorable = CharacterData02.isIdentifierIgnorable(codePoint);\n                break;\n            case(3): // Undefined\n            case(4): // Undefined\n            case(5): // Undefined\n            case(6): // Undefined\n            case(7): // Undefined\n            case(8): // Undefined\n            case(9): // Undefined\n            case(10): // Undefined\n            case(11): // Undefined\n            case(12): // Undefined\n            case(13): // Undefined\n                bIdentifierIgnorable = CharacterDataUndefined.isIdentifierIgnorable(codePoint);\n                break;\n            case(14): \n                bIdentifierIgnorable = CharacterData0E.isIdentifierIgnorable(codePoint);\n                break;\n            case(15): // Private Use\n            case(16): // Private Use\n                bIdentifierIgnorable = CharacterDataPrivateUse.isIdentifierIgnorable(codePoint);\n                break;\n            default:\n                break;\n            }\n        }\n        return bIdentifierIgnorable;\n    }\n}", "nl": " "}
