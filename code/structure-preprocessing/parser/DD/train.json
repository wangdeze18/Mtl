{"code": "class EmptyClass {\n\n\n    private boolean isInContent(double x, double y, Sticker currentSticker) {\n        long startTime = System.currentTimeMillis();\n\n        PointD pointF_1 = getMidpointCoordinate(currentSticker.getMapPointsDst()[0], currentSticker.getMapPointsDst()[1], currentSticker.getMapPointsDst()[2], currentSticker.getMapPointsDst()[3]);\n        double a1 = lineSpace(currentSticker.getMapPointsDst()[8], currentSticker.getMapPointsDst()[9], pointF_1.getX(), pointF_1.getY());\n        double b1 = lineSpace(currentSticker.getMapPointsDst()[8], currentSticker.getMapPointsDst()[9], x, y);\n        if (b1 <= a1) {\n            return true;\n        }\n        double c1 = lineSpace(pointF_1.getX(), pointF_1.getY(), x, y);\n        double p1 = (a1 + b1 + c1) / 2;\n        double s1 = Math.sqrt(p1 * (p1 - a1) * (p1 - b1) * (p1 - c1));\n        double d1 = 2 * s1 / a1;\n        if (d1 > a1) {\n            return false;\n        }\n\n        PointD pointF_2 = getMidpointCoordinate(currentSticker.getMapPointsDst()[2], currentSticker.getMapPointsDst()[3], currentSticker.getMapPointsDst()[4], currentSticker.getMapPointsDst()[5]);\n        double a2 = a1;\n        double b2 = b1;\n        double c2 = lineSpace(pointF_2.getX(), pointF_2.getY(), x, y);\n        double p2 = (a2 + b2 + c2) / 2;\n        double temp = p2 * (p2 - a2) * (p2 - b2) * (p2 - c2);\n        double s2 = Math.sqrt(temp);\n        double d2 = 2 * s2 / a2;\n        if (d2 > a1) {\n            return false;\n        }\n        long endTime = System.currentTimeMillis();\n        long time = endTime - startTime;\n\n        if (d1 <= a1 && d2 <= a1) {\n            return true;\n        }\n\n        return false;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public boolean isSourceEncodingSupported(AudioFormat.Encoding src)\n  {\n    AudioFormat.Encoding[] srcs = getSourceEncodings();\n    for (int i = 0; i < srcs.length; ++i)\n      {\n        if (src.equals(srcs[i]))\n          return true;\n      }\n    return false;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void paintIcon(Component c, Graphics g, int x, int y) {\n            AbstractButton b = (AbstractButton) c;\n            ButtonModel model = b.getModel();\n\n            boolean flat = false;\n\n            if(b instanceof JCheckBox) {\n                flat = ((JCheckBox)b).isBorderPaintedFlat();\n            }\n\n            boolean isPressed = model.isPressed();\n            boolean isArmed = model.isArmed();\n            boolean isEnabled = model.isEnabled();\n            boolean isSelected = model.isSelected();\n\n            boolean checkToggleIn = ((isPressed &&\n                                      !isArmed   &&\n                                      isSelected) ||\n                                     (isPressed &&\n                                      isArmed   &&\n                                      !isSelected));\n            boolean uncheckToggleOut = ((isPressed &&\n                                         !isArmed &&\n                                         !isSelected) ||\n                                        (isPressed &&\n                                         isArmed &&\n                                         isSelected));\n\n            boolean checkIn = (!isPressed  &&\n                               isArmed    &&\n                               isSelected  ||\n                               (!isPressed &&\n                                !isArmed  &&\n                                isSelected));\n\n\n            if(flat) {\n                g.setColor(shadow);\n                g.drawRect(x+2,y,csize-1,csize-1);\n                if(uncheckToggleOut || checkToggleIn) {\n                    g.setColor(control);\n                    g.fillRect(x+3,y+1,csize-2,csize-2);\n                }\n            }\n\n            if (checkToggleIn) {\n                drawCheckBezel(g,x,y,csize,true,false,false,flat);\n            } else if (uncheckToggleOut) {\n                drawCheckBezel(g,x,y,csize,true,true,false,flat);\n            } else if (checkIn) {\n                drawCheckBezel(g,x,y,csize,false,false,true,flat);\n            } else if(!flat) {\n                drawCheckBezelOut(g,x,y,csize);\n            }\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static void main(String[] args) {\n        try {\n            Method method = android.os.Process.class.getDeclaredMethod(\"setArgV0\", String.class);\n            method.setAccessible(true);\n            method.invoke(null, PROCESS);\n            LogUtil.i(\"Set process name success\");\n        } catch (Exception e) {\n            LogUtil.e(\"Set process name failed:\" + e.toString());\n        }\n        ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n        Class<?> clz;\n        try {\n            clz = classLoader.loadClass(\"android.ddm.DdmHandleAppName\");\n        } catch (ClassNotFoundException e) {\n            LogUtil.w(\"Set DDM name failed:\" + e.toString());\n            clz = null;\n        }\n        if (clz != null) {\n            try {\n                Method method = clz.getDeclaredMethod(\"setAppName\", String.class);\n                method.invoke(clz, PROCESS);\n                LogUtil.i(\"Set process name success with M1\");\n            } catch (Exception e) {\n                try {\n                    Method method = clz.getDeclaredMethod(\"setAppName\", String.class, int.class);\n                    method.invoke(clz, PROCESS, 0);\n                    LogUtil.i(\"Set process name success with M2\");\n                } catch (Exception ex) {\n                    LogUtil.w(\"Set DDM name failed:\" + ex.toString());\n                }\n            }\n        }\n        Looper.prepare();\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (sPower) {\n                    String cmd = String.format(\"am startservice%s-n com.stkj.newslocker/\" +\n                                    \"com.stkj.newslocker.services.LockService\",\n                            SysUtil.isAfter17() ? \" --user 0 \" : \" \");\n                    LogUtil.i(\"CMD exec \" + cmd);\n                    try {\n                        Runtime.getRuntime().exec(cmd);\n                    } catch (IOException e) {\n                        LogUtil.w(\"CMD exec failed:\" + e.toString());\n                        Intent intent = new Intent();\n                        ComponentName component = new ComponentName(\"com.stkj.newslocker\",\n                                LockService.class.getName());\n                        intent.setComponent(component);\n                        IActivityManager am = ActivityManagerNative.getDefault();\n                        Method method;\n                        try {\n                            method = am.getClass().getMethod(\"startService\",\n                                    IApplicationThread.class, Intent.class, String.class,\n                                    int.class);\n                            Object cn = method.invoke(am, null, intent, intent.getType(), 0);\n                            LogUtil.i(\"start service return: \" + cn);\n                        } catch (NoSuchMethodException ex) {\n                            try {\n                                method = am.getClass().getMethod(\"startService\",\n                                        IApplicationThread.class, Intent.class, String.class);\n                                Object cn = method.invoke(am, null, intent, intent.getType());\n                                LogUtil.i(\"start service return: \" + cn);\n                            } catch (NoSuchMethodException exc) {\n                                LogUtil.i(\"start service method not found: \" + exc);\n                            } catch (Exception exc) {\n                                LogUtil.e(\"Start service failed:\" + exc.toString());\n                            }\n                        } catch (Exception ex) {\n                            LogUtil.e(\"Start service failed:\" + ex.toString());\n                        }\n                    }\n                    try {\n                        Thread.sleep(180000);\n                    } catch (InterruptedException e) {\n                        LogUtil.w(\"Thread sleep failed:\" + e.toString());\n                    }\n                }\n            }\n        }).start();\n        Looper.loop();\n        LogUtil.i(\"====================Daemon exit with error====================\");\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@BeforeClass\n    public static void setUp(){\n    \tfinal Properties props = new Properties();\n    \ttry {\n    \tprops.load(new FileInputStream(PATH_TO_TEST_PROPERTIES));\n    \t} catch (Exception e) {\n    \t\tlog.error(\"Error occured while reading mule.test.properties\", e);\n    \t}    \t\n    \tSystem.setProperty(\"sfdc.key\", props.getProperty(\"sfdc.key\"));\n    \tSystem.setProperty(\"sfdc.secret\", props.getProperty(\"sfdc.secret\"));\n    \tUSERNAME = props.getProperty(\"sfdc.user\");\n    \tPASSWORD = props.getProperty(\"sfdc.password\");\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void addShaped(IItemStack output, IIngredient[][] ingredients, IRecipeFunction function, boolean mirrored) {\n\t\tShapedRecipe recipe = new ShapedRecipe(output, ingredients, function, mirrored);\n\t\tIRecipe irecipe = RecipeConverter.convert(recipe);\n\t\tMineTweakerAPI.apply(new ActionAddRecipe(irecipe, recipe));\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static void main(String[] args) throws InterruptedException, IOException {\n\n        AdbServer.server().listenUSB();\n        \n        AdbServer.server().listenADB();\n        \n        while (true) {\n            System.out.print(\"> \");\n            System.in.read();\n        }\n        \n        \n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate Component buildHeader() {\n        HorizontalLayout header = new HorizontalLayout();\n        header.addStyleName(\"viewheader\");\n        header.setSpacing(true);\n\n        titleLabel = new Label(MsgUtil.getMsgFallbackToSelf(messageSource, \"view.dashboard.\", \"title\"));\n        titleLabel.setId(TITLE_ID);\n        titleLabel.setSizeUndefined();\n        titleLabel.addStyleName(ValoTheme.LABEL_H1);\n        titleLabel.addStyleName(ValoTheme.LABEL_NO_MARGIN);\n        header.addComponent(titleLabel);\n\n        \n        \n        return header;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        int length = bytes.size();\n        char[] chars = new char[length]; // This is sized to avoid a realloc.\n        int outAt = 0;\n\n        for (int at = 0; length > 0; ) {\n            int v0 = bytes.getUnsignedByte(at);\n            char out;\n            switch (v0 >> 4) {\n                case 0x00: case 0x01: case 0x02: case 0x03:\n                case 0x04: case 0x05: case 0x06: case 0x07: {\n                    length--;\n                    if (v0 == 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    out = (char) v0;\n                    at++;\n                    break;\n                }\n                case 0x0c: case 0x0d: {\n                    length -= 2;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes.getUnsignedByte(at + 1);\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int value = ((v0 & 0x1f) << 6) | (v1 & 0x3f);\n                    if ((value != 0) && (value < 0x80)) {\n                        \n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    out = (char) value;\n                    at += 2;\n                    break;\n                }\n                case 0x0e: {\n                    length -= 3;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes.getUnsignedByte(at + 1);\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int v2 = bytes.getUnsignedByte(at + 2);\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    int value = ((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) |\n                        (v2 & 0x3f);\n                    if (value < 0x800) {\n                        \n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    out = (char) value;\n                    at += 3;\n                    break;\n                }\n                default: {\n                    return throwBadUtf8(v0, at);\n                }\n            }\n            chars[outAt] = out;\n            outAt++;\n        }\n\n        return new String(chars, 0, outAt);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void updateHighOrderDerivativesPhase2(final T[] start, final T[] end,\n                                                 final Array2DRowFieldMatrix<T> highOrder) {\n        transformer.updateHighOrderDerivativesPhase2(start, end, highOrder);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private double readDecimalLiteral(int c) {\n        return readDecimalLiteral(c, true);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\tChannel channel = ctx.channel();\n\t\t\tchannels.remove(channel);\n\t\t\tNode client = channel.attr(STATE).get();\n\t\t\tuserLinkList.delUser(client);\n\t\t\tcombobox.removeItem(client.username);\n\t\t\tsuper.channelUnregistered(ctx);\n\t\t\tbroadcasts(new LoginOutMessage(client.username));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nList<SerialWithId> getSerialNumbers(final NameId ca, final Date notExpiredAt,\n            final long startId, final int numEntries, final boolean onlyRevoked,\n            final boolean onlyCaCerts, final boolean onlyUserCerts)\n            throws DataAccessException, OperationException {\n        ParamUtil.requireNonNull(\"ca\", ca);\n        ParamUtil.requireMin(\"numEntries\", numEntries, 1);\n\n        if (onlyCaCerts && onlyUserCerts) {\n            throw new IllegalArgumentException(\n                    \"onlyCaCerts and onlyUserCerts cannot be both of true\");\n        }\n        boolean withEe = onlyCaCerts || onlyUserCerts;\n        final String sql = sqls.getSqlSerials(numEntries, notExpiredAt, onlyRevoked, withEe);\n\n        ResultSet rs = null;\n        PreparedStatement ps = borrowPreparedStatement(sql);\n\n        try {\n            int idx = 1;\n            ps.setLong(idx++, startId - 1);\n            ps.setInt(idx++, ca.id());\n            if (notExpiredAt != null) {\n                ps.setLong(idx++, notExpiredAt.getTime() / 1000 + 1);\n            }\n            if (withEe) {\n                setBoolean(ps, idx++, onlyUserCerts);\n            }\n            rs = ps.executeQuery();\n            List<SerialWithId> ret = new ArrayList<>();\n            while (rs.next() && ret.size() < numEntries) {\n                long id = rs.getLong(\"ID\");\n                String serial = rs.getString(\"SN\");\n                ret.add(new SerialWithId(id, new BigInteger(serial, 16)));\n            }\n            return ret;\n        } catch (SQLException ex) {\n            throw datasource.translate(sql, ex);\n        } finally {\n            releaseDbResources(ps, rs);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public void process(JCas cas) throws AnalysisEngineProcessException {\n      if (this.isTraining()) {\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 1234));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 1000));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 900));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 1500));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 2000));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 1235));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 1001));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 901));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 1501));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 2001));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 1502));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 2003));\n\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 10));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 8));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 60));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 80));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 4));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 11));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 5));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 61));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 81));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 7));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 82));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 3));\n\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 1));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 8));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 60));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 81));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 4));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 11));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 7));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 61));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 82));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 2));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 83));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 1));\n      } else {\n        String classification = this.classifier.classify(createInstance(\"\", \"hello\", 1000).getFeatures());\n        assertEquals(\"A\", classification);\n        classification = this.classifier.classify(createInstance(\"\", \"hello\", 1).getFeatures());\n        assertEquals(\"A\", classification);\n        classification = this.classifier.classify(createInstance(\"\", \"goodbye\", 1).getFeatures());\n        assertEquals(\"C\", classification);\n      }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n    public void testNotEquals() throws UnsupportedEncodingException {\n        SoapSTSInstanceConfig ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/openam\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        SoapSTSInstanceConfig ric2 = createInstanceConfig(\"/bobo\", \"http://localhost:8080/openam\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/openam\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", !WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", !WITH_KEYSTORE_CONFIG,\n                !WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", !WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, !DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, !DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, !WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, !WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, !WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic Result(DescriptiveStatistics latencies, SummaryStatistics throughputs, Map<String, DescriptiveStatistics> perHostLat, Map<String, SummaryStatistics> perHostThr) {\n\t\t\tthis.latencies = latencies;\n\t\t\tthis.throughputs = throughputs;\n\t\t\tthis.perHostLat = perHostLat;\n\t\t\tthis.perHostThr = perHostThr;\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n    public void testSum() throws Exception {\n        String sqlText =\n                String.format(\"SELECT empnum, dept, salary, sum(salary) over (Partition by dept ORDER BY salary) as sumsal \" +\n                                \"from %s --SPLICE-PROPERTIES useSpark = %s \\n order by dept, empnum\",\n                        this.getTableReference(EMPTAB), useSpark);\n\n        ResultSet rs = methodWatcher.executeQuery(sqlText);\n        String expected =\n                \"EMPNUM |DEPT |SALARY |SUMSAL |\\n\" +\n                        \"------------------------------\\n\" +\n                        \"  10   |  1  | 50000 | 50000 |\\n\" +\n                        \"  20   |  1  | 75000 |282000 |\\n\" +\n                        \"  50   |  1  | 52000 |154000 |\\n\" +\n                        \"  55   |  1  | 52000 |154000 |\\n\" +\n                        \"  60   |  1  | 78000 |436000 |\\n\" +\n                        \"  70   |  1  | 76000 |358000 |\\n\" +\n                        \"  110  |  1  | 53000 |207000 |\\n\" +\n                        \"  40   |  2  | 52000 |155000 |\\n\" +\n                        \"  44   |  2  | 52000 |155000 |\\n\" +\n                        \"  49   |  2  | 53000 |208000 |\\n\" +\n                        \"  90   |  2  | 51000 | 51000 |\\n\" +\n                        \"  30   |  3  | 84000 |293000 |\\n\" +\n                        \"  80   |  3  | 79000 |209000 |\\n\" +\n                        \"  100  |  3  | 55000 | 55000 |\\n\" +\n                        \"  120  |  3  | 75000 |130000 |\";\n        assertEquals(\"\\n\"+sqlText+\"\\n\", expected, TestUtils.FormattedResult.ResultFactory.toStringUnsorted(rs));\n        rs.close();\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n        public boolean equals(Object o)\n        {\n            if (this == o)\n            {\n                return true;\n            }\n\n            if (!(o instanceof Agent))\n            {\n                return false;\n            }\n\n            Agent agent = (Agent) o;\n\n            return configuration != null ? configuration.equals(agent.configuration) : agent.configuration == null;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nCurve createCurve() {\n        switch (type) {\n            case Polygon:\n                return new PolygonCurve();\n            case QuadraticBezier:\n                return null;\n            case CubicBezier:\n                return new CubicBezierCurve();\n            case QuadraticBasis:\n                return new QuadraticBasisSpline();\n            case CubicBasis:\n                return new CubicBasisSpline();\n            case QuadraticRational:\n                return new QuadraticRationalSpline();\n            case CubicRational:\n                return new CubicRationalSpline();\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static boolean isEmptyOrWhitespace(String s) {\n        s = makeSafe(s);\n        for (int i = 0, n = s.length(); i < n; i++) {\n            if (!Character.isWhitespace(s.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public Value<Integer> run(Integer intermediate, String userEmail) {\n      String prompt =\n          \"The intermediate result is \" + intermediate + \".\"\n               + \" Please give one more int\";\n      PromisedValue<Integer> oneMoreInt = newPromise();\n      ExternalAgentJob.getIntFromUser(prompt, userEmail, oneMoreInt.getHandle());\n      return oneMoreInt;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void quadrantRotate(int numquadrants,\n                               double anchorx, double anchory)\n    {\n        switch (numquadrants & 3) {\n        case 0:\n            return;\n        case 1:\n            m02 += anchorx * (m00 - m01) + anchory * (m01 + m00);\n            m12 += anchorx * (m10 - m11) + anchory * (m11 + m10);\n            rotate90();\n            break;\n        case 2:\n            m02 += anchorx * (m00 + m00) + anchory * (m01 + m01);\n            m12 += anchorx * (m10 + m10) + anchory * (m11 + m11);\n            rotate180();\n            break;\n        case 3:\n            m02 += anchorx * (m00 + m01) + anchory * (m01 - m00);\n            m12 += anchorx * (m10 + m11) + anchory * (m11 - m10);\n            rotate270();\n            break;\n        }\n        if (m02 == 0.0 && m12 == 0.0) {\n            state &= ~APPLY_TRANSLATE;\n        } else {\n            state |= APPLY_TRANSLATE;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic boolean transformOne(GlyphLine line) {\n            if (line.idx >= line.end || line.idx < line.start)\n                return false;\n            Glyph g1 = line.get(line.idx);\n            if (!coverageSet.contains(g1.getCode()))\n                return false;\n            int c1 = classDef1.getOtfClass(g1.getCode());\n            PairValueFormat[] pvs = posSubs.get(c1);\n            if (pvs == null)\n                return false;\n            GlyphIndexer gi = new GlyphIndexer();\n            gi.line = line;\n            gi.idx = line.idx;\n            gi.nextGlyph(openReader, lookupFlag);\n            if (gi.glyph == null)\n                return false;\n            Glyph g2 = gi.glyph;\n            int c2 = classDef2.getOtfClass(g2.getCode());\n            if (c2 >= pvs.length)\n                return false;\n            PairValueFormat pv = pvs[c2];\n            line.set(line.idx, new Glyph(g1, 0, 0, pv.first.XAdvance, pv.first.YAdvance, 0));\n            line.set(gi.idx, new Glyph(g2, 0, 0, pv.second.XAdvance, pv.second.YAdvance, 0));\n            line.idx = gi.idx;\n            return true;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic Params(@NotNull String path, @NotNull String[] comment, boolean stealLock, @NotNull int[] rev) {\n      this.path = path;\n      this.comment = comment;\n      this.stealLock = stealLock;\n      this.rev = rev;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr graph) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), graph});\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public long testBlock(String filename, int blockSize) throws IOException {\n    LOGGER.info(\"Searching for divider in blocks of {}...\", blockSize);\n    long start = System.currentTimeMillis();\n\n    RandomAccessInputStream in = new RandomAccessInputStream(filename);\n    long offset = in.findString(blockSize, TAG).length();\n    in.close();\n\n    long end = System.currentTimeMillis();\n    LOGGER.info(\"Search result: {} -- in {} ms\", offset, end - start);\n    return offset;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr graph) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), graph});\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic void registerResources(Context context) {\n        if (sInitialized) {\n            return;\n        }\n\n        AwResource.setResources(context.getResources());\n\n\n        AwResource.setErrorPageResources(R.raw.loaderror, R.raw.nodomain);\n        AwResource.setDefaultTextEncoding(R.string.default_encoding);\n\n        sInitialized = true;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic int findCountBySql( String hql) {\n\t\tfinal String sql=\"select count(*) \"+hql;\n\t\t HibernateCallback cb = new HibernateCallback() {\n\t\t public Object doInHibernate(Session session)\n\t\t throws HibernateException {\n\t\t\treturn Integer.parseInt(session.createQuery(sql).list().get(0).toString());\n\n\t\t } // end function\n\t\t };// end callback\n\t\t return   (Integer) this.getHibernateTemplate().execute(cb);\n\t\t\n\t\t\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, ClassTransformer transformer, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            MethodPair methodPair = transformer.methods.get(\"()V\" + method);\n            if (methodPair == null)\n            {\n                continue;\n            }\n            lineNumber = InvokerGenerator.printMethod(mv, clazz, method, Modifier.isStatic(methodPair.node.access), lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate boolean performAction(int action) {\n\t\tfinal int size = rows.getChildCount();\n\t\tfinal ArrayList<RelationMemberRow> selected = new ArrayList<RelationMemberRow>();\n\t\tfinal ArrayList<Integer> selectedPos = new ArrayList<Integer>();\n\t\tfor (int i = 0; i < size; i++) {\n\t\t\tView view = rows.getChildAt(i);\n\t\t\tRelationMemberRow row = (RelationMemberRow)view;\n\t\t\tif (row.isSelected()) {\n\t\t\t\tselected.add(row);\n\t\t\t\tselectedPos.add(i);\n\t\t\t}\n\t\t} \n\t\tfinal int selectedCount = selectedPos.size();\n\t\tint change = 1;\n\t\tswitch (action) {\n\t\tcase MENU_ITEM_DELETE: // Note real work is done in super\n\t\t\t((RelationMembersFragment) caller).setIcons();\n\t\t\treturn true;\n\t\tcase MENU_ITEM_MOVE_TOP:\n\t\t\tchange = selectedPos.get(0).intValue();\n\t\tcase MENU_ITEM_MOVE_UP:\n\t\t\tfor (int i = 0;i<selectedCount;i++) {\n\t\t\t\tint p = selectedPos.get(i).intValue();\n\t\t\t\tint newPos = p - change;\n\t\t\t\trows.removeViewAt(p);\n\t\t\t\tif (newPos < 0) {\n\t\t\t\t\tselectedPos.set(i,size-1);\n\t\t\t\t\tfor (int j=i+1;j<selectedCount;j++) {\n\t\t\t\t\t\tselectedPos.set(j,selectedPos.get(j)-1);\n\t\t\t\t\t}\t\n\t\t\t\t\trows.addView(selected.get(i)); // add at end\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tselectedPos.set(i,newPos);\n\t\t\t\t\trows.addView(selected.get(i),newPos);\n\t\t\t\t}\n\t\t\t}\n\t\t\t((RelationMembersFragment)caller).scrollToRow(selected.get(0),true, action==MENU_ITEM_MOVE_TOP || forceScroll(selectedPos.get(0),size));\n\t\t\t((RelationMembersFragment)caller).setIcons();\n\t\t\treturn true;\n\t\tcase MENU_ITEM_MOVE_BOTTOM:\n\t\t\tchange = size - selectedPos.get(selectedCount-1).intValue() -1;\n\t\tcase MENU_ITEM_MOVE_DOWN:\n\t\t\tfor (int i = selectedCount-1;i>=0;i--) {\n\t\t\t\tint p = selectedPos.get(i).intValue();\n\t\t\t\tint newPos = p + change;\n\t\t\t\trows.removeViewAt(p);\n\t\t\t\tif (newPos > size -1) {\n\t\t\t\t\tselectedPos.set(i,0);\n\t\t\t\t\tfor (int j=i-1;j>=0;j--) {\n\t\t\t\t\t\tselectedPos.set(j,selectedPos.get(j)+1);\n\t\t\t\t\t}\t\n\t\t\t\t\trows.addView(selected.get(i),0); // add at end\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tselectedPos.set(i,newPos);\n\t\t\t\t\trows.addView(selected.get(i),newPos);\n\t\t\t\t}\n\t\t\t}\n\t\t\t((RelationMembersFragment)caller).scrollToRow(selected.get(selected.size()-1),false, action==MENU_ITEM_MOVE_BOTTOM || forceScroll(selectedPos.get(selected.size()-1),size));\n\t\t\t((RelationMembersFragment)caller).setIcons();\n\t\t\treturn true;\n\t\tcase MENU_ITEM_SORT:\n\t\t\tList<RelationMemberDescription>rmds = new ArrayList<RelationMemberDescription>();\n\t\t\tMap<RelationMemberDescription, RelationMemberRow>relationMemberRows = new HashMap<RelationMemberDescription, RelationMemberRow>();\n\t\t\tint top = selectedPos.get(0).intValue();\n\t\t\tfor (int i = 0;i<selectedCount;i++) {\n\t\t\t\tRelationMemberRow row = selected.get(i);\n\t\t\t\tRelationMemberDescription rmd = row.getRelationMemberDescription();\n\t\t\t\trmds.add(rmd);\t\n\t\t\t\trelationMemberRows.put(rmd, row);\n\t\t\t\trows.removeView(row);\n\t\t\t}\n\t\t\trmds = Util.sortRelationMembers(rmds);\n\t\t\tint pos = top;\n\t\t\tfor (RelationMemberDescription rmd:rmds) {\n\t\t\t\trows.addView(relationMemberRows.get(rmd), pos);\n\t\t\t\tpos++;\n\t\t\t}\n\t\t\t((RelationMembersFragment)caller).scrollToRow(rows.getChildAt(top),false, false);\n\t\t\t((RelationMembersFragment)caller).setIcons();\n\t\t\treturn true;\n\t\tcase MENU_ITEM_REVERSE_ORDER:\n\t\t\ttop = selectedPos.get(0).intValue();\n\t\t\tList<RelationMemberRow>temp = new ArrayList<RelationMemberRow>(selected);\n\t\t\tCollections.reverse(temp);\n\t\t\tfor (RelationMemberRow row:selected) {\n\t\t\t\trows.removeView(row);\n\t\t\t}\n\t\t\tfor (int i=0;i<selectedPos.size();i++) {\n\t\t\t\tpos = selectedPos.get(i);\n\t\t\t\trows.addView(temp.get(i), pos);\n\t\t\t}\n\t\t\t((RelationMembersFragment)caller).scrollToRow(rows.getChildAt(top),false, false);\n\t\t\t((RelationMembersFragment)caller).setIcons();\n\t\t\treturn true;\n\t\tcase MENU_ITEM_TOP:\n\t\tcase MENU_ITEM_BOTTOM:\n\t\t\t((RelationMembersFragment)caller).scrollToRow(null,action==MENU_ITEM_TOP,false);\n\t\t\treturn true;\n\t\tcase MENU_ITEM_DOWNLOAD:\n\t\t\tProgress.showDialog(caller.getActivity(), Progress.PROGRESS_DOWNLOAD);\n\t\t\tPostAsyncActionHandler handler = new PostAsyncActionHandler() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onSuccess() {\n\t\t\t\t\tif (currentAction != null) {\n\t\t\t\t\t\tfor (int i = 0;i<selectedCount;i++) {\n\t\t\t\t\t\t\tRelationMemberRow row = selected.get(i);\n\t\t\t\t\t\t\tif (!row.getRelationMemberDescription().downloaded()) {\n\t\t\t\t\t\t\t\tupdateRow(row, selectedPos.get(i));\n\t\t\t\t\t\t\t\tselected.set(i,row);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcurrentAction.finish();\n\t\t\t\t\t\tProgress.dismissDialog(caller.getActivity(), Progress.PROGRESS_DOWNLOAD);\n\t\t\t\t\t\t((RelationMembersFragment)caller).setIcons();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void onError() {\n\t\t\t\t}\n\t\t\t};\n\t\t\tfinal Logic logic = App.getLogic();\n\t\t\tif (selectedCount < size) {\n\t\t\t\tList<Long>nodes = new ArrayList<Long>();\n\t\t\t\tList<Long>ways = new ArrayList<Long>();\n\t\t\t\tList<Long>relations = new ArrayList<Long>();\n\t\t\t\tfor (int i = 0;i<selectedCount;i++) {\n\t\t\t\t\tRelationMemberRow row = selected.get(i);\n\t\t\t\t\tif (!row.getRelationMemberDescription().downloaded()) {\n\t\t\t\t\t\tif (Node.NAME.equals(row.getType())) {\n\t\t\t\t\t\t\tnodes.add(row.getOsmId());\n\t\t\t\t\t\t} else if (Way.NAME.equals(row.getType())) {\n\t\t\t\t\t\t\tways.add(row.getOsmId());\n\t\t\t\t\t\t} else if (Relation.NAME.equals(row.getType())) {\n\t\t\t\t\t\t\trelations.add(row.getOsmId());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlogic.downloadElements(caller.getActivity(), nodes, ways, relations, handler);\n\t\t\t} else {\n\t\t\t\tlogic.downloadElement(caller.getActivity(), Relation.NAME, ((RelationMembersFragment)caller).getOsmId(), \n\t\t\t\t\ttrue, false, handler);\n\t\t\t}\n\t\t\t\n\t\t\tinvalidate();\n\t\t\treturn true;\n\t\tdefault: return false;\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(byte[] bytes) {\n        int length = bytes.length;\n        if (tempBuffer == null || tempBuffer.length < length) {\n            tempBuffer = new char[length];\n        }\n        char[] chars = tempBuffer;\n        int outAt = 0;\n\n        for (int at = 0; length > 0; ) {\n            int v0 = bytes[at] & 0xFF;\n            char out;\n            switch (v0 >> 4) {\n                case 0x00: case 0x01: case 0x02: case 0x03:\n                case 0x04: case 0x05: case 0x06: case 0x07: {\n                    length--;\n                    if (v0 == 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    out = (char) v0;\n                    at++;\n                    break;\n                }\n                case 0x0c: case 0x0d: {\n                    length -= 2;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int value = ((v0 & 0x1f) << 6) | (v1 & 0x3f);\n                    if ((value != 0) && (value < 0x80)) {\n                        \n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    out = (char) value;\n                    at += 2;\n                    break;\n                }\n                case 0x0e: {\n                    length -= 3;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int v2 = bytes[at + 2] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    int value = ((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) |\n                        (v2 & 0x3f);\n                    if (value < 0x800) {\n                        \n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    out = (char) value;\n                    at += 3;\n                    break;\n                }\n                default: {\n                    return throwBadUtf8(v0, at);\n                }\n            }\n            chars[outAt] = out;\n            outAt++;\n        }\n\n        return new String(chars, 0, outAt);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic static boolean compareValues(Object v1, Object v2) {\n\n\t\tif (v1 == null && v2 == null)\n\t\t\treturn true;\n\t\tif (v1 == v2)\n\t\t\treturn true;\n\t\tif (v1 == null && v2 != null)\n\t\t\treturn false;\n\t\tif (v1 != null && v2 == null)\n\t\t\treturn false;\n\n\t\tv2 = convertToType(v1.getClass(), v2);\n\n\t\tif (v1.getClass() != v2.getClass())\n\t\t\treturn false;\n\n\t\tClass type = v1.getClass();\n\n\t\ttry {\n\n\t\t\tif (type == Boolean.class || type == boolean.class) {\n\t\t\t\tif (!((Boolean) v1).equals((Boolean) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == Byte.class || type == byte.class) {\n\t\t\t\tif (!((Byte) v1).equals((Byte) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == Byte[].class) {\n\t\t\t\tif (!Arrays.equals((Byte[]) v1, (Byte[]) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == byte[].class) {\n\t\t\t\tif (!Arrays.equals((byte[]) v1, (byte[]) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == Short.class || type == short.class) {\n\t\t\t\tif (!((Short) v1).equals((Short) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == Integer.class || type == int.class) {\n\t\t\t\tif (!((Integer) v1).equals((Integer) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == Long.class || type == long.class) {\n\t\t\t\tif (!((Long) v1).equals((Long) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == Float.class || type == float.class) {\n\t\t\t\tFloat v1f = (Float) v1;\n\t\t\t\tFloat v2f = (Float) v2;\n\t\t\t\tif (Float.floatToIntBits(v1f) != Float.floatToIntBits(v2f))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == Double.class || type == double.class) {\n\t\t\t\tDouble v1d = (Double) v1;\n\t\t\t\tDouble v2d = (Double) v2;\n\t\t\t\tif (Double.doubleToLongBits(v1d) != Double.doubleToLongBits(v2d))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == Character.class || type == char.class) {\n\t\t\t\tif (!((Character) v1).equals((Character) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == Character[].class) {\n\t\t\t\tif (!Arrays.equals((Character[]) v1, (Character[]) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == char[].class) {\n\t\t\t\tif (!Arrays.equals((char[]) v1, (char[]) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == String.class) {\n\t\t\t\tif (!((String) v1).equals((String) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == BigDecimal.class) {\n\t\t\t\tif (!((BigDecimal) v1).equals((BigDecimal) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == Reader.class) {\n\t\t\t\tReader r1 = (Reader) v1;\n\t\t\t\tReader r2 = (Reader) v2;\n\t\t\t\tif (!compareReaders(r1,r2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (v1  == InputStream.class) {\n\t\t\t\tInputStream i1 = (InputStream) v1;\n\t\t\t\tInputStream i2 = (InputStream) v2;\n\t\t\t\tif (!compareInputStreams(i1,i2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (v1 instanceof Clob) {\n\t\t\t\tClob c1 = (Clob) v1;\n\t\t\t\tClob c2 = (Clob) v2;\n\t\t\t\tif (!compareReaders(c1.getCharacterStream(), c2.getCharacterStream()))\n\t\t\t\t\treturn false;\n\t\t\t} else if (v1 instanceof Blob) {\n\t\t\t\tBlob b1 = (Blob) v1;\n\t\t\t\tBlob b2 = (Blob) v2;\n\t\t\t\tif (!compareInputStreams(b1.getBinaryStream(), b2.getBinaryStream()))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == java.util.Date.class) {\n\t\t\t\tjava.util.Date d1 = (java.util.Date) v1;\n\t\t\t\tjava.util.Date d2 = (java.util.Date) v2;\n\t\t\t\tif (!d1.toString().substring(0,19).equals(d2.toString().substring(0,19)))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == java.sql.Date.class) {\n\t\t\t\tjava.sql.Date d1 = (java.sql.Date) v1;\n\t\t\t\tjava.sql.Date d2 = (java.sql.Date) v2;\n\t\t\t\tif (!d1.toString().equals(d2.toString()))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == java.sql.Time.class) {\n\t\t\t\tjava.sql.Time d1 = (java.sql.Time) v1;\n\t\t\t\tjava.sql.Time d2 = (java.sql.Time) v2;\n\t\t\t\tif (!d1.toString().equals(d2.toString()))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == java.sql.Timestamp.class) {\n\t\t\t\tjava.sql.Timestamp d1 = (java.sql.Timestamp) v1;\n\t\t\t\tjava.sql.Timestamp d2 = (java.sql.Timestamp) v2;\n\t\t\t\tif (!d1.toString().substring(0,15).equals(d2.toString().substring(0,15)))\n\t\t\t\t\treturn false;\n\t\t\t} else if (!v1.equals(v2))\n\t\t\t\treturn false;\n\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\n\t\treturn true;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(char ch) {\n        return isIdentifierIgnorable((int)ch);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nIssuerEntry(final int id, final String subject, final String b64Sha1Fp, final String b64Cert) {\n        super();\n        this.id = id;\n        this.subject = subject;\n        this.sha1Fp = Base64.decode(b64Sha1Fp);\n        this.cert = Base64.decode(b64Cert);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, final Contract contract, final TradeOrder tradeOrder,\n\t\t\tfinal OrderState orderState) {\n\n\t\ttry {\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(tradeOrder.getOrderKey());\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170, \"Warning Order not found for Order Key: \" + orderId + \" make sure Client ID: \" + 0\n\t\t\t\t\t\t+ \" is not the master in TWS. On openOrder update.\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (BackTestBrokerModel.updateTradeOrder(tradeOrder, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\n\t\t\t\t\t_log.debug(\"Order Key: \" + transientInstance.getOrderKey() + \" filled.\");\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (updatedOrder.hasTradePosition() && !updatedOrder.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(updatedOrder.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Order key: \" + transientInstance.getOrderKey() + \" state changed. Status:\"\n\t\t\t\t\t\t\t+ orderState.m_status);\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(updatedOrder.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(updatedOrder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void sendCrashLog2PM(String fileName) {\n        if (!new File(fileName).exists()) {\n            Toast.makeText(mContext, \"\u93c3\u30e5\u7e54\u93c2\u56e6\u6b22\u6d93\u5d85\u74e8\u9366\ue7d2\u7d12\", Toast.LENGTH_SHORT).show();\n            return;\n        }\n        FileInputStream fis = null;\n        BufferedReader reader = null;\n        String s = null;\n        try {\n            fis = new FileInputStream(fileName);\n            reader = new BufferedReader(new InputStreamReader(fis, \"GBK\"));\n            while (true) {\n                s = reader.readLine();\n                if (s == null)\n                    break;\n                Log.i(\"info\", s.toString());\n            }\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally { // \u934f\u62bd\u68f4\u5a34\n            try {\n                reader.close();\n                fis.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Deprecated\n    public CharSequence logestCommonSubsequence(final CharSequence left, final CharSequence right) {\n        return longestCommonSubsequence(left, right);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static <A extends Closeable> A api(Class<A> apitype, final String provider, final String credId, final Properties overrides) {\n        Thread.currentThread().setContextClassLoader(Apis.class.getClassLoader());\n        return CredentialsHelper.setCredentials(ContextBuilder.newBuilder(provider), credId)\n            .overrides(overrides).modules(MODULES).buildApi(typeToken(apitype));\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)\n            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {\n        serialize(parentQName, xmlWriter, false);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private IFile getWorkspaceFile(IFileStore fileStore) {\n        IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();\n        IFile[] files = workspaceRoot.findFilesForLocationURI(fileStore.toURI());\n        if (files != null && files.length == 1)\n            return files[0];\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PluginLoadOrder getLoad() {\n        return order;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    protected List<EMConversation> loadConversationList(){\n        Map<String, EMConversation> conversations = EMClient.getInstance().chatManager().getAllConversations();\n        List<Pair<Long, EMConversation>> sortList = new ArrayList<Pair<Long, EMConversation>>();\n        \n        synchronized (conversations) {\n            for (EMConversation conversation : conversations.values()) {\n                if (conversation.getAllMessages().size() != 0) {\n                    sortList.add(new Pair<Long, EMConversation>(conversation.getLastMessage().getMsgTime(), conversation));\n                }\n            }\n        }\n        try {\n            sortConversationByLastChatTime(sortList);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        List<EMConversation> list = new ArrayList<EMConversation>();\n        for (Pair<Long, EMConversation> sortItem : sortList) {\n            list.add(sortItem.second);\n        }\n        return list;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tpublic List<Gadget> findAll(int start, int end,\n\t\tOrderByComparator orderByComparator) throws SystemException {\n\t\tboolean pagination = true;\n\t\tFinderPath finderPath = null;\n\t\tObject[] finderArgs = null;\n\n\t\tif ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) &&\n\t\t\t\t(orderByComparator == null)) {\n\t\t\tpagination = false;\n\t\t\tfinderPath = FINDER_PATH_WITHOUT_PAGINATION_FIND_ALL;\n\t\t\tfinderArgs = FINDER_ARGS_EMPTY;\n\t\t}\n\t\telse {\n\t\t\tfinderPath = FINDER_PATH_WITH_PAGINATION_FIND_ALL;\n\t\t\tfinderArgs = new Object[] { start, end, orderByComparator };\n\t\t}\n\n\t\tList<Gadget> list = (List<Gadget>)FinderCacheUtil.getResult(finderPath,\n\t\t\t\tfinderArgs, this);\n\n\t\tif (list == null) {\n\t\t\tStringBundler query = null;\n\t\t\tString sql = null;\n\n\t\t\tif (orderByComparator != null) {\n\t\t\t\tquery = new StringBundler(2 +\n\t\t\t\t\t\t(orderByComparator.getOrderByFields().length * 3));\n\n\t\t\t\tquery.append(_SQL_SELECT_GADGET);\n\n\t\t\t\tappendOrderByComparator(query, _ORDER_BY_ENTITY_ALIAS,\n\t\t\t\t\torderByComparator);\n\n\t\t\t\tsql = query.toString();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsql = _SQL_SELECT_GADGET;\n\n\t\t\t\tif (pagination) {\n\t\t\t\t\tsql = sql.concat(GadgetModelImpl.ORDER_BY_JPQL);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSession session = null;\n\n\t\t\ttry {\n\t\t\t\tsession = openSession();\n\n\t\t\t\tQuery q = session.createQuery(sql);\n\n\t\t\t\tif (!pagination) {\n\t\t\t\t\tlist = (List<Gadget>)QueryUtil.list(q, getDialect(), start,\n\t\t\t\t\t\t\tend, false);\n\n\t\t\t\t\tCollections.sort(list);\n\n\t\t\t\t\tlist = new UnmodifiableList<Gadget>(list);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlist = (List<Gadget>)QueryUtil.list(q, getDialect(), start,\n\t\t\t\t\t\t\tend);\n\t\t\t\t}\n\n\t\t\t\tcacheResult(list);\n\n\t\t\t\tFinderCacheUtil.putResult(finderPath, finderArgs, list);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tFinderCacheUtil.removeResult(finderPath, finderArgs);\n\n\t\t\t\tthrow processException(e);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tcloseSession(session);\n\t\t\t}\n\t\t}\n\n\t\treturn list;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void theLocalAndRemoteGitReposAreTaggedWithTheModuleNameAndVersion() throws IOException, InterruptedException {\n        assertThat(testProject.local, hasTag(\"independent-versions-\" + expectedParentVersion));\n        assertThat(testProject.origin, hasTag(\"independent-versions-\" + expectedParentVersion));\n\n        assertThat(testProject.local, hasTag(\"core-utils-\" + expectedCoreVersion));\n        assertThat(testProject.origin, hasTag(\"core-utils-\" + expectedCoreVersion));\n\n        assertThat(testProject.local, hasTag(\"console-app-\" + expectedAppVersion));\n        assertThat(testProject.origin, hasTag(\"console-app-\" + expectedAppVersion));\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private boolean isInContent(float x, float y, Sticker currentSticker) {\n\n\n\n        float[] pointsDst = currentSticker.getMapPointsDst();\n        if (x > pointsDst[0] && x < pointsDst[2] && y > pointsDst[3] && y < pointsDst[5])\n            return true;\n        return false;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\n\n\tprivate void adaptToEnablementChange(HighlightingStyle highlighting, PropertyChangeEvent event) {\n\t\tObject value = event.getNewValue();\n\t\tboolean eventValue;\n\t\tif (value instanceof Boolean)\n\t\t\teventValue = ((Boolean) value).booleanValue();\n\t\telse if (IPreferenceStore.TRUE.equals(value))\n\t\t\teventValue = true;\n\t\telse\n\t\t\teventValue = false;\n\t\thighlighting.setEnabled(eventValue);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(byte[] bytes, int start, int length) {\n        char[] chars = localBuffer.get();\n        if (chars == null || chars.length < length) {\n            chars = new char[length];\n            localBuffer.set(chars);\n        }\n        int outAt = 0;\n\n        for (int at = start; length > 0; ) {\n            int v0 = bytes[at] & 0xFF;\n            char out;\n            switch (v0 >> 4) {\n                case 0x00: case 0x01: case 0x02: case 0x03:\n                case 0x04: case 0x05: case 0x06: case 0x07: {\n                    length--;\n                    if (v0 == 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    out = (char) v0;\n                    at++;\n                    break;\n                }\n                case 0x0c: case 0x0d: {\n                    length -= 2;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int value = ((v0 & 0x1f) << 6) | (v1 & 0x3f);\n                    if ((value != 0) && (value < 0x80)) {\n                        \n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    out = (char) value;\n                    at += 2;\n                    break;\n                }\n                case 0x0e: {\n                    length -= 3;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int v2 = bytes[at + 2] & 0xFF;\n                    if ((v2 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    int value = ((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) |\n                            (v2 & 0x3f);\n                    if (value < 0x800) {\n                        \n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    out = (char) value;\n                    at += 3;\n                    break;\n                }\n                default: {\n                    return throwBadUtf8(v0, at);\n                }\n            }\n            chars[outAt] = out;\n            outAt++;\n        }\n\n        return new String(chars, 0, outAt);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprotected Getter addGetter(List<Getter> getterChain, Getter prevGetter, String nextPart) {\n        Class nextClass = prevGetter != null ? prevGetter.getReturnType() : parent.getBaseClass();\n        Getter nextGetter = parent.getPropertyGetter(nextClass, nextPart);\n        getterChain.add(nextGetter);\n        return nextGetter;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate ProductSceneView getProductSceneView(InputEvent event) {\n        ProductSceneView productSceneView = null;\n        Component component = event.getComponent();\n        while (component != null) {\n            if (component instanceof ProductSceneView) {\n                productSceneView = (ProductSceneView) component;\n                break;\n            }\n            component = component.getParent();\n        }\n        return productSceneView;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    protected void fireVetoableChange(String propertyName, Object oldValue,\n                                      Object newValue)\n        throws PropertyVetoException\n    {\n        if (oldValue == newValue) {\n            return;\n        }\n        VetoableChangeSupport vetoableSupport =\n            this.vetoableSupport;\n        if (vetoableSupport != null) {\n            vetoableSupport.fireVetoableChange(propertyName, oldValue,\n                                               newValue);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static String loadJSONFromAsset(Context context, String filename) {\n\t\tString json;\n\t\ttry {\n\n\t\t\tInputStream is = context.getAssets().open(\"json/\" +filename+\".json\");\n\n\t\t\tint size = is.available();\n\n\t\t\tbyte[] buffer = new byte[size];\n\n\t\t\tis.read(buffer);\n\t\t\t\n\t\t\tis.close();\n\n\t\t\tjson = new String(buffer, \"UTF-8\");\n\t\t\tLog.v(\"AppUtils\", \"JSONArray=>\"+json);\n\t\t} catch (IOException ex) {\n\t\t\tex.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\t\treturn json;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic int normalizeMe() throws IllegalArgumentException {\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint i;\n\t\tfor (i = nWords - 1; i >= 0 && (l = data[i]) == 0; i--)\n\t\t\tj++;\n\n\t\tif (i < 0)\n\t\t\tthrow new IllegalArgumentException(\"zero value\");\n\t\tnWords -= j;\n\t\tif ((l & -268435456) != 0) {\n\t\t\tfor (k = 32; (l & -268435456) != 0; k--)\n\t\t\t\tl >>>= 1;\n\n\t\t} else {\n\t\t\twhile (l <= 1048575) {\n\t\t\t\tl <<= 8;\n\t\t\t\tk += 8;\n\t\t\t}\n\t\t\twhile (l <= 134217727) {\n\t\t\t\tl <<= 1;\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t\tif (k != 0)\n\t\t\tlshiftMe(k);\n\t\treturn k;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public boolean isSourceEncodingSupported(AudioFormat.Encoding src)\n  {\n    AudioFormat.Encoding[] srcs = getSourceEncodings();\n    for (int i = 0; i < srcs.length; ++i)\n      {\n        if (src.equals(srcs[i]))\n          return true;\n      }\n    return false;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static int blendColors(int from, int to, float ratio) {\n        final float inverseRatio = 1f - ratio;\n\n        final float r = Color.red(to) * ratio + Color.red(from) * inverseRatio;\n        final float g = Color.green(to) * ratio + Color.green(from) * inverseRatio;\n        final float b = Color.blue(to) * ratio + Color.blue(from) * inverseRatio;\n\n        return Color.rgb((int) r, (int) g, (int) b);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; }\n        return retVal;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@NotNull\n    @Parameterized.Parameters\n    public static Collection<Object[]> combinations() {\n        @NotNull List<Object[]> list = new ArrayList<>();\n        for (char i = 0; i < 260; i++) {\n            list.add(new Object[]{i});\n        }\n        return list;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1];\n            int col = 1;\n            if (val.length > 2)\n                col = Math.max(1, (int)val[2]);\n\n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            Object o = table.data.get(row-1)[col-1];\n            if (o instanceof Float)\n                return (Float)o;\n            return 0f;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic synchronized String[] getFieldNames() {\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {\n            MODELMBEAN_LOGGER.logp(Level.FINEST,\n                    DescriptorSupport.class.getName(),\n                    \"getFieldNames()\", \"Entry\");\n        }\n        int numberOfEntries = descriptorMap.size();\n\n        String[] responseFields = new String[numberOfEntries];\n        Set<Map.Entry<String, Object>> returnedSet = descriptorMap.entrySet();\n\n        int i = 0;\n\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {\n            MODELMBEAN_LOGGER.logp(Level.FINEST,\n                    DescriptorSupport.class.getName(),\n                    \"getFieldNames()\",\n                    \"Returning \" + numberOfEntries + \" fields\");\n        }\n\n        for (Iterator<Map.Entry<String, Object>> iter = returnedSet.iterator();\n             iter.hasNext(); i++) {\n            Map.Entry<String, Object> currElement = iter.next();\n\n            if (( currElement == null ) || (currElement.getKey() == null)) {\n                if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {\n                    MODELMBEAN_LOGGER.logp(Level.FINEST,\n                            DescriptorSupport.class.getName(),\n                            \"getFieldNames()\", \"Field is null\");\n                }\n            } else {\n                responseFields[i] = currElement.getKey().toString();\n            }\n        }\n\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {\n            MODELMBEAN_LOGGER.logp(Level.FINEST,\n                    DescriptorSupport.class.getName(),\n                    \"getFieldNames()\", \"Exit\");\n        }\n\n        return responseFields;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n        this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n        BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n        this.updateNaturalParameterPrior(prior);\n\n        return learntBN;\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static Matrix getDistanceMatrix(Atom[] ca1, Atom[]ca2){\n        \n      int r = ca1.length;\n      int c = ca2.length;\n      \n      Matrix out = new Matrix(r,c);\n      \n      for (int i=0; i<r; i++) {\n          Atom a1 = ca1[i];\n          for (int j=0;j<c;j++){\n              Atom b1 = ca2[j];\n            \n              try {\n                  double d = Calc.getDistance(a1,b1);\n                  out.set(i,j,d);\n              } catch (StructureException e) {\n                  e.printStackTrace();\n                  out.set(i,j,999);\n              }\n          }\n      }\n      return out;  \n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\tChannel channel = ctx.channel();\n\t\t\tchannels.remove(channel);\n\t\t\tNode client = channel.attr(STATE).get();\n\t\t\tuserLinkList.delUser(client);\n\t\t\tcombobox.removeItem(client.username);\n\t\t\tsuper.channelUnregistered(ctx);\n\t\t\tbroadcasts(new LoginOutMessage(client.username));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t@Deprecated\n\tpublic ExecutionEvent(@SuppressWarnings(\"rawtypes\") final Map parameters, final Object trigger,\n\t\t\tfinal Object applicationContext) {\n\t\tthis(null, parameters, trigger, applicationContext);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\tChannel channel = ctx.channel();\n\t\t\tchannels.remove(channel);\n\t\t\tNode client = channel.attr(STATE).get();\n\t\t\tuserLinkList.delUser(client);\n\t\t\tcombobox.removeItem(client.username);\n\t\t\tsuper.channelUnregistered(ctx);\n\t\t\tbroadcasts(new LoginOutMessage(client.username));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    protected void initEnablementBehaviours( List<EnablementBehaviour> enablementBehaviours ) {\n        \n        enablementBehaviours.add(new ValidToolDetectionActivator(new Class[]{Geometry.class,\n                LineString.class, MultiLineString.class}));\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n\tpublic void testShootmeRegister() throws Exception {\n\t\t\n\t\tlogger.info(\"About to deploy the application\");\n\t\tdeployer.deploy(testArchive);\n\t\tisDeployed = true;\n\t\t\n\t\tSipURI requestURI = sender.getAddressFactory().createSipURI(\"sender\",\"127.0.0.1:5070;transport=tcp\");\n\t\tsipPhoneSender.register(requestURI, \"no_user\", \"no_password\", \"sip:sender@127.0.0.1:5080;transport=tcp;lr\", TIMEOUT, TIMEOUT);\n\t\tassertEquals(Response.SERVER_INTERNAL_ERROR ,sipPhoneSender.getReturnCode()); \n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        PartialSufficientSatistics partialSufficientSatistics = PartialSufficientSatistics.createZeroPartialSufficientStatistics(efBayesianNetwork);\n        partialSufficientSatistics.copy(this.sumSS);\n        partialSufficientSatistics.normalize();\n        SufficientStatistics finalSS = efBayesianNetwork.createZeroSufficientStatistics();\n        finalSS.sum(partialSufficientSatistics.getCompoundVector());\n\n        efBayesianNetwork.setMomentParameters(finalSS);\n        return efBayesianNetwork.toBayesianNetwork(dag);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(char ch) {\n        return isIdentifierIgnorable((int)ch);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tprotected List<String> prefetch() throws Exception {\n\t\n\t\tString[] cells;\n\t\tif((cells = reader.readNext()) == null) {\n\t\t\treturn finish();\n\t\t}\n\t\n\t\tList<String> result = Arrays.asList(cells);\t\n\n\t\treturn result;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static Endpoint create(String bindingId, Object implementor) {\n        return Provider.provider().createEndpoint(bindingId, implementor);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static URI resolve(URI base, URI child) {\n        if (child.isOpaque() || base.isOpaque())\n            return child;\n\n        if ((child.scheme == null) && (child.authority == null)\n            && child.path.equals(\"\") && (child.fragment != null)\n            && (child.query == null)) {\n            if ((base.fragment != null)\n                && child.fragment.equals(base.fragment)) {\n                return base;\n            }\n            URI ru = new URI();\n            ru.scheme = base.scheme;\n            ru.authority = base.authority;\n            ru.userInfo = base.userInfo;\n            ru.host = base.host;\n            ru.port = base.port;\n            ru.path = base.path;\n            ru.fragment = child.fragment;\n            ru.query = base.query;\n            return ru;\n        }\n\n        if (child.scheme != null)\n            return child;\n\n        URI ru = new URI();             // Resolved URI\n        ru.scheme = base.scheme;\n        ru.query = child.query;\n        ru.fragment = child.fragment;\n\n        if (child.authority == null) {\n            ru.authority = base.authority;\n            ru.host = base.host;\n            ru.userInfo = base.userInfo;\n            ru.port = base.port;\n\n            String cp = (child.path == null) ? \"\" : child.path;\n            if ((cp.length() > 0) && (cp.charAt(0) == '/')) {\n                ru.path = child.path;\n            } else {\n                ru.path = resolvePath(base.path, cp, base.isAbsolute());\n            }\n        } else {\n            ru.authority = child.authority;\n            ru.host = child.host;\n            ru.userInfo = child.userInfo;\n            ru.host = child.host;\n            ru.port = child.port;\n            ru.path = child.path;\n        }\n\n        return ru;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic String operatorName(int tag) {\n        switch(tag) {\n            case JCTree.POS:     return \"+\";\n            case JCTree.NEG:     return \"-\";\n            case JCTree.NOT:     return \"!\";\n            case JCTree.COMPL:   return \"~\";\n            case JCTree.PREINC:  return \"++\";\n            case JCTree.PREDEC:  return \"--\";\n            case JCTree.POSTINC: return \"++\";\n            case JCTree.POSTDEC: return \"--\";\n            case JCTree.NULLCHK: return \"<*nullchk*>\";\n            case JCTree.OR:      return \"||\";\n            case JCTree.AND:     return \"&&\";\n            case JCTree.EQ:      return \"==\";\n            case JCTree.NE:      return \"!=\";\n            case JCTree.LT:      return \"<\";\n            case JCTree.GT:      return \">\";\n            case JCTree.LE:      return \"<=\";\n            case JCTree.GE:      return \">=\";\n            case JCTree.BITOR:   return \"|\";\n            case JCTree.BITXOR:  return \"^\";\n            case JCTree.BITAND:  return \"&\";\n            case JCTree.SL:      return \"<<\";\n            case JCTree.SR:      return \">>\";\n            case JCTree.USR:     return \">>>\";\n            case JCTree.PLUS:    return \"+\";\n            case JCTree.MINUS:   return \"-\";\n            case JCTree.MUL:     return \"*\";\n            case JCTree.DIV:     return \"/\";\n            case JCTree.MOD:     return \"%\";\n            default: throw new Error();\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n\n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n\n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n\n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static <T> ArrayList<T> arrayToList(T[] elements)\n    {\n        ArrayList<T> result = new ArrayList<T>();\n        if (elements != null) {\n            for (T elem : elements) {\n                result.add(elem);\n            }\n        }\n        return result;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n\tpublic void testBlock() throws IOException {\n\t\tBlock b = new Block(BlockCompressionMethod.GZIP.ordinal(),\n\t\t\t\tBlockContentType.CORE, 0, \"123457890\".getBytes(), null);\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tb.write(baos);\n\n\t\tByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n\t\tBlock b2 = new Block(bais, true, true);\n\n\t\tassertArrayEquals(b.getRawContent(), b2.getRawContent());\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\tChannel channel = ctx.channel();\n\t\t\tchannels.remove(channel);\n\t\t\tNode client = channel.attr(STATE).get();\n\t\t\tuserLinkList.delUser(client);\n\t\t\tcombobox.removeItem(client.username);\n\t\t\tsuper.channelUnregistered(ctx);\n\t\t\tbroadcasts(new LoginOutMessage(client.username));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic List<String> authors() {\n            LogInfo.I(\"\");\n\n            final List<Author> authors = myCollection.authors();\n            final List<String> strings = new ArrayList<String>(authors.size());\n            for (Author a : authors) {\n                strings.add(Util.authorToString(a));\n            }\n            return strings;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void setSceneRasterStartAndStopTime(final Product product) {\n            final ProductData.UTC sceneRasterStartTime = getSceneRasterStartTime();\n            if (sceneRasterStartTime != null) {\n                product.setStartTime(sceneRasterStartTime);\n            }\n            final ProductData.UTC sceneRasterStopTime = getSceneRasterStopTime();\n            if (sceneRasterStopTime != null) {\n                product.setEndTime(sceneRasterStopTime);\n            }\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tpublic double[] sample(Random rng) {\n\t\tfinal Matrix vec = new Matrix(N, 1);\n\n\t\tfor (int i = 0; i < N; i++)\n\t\t\tvec.set(i, 0, rng.nextGaussian());\n\n\t\tfinal Matrix result = this.mean.plus(chol.times(vec).transpose());\n\n\t\treturn result.getArray()[0];\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void createRemoteDisplay(final Display disp){\n\t\t\ttry{\n\t\t\t\tif (disp == null){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (remoteDisplay != null && remoteDisplay.getDisplay() != disp) {\n\t\t\t\t\tremoteDisplay.dismissPresentation();\n\t\t\t\t}\n\n\t\t\t\tFutureTask<Boolean> fTask =  new FutureTask<Boolean>( new SdlRemoteDisplay.Creator(context, disp, remoteDisplay, remoteDisplayClass, new SdlRemoteDisplay.Callback(){\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onCreated(final SdlRemoteDisplay remoteDisplay) {\n\t\t\t\t\t\tVideoStreamingManager.this.remoteDisplay = remoteDisplay;\n\t\t\t\t\t\tremoteDisplay.getMainView().post(new Runnable() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\thapticManager.refreshHapticData(remoteDisplay.getMainView());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tImageResolution resolution = null;\n\t\t\t\t\t\tif(getWiProVersion()>=5){ //At this point we should already have the capability\n\t\t\t\t\t\t\tVideoStreamingCapability capability = (VideoStreamingCapability)_systemCapabilityManager.getCapability(SystemCapabilityType.VIDEO_STREAMING);\n\t\t\t\t\t\t\tresolution = capability.getPreferredResolution();\n\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\tDisplayCapabilities dispCap = (DisplayCapabilities) _systemCapabilityManager.getCapability(SystemCapabilityType.DISPLAY);\n\t\t\t\t\t\t\tif (dispCap != null) {\n\t\t\t\t\t\t\t\t resolution = (dispCap.getScreenParams().getImageResolution());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(resolution != null){\n\t\t\t\t\t\t\tDisplayMetrics displayMetrics = new DisplayMetrics();\n\t\t\t\t\t\t\tdisp.getMetrics(displayMetrics);\n\t\t\t\t\t\t\ttouchScalar[0] = ((float)displayMetrics.widthPixels) / resolution.getResolutionWidth();\n\t\t\t\t\t\t\ttouchScalar[1] = ((float)displayMetrics.heightPixels) / resolution.getResolutionHeight();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onInvalidated(final SdlRemoteDisplay remoteDisplay) {\n\t\t\t\t\t\tremoteDisplay.getMainView().post(new Runnable() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\thapticManager.refreshHapticData(remoteDisplay.getMainView());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} ));\n\t\t\t\tThread showPresentation = new Thread(fTask);\n\n\t\t\t\tshowPresentation.start();\n\t\t\t\t} catch (Exception ex) {\n\t\t\t\tLog.e(TAG, \"Unable to create Virtual Display.\");\n\t\t\t}\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public void process(JCas cas) throws AnalysisEngineProcessException {\n      if (this.isTraining()) {\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 1234));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 1000));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 900));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 1500));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 2000));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 1235));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 1001));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 901));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 1501));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 2001));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 1502));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 2003));\n\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 10));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 8));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 60));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 80));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 4));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 11));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 5));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 61));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 81));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 7));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 82));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 3));\n\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 1));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 8));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 60));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 81));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 4));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 11));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 7));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 61));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 82));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 2));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 83));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 1));\n      } else {\n        String classification = this.classifier.classify(createInstance(\"\", \"hello\", 1000).getFeatures());\n        assertEquals(\"A\", classification);\n        classification = this.classifier.classify(createInstance(\"\", \"hello\", 1).getFeatures());\n        assertEquals(\"A\", classification);\n        classification = this.classifier.classify(createInstance(\"\", \"goodbye\", 1).getFeatures());\n        assertEquals(\"C\", classification);\n      }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void visitLdcInsn(Object cst) {\n        if (mv != null) {\n            mv.visitLdcInsn(cst);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void setJoinType(int type) throws SQLException {\n\n       if (type >= JoinRowSet.CROSS_JOIN && type <= JoinRowSet.FULL_JOIN) {\n           if (type != JoinRowSet.INNER_JOIN) {\n               throw new SQLException(resBundle.handleGetObject(\"joinrowsetimpl.notsupported\").toString());\n           } else {\n              Integer Intgr = new Integer(JoinRowSet.INNER_JOIN);\n              vecJoinType.add(Intgr);\n           }\n       } else {\n          throw new SQLException(resBundle.handleGetObject(\"joinrowsetimpl.notdefined\").toString());\n       }  //end if\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PluginLoadOrder getLoad() {\n        return order;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void requestListViewData() {\n        mBllUser = new BusinessUser(this);\n        mBllServer = new BusinessServer(this);\n        mListMap = new ArrayList<Map<String, Object>>();\n        mBllUser.userServerOrderList((position + 1) + \"\", pageNum + \"\");\n\n\n        mAdapterWaitdeliver = new AdapterFrgServerOrderWaitSer(getActivity(), this, mListMap);\n        mListView.setAdapter(mAdapterWaitdeliver);\n\n        mListView.setMode(PullToRefreshBase.Mode.PULL_FROM_END);\n        mListView.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener2<ListView>() {\n            @Override\n            public void onPullDownToRefresh(PullToRefreshBase<ListView> refreshView) {\n                LogUtils.e(\"onPullDownToRefresh=====================>\");\n            }\n\n            @Override\n            public void onPullUpToRefresh(PullToRefreshBase<ListView> refreshView) {\n                LogUtils.e(\"onPullUpToRefresh=====================>\");\n                if (totalPage > 0 && totalPage > pageNum) {\n                    pageNum++;\n                    mBllUser.userServerOrderList((position + 1) + \"\", pageNum + \"\");\n                } else {\n                    mListView.postDelayed(new Runnable() {\n                        @Override\n                        public void run() {\n                            mListView.onRefreshComplete();\n                        }\n                    }, 1000);\n                }\n            }\n        });\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PluginLoadOrder getLoad() {\n        return order;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public int getOpacity(ExtendedBlockStorage section, int x, int y, int z) {\n        BlockStateContainer dataPalette = section.getData();\n        IBlockState ibd = dataPalette.get(x & 15, y & 15, z & 15);\n        return ibd.getLightOpacity();\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void expandPostprocessPrintAndCompare(\n\t\t\tFile inputFile,\n\t\t\tString inputSubDir,\n\t\t\tString expectedSubDir,\n\t\t\tExpansionCallback callback,\n\t\t\tboolean forInclusion,\n\t\t\tPrinterInterface printer) throws IOException, LinkTargetException, EngineException\n\t{\n\t\tFileContent inputFileContent = new FileContent(inputFile);\n\n\t\tString fileTitle = inputFile.getName();\n\t\tint i = fileTitle.lastIndexOf('.');\n\t\tif (i != -1)\n\t\t\tfileTitle = fileTitle.substring(0, i);\n\n\t\tPageTitle title = PageTitle.make(config, fileTitle);\n\t\tPageId pageId = new PageId(title, -1);\n\t\tEngProcessedPage ast = engine.postprocess(\n\t\t\t\tpageId,\n\t\t\t\tinputFileContent.getContent(),\n\t\t\t\tcallback);\n\n\t\tprintAndCompare(inputFile, inputSubDir, expectedSubDir, printer, ast);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public Runner() {\n        this.ps = DEFAULT_PRINT_STREAM;\n        this.eval = new Eval();\n        this.elementFinder = new WebDriverElementFinder();\n        this.subCommandMap = new SubCommandMap();\n        this.commandFactory = new CommandFactory(this);\n        this.varsMap = new VarsMap();\n        this.styleBackups = new ArrayDeque<>();\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tprotected void createExtendedMetaDataAnnotations() {\n\t\tString source = \"http:///org/eclipse/emf/ecore/util/ExtendedMetaData\";\t\t\t\n\t\taddAnnotation\n\t\t  (condDescTypeEClass, \n\t\t   source, \n\t\t   new String[] {\n\t\t\t \"name\", \"CondDesc_._type\",\n\t\t\t \"kind\", \"empty\"\n\t\t   });\t\t\n\t\taddAnnotation\n\t\t  (getCondDescType_Desc(), \n\t\t   source, \n\t\t   new String[] {\n\t\t\t \"kind\", \"attribute\",\n\t\t\t \"name\", \"desc\"\n\t\t   });\t\t\n\t\taddAnnotation\n\t\t  (getCondDescType_Mop(), \n\t\t   source, \n\t\t   new String[] {\n\t\t\t \"kind\", \"attribute\",\n\t\t\t \"name\", \"mop\"\n\t\t   });\t\t\n\t\taddAnnotation\n\t\t  (documentRootEClass, \n\t\t   source, \n\t\t   new String[] {\n\t\t\t \"name\", \"\",\n\t\t\t \"kind\", \"mixed\"\n\t\t   });\t\t\n\t\taddAnnotation\n\t\t  (getDocumentRoot_Mixed(), \n\t\t   source, \n\t\t   new String[] {\n\t\t\t \"kind\", \"elementWildcard\",\n\t\t\t \"name\", \":mixed\"\n\t\t   });\t\t\n\t\taddAnnotation\n\t\t  (getDocumentRoot_XMLNSPrefixMap(), \n\t\t   source, \n\t\t   new String[] {\n\t\t\t \"kind\", \"attribute\",\n\t\t\t \"name\", \"xmlns:prefix\"\n\t\t   });\t\t\n\t\taddAnnotation\n\t\t  (getDocumentRoot_XSISchemaLocation(), \n\t\t   source, \n\t\t   new String[] {\n\t\t\t \"kind\", \"attribute\",\n\t\t\t \"name\", \"xsi:schemaLocation\"\n\t\t   });\t\t\n\t\taddAnnotation\n\t\t  (getDocumentRoot_CondDesc(), \n\t\t   source, \n\t\t   new String[] {\n\t\t\t \"kind\", \"element\",\n\t\t\t \"name\", \"CondDesc\",\n\t\t\t \"namespace\", \"##targetNamespace\"\n\t\t   });\t\t\n\t\taddAnnotation\n\t\t  (tExtensionMopEnumEDataType, \n\t\t   source, \n\t\t   new String[] {\n\t\t\t \"name\", \"tExtensionMopEnum\",\n\t\t\t \"baseType\", \"tRestrName1stL\"\n\t\t   });\t\t\n\t\taddAnnotation\n\t\t  (tmopEDataType, \n\t\t   source, \n\t\t   new String[] {\n\t\t\t \"name\", \"tMOP\",\n\t\t\t \"memberTypes\", \"tMopEnum tExtensionMopEnum\"\n\t\t   });\t\t\n\t\taddAnnotation\n\t\t  (tMopEnumEEnum, \n\t\t   source, \n\t\t   new String[] {\n\t\t\t \"name\", \"tMopEnum\"\n\t\t   });\t\t\n\t\taddAnnotation\n\t\t  (tMopEnumObjectEDataType, \n\t\t   source, \n\t\t   new String[] {\n\t\t\t \"name\", \"tMopEnum:Object\",\n\t\t\t \"baseType\", \"tMopEnum\"\n\t\t   });\t\t\n\t\taddAnnotation\n\t\t  (tRestrName1stLEDataType, \n\t\t   source, \n\t\t   new String[] {\n\t\t\t \"name\", \"tRestrName1stL\",\n\t\t\t \"baseType\", \"http://www.eclipse.org/emf/2003/XMLType#Name\",\n\t\t\t \"pattern\", \"\\\\p{Ll}[\\\\d,\\\\p{L},_]*\"\n\t\t   });\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void drawQuad( FloatBuffer vertices ) {\n\t\t\n\t\tvertices.position( 0 );\n\t\taXY.vertexPointer( 2, 4, vertices );\n\t\t\n\t\tvertices.position( 2 );\n\t\taUV.vertexPointer( 2, 4, vertices );\n\n\t\tGLES20.glDrawElements( GLES20.GL_TRIANGLES, Quad.SIZE, GLES20.GL_UNSIGNED_SHORT, Quad.getIndices( 1 ) );\n\t\t\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n   public void onSurfaceCreated(GL10 gl, EGLConfig config) {\n      gl.glClearColor(0.0f, 0.0f, 0.0f, 1.0f);  // Set color's clear-value to black\n      gl.glClearDepthf(1.0f);            // Set depth's clear-value to farthest\n      gl.glEnable(GL10.GL_DEPTH_TEST);   // Enables depth-buffer for hidden surface removal\n      gl.glDepthFunc(GL10.GL_LEQUAL);    // The type of depth testing to do\n      gl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT, GL10.GL_NICEST);  // nice perspective view\n      gl.glShadeModel(GL10.GL_SMOOTH);   // Enable smooth shading of color\n      gl.glDisable(GL10.GL_DITHER);      // Disable dithering for better performance\n      \n      createTexture(gl);\n      gl.glEnable(GL10.GL_TEXTURE_2D);  // Enable texture (NEW)\n      gl.glEnable(GL_TEXTURE_EXTERNAL_OES);\n  \n   }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, com.ib.client.Contract contractIB, com.ib.client.Order order,\n\t\t\tOrderState orderState) {\n\t\ttry {\n\n\t\t\tTWSBrokerModel.logOrderState(orderState);\n\t\t\tTWSBrokerModel.logTradeOrder(order);\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(new Integer(order.m_orderId));\n\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170,\n\t\t\t\t\t\t\"Warning Order not found for Order Key: \" + order.m_orderId + \" make sure Client ID: \"\n\t\t\t\t\t\t\t\t+ this.m_clientId + \" is not the master in TWS. On openOrder update.\");\n\t\t\t\ttransientInstance = new TradeOrder();\n\t\t\t\ttransientInstance.setOrderKey(order.m_orderId);\n\t\t\t\ttransientInstance.setCreateDate(TradingCalendar.getDateTimeNowMarketTimeZone());\n\t\t\t\tTWSBrokerModel.updateTradeOrder(order, orderState, transientInstance);\n\t\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (TWSBrokerModel.updateTradeOrder(order, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t_log.debug(\"Open order filled Order Key:\" + transientInstance.getOrderKey());\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (transientInstance.hasTradePosition() && !transientInstance.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(transientInstance.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Open order state changed. Status:\" + orderState.m_status);\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(transientInstance);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.fireTradeOrderStatusChanged(transientInstance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, ClassTransformer transformer, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            MethodPair methodPair = transformer.methods.get(\"()V\" + method);\n            if (methodPair == null)\n            {\n                continue;\n            }\n            lineNumber = InvokerGenerator.printMethod(mv, clazz, method, Modifier.isStatic(methodPair.node.access), lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic MP3Reader(File file) throws FileNotFoundException {\n\t\tthis.file = file;\n\n\t\t\n\t\tfis = new FileInputStream(file);\n\t\tchannel = fis.getChannel();\n\t\ttry {\n\t\t\tmappedFile = channel.map(FileChannel.MapMode.READ_ONLY, 0, channel\n\t\t\t\t\t.size());\n\t\t} catch (IOException e) {\n\t\t\tlog.error(\"MP3Reader {}\", e);\n\t\t}\n\n\t\tmappedFile.order(ByteOrder.BIG_ENDIAN);\n\t\tin = IoBuffer.wrap(mappedFile);\n\t\tanalyzeKeyFrames();\n\n\t\tfirstTags.addFirst(createFileMeta());\n\n\t\tif (in.remaining() > 4) {\n\t\t\tsearchNextFrame();\n\t\t\tint pos = in.position();\n\t\t\tMP3Header header = readHeader();\n\t\t\tin.position(pos);\n\t\t\tif (header != null) {\n\t\t\t\tcheckValidHeader(header);\n\t\t\t} else {\n\t\t\t\tthrow new RuntimeException(\"No initial header found.\");\n\t\t\t}\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void createInstances() {\n        asadmin(\"create-node-ssh\", NODE_HOST_OPTION, LOCALHOST, FORCE_OPTION,\n                TRUE, LB_NODE1);\n        asadmin(\"create-node-ssh\", NODE_HOST_OPTION, LOCALHOST, FORCE_OPTION,\n                TRUE, LB_NODE2);\n\n        asadmin(\"create-cluster\", CLUSTER);\n\n        asadmin(\"create-instance\", CLUSTER_OPTION, CLUSTER, NODE_OPTION,\n                LB_NODE1, INSTANCE1);\n        asadmin(\"create-instance\", CLUSTER_OPTION, CLUSTER, NODE_OPTION,\n                LB_NODE2, INSTANCE2);\n        asadmin(\"create-instance\", CLUSTER_OPTION, CLUSTER, NODE_OPTION,\n                LB_NODE1, INSTANCE3);\n\n        asadmin(\"create-cluster\", CLUSTER2);\n\n        asadmin(\"create-instance\", CLUSTER_OPTION, CLUSTER2, NODE_OPTION,\n                LB_NODE1, INSTANCE4);\n        asadmin(\"create-instance\", CLUSTER_OPTION, CLUSTER2, NODE_OPTION,\n                LB_NODE2, INSTANCE5);\n\n        asadmin(\"create-instance\", NODE_OPTION, LB_NODE1, STANDALONE_INSTANCE1);\n        asadmin(\"create-instance\", NODE_OPTION, LB_NODE2, STANDALONE_INSTANCE2);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public ConeSound(MediaContainer soundData,\n                     float initialGain,\n                     int loopCount,\n                     boolean release,\n                     boolean continuous,\n                     boolean enable,\n                     Bounds  region,\n                     float   priority,\n                     float posX, float posY, float posZ,\n                     float[] distance,\n                     float[] distanceGain,\n                     float dirX, float dirY, float dirZ,\n                     float[] angle,\n                     float[] angularGain,\n                     float[] frequencyCutoff) {\n        super(soundData, initialGain, loopCount, release, continuous, enable,\n                     region, priority, posX, posY, posZ,\n                     distance, distanceGain );\n\n        setDefaultReadCapabilities(readCapabilities);\n\n        ((ConeSoundRetained)this.retained).setDirection(dirX, dirY, dirZ);\n        ((ConeSoundRetained)this.retained).setAngularAttenuation(angle,\n                     angularGain, frequencyCutoff);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate String endCapture() {\n    int end = current == -1 ? index : index - 1;\n    String captured;\n    if( captureBuffer.length() > 0 ) {\n      captureBuffer.append( buffer, captureStart, end - captureStart );\n      captured = captureBuffer.toString();\n      captureBuffer.setLength( 0 );\n    } else {\n      captured = new String( buffer, captureStart, end - captureStart );\n    }\n    captureStart = -1;\n    return captured;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate Component buildHeader() {\n        HorizontalLayout header = new HorizontalLayout();\n        header.addStyleName(\"viewheader\");\n        header.setSpacing(true);\n\n        titleLabel = new Label(MsgUtil.getMsgFallbackToSelf(messageSource, \"view.dashboard.\", \"title\"));\n        titleLabel.setId(TITLE_ID);\n        titleLabel.setSizeUndefined();\n        titleLabel.addStyleName(ValoTheme.LABEL_H1);\n        titleLabel.addStyleName(ValoTheme.LABEL_NO_MARGIN);\n        header.addComponent(titleLabel);\n\n        \n        \n        return header;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\n\n\tprivate void adaptToEnablementChange(HighlightingStyle highlighting, PropertyChangeEvent event) {\n\t\tObject value = event.getNewValue();\n\t\tboolean eventValue;\n\t\tif (value instanceof Boolean)\n\t\t\teventValue = ((Boolean) value).booleanValue();\n\t\telse if (IPreferenceStore.TRUE.equals(value))\n\t\t\teventValue = true;\n\t\telse\n\t\t\teventValue = false;\n\t\thighlighting.setEnabled(eventValue);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate boolean isLinked(String nodeIdInQuestion, Node nodeThatCouldBeRoutedTo,\n            NetworkedNode root, Node me, List<NodeGroupLink> allLinks) {\n        if (root != null) {\n            if (nodeIdInQuestion != null && nodeThatCouldBeRoutedTo != null\n                    && !nodeIdInQuestion.equals(nodeThatCouldBeRoutedTo.getNodeId())) {\n                NetworkedNode networkedNodeInQuestion = root.findNetworkedNode(nodeIdInQuestion);\n                NetworkedNode networkedNodeThatCouldBeRoutedTo = root\n                        .findNetworkedNode(nodeThatCouldBeRoutedTo.getNodeId());\n                if (networkedNodeInQuestion != null) {\n                    if (networkedNodeInQuestion.isInParentHierarchy(nodeThatCouldBeRoutedTo\n                            .getNodeId())) {\n                        return true;\n                    }\n\n                    String createdAtNodeId = networkedNodeInQuestion.getNode().getCreatedAtNodeId();\n                    if (createdAtNodeId != null\n                            && !createdAtNodeId.equals(me.getNodeId())\n                            && !networkedNodeInQuestion.getNode().getNodeId()\n                                    .equals(me.getNodeId())) {\n                        if (createdAtNodeId.equals(nodeThatCouldBeRoutedTo.getNodeId())) {\n                            return true;\n                        } else if (networkedNodeThatCouldBeRoutedTo != null) {\n                            return networkedNodeThatCouldBeRoutedTo\n                                    .isInChildHierarchy(createdAtNodeId);\n                        }\n                    }\n\n                    String groupId = networkedNodeInQuestion.getNode().getNodeGroupId();\n                    Set<String> groupsThatWillBeInterested = new HashSet<String>();\n                    for (NodeGroupLink nodeGroupLink : allLinks) {\n                        if (nodeGroupLink.getTargetNodeGroupId().equals(groupId)) {\n                            groupsThatWillBeInterested.add(nodeGroupLink.getSourceNodeGroupId());\n                        } else if (nodeGroupLink.getSourceNodeGroupId().equals(groupId)) {\n                            groupsThatWillBeInterested.add(nodeGroupLink.getTargetNodeGroupId());\n                        }\n                    }\n\n                    if (groupsThatWillBeInterested.contains(nodeThatCouldBeRoutedTo\n                            .getNodeGroupId())) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                } else {\n                    return false;\n                }\n                \n            } else {\n                return true;\n            }\n        } else {\n            return false;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public CallNode(\n        ParseRegion region,\n        String name,\n        Syntax syntax,\n        List<ParseTreeNode> args)\n    {\n        this.region = region;\n        assert name != null;\n        assert syntax != null;\n        assert args != null;\n        this.name = name;\n        this.syntax = syntax;\n        this.argList = args;\n\n        switch (syntax) {\n        case Braces:\n            assert name.equals(\"{}\");\n            break;\n        case Parentheses:\n            assert name.equals(\"()\");\n            break;\n        case Internal:\n            assert name.startsWith(\"$\");\n            break;\n        case Empty:\n            assert name.equals(\"\");\n            break;\n        default:\n            assert !name.startsWith(\"$\")\n                && !name.equals(\"{}\")\n                && !name.equals(\"()\");\n            break;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tprivate void completeAddAppWidget(Intent data, CellLayout.CellInfo cellInfo) {\n\t\tBundle extras = data.getExtras();\n\t\tint appWidgetId = extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID, -1);\n\n\t\tLog.d(LOG_TAG, \"dumping extras content=\" + extras.toString());\n\n\t\tAppWidgetProviderInfo appWidgetInfo = appWidgetManager.getAppWidgetInfo(appWidgetId);\n\n\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic Result(DescriptiveStatistics latencies, SummaryStatistics throughputs, Map<String, DescriptiveStatistics> perHostLat, Map<String, SummaryStatistics> perHostThr) {\n\t\t\tthis.latencies = latencies;\n\t\t\tthis.throughputs = throughputs;\n\t\t\tthis.perHostLat = perHostLat;\n\t\t\tthis.perHostThr = perHostThr;\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static String stringFromStream(InputStream is) throws IOException {\n\t\tStringBuffer sb = new StringBuffer();\n\t    byte[] b = new byte[4096];\n\t    int n;\n\t    while((n = is.read(b)) != -1) {\n\t        sb.append(new String(b, 0, n));\n\t    }\n\t    return sb.toString();\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic Transformation(String type, String resource, FToken token_T, FToken token_H){\n\t\t\n\t\tthis.type = type;\n\t\tthis.resource = resource;\n\t\tthis.token_T = token_T;\n\t\tthis.token_H = token_H;\n\t\t\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2007.webservices.GetInvoiceProductsFromOpportunityRequest parse(java.io.File file) throws org.apache.xmlbeans.XmlException, java.io.IOException {\n          return (com.microsoft.schemas.crm._2007.webservices.GetInvoiceProductsFromOpportunityRequest) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( file, type, null ); }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tprivate void completeAddAppWidget(Intent data, CellLayout.CellInfo cellInfo) {\n\t\tBundle extras = data.getExtras();\n\t\tint appWidgetId = extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID, -1);\n\n\t\tLog.d(LOG_TAG, \"dumping extras content=\" + extras.toString());\n\n\t\tAppWidgetProviderInfo appWidgetInfo = appWidgetManager.getAppWidgetInfo(appWidgetId);\n\n\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode parse(org.apache.xmlbeans.xml.stream.XMLInputStream xis, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException, org.apache.xmlbeans.xml.stream.XMLStreamException {\n          return (com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( xis, type, options ); }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, ClassTransformer transformer, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            MethodPair methodPair = transformer.methods.get(\"()V\" + method);\n            if (methodPair == null)\n            {\n                continue;\n            }\n            lineNumber = InvokerGenerator.printMethod(mv, clazz, method, Modifier.isStatic(methodPair.node.access), lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public Matcher appendReplacement(StringBuffer sb, String replacement) {\n\n        if (first < 0)\n            throw new IllegalStateException(\"No match available\");\n\n        int cursor = 0;\n        StringBuilder result = new StringBuilder();\n\n        while (cursor < replacement.length()) {\n            char nextChar = replacement.charAt(cursor);\n            if (nextChar == '\\\\') {\n                cursor++;\n                nextChar = replacement.charAt(cursor);\n                result.append(nextChar);\n                cursor++;\n            } else if (nextChar == '$') {\n                cursor++;\n                int refNum = (int)replacement.charAt(cursor) - '0';\n                if ((refNum < 0)||(refNum > 9))\n                    throw new IllegalArgumentException(\n                        \"Illegal group reference\");\n                cursor++;\n\n                boolean done = false;\n                while (!done) {\n                    if (cursor >= replacement.length()) {\n                        break;\n                    }\n                    int nextDigit = replacement.charAt(cursor) - '0';\n                    if ((nextDigit < 0)||(nextDigit > 9)) { // not a number\n                        break;\n                    }\n                    int newRefNum = (refNum * 10) + nextDigit;\n                    if (groupCount() < newRefNum) {\n                        done = true;\n                    } else {\n                        refNum = newRefNum;\n                        cursor++;\n                    }\n                }\n                if (start(refNum) != -1 && end(refNum) != -1)\n                    result.append(text, start(refNum), end(refNum));\n            } else {\n                result.append(nextChar);\n                cursor++;\n            }\n        }\n        sb.append(text, lastAppendPosition, first);\n        sb.append(result);\n\n        lastAppendPosition = last;\n        return this;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tprivate void buildElements()\n\t{\n\t\tImage image = new Image(logo);\n\n\t\timage.setWidth(getWidth());\n\t\timage.setHeight(getHeight());\n\n\t\turlLabel = new Label(\"www.netthreads.co.uk\", skin, URL_LABEL_FONT, Color.WHITE);\n\n\t\tversionLabel = new Label(Box2DBumpers.VERSION_TEXT, skin, URL_LABEL_FONT, Color.WHITE);\n\n\t\ttable = new Table();\n\n\t\ttable.setSize((int) getWidth(), (int) getHeight());\n\n\t\ttable.row();\n\t\ttable.add(urlLabel).expandY().expandX();\n\t\ttable.row();\n\t\ttable.add(image);\n\t\ttable.row();\n\t\ttable.add(versionLabel).expandY().expandX();\n\n\t\ttable.pack();\n\n\t\ttable.setFillParent(true);\n\n\t\taddActor(table);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n\n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n\n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n\n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static Collection<AttributeValue<?>>\textractValues(String datatype, Field field, Object object) throws IllegalArgumentException, IllegalAccessException, DataTypeException {\n\t\tDataTypeFactory dtFactory = getDataTypeFactory();\n\t\tif (dtFactory == null) {\n\t\t\tlogger.error(\"Could not create data type factory\");\n\t\t\treturn null;\n\t\t}\n\t\tCollection<AttributeValue<?>> values = new ArrayList<AttributeValue<?>>();\n\t\tObject fieldObject = field.get(object);\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(fieldObject);\n\t\t}\n\t\tif (fieldObject == null) {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"field's object is null.\");\n\t\t\t}\n\t\t\treturn values;\n\t\t}\n\t\tif (field.get(object) instanceof Collection || field.get(object) instanceof Map) {\n\t\t\tCollection<?> objects = (Collection<?>) field.get(object);\n\t\t\tif (objects == null || objects.isEmpty()) {\n\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\tlogger.trace(\"empty collection\");\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"Object is a collection\");\n\t\t\t}\n\t\t\tfor (Object obj : objects) {\n\t\t\t\tvalues.add(extractValue(datatype, obj));\n\t\t\t}\n\t\t} else if (fieldObject.getClass().isArray()) {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"Object is an array\");\n\t\t\t}\n\t\t\tfor (int i = 0; i < Array.getLength(fieldObject); i++) {\n\t\t\t\tvalues.add(extractValue(datatype, Array.get(fieldObject, i)));\n\t\t\t}\n\t\t} else {\n\t\t\tvalues.add(extractValue(datatype, field.get(object)));\n\t\t}\n\t\treturn values;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public ConeSound(MediaContainer soundData,\n                     float initialGain,\n                     int loopCount,\n                     boolean release,\n                     boolean continuous,\n                     boolean enable,\n                     Bounds  region,\n                     float   priority,\n                     float posX, float posY, float posZ,\n                     float[] frontDistance,\n                     float[] frontDistanceGain,\n                     float[] backDistance,\n                     float[] backDistanceGain,\n                     float dirX, float dirY, float dirZ,\n                     float[] angle,\n                     float[] angularGain,\n                     float[] frequencyCutoff) {\n        super(soundData, initialGain, loopCount, release, continuous, enable,\n                     region, priority, posX, posY, posZ,\n                     frontDistance, frontDistanceGain );\n\n        setDefaultReadCapabilities(readCapabilities);\n\n        ((ConeSoundRetained)this.retained).setBackDistanceGain(\n                     backDistance, backDistanceGain );\n        ((ConeSoundRetained)this.retained).setDirection(dirX, dirY, dirZ);\n        ((ConeSoundRetained)this.retained).setAngularAttenuation(angle,\n                     angularGain, frequencyCutoff);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public Value<Integer> run(Integer intermediate, String userEmail) {\n      String prompt =\n          \"The intermediate result is \" + intermediate + \".\"\n               + \" Please give one more int\";\n      PromisedValue<Integer> oneMoreInt = newPromise();\n      ExternalAgentJob.getIntFromUser(prompt, userEmail, oneMoreInt.getHandle());\n      return oneMoreInt;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1],\n                col = (int)val[2];\n            float toSet = val[3];\n            \n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            table.setVal(row-1, col-1, toSet);\n            return toSet;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void Bld_all(Xoa_lang_mgr lang_mgr, Xoa_fsys_mgr fsys_mgr, Xol_lang_transform lang_transform) {\n\t\tIo_url lang_root = fsys_mgr.Cfg_lang_core_dir().OwnerDir();\n\t\tParse_mediawiki(lang_mgr, lang_root.GenSubDir(\"mediawiki\"), lang_transform);\n\t\tSave_langs(lang_mgr, lang_root.GenSubDir(Xol_mw_lang_parser.Dir_name_core), Ordered_hash_.New_bry(), Ordered_hash_.New_bry());\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr graph) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), graph});\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n        this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n        BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n        this.updateNaturalParameterPrior(prior);\n\n        return learntBN;\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static int compareWithConversion(Object v1, Object v2, boolean equals) {\n        int result;\n\n        if (v1 == v2) {\n            result = 0;\n        } else {\n            int t1 = getNumericType(v1),\n                    t2 = getNumericType(v2),\n                    type = getNumericType(t1, t2, true);\n\n            switch (type) {\n                case BIGINT:\n                    result = bigIntValue(v1).compareTo(bigIntValue(v2));\n                    break;\n\n                case BIGDEC:\n                    result = bigDecValue(v1).compareTo(bigDecValue(v2));\n                    break;\n\n                case NONNUMERIC:\n                    if ((t1 == NONNUMERIC) && (t2 == NONNUMERIC)) {\n                        if ((v1 == null) || (v2 == null)) {\n                            result = (v1 == v2) ? 0 : 1;\n                        } else {\n                            if (v1.getClass().isAssignableFrom(v2.getClass()) || v2.getClass().isAssignableFrom(v1.getClass())) {\n                                if (v1 instanceof Comparable) {\n                                    result = ((Comparable) v1).compareTo(v2);\n                                    break;\n                                } else {\n                                    if (equals) {\n                                        result = v1.equals(v2) ? 0 : 1;\n                                        break;\n                                    }\n                                }\n                            }\n                            if (equals) {\n                                result = 1;\n                                break;\n                            } else {\n                                throw new IllegalArgumentException(\"invalid comparison: \" + v1.getClass().getName() + \" and \" + v2.getClass().getName());\n                            }\n                        }\n                    }\n                case FLOAT:\n                case DOUBLE:\n                    double dv1 = doubleValue(v1),\n                            dv2 = doubleValue(v2);\n\n                    return (dv1 == dv2) ? 0 : ((dv1 < dv2) ? -1 : 1);\n\n                default:\n                    long lv1 = longValue(v1),\n                            lv2 = longValue(v2);\n\n                    return (lv1 == lv2) ? 0 : ((lv1 < lv2) ? -1 : 1);\n            }\n        }\n        return result;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic MP3Reader(File file) throws FileNotFoundException {\n\t\tthis.file = file;\n\n\t\t\n\t\tfis = new FileInputStream(file);\n\t\tchannel = fis.getChannel();\n\t\ttry {\n\t\t\tmappedFile = channel.map(FileChannel.MapMode.READ_ONLY, 0, channel\n\t\t\t\t\t.size());\n\t\t} catch (IOException e) {\n\t\t\tlog.error(\"MP3Reader {}\", e);\n\t\t}\n\n\t\tmappedFile.order(ByteOrder.BIG_ENDIAN);\n\t\tin = IoBuffer.wrap(mappedFile);\n\t\tanalyzeKeyFrames();\n\n\t\tfirstTags.addFirst(createFileMeta());\n\n\t\tif (in.remaining() > 4) {\n\t\t\tsearchNextFrame();\n\t\t\tint pos = in.position();\n\t\t\tMP3Header header = readHeader();\n\t\t\tin.position(pos);\n\t\t\tif (header != null) {\n\t\t\t\tcheckValidHeader(header);\n\t\t\t} else {\n\t\t\t\tthrow new RuntimeException(\"No initial header found.\");\n\t\t\t}\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private IFile getWorkspaceFile(IFileStore fileStore) {\n        IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();\n        IFile[] files = workspaceRoot.findFilesForLocationURI(fileStore.toURI());\n        if (files != null && files.length == 1)\n            return files[0];\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic static boolean putMapNotEmptyKeyAndValue(Map<String, String> map,\n\t\t\tString key, String value, String defaultValue) {\n\t\tif (map == null || StringUtil.isEmpty(key)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tmap.put(key, StringUtil.isEmpty(value) ? defaultValue : value);\n\t\treturn true;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(java.io.File file) throws org.apache.xmlbeans.XmlException, java.io.IOException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( file, type, null ); }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic boolean transformOne(GlyphLine line) {\n            if (line.idx >= line.end || line.idx < line.start)\n                return false;\n            Glyph g1 = line.get(line.idx);\n            if (!coverageSet.contains(g1.getCode()))\n                return false;\n            int c1 = classDef1.getOtfClass(g1.getCode());\n            PairValueFormat[] pvs = posSubs.get(c1);\n            if (pvs == null)\n                return false;\n            GlyphIndexer gi = new GlyphIndexer();\n            gi.line = line;\n            gi.idx = line.idx;\n            gi.nextGlyph(openReader, lookupFlag);\n            if (gi.glyph == null)\n                return false;\n            Glyph g2 = gi.glyph;\n            int c2 = classDef2.getOtfClass(g2.getCode());\n            if (c2 >= pvs.length)\n                return false;\n            PairValueFormat pv = pvs[c2];\n            line.set(line.idx, new Glyph(g1, 0, 0, pv.first.XAdvance, pv.first.YAdvance, 0));\n            line.set(gi.idx, new Glyph(g2, 0, 0, pv.second.XAdvance, pv.second.YAdvance, 0));\n            line.idx = gi.idx;\n            return true;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n    public void testLogMessage() throws Exception {\n        this.listener.setThreshold(50);\n        this.listener.setThresholdTimeUnit(TimeUnit.MILLISECONDS);\n\n        ExecutionInfo executionInfo = new ExecutionInfo();\n        QueryInfo queryInfo = new QueryInfo();\n        queryInfo.setQuery(\"SELECT 1\");\n        List<QueryInfo> queryInfos = new ArrayList<QueryInfo>();\n        queryInfos.add(queryInfo);\n\n        this.listener.beforeQuery(executionInfo, queryInfos);\n        TimeUnit.MILLISECONDS.sleep(100);\n        this.listener.afterQuery(executionInfo, queryInfos);\n\n        InMemoryCommonsLog log = (InMemoryCommonsLog) this.listener.getLog();\n        List<String> messages = log.getWarnMessages();\n        assertThat(messages).hasSize(1);\n        assertThat(messages.get(0)).contains(\"SELECT 1\");\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr graph) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), graph});\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    protected List<EMConversation> loadConversationList(){\n        Map<String, EMConversation> conversations = EMClient.getInstance().chatManager().getAllConversations();\n        List<Pair<Long, EMConversation>> sortList = new ArrayList<Pair<Long, EMConversation>>();\n        \n        synchronized (conversations) {\n            for (EMConversation conversation : conversations.values()) {\n                if (conversation.getAllMessages().size() != 0) {\n                    sortList.add(new Pair<Long, EMConversation>(conversation.getLastMessage().getMsgTime(), conversation));\n                }\n            }\n        }\n        try {\n            sortConversationByLastChatTime(sortList);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        List<EMConversation> list = new ArrayList<EMConversation>();\n        for (Pair<Long, EMConversation> sortItem : sortList) {\n            list.add(sortItem.second);\n        }\n        return list;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static void addShaped(RecipeDifficulty difficulty, ItemStack result, Object... recipe) {\n        if (difficulty != ALL && RecipeDifficulty.getDifficulty() != difficulty) {\n            return;\n        }\n\n        boolean isOre = false;\n\n        if (!isEnabled(result)) {\n            return;\n        }\n\n        for (int i = 3; i < recipe.length; i++) {\n            if (recipe[i] instanceof String) {\n                isOre = true;\n            }\n\n            if (!isEnabled(recipe[i])) {\n                return;\n            }\n        }\n\n        if (isOre) {\n            ResourceLocation location = getNameForRecipe(result);\n            ShapedOreRecipe shapedOreRecipe = new ShapedOreRecipe(location, result, recipe);\n            shapedOreRecipe.setRegistryName(location);\n            GameData.register_impl(shapedOreRecipe);\n        }\n        else {\n            ResourceLocation location = getNameForRecipe(result);\n            CraftingHelper.ShapedPrimer primer = CraftingHelper.parseShaped(recipe);\n            ShapedRecipes shapedRecipes = new ShapedRecipes(result.getItem().getRegistryName().toString(), primer.width, primer.height, primer.input, result);\n            shapedRecipes.setRegistryName(location);\n            GameData.register_impl(shapedRecipes);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + order.m_lmtPrice +\n        \" auxPrice=\" + order.m_auxPrice +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + order.m_minQty +\n        \" percentOffset=\" + order.m_percentOffset +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + order.m_nbboPriceCap +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + order.m_startingPrice +\n        \" stockRefPrice=\" + order.m_stockRefPrice +\n        \" delta=\" + order.m_delta +\n        \" stockRangeLower=\" + order.m_stockRangeLower +\n        \" stockRangeUpper=\" + order.m_stockRangeUpper +\n        \" volatility=\" + order.m_volatility +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + order.m_trailStopPrice +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + order.m_basisPoints;\n        \t\tmsg += \" basisPointsType=\" + order.m_basisPointsType;\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void requestListViewData() {\n        mBllUser = new BusinessUser(this);\n        mBllServer = new BusinessServer(this);\n        mListMap = new ArrayList<Map<String, Object>>();\n        mBllUser.userServerOrderList((position + 1) + \"\", pageNum + \"\");\n\n\n        mAdapterWaitdeliver = new AdapterFrgServerOrderWaitSer(getActivity(), this, mListMap);\n        mListView.setAdapter(mAdapterWaitdeliver);\n\n        mListView.setMode(PullToRefreshBase.Mode.PULL_FROM_END);\n        mListView.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener2<ListView>() {\n            @Override\n            public void onPullDownToRefresh(PullToRefreshBase<ListView> refreshView) {\n                LogUtils.e(\"onPullDownToRefresh=====================>\");\n            }\n\n            @Override\n            public void onPullUpToRefresh(PullToRefreshBase<ListView> refreshView) {\n                LogUtils.e(\"onPullUpToRefresh=====================>\");\n                if (totalPage > 0 && totalPage > pageNum) {\n                    pageNum++;\n                    mBllUser.userServerOrderList((position + 1) + \"\", pageNum + \"\");\n                } else {\n                    mListView.postDelayed(new Runnable() {\n                        @Override\n                        public void run() {\n                            mListView.onRefreshComplete();\n                        }\n                    }, 1000);\n                }\n            }\n        });\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public MissionData(String missionName, String missionId, float lengthOfGameMinutes,\n            float lengthOfIntervalMinutes, float challengePaceMinutesPerMile,\n            HashMap<String, Moment> allMoments, String firstMomentId, String currentMomentId) {\n        this.mMissionName = missionName;\n        this.mMissionId = missionId;\n        this.mLengthOfMissionMinutes = lengthOfGameMinutes;\n        this.mLengthOfIntervalMinutes = lengthOfIntervalMinutes;\n        this.mChallengePaceMinutesPerMile = challengePaceMinutesPerMile;\n        this.mAllMoments = allMoments;\n        this.mFirstMomentId = firstMomentId;\n        this.mCurrentMomentId = currentMomentId;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\tChannel channel = ctx.channel();\n\t\t\tchannels.remove(channel);\n\t\t\tNode client = channel.attr(STATE).get();\n\t\t\tuserLinkList.delUser(client);\n\t\t\tcombobox.removeItem(client.username);\n\t\t\tsuper.channelUnregistered(ctx);\n\t\t\tbroadcasts(new LoginOutMessage(client.username));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tprotected void initEnablementBehaviours(List<EnablementBehaviour> enablementBehaviours) {\n\t\tenablementBehaviours.add(new WithinLegalLayerBoundsBehaviour());\n\t\tenablementBehaviours.add(new ValidToolDetectionActivator(new Class[] {\n\t\t\t\tGeometry.class,\n\t\t\t\tPolygon.class,\n\t\t\t\tMultiPolygon.class,\n\t\t\t\tLineString.class,\n\t\t\t\tMultiLineString.class }));\n\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n     public ConeSound(MediaContainer soundData,\n                      float initialGain,\n                      Point3f position,\n                      Vector3f direction) {\n\n        super(soundData, initialGain, position );\n\n        setDefaultReadCapabilities(readCapabilities);\n\n        ((ConeSoundRetained)this.retained).setDirection(direction);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void performDismiss() {\n\n        final ViewGroup.LayoutParams lp = mView.getLayoutParams();\n        final int originalHeight = mView.getHeight();\n\n        ValueAnimator animator = ValueAnimator.ofInt(originalHeight, 1)\n                .setDuration(mAnimationTime);\n\n        animator.addListener(new AnimatorListenerAdapter() {\n\n            @Override\n            public void onAnimationEnd(Animator animation) {\n\n                mCallback.onDismiss(mView);\n\n            }\n\n        });\n\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n\n                lp.height = (Integer) valueAnimator.getAnimatedValue();\n                mView.setLayoutParams(lp);\n\n            }\n\n        });\n\n        animator.start();\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Deprecated\n    public static boolean isJavaLetterOrDigit(char ch) {\n        return isJavaIdentifierPart(ch);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public int hashCode() {\n      int result = hashCode;\n      if (result == 0) {\n        result = mac != null ? mac.hashCode() : 0;\n        result = result * 37 + (location != null ? location.hashCode() : 0);\n        result = result * 37 + (channel != null ? channel.hashCode() : 0);\n        hashCode = result;\n      }\n      return result;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static void main(String[] args) {\n        try {\n            Method method = android.os.Process.class.getDeclaredMethod(\"setArgV0\", String.class);\n            method.setAccessible(true);\n            method.invoke(null, PROCESS);\n            LogUtil.i(\"Set process name success\");\n        } catch (Exception e) {\n            LogUtil.e(\"Set process name failed:\" + e.toString());\n        }\n        ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n        Class<?> clz;\n        try {\n            clz = classLoader.loadClass(\"android.ddm.DdmHandleAppName\");\n        } catch (ClassNotFoundException e) {\n            LogUtil.w(\"Set DDM name failed:\" + e.toString());\n            clz = null;\n        }\n        if (clz != null) {\n            try {\n                Method method = clz.getDeclaredMethod(\"setAppName\", String.class);\n                method.invoke(clz, PROCESS);\n                LogUtil.i(\"Set process name success with M1\");\n            } catch (Exception e) {\n                try {\n                    Method method = clz.getDeclaredMethod(\"setAppName\", String.class, int.class);\n                    method.invoke(clz, PROCESS, 0);\n                    LogUtil.i(\"Set process name success with M2\");\n                } catch (Exception ex) {\n                    LogUtil.w(\"Set DDM name failed:\" + ex.toString());\n                }\n            }\n        }\n        Looper.prepare();\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (sPower) {\n                    String cmd = String.format(\"am startservice%s-n com.stkj.newslocker/\" +\n                                    \"com.stkj.newslocker.services.LockService\",\n                            SysUtil.isAfter17() ? \" --user 0 \" : \" \");\n                    LogUtil.i(\"CMD exec \" + cmd);\n                    try {\n                        Runtime.getRuntime().exec(cmd);\n                    } catch (IOException e) {\n                        LogUtil.w(\"CMD exec failed:\" + e.toString());\n                        Intent intent = new Intent();\n                        ComponentName component = new ComponentName(\"com.stkj.newslocker\",\n                                LockService.class.getName());\n                        intent.setComponent(component);\n                        IActivityManager am = ActivityManagerNative.getDefault();\n                        Method method;\n                        try {\n                            method = am.getClass().getMethod(\"startService\",\n                                    IApplicationThread.class, Intent.class, String.class,\n                                    int.class);\n                            Object cn = method.invoke(am, null, intent, intent.getType(), 0);\n                            LogUtil.i(\"start service return: \" + cn);\n                        } catch (NoSuchMethodException ex) {\n                            try {\n                                method = am.getClass().getMethod(\"startService\",\n                                        IApplicationThread.class, Intent.class, String.class);\n                                Object cn = method.invoke(am, null, intent, intent.getType());\n                                LogUtil.i(\"start service return: \" + cn);\n                            } catch (NoSuchMethodException exc) {\n                                LogUtil.i(\"start service method not found: \" + exc);\n                            } catch (Exception exc) {\n                                LogUtil.e(\"Start service failed:\" + exc.toString());\n                            }\n                        } catch (Exception ex) {\n                            LogUtil.e(\"Start service failed:\" + ex.toString());\n                        }\n                    }\n                    try {\n                        Thread.sleep(180000);\n                    } catch (InterruptedException e) {\n                        LogUtil.w(\"Thread sleep failed:\" + e.toString());\n                    }\n                }\n            }\n        }).start();\n        Looper.loop();\n        LogUtil.i(\"====================Daemon exit with error====================\");\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n    public void testSum() throws Exception {\n        String sqlText =\n                String.format(\"SELECT empnum, dept, salary, sum(salary) over (Partition by dept ORDER BY salary) as sumsal \" +\n                                \"from %s --SPLICE-PROPERTIES useSpark = %s \\n order by dept, empnum\",\n                        this.getTableReference(EMPTAB), useSpark);\n\n        ResultSet rs = methodWatcher.executeQuery(sqlText);\n        String expected =\n                \"EMPNUM |DEPT |SALARY |SUMSAL |\\n\" +\n                        \"------------------------------\\n\" +\n                        \"  10   |  1  | 50000 | 50000 |\\n\" +\n                        \"  20   |  1  | 75000 |282000 |\\n\" +\n                        \"  50   |  1  | 52000 |154000 |\\n\" +\n                        \"  55   |  1  | 52000 |154000 |\\n\" +\n                        \"  60   |  1  | 78000 |436000 |\\n\" +\n                        \"  70   |  1  | 76000 |358000 |\\n\" +\n                        \"  110  |  1  | 53000 |207000 |\\n\" +\n                        \"  40   |  2  | 52000 |155000 |\\n\" +\n                        \"  44   |  2  | 52000 |155000 |\\n\" +\n                        \"  49   |  2  | 53000 |208000 |\\n\" +\n                        \"  90   |  2  | 51000 | 51000 |\\n\" +\n                        \"  30   |  3  | 84000 |293000 |\\n\" +\n                        \"  80   |  3  | 79000 |209000 |\\n\" +\n                        \"  100  |  3  | 55000 | 55000 |\\n\" +\n                        \"  120  |  3  | 75000 |130000 |\";\n        assertEquals(\"\\n\"+sqlText+\"\\n\", expected, TestUtils.FormattedResult.ResultFactory.toStringUnsorted(rs));\n        rs.close();\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic Transformation(String type, String resource, FToken token_T, FToken token_H){\n\t\t\n\t\tthis.type = type;\n\t\tthis.resource = resource;\n\t\tthis.token_T = token_T;\n\t\tthis.token_H = token_H;\n\t\t\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        int length = bytes.size();\n        char[] chars = new char[length]; // This is sized to avoid a realloc.\n        int outAt = 0;\n\n        for (int at = 0; length > 0; ) {\n            int v0 = bytes.getUnsignedByte(at);\n            char out;\n            switch (v0 >> 4) {\n                case 0x00: case 0x01: case 0x02: case 0x03:\n                case 0x04: case 0x05: case 0x06: case 0x07: {\n                    length--;\n                    if (v0 == 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    out = (char) v0;\n                    at++;\n                    break;\n                }\n                case 0x0c: case 0x0d: {\n                    length -= 2;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes.getUnsignedByte(at + 1);\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int value = ((v0 & 0x1f) << 6) | (v1 & 0x3f);\n                    if ((value != 0) && (value < 0x80)) {\n                        \n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    out = (char) value;\n                    at += 2;\n                    break;\n                }\n                case 0x0e: {\n                    length -= 3;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes.getUnsignedByte(at + 1);\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int v2 = bytes.getUnsignedByte(at + 2);\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    int value = ((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) |\n                        (v2 & 0x3f);\n                    if (value < 0x800) {\n                        \n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    out = (char) value;\n                    at += 3;\n                    break;\n                }\n                default: {\n                    return throwBadUtf8(v0, at);\n                }\n            }\n            chars[outAt] = out;\n            outAt++;\n        }\n\n        return new String(chars, 0, outAt);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static String loadJSONFromAsset(Context context, String filename) {\n\t\tString json;\n\t\ttry {\n\n\t\t\tInputStream is = context.getAssets().open(\"json/\" +filename+\".json\");\n\n\t\t\tint size = is.available();\n\n\t\t\tbyte[] buffer = new byte[size];\n\n\t\t\tis.read(buffer);\n\t\t\t\n\t\t\tis.close();\n\n\t\t\tjson = new String(buffer, \"UTF-8\");\n\t\t\tLog.v(\"AppUtils\", \"JSONArray=>\"+json);\n\t\t} catch (IOException ex) {\n\t\t\tex.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\t\treturn json;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(byte[] bytes, int start, int length) {\n        char[] chars = localBuffer.get();\n        if (chars == null || chars.length < length) {\n            chars = new char[length];\n            localBuffer.set(chars);\n        }\n        int outAt = 0;\n\n        for (int at = start; length > 0; ) {\n            int v0 = bytes[at] & 0xFF;\n            char out;\n            switch (v0 >> 4) {\n                case 0x00: case 0x01: case 0x02: case 0x03:\n                case 0x04: case 0x05: case 0x06: case 0x07: {\n                    length--;\n                    if (v0 == 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    out = (char) v0;\n                    at++;\n                    break;\n                }\n                case 0x0c: case 0x0d: {\n                    length -= 2;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int value = ((v0 & 0x1f) << 6) | (v1 & 0x3f);\n                    if ((value != 0) && (value < 0x80)) {\n                        \n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    out = (char) value;\n                    at += 2;\n                    break;\n                }\n                case 0x0e: {\n                    length -= 3;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int v2 = bytes[at + 2] & 0xFF;\n                    if ((v2 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    int value = ((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) |\n                            (v2 & 0x3f);\n                    if (value < 0x800) {\n                        \n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    out = (char) value;\n                    at += 3;\n                    break;\n                }\n                default: {\n                    return throwBadUtf8(v0, at);\n                }\n            }\n            chars[outAt] = out;\n            outAt++;\n        }\n\n        return new String(chars, 0, outAt);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n        this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n        BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n        this.updateNaturalParameterPrior(prior);\n\n        return learntBN;\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public Kernel(int width, int height, float data[]) {\n        this.width  = width;\n        this.height = height;\n        this.xOrigin  = (width-1)>>1;\n        this.yOrigin  = (height-1)>>1;\n        int len = width*height;\n        if (data.length < len) {\n            throw new IllegalArgumentException(\"Data array too small \"+\n                                               \"(is \"+data.length+\n                                               \" and should be \"+len);\n        }\n        this.data = new float[len];\n        System.arraycopy(data, 0, this.data, 0, len);\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static final void writeIntLittleEndian(byte[] array, int pos,\n\t    int value) {\n\tarray[pos + 3] = (byte) (value >>> 24);\n\tarray[pos + 2] = (byte) (value >>> 16);\n\tarray[pos + 1] = (byte) (value >>> 8);\n\tarray[pos] = (byte) (value & 0xFF);\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static Map<String, String> arrayToMap(String[] a) {\n        Map<String, String> m = new HashMap<String, String>();\n        for (int i = 0; i < a.length; i += 2) {\n            m.put(a[i], a[i + 1]);\n        }\n        return m;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tpublic ID scrapeID() {\n\t\tElement idElement = document.select(\"div.container p:contains(ID:)\").first();\n\t\tif(idElement != null)\n\t\t{\n\t\t\tString idText = idElement.text().trim();\n\t\t\tidText = idText.replaceFirst(Pattern.quote(\"ID: \"), \"\");\n\t\t\treturn new ID(idText);\n\t\t}\n\t\telse return ID.BLANK_ID;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void quadrantRotate(int numquadrants) {\n        switch (numquadrants & 3) {\n        case 0:\n            break;\n        case 1:\n            rotate90();\n            break;\n        case 2:\n            rotate180();\n            break;\n        case 3:\n            rotate270();\n            break;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, ClassTransformer transformer, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            MethodPair methodPair = transformer.methods.get(\"()V\" + method);\n            if (methodPair == null)\n            {\n                continue;\n            }\n            lineNumber = InvokerGenerator.printMethod(mv, clazz, method, Modifier.isStatic(methodPair.node.access), lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public final boolean isConstant() {\n    if (this.getVariableDecls().length > 0) return false;\n\n    this.levelCheck(1) ;\n      \n    OpDefNode[] opDefs = this.getOpDefs();\n    for (int i = 0; i < opDefs.length; i++) {\n      if (opDefs[i].getKind() != ModuleInstanceKind &&\n          opDefs[i].getBody().getLevel() != ConstantLevel)\n        return false;\n    }\n\n    for (int i = 0; i < theoremVec.size(); i++) {\n      if (((TheoremNode)(theoremVec.elementAt(i))).getLevel() != ConstantLevel) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public com.google.protobuf.ByteString\n        getSendInfoBytes() {\n      java.lang.Object ref = sendInfo_;\n      if (ref instanceof java.lang.String) {\n        com.google.protobuf.ByteString b = \n            com.google.protobuf.ByteString.copyFromUtf8(\n                (java.lang.String) ref);\n        sendInfo_ = b;\n        return b;\n      } else {\n        return (com.google.protobuf.ByteString) ref;\n      }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps) {\n            return setImageAttachmentsForObject(objectProperty, bitmaps, false);\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static void solve(int n) {\n\t\tHashSet<String> all = new HashSet<String>();\n\t\tint[] factors;\n\t\tArrayList<int[]> comb;\n\t\tfor (int i = 0; i <= n * n; ++i) {\n\t\t\tfactors = getFactors(i, n);\n\t\t\tcomb = twoPair(factors, i);\n\t\t\tfor (int[] left : comb) {\n\t\t\t\tfor (int[] right : comb) {\n\t\t\t\t\taddFour(left[0], left[1], right[0], right[1], all);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (String str : all) {\n\t\t\tSystem.out.println(str);\t\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1];\n            int col = 1;\n            if (val.length > 2)\n                col = Math.max(1, (int)val[2]);\n\n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            Object o = table.data.get(row-1)[col-1];\n            if (o instanceof Float)\n                return (Float)o;\n            return 0f;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void registerReceiver() {\n\t\tIntentFilter updateIntent = new IntentFilter();\n\t\tupdateIntent.addAction(ACTION_UPDATE_WEATHER);\n\t\tupdateIntent.addAction(ACTION_SWITH_CITY);\n\t\tupdateIntent.addAction(ACTION_NEXT_CITY);\n\t\tupdateIntent.addAction(ACTION_TIME_SET);\n\t\tupdateIntent.addAction(Intent.ACTION_TIME_TICK);\n\t\tupdateIntent.addAction(Intent.ACTION_DATE_CHANGED);\n\t\tupdateIntent.addAction(Intent.ACTION_TIMEZONE_CHANGED);\n\t\tregisterReceiver(mTimePickerBroadcast, updateIntent);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tpublic void onClick(View v) {\n\t\tautoTest = false;\n\t\tswitch (v.getId()) {\n\t\tcase R.id.normal_btn:\n\t\t\tif (layout == null)\n\t\t\t\treturn;\n\t\t\tAdViewLayout.isTest = false;\n\t\t\tadViewLayout = new AdViewLayout(this, sdkKey);\n\t\t\tbreak;\n\t\t}\n\t\tif (null != adViewLayout) {\n\t\t\tAdViewUtil.logInfo(\"setInterFace\");\n\t\t\tadViewLayout.setAdViewInterface(this);\n\t\t\tlayout.removeAllViews();\n\t\t\tlayout.addView(adViewLayout);\n\t\t\tlayout.invalidate();\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    protected void initEnablementBehaviours( List<EnablementBehaviour> helper ) {\n        helper.add(new ValidToolDetectionActivator(new Class[]{Geometry.class, LineString.class, MultiLineString.class,\n                Polygon.class, MultiPolygon.class, Point.class, MultiPoint.class}));\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static Matrix getDistanceMatrix(Atom[] ca1, Atom[]ca2){\n        \n      int r = ca1.length;\n      int c = ca2.length;\n      \n      Matrix out = new Matrix(r,c);\n      \n      for (int i=0; i<r; i++) {\n          Atom a1 = ca1[i];\n          for (int j=0;j<c;j++){\n              Atom b1 = ca2[j];\n            \n              try {\n                  double d = Calc.getDistance(a1,b1);\n                  out.set(i,j,d);\n              } catch (StructureException e) {\n                  e.printStackTrace();\n                  out.set(i,j,999);\n              }\n          }\n      }\n      return out;  \n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void printMethods() {\n\t\tif (TypeUtil.isClassLike(type)) {\n\t\t\tfor (List<IMethodBinding> e : methods.values()) {\n\t\t\t\tfor (IMethodBinding mb : e) {\n\t\t\t\t\taccess = TransformUtil.declareBridge(ctx, out, type, mb,\n\t\t\t\t\t\t\tdeps, access);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tList<IMethodBinding> superMethods = hiddenMethods(type, ctx, methods);\n\n\t\tfor (IMethodBinding mb : superMethods) {\n\t\t\taccess = printAccess(out, mb.getModifiers(), access);\n\t\t\tprint(i1);\n\t\t\tTransformUtil.printSignature(ctx, out, type,\n\t\t\t\t\tmb.getMethodDeclaration(), deps, false);\n\t\t\tif (Modifier.isAbstract(mb.getModifiers())) {\n\t\t\t\tprint(\" = 0\");\n\t\t\t}\n\n\t\t\tprintln(\";\");\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\n    public static Bitmap fastblur(Context context, Bitmap sentBitmap, float radius) {\n\n        if (Build.VERSION.SDK_INT > 16 &&\n                    (!Build.MODEL.contains(\"google_sdk\")\n                             && !Build.MODEL.contains(\"Emulator\")\n                             && !Build.MODEL.contains(\"Android SDK\")\n                             && !Build.FINGERPRINT.contains(\"vbox86p\"))) {\n            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n            final RenderScript rs = RenderScript.create(context);\n            final Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n                                                                 Allocation.USAGE_SCRIPT);\n            final Allocation output = Allocation.createTyped(rs, input.getType());\n            final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n            script.setRadius(radius );\n            script.setInput(input);\n            script.forEach(output);\n            output.copyTo(bitmap);\n            return bitmap;\n        }\n\n        radius *= 0.1;\n        return blurfast(sentBitmap, (int) radius);\n\n\n\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic ContentAssistCommandAdapter(Control control,\n\t\t\tIControlContentAdapter controlContentAdapter,\n\t\t\tIContentProposalProvider proposalProvider, String commandId,\n\t\t\tchar[] autoActivationCharacters, boolean installDecoration) {\n\t\tsuper(control, controlContentAdapter, proposalProvider, null,\n\t\t\t\tautoActivationCharacters);\n\t\tthis.commandId = commandId;\n\t\tif (commandId == null) {\n\t\t\tthis.commandId= IWorkbenchCommandConstants.EDIT_CONTENT_ASSIST;\n\t\t}\n\n\t\tif (autoActivationCharacters == null) {\n\t\t\tthis.setAutoActivationCharacters(new char[] {});\n\t\t}\n\t\tsetAutoActivationDelay(DEFAULT_AUTO_ACTIVATION_DELAY);\n\n\t\tthis.handlerService = PlatformUI.getWorkbench()\n\t\t\t\t.getService(IHandlerService.class);\n\n\t\taddListeners(control);\n\n\t\tif (control.isFocusControl()) {\n\t\t\tactivateHandler();\n\t\t}\n\n\t\tif (installDecoration) {\n\t\t\tdecoration = new ControlDecoration(control, SWT.TOP | SWT.LEFT);\n\t\t\tdecoration.setShowOnlyOnFocus(true);\n\t\t\tFieldDecoration dec = getContentAssistFieldDecoration();\n\t\t\tdecoration.setImage(dec.getImage());\n\t\t\tdecoration.setDescriptionText(dec.getDescription());\n\t\t}\n\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void quadrantRotate(int numquadrants) {\n        switch (numquadrants & 3) {\n        case 0:\n            break;\n        case 1:\n            rotate90();\n            break;\n        case 2:\n            rotate180();\n            break;\n        case 3:\n            rotate270();\n            break;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        PartialSufficientSatistics partialSufficientSatistics = PartialSufficientSatistics.createZeroPartialSufficientStatistics(efBayesianNetwork);\n        partialSufficientSatistics.copy(this.sumSS);\n        partialSufficientSatistics.normalize();\n        SufficientStatistics finalSS = efBayesianNetwork.createZeroSufficientStatistics();\n        finalSS.sum(partialSufficientSatistics.getCompoundVector());\n\n        efBayesianNetwork.setMomentParameters(finalSS);\n        return efBayesianNetwork.toBayesianNetwork(dag);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void actionPerformed(ActionEvent e) {\n            int i = 0;\n            for (i = 0; i < runners.size(); i++) {\n                if (runners.get(i).isAlive())\n                    break;\n            }\n\n            if (i == runners.size()) {\n                Display.getDefault().asyncExec(new Runnable() {\n                    public void run() {\n                        stop(true);\n                        setButton(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);\n                    }\n                });\n\n\n            }\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public Quaternion multiplyLocal(final double scalar) {\n        setX(getX() * scalar);\n        setY(getY() * scalar);\n        setZ(getZ() * scalar);\n        setW(getW() * scalar);\n        return this;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        return CharacterData.of(codePoint).isIdentifierIgnorable(codePoint);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\n\n\tprivate void adaptToEnablementChange(HighlightingStyle highlighting, PropertyChangeEvent event) {\n\t\tObject value = event.getNewValue();\n\t\tboolean eventValue;\n\t\tif (value instanceof Boolean)\n\t\t\teventValue = ((Boolean) value).booleanValue();\n\t\telse if (IPreferenceStore.TRUE.equals(value))\n\t\t\teventValue = true;\n\t\telse\n\t\t\teventValue = false;\n\t\thighlighting.setEnabled(eventValue);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static Mat zeros(Size size, int type)\n    {\n\n        Mat retVal = new Mat(n_zeros(size.width, size.height, type));\n\n        return retVal;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n     public ConeSound(MediaContainer soundData,\n                      float initialGain,\n                      Point3f position,\n                      Vector3f direction) {\n\n        super(soundData, initialGain, position );\n\n        setDefaultReadCapabilities(readCapabilities);\n\n        ((ConeSoundRetained)this.retained).setDirection(direction);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate OnClickListener getClickListener(final CardStack cardStack,\n            final RelativeLayout container, final int index) {\n        return new OnClickListener() {\n\n            @Override\n            public void onClick(View v) {\n\n                View[] views = new View[container.getChildCount()];\n\n                for (int i = 0; i < views.length; i++) {\n                    views[i] = container.getChildAt(i);\n\n                }\n\n                int last = views.length - 1;\n\n                if (index != last) {\n\n                    if (index == 0) {\n                        onClickFirstCard(cardStack, container, index, views);\n                    } else if (index < last) {\n                        onClickOtherCard(cardStack, container, index, views,\n                                last);\n                    }\n\n                }\n\n            }\n\n            public void onClickFirstCard(final CardStack cardStack,\n                    final RelativeLayout frameLayout, final int index, View[] views) {\n                \n            }\n\n            public void onClickOtherCard(final CardStack cardStack,\n                    final RelativeLayout frameLayout, final int index,\n                    View[] views, int last) {\n                \n            }\n        };\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void cleanData(HashMap<String, String> data) {\n        preventOverwrite(data, ChannelType.FIELD_NAME);\n        preventOverwrite(data, CreationDate.FIELD_NAME);\n        preventOverwrite(data, Creator.FIELD_NAME);\n        preventOverwrite(data, ContentType.FIELD_NAME);\n\n        ensurePresent(data, NodeTitle.FIELD_NAME);\n        ensurePresent(data, NodeDescription.FIELD_NAME);\n        ensurePresent(data, AccessModel.FIELD_NAME);\n        ensurePresent(data, Affiliation.FIELD_NAME);\n\n        setLastUpdatedDate(data);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void setJoinType(int type) throws SQLException {\n\n       if (type >= JoinRowSet.CROSS_JOIN && type <= JoinRowSet.FULL_JOIN) {\n           if (type != JoinRowSet.INNER_JOIN) {\n               throw new SQLException(resBundle.handleGetObject(\"joinrowsetimpl.notsupported\").toString());\n           } else {\n              Integer Intgr = new Integer(JoinRowSet.INNER_JOIN);\n              vecJoinType.add(Intgr);\n           }\n       } else {\n          throw new SQLException(resBundle.handleGetObject(\"joinrowsetimpl.notdefined\").toString());\n       }  //end if\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void printMethods() {\n\t\tif (TypeUtil.isClassLike(type)) {\n\t\t\tfor (List<IMethodBinding> e : methods.values()) {\n\t\t\t\tfor (IMethodBinding mb : e) {\n\t\t\t\t\taccess = TransformUtil.declareBridge(ctx, out, type, mb,\n\t\t\t\t\t\t\tdeps, access);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tList<IMethodBinding> superMethods = hiddenMethods(type, ctx, methods);\n\n\t\tfor (IMethodBinding mb : superMethods) {\n\t\t\taccess = printAccess(out, mb.getModifiers(), access);\n\t\t\tprint(i1);\n\t\t\tTransformUtil.printSignature(ctx, out, type,\n\t\t\t\t\tmb.getMethodDeclaration(), deps, false);\n\t\t\tif (Modifier.isAbstract(mb.getModifiers())) {\n\t\t\t\tprint(\" = 0\");\n\t\t\t}\n\n\t\t\tprintln(\";\");\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr graph) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), graph});\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tprivate LogEntry(\n            ISVNLogMessage logMessage,\n            ISVNResource resource,\n            ISVNRemoteResource remoteResource,\n            Alias[] tags) {\n        this.logMessage = logMessage;\n        this.remoteResource = remoteResource;\n        this.resource = resource;\n        this.tags = tags;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void actionPerformed(ActionEvent e) {\n                                                                                                int i = 0;\n                                                                                                for (i = 0; i < runners\n                                                                                                    .size(); i++) {\n                                                                                                    if (runners\n                                                                                                        .get(\n                                                                                                            i)\n                                                                                                        .isAlive())\n                                                                                                        break;\n                                                                                                }\n\n                                                                                                if (i == runners\n                                                                                                    .size()) {\n                                                                                                    Display\n                                                                                                        .getDefault()\n                                                                                                        .asyncExec(\n                                                                                                            new Runnable() {\n                                                                                                                public void run() {\n                                                                                                                    stop(true);\n                                                                                                                    setButton(\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true);\n                                                                                                                }\n                                                                                                            });\n\n                                                                                                }\n                                                                                            }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public void removePropertyChangeListener(PropertyChangeListener listener) {\n            if (accessibleAWTComponentHandler != null) {\n                Component.this.removeComponentListener(accessibleAWTComponentHandler);\n                accessibleAWTComponentHandler = null;\n            }\n            if (accessibleAWTFocusHandler != null) {\n                Component.this.removeFocusListener(accessibleAWTFocusHandler);\n                accessibleAWTFocusHandler = null;\n            }\n            super.removePropertyChangeListener(listener);\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(char ch) {\n        return isIdentifierIgnorable((int)ch);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public void onPlayerStateChange(PlayerState oldState, PlayerState newState, Bundle extra) {\n\n        mPrevState = mCurrentState;\n        mCurrentState = newState;\n        Log.d(TAG, \"State change event! Oldstate= \" + oldState + \" NewState= \" + newState);\n        if (mPrevState == mCurrentState) {\n            Log.w(TAG, \"Duplicate state change message!!! \");\n        }\n        if (mPrevState == PlayerState.BUFFERING && mCurrentState != PlayerState.BUFFERING) {\n            AnalyticsHelper.trackContentAction(AnalyticsTags.ACTION_PLAYBACK_BUFFER_END,\n                                               mSelectedContent, getCurrentPosition());\n        }\n        switch (newState) {\n            case IDLE:\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mIsContentChangeRequested) {\n                    openSelectedContent();\n                }\n                break;\n            case OPENING:\n                break;\n            case OPENED:\n                if (mPlayer != null && mIsActivityResumed) {\n                    mPlayer.prepare();\n                }\n                else {\n                    mIsContentChangeRequested = false;\n                }\n                if (mIsContentSupportCC && mIsCloseCaptionEnabled) {\n                    if (mPlaybackOverlayFragment != null) {\n                        mPlaybackOverlayFragment.updateCCButtonState(true, true);\n                    }\n                    if (mPlayer != null) {\n                        mPlayer.enableTextTrack(TrackType.SUBTITLE, true);\n                    }\n                }\n                break;\n            case PREPARING:\n                if (mPlaybackOverlayFragment != null && mPlaybackOverlayFragment.getView() !=\n                        null) {\n                    mPlaybackOverlayFragment.getView().setVisibility(View.VISIBLE);\n                }\n                break;\n            case READY:\n                mPlaybackState = LeanbackPlaybackState.PAUSED;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(false);\n                }\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mPrevState == PlayerState.PREPARING) {\n                    if (mPlaybackOverlayFragment != null) {\n                        mPlaybackOverlayFragment.updatePlayback();\n                        mPlaybackOverlayFragment.startProgressAutomation();\n                    }\n                    if (mCurrentPlaybackPosition > 0) {\n                        mPlayer.seekTo(mCurrentPlaybackPosition);\n                    }\n                    if (mAutoPlay || mIsContentChangeRequested) {\n                        play();\n                        mAutoPlay = false;\n                        if (mIsContentChangeRequested) {\n                            mIsContentChangeRequested = false;\n                        }\n                    }\n                }\n                else if (mAudioFocusState == AudioFocusState.NoFocusNoDuck) {\n                    play();\n                }\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PAUSED);\n                }\n                break;\n            case PLAYING:\n                mPlaybackState = LeanbackPlaybackState.PLAYING;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(true);\n                }\n                hideProgress();\n                mWindow.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PLAYING);\n                }\n                break;\n            case BUFFERING:\n                showProgress();\n                AnalyticsHelper.trackContentAction(AnalyticsTags.ACTION_PLAYBACK_BUFFER_START,\n                                                   mSelectedContent, getCurrentPosition());\n                break;\n            case SEEKING:\n                showProgress();\n                break;\n            case ENDED:\n                hideProgress();\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.playbackFinished();\n                }\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.COMPLETED);\n                }\n                break;\n            case CLOSING:\n\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.stopProgressAutomation();\n                }\n                if (!isContentLive(mSelectedContent)) {\n                    AnalyticsHelper.trackContentFinished(mSelectedContent, getCurrentPosition());\n                }\n                break;\n            case ERROR:\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                Log.e(TAG, \"Player encountered an error!\");\n                break;\n            default:\n                Log.e(TAG, \"Unknown state!!!!!\");\n                break;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps,\n                boolean isUserGenerated) {\n            Validate.notNull(objectProperty, \"objectProperty\");\n            Validate.containsNoNulls(bitmaps, \"bitmaps\");\n            if (action == null) {\n                throw new FacebookException(\"Can not set attachments prior to setting action.\");\n            }\n\n            List<String> attachmentUrls = addImageAttachments(bitmaps);\n            updateObjectAttachmentUrls(objectProperty, attachmentUrls, isUserGenerated);\n\n            return this;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        PartialSufficientSatistics partialSufficientSatistics = PartialSufficientSatistics.createZeroPartialSufficientStatistics(efBayesianNetwork);\n        partialSufficientSatistics.copy(this.sumSS);\n        partialSufficientSatistics.normalize();\n        SufficientStatistics finalSS = efBayesianNetwork.createZeroSufficientStatistics();\n        finalSS.sum(partialSufficientSatistics.getCompoundVector());\n\n        efBayesianNetwork.setMomentParameters(finalSS);\n        return efBayesianNetwork.toBayesianNetwork(dag);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public boolean feed_publishTemplatizedAction(CharSequence titleTemplate,\n                                               Map<String, CharSequence> titleData,\n                                               CharSequence bodyTemplate,\n                                               Map<String, CharSequence> bodyData,\n                                               CharSequence bodyGeneral,\n                                               Collection<Integer> targetIds,\n                                               Collection<IFeedImage> images,\n                                               Long pageActorId)\n    throws FacebookException, IOException {\n    assert null != titleTemplate && !\"\".equals(titleTemplate);\n\n    FacebookMethod method = FacebookMethod.FEED_PUBLISH_TEMPLATIZED_ACTION;\n    ArrayList<Pair<String, CharSequence>> params =\n      new ArrayList<Pair<String, CharSequence>>(method.numParams());\n\n    params.add(new Pair<String, CharSequence>(\"title_template\", titleTemplate));\n    if (null != titleData && !titleData.isEmpty()) {\n      JSONObject titleDataJson = new JSONObject();\n      titleDataJson.putAll(titleData);\n      params.add(new Pair<String, CharSequence>(\"title_data\", titleDataJson.toString()));\n    }\n\n    if (null != bodyTemplate && !\"\".equals(bodyTemplate)) {\n      params.add(new Pair<String, CharSequence>(\"body_template\", bodyTemplate));\n      if (null != bodyData && !bodyData.isEmpty()) {\n        JSONObject bodyDataJson = new JSONObject();\n        bodyDataJson.putAll(bodyData);\n        params.add(new Pair<String, CharSequence>(\"body_data\", bodyDataJson.toString()));\n      }\n    }\n\n    if (null != bodyGeneral && !\"\".equals(bodyGeneral)) {\n      params.add(new Pair<String, CharSequence>(\"body_general\", bodyGeneral));\n    }\n\n    if (null != targetIds && !targetIds.isEmpty()) {\n      params.add(new Pair<String, CharSequence>(\"target_ids\", delimit(targetIds)));\n    }\n\n    if (null != pageActorId) {\n      params.add(new Pair<String, CharSequence>(\"page_actor_id\", pageActorId.toString()));\n    }\n\n    handleFeedImages(params, images);\n    return extractBoolean(this.callMethod(method, params));\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic SmoothStreamingRendererBuilder(Context context, String userAgent, String url,\n      MediaDrmCallback drmCallback) {\n    this.context = context;\n    this.userAgent = userAgent;\n    this.url = Util.toLowerInvariant(url).endsWith(\"/manifest\") ? url : url + \"/Manifest\";\n    this.drmCallback = drmCallback;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" deltaNeutralOpenClose=\" + order.m_deltaNeutralOpenClose +\n        \" deltaNeutralShortSale=\" + order.m_deltaNeutralShortSale +\n        \" deltaNeutralShortSaleSlot=\" + order.m_deltaNeutralShortSaleSlot +\n        \" deltaNeutralDesignatedLocation=\" + order.m_deltaNeutralDesignatedLocation +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void clearContexts(Resource... contexts)\n\t\tthrows IOException\n\t{\n\t\tlogger.debug(\"clearing contexts...\");\n\t\tluceneIndex.begin();\n\t\ttry {\n\t\t\tluceneIndex.clearContexts(contexts);\n\t\t\tluceneIndex.commit();\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tlogger.error(\"Rolling back\", e);\n\t\t\tluceneIndex.rollback();\n\t\t\tthrow e;\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    protected void initEnablementBehaviours( List<EnablementBehaviour> helper ) {\n        helper.add(new ValidToolDetectionActivator(new Class[]{Geometry.class, LineString.class, MultiLineString.class,\n                Polygon.class, MultiPolygon.class, Point.class, MultiPoint.class}));\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic boolean handleControlWord(RtfCtrlWordData ctrlWordData) {\n\t\tboolean result = true;\n\t\t\n\t\tif(ctrlWordData.ctrlWord.equals(\"f\")) { this.setFontNumber(ctrlWordData.param); result=true;}\n\t\tif(ctrlWordData.ctrlWord.equals(\"fcharset\")) { this.setCharset(ctrlWordData.param); result=true; }\n\n\t\tif(ctrlWordData.ctrlWord.equals(\"fnil\")) { this.setFontFamily(\"roman\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"froman\")) { this.setFontFamily(\"roman\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fswiss\")) { this.setFontFamily(\"swiss\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fmodern\")) { this.setFontFamily(\"modern\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fscript\")) { this.setFontFamily(\"script\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fdecor\")) { this.setFontFamily(\"decor\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"ftech\")) { this.setFontFamily(\"tech\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fbidi\")) { this.setFontFamily(\"bidi\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fprq\")) { this.setPitch(ctrlWordData.param); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fbias\")) { this.setBias(ctrlWordData.param); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"flomajor\")) { this.setThemeFont(\"flomajor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fhimajor\")) { this.setThemeFont(\"fhimajor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fdbmajor\")) { this.setThemeFont(\"fdbmajor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fbimajor\")) { this.setThemeFont(\"fbimajor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"flominor\")) { this.setThemeFont(\"flominor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fhiminor\")) { this.setThemeFont(\"fhiminor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fdbminor\")) { this.setThemeFont(\"fdbminor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fbiminor\")) { this.setThemeFont(\"fbiminor\"); result= true; }\n\n\t\tif(ctrlWordData.ctrlWord.equals(\"panose\")) {state = SETTING_PANOSE; result = true; }\n\t\t\n\t\tif(ctrlWordData.ctrlWord.equals(\"fname\")) {state = SETTING_FONTNAME; result = true; }\n\n\t\tif(ctrlWordData.ctrlWord.equals(\"falt\")) { state = SETTING_ALTERNATE; result = true; }\n\t\t\n\t\tif(ctrlWordData.ctrlWord.equals(\"fontemb\")) { state = SETTING_FONT_EMBED; result = true; }\n\n\t\tif(ctrlWordData.ctrlWord.equals(\"ftnil\")) { this.setTrueType(\"ftnil\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fttruetype\")) { this.setTrueType(\"fttruetype\"); result= true; }\n\t\t\n\t\tif(ctrlWordData.ctrlWord.equals(\"fontemb\")) { state = SETTING_FONT_FILE; result = true; }\n\n\t\tif(ctrlWordData.ctrlWord.equals(\"cpg\")) { this.setCodePage(ctrlWordData.param); result= true; }\n\t\t\n\t\tthis.lastCtrlWord = ctrlWordData;\n\t\treturn result;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private IFile getWorkspaceFile(IFileStore fileStore) {\n        IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();\n        IFile[] files = workspaceRoot.findFilesForLocationURI(fileStore.toURI());\n        if (files != null && files.length == 1)\n            return files[0];\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public BufferedImage getRenderedImage(int t, int c)\n    {\n        final CustomVtkPanel vp = panel3D;\n        if (vp == null)\n            return null;\n\n        final int prevT = getPositionT();\n        final int prevC = getPositionC();\n\n        setPositionT(t);\n        setPositionC(c);\n        try\n        {\n            final vtkImageData imageData = getImageData();\n\n            invokeOnEDTSilent(new Runnable()\n            {\n                @Override\n                public void run()\n                {\n                    updateImageData(imageData);\n\n                    vp.setForceFineRendering(true);\n                    try\n                    {\n                        vp.paint(vp.getGraphics());\n                    }\n                    finally\n                    {\n                        vp.setForceFineRendering(false);\n                    }\n                }\n            });\n\n            try\n            {\n                final Robot robot = new Robot();\n                final Rectangle bounds = vp.getBounds();\n                bounds.setLocation(ComponentUtil.convertPointToScreen(bounds.getLocation(), vp));\n                return robot.createScreenCapture(bounds);\n            }\n            catch (AWTException e)\n            {\n                IcyExceptionHandler.showErrorMessage(e, true);\n                return null;\n            }\n\n        }\n        finally\n        {\n            setPositionT(prevT);\n            setPositionC(prevC);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic GradientRadialBackground( int innerColor, int outerColor, int start, int end, int centerX, int centerY ) {\n\t\tthis( innerColor, outerColor, new Dimension(start, true), new Dimension(end, true), new Dimension(centerX, true), new Dimension(centerY, true));\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    protected void initEnablementBehaviours( List<EnablementBehaviour> helper ) {\n        helper.add(new WithinLegalLayerBoundsBehaviour());\n        helper.add(new ValidToolDetectionActivator(new Class[]{Geometry.class, LineString.class,\n                MultiLineString.class, Polygon.class, MultiPolygon.class, Point.class,\n                MultiPoint.class}));\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void actionPerformed(ActionEvent e) {\n                                                                                                int i = 0;\n                                                                                                for (i = 0; i < runners\n                                                                                                    .size(); i++) {\n                                                                                                    if (runners\n                                                                                                        .get(\n                                                                                                            i)\n                                                                                                        .isAlive())\n                                                                                                        break;\n                                                                                                }\n\n                                                                                                if (i == runners\n                                                                                                    .size()) {\n                                                                                                    Display\n                                                                                                        .getDefault()\n                                                                                                        .asyncExec(\n                                                                                                            new Runnable() {\n                                                                                                                public void run() {\n                                                                                                                    stop(true);\n                                                                                                                    setButton(\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true);\n                                                                                                                }\n                                                                                                            });\n\n                                                                                                }\n                                                                                            }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\tChannel channel = ctx.channel();\n\t\t\tchannels.remove(channel);\n\t\t\tNode client = channel.attr(STATE).get();\n\t\t\tuserLinkList.delUser(client);\n\t\t\tcombobox.removeItem(client.username);\n\t\t\tsuper.channelUnregistered(ctx);\n\t\t\tbroadcasts(new LoginOutMessage(client.username));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void testParameterTypes() throws Exception\n    {\n        PreparedStatement pSt = prepareStatement(\n            \"create table t2(si smallint,i int, bi bigint, r real, f float, \"\n            + \"d double precision, n5_2 numeric(5,2), dec10_3 decimal(10,3), \"\n            + \"ch20 char(20),vc varchar(20), lvc long varchar, \"\n            + \"b20 char(23) for bit data, vb varchar(23) for bit data, \"\n            + \"lvb long varchar for bit data,  dt date, tm time, \"\n            + \"ts timestamp not null)\");\n        assertUpdateCount(pSt, 0);\n        pSt.close();\n\n        byte[] ba = new byte[] { 0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xa,\n                                 0xb,0xc,0xd,0xe,0xf,0x10,0x11,0x12,0x13 };\n\n        byte[] bapad = new byte[23];  // For padded byte data\n        System.arraycopy(ba, 0, bapad, 0, ba.length);\n        Arrays.fill(bapad, ba.length, bapad.length, (byte )0x20);\n\n        Object[][] t2_rows = {\n            {1, 2, 3L, 4.0F,\n             5.0, 6.0, new BigDecimal(\"77.77\"),\n             new BigDecimal(\"8.100\"), \"column9string       \",\n             \"column10vcstring\", \"column11lvcstring\", bapad, ba, ba,\n             Date.valueOf(\"2002-04-12\"), Time.valueOf(\"11:44:30\"),\n             Timestamp.valueOf(\"2002-04-12 11:44:30.000000000\")},\n            {1, 2, 3L, 4.0F,\n             5.0, 6.0, new BigDecimal(\"77.77\"),\n             new BigDecimal(\"8.100\"), \"column11string      \",\n             \"column10vcstring\", \"column11lvcstring\", bapad, ba, ba,\n             Date.valueOf(\"2002-04-12\"), Time.valueOf(\"11:44:30\"),\n             Timestamp.valueOf(\"2002-04-12 11:44:30.000000000\")},\n            {null, null, null, null, null, null, null, null, null, null, null,\n             null, null, null, null, null,\n             Timestamp.valueOf(\"2002-04-12 11:44:31.000000000\")}\n        };\n\n\n        pSt = prepareStatement(\n            \"insert into t2 values (?, ?, ?, ?,  ?, ?, ?, ?, ?, ?, ?, ?, ?, \"\n            + \"?, ? ,? , ?)\");\n        pSt.setShort(1, ((Integer )t2_rows[0][0]).shortValue());\n        pSt.setInt(2, ((Integer )t2_rows[0][1]).intValue());\n        pSt.setLong(3, ((Long)t2_rows[0][2]).longValue());\n        pSt.setFloat(4, ((Float )t2_rows[0][3]).floatValue());\n        pSt.setDouble(5, ((Double )t2_rows[0][4]).doubleValue());\n        pSt.setDouble(6, ((Double )t2_rows[0][5]).doubleValue());\n        pSt.setBigDecimal(7, (BigDecimal )t2_rows[0][6]);\n        pSt.setBigDecimal(8, new BigDecimal(\"8.1\")); // Diff. precision\n        pSt.setString(9, \"column9string\");  // Without padding\n        byte[] c10ba = ((String )t2_rows[0][9]).getBytes(\"UTF-8\");\n        int len = c10ba.length;\n        pSt.setAsciiStream(10, new ByteArrayInputStream(c10ba), len);\n        byte[] c11ba = ((String )t2_rows[0][10]).getBytes(\"UTF-8\");\n        len = c11ba.length;\n        pSt.setCharacterStream(11, new InputStreamReader\n                               (new ByteArrayInputStream(c11ba),\"UTF-8\"),len);\n        pSt.setBytes(12, ba);\n        pSt.setBinaryStream(13, new ByteArrayInputStream(ba), ba.length);\n        pSt.setBytes(14, ba);\n        pSt.setDate(15, ((Date )t2_rows[0][14]));\n        pSt.setTime(16, ((Time )t2_rows[0][15]));\n        pSt.setTimestamp(17, ((Timestamp )t2_rows[0][16]));\n        assertUpdateCount(pSt, 1);\n\n        for (int i=0; i<17; ++i) {\n            pSt.setObject(i+1, t2_rows[1][i]);\n        }\n        assertUpdateCount(pSt, 1);\n\n        pSt.setNull(1, java.sql.Types.SMALLINT);\n        pSt.setNull(2, java.sql.Types.INTEGER);\n        pSt.setNull(3, java.sql.Types.BIGINT);\n        pSt.setNull(4, java.sql.Types.REAL);\n        pSt.setNull(5, java.sql.Types.FLOAT);\n        pSt.setNull(6, java.sql.Types.DOUBLE);\n        pSt.setNull(7, java.sql.Types.NUMERIC);\n        pSt.setNull(8, java.sql.Types.DECIMAL);\n        pSt.setNull(9, java.sql.Types.CHAR);\n        pSt.setNull(10, java.sql.Types.VARCHAR);\n        pSt.setNull(11, java.sql.Types.LONGVARCHAR);\n        pSt.setNull(12, java.sql.Types.BINARY);\n        pSt.setNull(13, java.sql.Types.VARBINARY);\n        pSt.setNull(14, java.sql.Types.LONGVARBINARY);\n        pSt.setNull(15, java.sql.Types.DATE);\n        pSt.setNull(16, java.sql.Types.TIME);\n\n        pSt.setTimestamp(17, ((Timestamp )t2_rows[2][16]));\n        assertFalse(pSt.execute());\n        assertEquals(1, pSt.getUpdateCount());\n        pSt.close();\n\n        pSt = prepareStatement(\"select * from t2\");\n        ResultSet rs = pSt.executeQuery();\n        JDBC.assertFullResultSet(rs, t2_rows, false);\n        rs.close();\n        pSt.close();\n\n        try {\n            pSt = prepareStatement(\"select * from t2 where i = ?\");\n            rs = pSt.executeQuery();\n            fail(\"Exception expected above!\");\n        } catch (SQLException e) {\n            assertSQLState(\"07000\", e);\n        }\n        rs.close();\n        pSt.close();\n\n\n        try {\n            pSt = prepareStatement(\n                \"insert into t2 values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, \"\n                + \"?, ?, ?, ?, ?)\");\n            pSt.executeUpdate();\n            fail(\"Exception expected above!\");\n        } catch (SQLException e) {\n            assertSQLState(\"07000\", e);\n        }\n        pSt.close();\n\n        pSt = prepareStatement(\"create table d2558 (i int)\");\n        assertUpdateCount(pSt, 0);\n        pSt.close();\n        pSt = prepareStatement(\"insert into d2558 values (3), (4)\");\n        assertUpdateCount(pSt, 2);\n        pSt.close();\n        pSt = prepareStatement(\"select * from d2558 where i = ?\");\n        pSt.setObject(1,3,java.sql.Types.INTEGER,0);\n        try {\n            pSt.setObject(2,4, java.sql.Types.INTEGER,0);\n            rs = pSt.executeQuery();\n            rs.close();\n            fail(\"Exception expected above!\");\n        } catch (SQLException e) {\n            assertSQLState(\"XCL13\", e);\n        }\n        pSt.close();\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public void onPlayerStateChange(PlayerState oldState, PlayerState newState, Bundle extra) {\n\n        mPrevState = mCurrentState;\n        mCurrentState = newState;\n        Log.d(TAG, \"State change event! Oldstate= \" + oldState + \" NewState= \" + newState);\n        if (mPrevState == mCurrentState) {\n            Log.w(TAG, \"Duplicate state change message!!! \");\n        }\n        if (mPrevState == PlayerState.BUFFERING && mCurrentState != PlayerState.BUFFERING) {\n            AnalyticsHelper.trackContentAction(AnalyticsTags.ACTION_PLAYBACK_BUFFER_END,\n                                               mSelectedContent, getCurrentPosition());\n        }\n        switch (newState) {\n            case IDLE:\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mIsContentChangeRequested) {\n                    openSelectedContent();\n                }\n                break;\n            case OPENING:\n                break;\n            case OPENED:\n                if (mPlayer != null && mIsActivityResumed) {\n                    mPlayer.prepare();\n                }\n                else {\n                    mIsContentChangeRequested = false;\n                }\n                if (mIsContentSupportCC && mIsCloseCaptionEnabled) {\n                    if (mPlaybackOverlayFragment != null) {\n                        mPlaybackOverlayFragment.updateCCButtonState(true, true);\n                    }\n                    if (mPlayer != null) {\n                        mPlayer.enableTextTrack(TrackType.SUBTITLE, true);\n                    }\n                }\n                break;\n            case PREPARING:\n                if (mPlaybackOverlayFragment != null && mPlaybackOverlayFragment.getView() !=\n                        null) {\n                    mPlaybackOverlayFragment.getView().setVisibility(View.VISIBLE);\n                }\n                break;\n            case READY:\n                mPlaybackState = LeanbackPlaybackState.PAUSED;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(false);\n                }\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mPrevState == PlayerState.PREPARING) {\n                    if (mPlaybackOverlayFragment != null) {\n                        mPlaybackOverlayFragment.updatePlayback();\n                        mPlaybackOverlayFragment.startProgressAutomation();\n                    }\n                    if (mCurrentPlaybackPosition > 0) {\n                        mPlayer.seekTo(mCurrentPlaybackPosition);\n                    }\n                    if (mAutoPlay || mIsContentChangeRequested) {\n                        play();\n                        mAutoPlay = false;\n                        if (mIsContentChangeRequested) {\n                            mIsContentChangeRequested = false;\n                        }\n                    }\n                }\n                else if (mAudioFocusState == AudioFocusState.NoFocusNoDuck) {\n                    play();\n                }\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PAUSED);\n                }\n                break;\n            case PLAYING:\n                mPlaybackState = LeanbackPlaybackState.PLAYING;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(true);\n                }\n                hideProgress();\n                mWindow.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PLAYING);\n                }\n                break;\n            case BUFFERING:\n                showProgress();\n                AnalyticsHelper.trackContentAction(AnalyticsTags.ACTION_PLAYBACK_BUFFER_START,\n                                                   mSelectedContent, getCurrentPosition());\n                break;\n            case SEEKING:\n                showProgress();\n                break;\n            case ENDED:\n                hideProgress();\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.playbackFinished();\n                }\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.COMPLETED);\n                }\n                break;\n            case CLOSING:\n\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.stopProgressAutomation();\n                }\n                if (!isContentLive(mSelectedContent)) {\n                    AnalyticsHelper.trackContentFinished(mSelectedContent, getCurrentPosition());\n                }\n                break;\n            case ERROR:\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                Log.e(TAG, \"Player encountered an error!\");\n                break;\n            default:\n                Log.e(TAG, \"Unknown state!!!!!\");\n                break;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static void initConfig(Context context) {\n\t\tif(init) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tInputStream inputStream =  context.getResources().openRawResource(R.raw.config);\n\t\t\tProperties properties  = new Properties();\n\t\t\tproperties.load(inputStream);\n\t\t\tdebug = Boolean.valueOf(properties.getProperty(\"debug\"));\n\t\t\tL.e(\"Debug:\"+debug);\n\t\t\tpersistLog = Boolean.valueOf(properties.getProperty(\"persistLog\"));\n\t\t\tL.e(\"persistLog:\"+persistLog);\n\n\t\t\tmainCategoruUrl = properties.getProperty(\"mainCategoruUrl\");\n\t\t\tL.e(\"mainCategoruUrl:\"+mainCategoruUrl);\n\t\t\tinit = true;\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void requestListViewData() {\n        mBllUser = new BusinessUser(this);\n        mBllServer = new BusinessServer(this);\n        mListMap = new ArrayList<Map<String, Object>>();\n        mBllUser.userServerOrderList((position + 1) + \"\", pageNum + \"\");\n\n\n        mAdapterWaitdeliver = new AdapterFrgServerOrderWaitSer(getActivity(), this, mListMap);\n        mListView.setAdapter(mAdapterWaitdeliver);\n\n        mListView.setMode(PullToRefreshBase.Mode.PULL_FROM_END);\n        mListView.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener2<ListView>() {\n            @Override\n            public void onPullDownToRefresh(PullToRefreshBase<ListView> refreshView) {\n                LogUtils.e(\"onPullDownToRefresh=====================>\");\n            }\n\n            @Override\n            public void onPullUpToRefresh(PullToRefreshBase<ListView> refreshView) {\n                LogUtils.e(\"onPullUpToRefresh=====================>\");\n                if (totalPage > 0 && totalPage > pageNum) {\n                    pageNum++;\n                    mBllUser.userServerOrderList((position + 1) + \"\", pageNum + \"\");\n                } else {\n                    mListView.postDelayed(new Runnable() {\n                        @Override\n                        public void run() {\n                            mListView.onRefreshComplete();\n                        }\n                    }, 1000);\n                }\n            }\n        });\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public boolean isSourceEncodingSupported(AudioFormat.Encoding src)\n  {\n    AudioFormat.Encoding[] srcs = getSourceEncodings();\n    for (int i = 0; i < srcs.length; ++i)\n      {\n        if (src.equals(srcs[i]))\n          return true;\n      }\n    return false;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n        this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n        BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n        this.updateNaturalParameterPrior(prior);\n\n        return learntBN;\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void setGlobalProperties(Map<String, Object> globalProperties) {\n        this.globalProperties = globalProperties;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static final void writeIntLittleEndian(byte[] array, int pos,int value) {\n\t\tarray[pos+3] = (byte) (value >>>24); \n\t\tarray[pos+2] = (byte) (value >>>16);\n\t\tarray[pos+1] = (byte) (value >>>8);\n\t\tarray[pos] = (byte) (value &0xFF);\n\t\t\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    protected void initEnablementBehaviours( List<EnablementBehaviour> helper ) {\n        helper.add(new WithinLegalLayerBoundsBehaviour());\n        helper.add(new ValidToolDetectionActivator(new Class[]{Geometry.class, LineString.class,\n                MultiLineString.class, Polygon.class, MultiPolygon.class, Point.class,\n                MultiPoint.class}));\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n\tpublic void testBlock () throws ValidationException\n\t{\n\t\tBlk b1 =\n\t\t\t\tBlk.fromWireDump (\"\");\n\t\tassertTrue (b1.getHash ().equals (\"0000000000000449ee5b94ba7a051caffff5c23d6a03335f6e20e3985b5ffa61\"));\n\t\tBlk b2 = Blk.fromWireDump (b1.toWireDump ());\n\t\tb2.computeHash ();\n\t\tassertTrue (b1.getHash ().equals (b2.getHash ()));\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate ExternalCarrierBillingInstrumentProto(Builder builder) {\n    this(builder.instrumentKey, builder.subscriberIdentifier, builder.accountType, builder.subscriberCurrency, builder.transactionLimit, builder.subscriberName, builder.address1, builder.address2, builder.city, builder.state, builder.postalCode, builder.country, builder.encryptedSubscriberInfo);\n    setBuilder(builder);\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n\n\n\n        Debug.i(\"onCreate here!\");\n        Debug.i(1, 2, 3, 4, 5);\n        Debug.i(\"0\", \"1\", \"2\", \"3\"); // will just enumerate strings\n        Debug.i(\"%s %s %s\", null, null, null); // will call String.format\n        Debug.i(1, 2, 3, 4);\n\n        for (int i = 0; i < 10; i++, Debug.i(\"hello from a for loop\")) {\n            Debug.i(\"body of a for loop\");\n        }\n\n        if (savedInstanceState == null) {\n            getSupportFragmentManager()\n                    .beginTransaction()\n                    .add(R.id.content, new MainFragment())\n                    .commit();\n        }\n\n        Debug.trace(100);\n\n        someMethod(1, 5, \"Hello!\");\n\n        someMethodWithException();\n\n        tracking: simpleMethod();\n\n        Debug.e(\"ok\");\n\n        throwException();\n\n        objectPrint();\n\n        labels();\n\n        Debug.e(new UnknownHostException());\n\n        final UnknownHostException exception = new UnknownHostException();\n        exception.initCause(new Throwable(new RuntimeException(new IllegalStateException())));\n        Debug.e(exception, \"Hello this is a message for exception\");\n\n        final String bigOne;\n        {\n            final int length = 8001;\n            final char[] chars = new char[length];\n            Arrays.fill(chars, 'c');\n            bigOne = new String(chars);\n            Debug.i(bigOne);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(java.io.File file) throws org.apache.xmlbeans.XmlException, java.io.IOException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( file, type, null ); }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static ITextViewer getViewer(IEditorPart editorPart) {\n        Object viewer = editorPart.getAdapter(ITextOperationTarget.class);\n\n        return (viewer instanceof ITextViewer) ? (ITextViewer) viewer : null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, final Contract contract, final TradeOrder tradeOrder,\n\t\t\tfinal OrderState orderState) {\n\n\t\ttry {\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(tradeOrder.getOrderKey());\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170, \"Warning Order not found for Order Key: \" + orderId + \" make sure Client ID: \" + 0\n\t\t\t\t\t\t+ \" is not the master in TWS. On openOrder update.\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (BackTestBrokerModel.updateTradeOrder(tradeOrder, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\n\t\t\t\t\t_log.debug(\"Order Key: \" + transientInstance.getOrderKey() + \" filled.\");\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (updatedOrder.hasTradePosition() && !updatedOrder.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(updatedOrder.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Order key: \" + transientInstance.getOrderKey() + \" state changed. Status:\"\n\t\t\t\t\t\t\t+ orderState.m_status);\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(updatedOrder.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(updatedOrder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate double readDecimalLiteral(int c) {\n        assert c == '-' || isDecimalDigit(c);\n        TokenStreamInput input = this.input;\n        StrBuffer buffer = this.buffer();\n        if (c == '-') {\n            buffer.append(c);\n            if (!isDecimalDigit(c = input.getChar())) {\n                throw error(Messages.Key.JSONInvalidNumberLiteral);\n            }\n        }\n        buffer.append(c);\n        if (c != '0') {\n            while (isDecimalDigit(c = input.getChar())) {\n                buffer.append(c);\n            }\n        } else {\n            c = input.getChar();\n        }\n        if (!(c == '.' || c == 'e' || c == 'E')) {\n            input.ungetChar(c);\n            return parseSignedInteger(buffer.array(), buffer.length());\n        }\n        if (c == '.') {\n            buffer.append(c);\n            if (!isDecimalDigit(c = input.getChar())) {\n                throw error(Messages.Key.JSONInvalidNumberLiteral);\n            }\n            do {\n                buffer.append(c);\n            } while (isDecimalDigit(c = input.getChar()));\n        }\n        if (c == 'e' || c == 'E') {\n            buffer.append(c);\n            c = input.getChar();\n            if (c == '+' || c == '-') {\n                buffer.append(c);\n                c = input.getChar();\n            }\n            if (!isDecimalDigit(c)) {\n                throw error(Messages.Key.JSONInvalidNumberLiteral);\n            }\n            do {\n                buffer.append(c);\n            } while (isDecimalDigit(c = input.getChar()));\n        }\n        input.ungetChar(c);\n        return parseDecimal(buffer.array(), buffer.length());\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintWriter writer, boolean suppressLogin, char eolMarker, boolean showDirection)\n    {\n        __writer = writer;\n        __nologin = suppressLogin;\n        __eolMarker = eolMarker;\n        __directionMarker = showDirection;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\n    public static Bitmap fastblur(Context context, Bitmap sentBitmap, float radius) {\n\n        if (Build.VERSION.SDK_INT > 16 &&\n                    (!Build.MODEL.contains(\"google_sdk\")\n                             && !Build.MODEL.contains(\"Emulator\")\n                             && !Build.MODEL.contains(\"Android SDK\")\n                             && !Build.FINGERPRINT.contains(\"vbox86p\"))) {\n            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n            final RenderScript rs = RenderScript.create(context);\n            final Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n                                                                 Allocation.USAGE_SCRIPT);\n            final Allocation output = Allocation.createTyped(rs, input.getType());\n            final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n            script.setRadius(radius );\n            script.setInput(input);\n            script.forEach(output);\n            output.copyTo(bitmap);\n            return bitmap;\n        }\n\n        radius *= 0.1;\n        return blurfast(sentBitmap, (int) radius);\n\n\n\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n    public void testNotEquals() throws UnsupportedEncodingException {\n        SoapSTSInstanceConfig ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/openam\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        SoapSTSInstanceConfig ric2 = createInstanceConfig(\"/bobo\", \"http://localhost:8080/openam\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/openam\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", !WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", !WITH_KEYSTORE_CONFIG,\n                !WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", !WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, !DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, !DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, !WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, !WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, !WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic TabbedPane(String title, Displayable[] tabs, Image[] tabIcons, boolean useTabTitle, Style style)\n\t{\n\t\tsuper( title, false, style );\n\t\tthis.isUseTabTitle = useTabTitle;\n\t\tthis.tabDisplayables = new ArrayList();\n\t\tthis.tabIconsContainer = new Container(true);\n\t\tthis.tabIconsContainer.screen = this;\n\t\tif (tabs != null) {\n\t\t\tfor (int i = 0; i < tabs.length; i++)\n\t\t\t{\n\t\t\t\tDisplayable screen = tabs[i];\n\t\t\t\tImage icon = tabIcons[i];\n\t\t\t\taddTab( screen, icon );\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Test\n    public void testExamples() {\n        double[][] matrixData = { {1d,2d,3d}, {2d,5d,3d}};\n        RealMatrix m = new Array2DRowRealMatrix(matrixData);\n        double[][] matrixData2 = { {1d,2d}, {2d,5d}, {1d, 7d}};\n        RealMatrix n = new Array2DRowRealMatrix(matrixData2);\n        RealMatrix p = m.multiply(n);\n        Assert.assertEquals(2, p.getRowDimension());\n        Assert.assertEquals(2, p.getColumnDimension());\n        RealMatrix pInverse = new LUDecomposition(p).getSolver().getInverse();\n        Assert.assertEquals(2, pInverse.getRowDimension());\n        Assert.assertEquals(2, pInverse.getColumnDimension());\n\n        double[][] coefficientsData = {{2, 3, -2}, {-1, 7, 6}, {4, -3, -5}};\n        RealMatrix coefficients = new Array2DRowRealMatrix(coefficientsData);\n        RealVector constants = new ArrayRealVector(new double[]{1, -2, 1}, false);\n        RealVector solution = new LUDecomposition(coefficients).getSolver().solve(constants);\n        final double cst0 = constants.getEntry(0);\n        final double cst1 = constants.getEntry(1);\n        final double cst2 = constants.getEntry(2);\n        final double sol0 = solution.getEntry(0);\n        final double sol1 = solution.getEntry(1);\n        final double sol2 = solution.getEntry(2);\n        Assert.assertEquals(2 * sol0 + 3 * sol1 -2 * sol2, cst0, 1E-12);\n        Assert.assertEquals(-1 * sol0 + 7 * sol1 + 6 * sol2, cst1, 1E-12);\n        Assert.assertEquals(4 * sol0 - 3 * sol1 -5 * sol2, cst2, 1E-12);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tprivate void buildElements()\n\t{\n\t\tImage image = new Image(logo);\n\n\t\timage.setWidth(getWidth());\n\t\timage.setHeight(getHeight());\n\n\t\turlLabel = new Label(\"www.netthreads.co.uk\", skin, URL_LABEL_FONT, Color.WHITE);\n\n\t\tversionLabel = new Label(Box2DBumpers.VERSION_TEXT, skin, URL_LABEL_FONT, Color.WHITE);\n\n\t\ttable = new Table();\n\n\t\ttable.setSize((int) getWidth(), (int) getHeight());\n\n\t\ttable.row();\n\t\ttable.add(urlLabel).expandY().expandX();\n\t\ttable.row();\n\t\ttable.add(image);\n\t\ttable.row();\n\t\ttable.add(versionLabel).expandY().expandX();\n\n\t\ttable.pack();\n\n\t\ttable.setFillParent(true);\n\n\t\taddActor(table);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic static <P extends IProperty<T>, T extends Comparable<T>> T getStatePropertySafely(@Nullable TileEntity te, Class<? extends Block> block, P property, T defaultVal, boolean actual, boolean extended) {\n\t\tif(te == null || te.getWorld() == null) {\n\t\t\treturn defaultVal;\n\t\t}\n\t\tIBlockState state = te.getWorld().getBlockState(te.getPos());\n\t\tif(block.isInstance(state.getBlock())) {\n\t\t\tif(actual) {\n\t\t\t\tstate = state.getActualState(te.getWorld(), te.getPos());\n\t\t\t}\n\t\t\tif(extended) {\n\t\t\t\tstate = state.getBlock().getExtendedState(state, te.getWorld(), te.getPos());\n\t\t\t}\n\t\t\treturn state.getValue(property);\n\t\t}\n\t\treturn defaultVal;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public final void writeDashLengthProperty(List<JulianDate> dates, List<Double> values) {\n        {\n            cesiumlanguagewriter.DoubleCesiumWriter writer = openDashLengthProperty();\n            try {\n                writer.writeNumber(dates, values);\n            } finally {\n                DisposeHelper.dispose(writer);\n            }\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public <T> List<T> toBeanList(ResultSet rs, Class<? extends T> type) throws SQLException {\n        List<T> results = new ArrayList<T>();\n\n        if (!rs.next()) {\n            return results;\n        }\n\n        PropertyDescriptor[] props = this.propertyDescriptors(type);\n        ResultSetMetaData rsmd = rs.getMetaData();\n        int[] columnToProperty = this.mapColumnsToProperties(rsmd, props);\n\n        do {\n            results.add(this.createBean(rs, type, props, columnToProperty));\n        } while (rs.next());\n\n        return results;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public Value<Integer> run(Integer intermediate, String userEmail) {\n      String prompt =\n          \"The intermediate result is \" + intermediate + \".\"\n               + \" Please give one more int\";\n      PromisedValue<Integer> oneMoreInt = newPromise();\n      ExternalAgentJob.getIntFromUser(prompt, userEmail, oneMoreInt.getHandle());\n      return oneMoreInt;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, ClassTransformer transformer, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            MethodPair methodPair = transformer.methods.get(\"()V\" + method);\n            if (methodPair == null)\n            {\n                continue;\n            }\n            lineNumber = InvokerGenerator.printMethod(mv, clazz, method, Modifier.isStatic(methodPair.node.access), lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + order.m_lmtPrice +\n        \" auxPrice=\" + order.m_auxPrice +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + order.m_minQty +\n        \" percentOffset=\" + order.m_percentOffset +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + order.m_nbboPriceCap +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + order.m_startingPrice +\n        \" stockRefPrice=\" + order.m_stockRefPrice +\n        \" delta=\" + order.m_delta +\n        \" stockRangeLower=\" + order.m_stockRangeLower +\n        \" stockRangeUpper=\" + order.m_stockRangeUpper +\n        \" volatility=\" + order.m_volatility +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + order.m_trailStopPrice +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + order.m_basisPoints;\n        \t\tmsg += \" basisPointsType=\" + order.m_basisPointsType;\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PluginLoadOrder getLoad() {\n        return order;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void runScheduleJobToAction(List<JobPersistenceOld> jobDetails, Date now, SimpleDateFormat dfDate, Map<Long, JobPersistence> actionDetails, String currentDateStr){\n\t\tfor(JobPersistenceOld jobDetail : jobDetails){\n\t\t\tif(jobDetail.getScheduleType() != null && jobDetail.getScheduleType()==0){\n\t\t\t\ttry{\n\t\t\t\t\tString jobCronExpression = jobDetail.getCronExpression();\n\t\t\t\t\tString cronDate= dfDate.format(now);\n\t\t\t\t\tList<String> lTime = new ArrayList<String>();\n\t\t\t\t\tif(jobCronExpression != null && jobCronExpression.trim().length() > 0){\n\t\t\t\t\t\tboolean isCronExp = false;\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\tisCronExp = CronExpParser.Parser(jobCronExpression, cronDate, lTime);\n\t\t\t\t\t\t}catch(Exception ex){\n\t\t\t\t\t\t\tisCronExp = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!isCronExp) {\n\t\t\t\t\t\t\tlog.error(\"\u93c3\u72b3\u7876\u9422\u71b8\u579aCron\u741b\u3128\u63ea\u5bee\u5fe5\u7d30\u93c3\u30e6\u6e61,\" + cronDate + \";\u6d93\u5d87\ue0c1\u935a\u5823\ue749\u9352\u6a86ron\u741b\u3128\u63ea\u5bee\u5fe5\u7d30\" + jobCronExpression);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (int i = 0; i < lTime.size(); i++) {\n\t\t\t\t\t\t\tString actionDateStr = ZeusDateTool.StringToDateStr(lTime.get(i), \"yyyy-MM-dd HH:mm:ss\", \"yyyyMMddHHmm\");\n\t\t\t\t\t\t\tString actionCronExpr = ZeusDateTool.StringToDateStr(lTime.get(i), \"yyyy-MM-dd HH:mm:ss\", \"0 m H d M\") + \" ?\";\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tJobPersistence actionPer = new JobPersistence();\n\t\t\t\t\t\t\tactionPer.setId(Long.parseLong(actionDateStr)*1000000+jobDetail.getId());//update action id\n\t\t\t\t\t\t\tactionPer.setToJobId(jobDetail.getId());\n\t\t\t\t\t\t\tactionPer.setAuto(jobDetail.getAuto());\n\t\t\t\t\t\t\tactionPer.setConfigs(jobDetail.getConfigs());\n\t\t\t\t\t\t\tactionPer.setCronExpression(actionCronExpr);//update action cron expression\n\t\t\t\t\t\t\tactionPer.setCycle(jobDetail.getCycle());\n\t\t\t\t\t\t\tString jobDependencies = jobDetail.getDependencies();\n\t\t\t\t\t\t\tactionPer.setDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setJobDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setDescr(jobDetail.getDescr());\n\t\t\t\t\t\t\tactionPer.setGmtCreate(jobDetail.getGmtCreate());\n\t\t\t\t\t\t\tactionPer.setGmtModified(new Date());\n\t\t\t\t\t\t\tactionPer.setGroupId(jobDetail.getGroupId());\n\t\t\t\t\t\t\tactionPer.setHistoryId(jobDetail.getHistoryId());\n\t\t\t\t\t\t\tactionPer.setHost(jobDetail.getHost());\n\t\t\t\t\t\t\tactionPer.setHostGroupId(jobDetail.getHostGroupId());\n\t\t\t\t\t\t\tactionPer.setLastEndTime(jobDetail.getLastEndTime());\n\t\t\t\t\t\t\tactionPer.setLastResult(jobDetail.getLastResult());\n\t\t\t\t\t\t\tactionPer.setName(jobDetail.getName());\n\t\t\t\t\t\t\tactionPer.setOffset(jobDetail.getOffset());\n\t\t\t\t\t\t\tactionPer.setOwner(jobDetail.getOwner());\n\t\t\t\t\t\t\tactionPer.setPostProcessers(jobDetail.getPostProcessers());\n\t\t\t\t\t\t\tactionPer.setPreProcessers(jobDetail.getPreProcessers());\n\t\t\t\t\t\t\tactionPer.setReadyDependency(jobDetail.getReadyDependency());\n\t\t\t\t\t\t\tactionPer.setResources(jobDetail.getResources());\n\t\t\t\t\t\t\tactionPer.setRunType(jobDetail.getRunType());\n\t\t\t\t\t\t\tactionPer.setScheduleType(jobDetail.getScheduleType());\n\n\t\t\t\t\t\t\tactionPer.setStartTime(jobDetail.getStartTime());\n\t\t\t\t\t\t\tactionPer.setStartTimestamp(jobDetail.getStartTimestamp());\n\t\t\t\t\t\t\tactionPer.setStatisStartTime(jobDetail.getStatisStartTime());\n\t\t\t\t\t\t\tactionPer.setStatisEndTime(jobDetail.getStatisEndTime());\n\t\t\t\t\t\t\tactionPer.setStatus(jobDetail.getStatus());\n\t\t\t\t\t\t\tactionPer.setTimezone(jobDetail.getTimezone());\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tlog.info(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59dfJobId: \" + jobDetail.getId()+\";  ActionId: \" +actionPer.getId());\n\t\t\t\t\t\t\t\t\tcontext.getGroupManager().saveJob(actionPer);\n\t\t\t\t\t\t\t\t\tlog.info(\"success\");\n\t\t\t\t\t\t\t\t\tactionDetails.put(actionPer.getId(),actionPer);\n\t\t\t\t\t\t\t} catch (ZeusException e) {\n\t\t\t\t\t\t\t\tlog.error(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59dfJobId:\" + jobDetail.getId() + \" \u9422\u71b8\u579aAction\" +actionPer.getId() + \"\u6fb6\u8fab\u89e6\", e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}catch(Exception ex){\n\t\t\t\t\tlog.error(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59df\u9422\u71b8\u579aAction\u6fb6\u8fab\u89e6\",ex);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic static boolean compareValues(Object v1, Object v2) {\n\n\t\tif (v1 == null && v2 == null)\n\t\t\treturn true;\n\t\tif (v1 == v2)\n\t\t\treturn true;\n\t\tif (v1 == null && v2 != null)\n\t\t\treturn false;\n\t\tif (v1 != null && v2 == null)\n\t\t\treturn false;\n\n\t\tv2 = convertToType(v1.getClass(), v2);\n\n\t\tif (v1.getClass() != v2.getClass())\n\t\t\treturn false;\n\n\t\tClass type = v1.getClass();\n\n\t\ttry {\n\n\t\t\tif (type == Boolean.class || type == boolean.class) {\n\t\t\t\tif (!((Boolean) v1).equals((Boolean) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == Byte.class || type == byte.class) {\n\t\t\t\tif (!((Byte) v1).equals((Byte) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == Byte[].class) {\n\t\t\t\tif (!Arrays.equals((Byte[]) v1, (Byte[]) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == byte[].class) {\n\t\t\t\tif (!Arrays.equals((byte[]) v1, (byte[]) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == Short.class || type == short.class) {\n\t\t\t\tif (!((Short) v1).equals((Short) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == Integer.class || type == int.class) {\n\t\t\t\tif (!((Integer) v1).equals((Integer) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == Long.class || type == long.class) {\n\t\t\t\tif (!((Long) v1).equals((Long) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == Float.class || type == float.class) {\n\t\t\t\tFloat v1f = (Float) v1;\n\t\t\t\tFloat v2f = (Float) v2;\n\t\t\t\tif (Float.floatToIntBits(v1f) != Float.floatToIntBits(v2f))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == Double.class || type == double.class) {\n\t\t\t\tDouble v1d = (Double) v1;\n\t\t\t\tDouble v2d = (Double) v2;\n\t\t\t\tif (Double.doubleToLongBits(v1d) != Double.doubleToLongBits(v2d))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == Character.class || type == char.class) {\n\t\t\t\tif (!((Character) v1).equals((Character) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == Character[].class) {\n\t\t\t\tif (!Arrays.equals((Character[]) v1, (Character[]) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == char[].class) {\n\t\t\t\tif (!Arrays.equals((char[]) v1, (char[]) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == String.class) {\n\t\t\t\tif (!((String) v1).equals((String) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == BigDecimal.class) {\n\t\t\t\tif (!((BigDecimal) v1).equals((BigDecimal) v2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == Reader.class) {\n\t\t\t\tReader r1 = (Reader) v1;\n\t\t\t\tReader r2 = (Reader) v2;\n\t\t\t\tif (!compareReaders(r1,r2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (v1  == InputStream.class) {\n\t\t\t\tInputStream i1 = (InputStream) v1;\n\t\t\t\tInputStream i2 = (InputStream) v2;\n\t\t\t\tif (!compareInputStreams(i1,i2))\n\t\t\t\t\treturn false;\n\t\t\t} else if (v1 instanceof Clob) {\n\t\t\t\tClob c1 = (Clob) v1;\n\t\t\t\tClob c2 = (Clob) v2;\n\t\t\t\tif (!compareReaders(c1.getCharacterStream(), c2.getCharacterStream()))\n\t\t\t\t\treturn false;\n\t\t\t} else if (v1 instanceof Blob) {\n\t\t\t\tBlob b1 = (Blob) v1;\n\t\t\t\tBlob b2 = (Blob) v2;\n\t\t\t\tif (!compareInputStreams(b1.getBinaryStream(), b2.getBinaryStream()))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == java.util.Date.class) {\n\t\t\t\tjava.util.Date d1 = (java.util.Date) v1;\n\t\t\t\tjava.util.Date d2 = (java.util.Date) v2;\n\t\t\t\tif (!d1.toString().substring(0,19).equals(d2.toString().substring(0,19)))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == java.sql.Date.class) {\n\t\t\t\tjava.sql.Date d1 = (java.sql.Date) v1;\n\t\t\t\tjava.sql.Date d2 = (java.sql.Date) v2;\n\t\t\t\tif (!d1.toString().equals(d2.toString()))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == java.sql.Time.class) {\n\t\t\t\tjava.sql.Time d1 = (java.sql.Time) v1;\n\t\t\t\tjava.sql.Time d2 = (java.sql.Time) v2;\n\t\t\t\tif (!d1.toString().equals(d2.toString()))\n\t\t\t\t\treturn false;\n\t\t\t} else if (type == java.sql.Timestamp.class) {\n\t\t\t\tjava.sql.Timestamp d1 = (java.sql.Timestamp) v1;\n\t\t\t\tjava.sql.Timestamp d2 = (java.sql.Timestamp) v2;\n\t\t\t\tif (!d1.toString().substring(0,15).equals(d2.toString().substring(0,15)))\n\t\t\t\t\treturn false;\n\t\t\t} else if (!v1.equals(v2))\n\t\t\t\treturn false;\n\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\n\t\treturn true;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static <T extends Object> List<T> arrayToList(T[] objs) {\n        final ArrayList<T> list = new ArrayList<T>();\n        for (final T o : objs) {\n            list.add(o);\n        }\n        return list;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic Output (int n, long value, String address, long txIndex, String script, boolean spent) {\n        this.n = n;\n        this.value = value;\n        this.address = address;\n        this.txIndex = txIndex;\n        this.script = script;\n        this.spent = spent;\n        if (address != \"\") {\n            spentToAddress = true;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void ensureScopeSetup() {\n\t\tif (scopeSetup) {\n\t\t\treturn; // don't do it again\n\t\t}\n\t\tClassScope scope = this.scope;\n\n\n\n\n\n\n\n\t\tif (scope != null) {\n\t\t\tinterTypeScope = new InterTypeScope(scope.parent, onTypeResolvedBinding, Collections.emptyList());\n\t\t\tscope.parent = interTypeScope;\n\t\t}\n\t\tscopeSetup = true;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic ContentAssistCommandAdapter(Control control,\n\t\t\tIControlContentAdapter controlContentAdapter,\n\t\t\tIContentProposalProvider proposalProvider, String commandId,\n\t\t\tchar[] autoActivationCharacters, boolean installDecoration) {\n\t\tsuper(control, controlContentAdapter, proposalProvider, null,\n\t\t\t\tautoActivationCharacters);\n\t\tthis.commandId = commandId;\n\t\tif (commandId == null) {\n\t\t\tthis.commandId= IWorkbenchCommandConstants.EDIT_CONTENT_ASSIST;\n\t\t}\n\n\t\tif (autoActivationCharacters == null) {\n\t\t\tthis.setAutoActivationCharacters(new char[] {});\n\t\t}\n\t\tsetAutoActivationDelay(DEFAULT_AUTO_ACTIVATION_DELAY);\n\n\t\tthis.handlerService = PlatformUI.getWorkbench()\n\t\t\t\t.getService(IHandlerService.class);\n\n\t\taddListeners(control);\n\n\t\tif (control.isFocusControl()) {\n\t\t\tactivateHandler();\n\t\t}\n\n\t\tif (installDecoration) {\n\t\t\tdecoration = new ControlDecoration(control, SWT.TOP | SWT.LEFT);\n\t\t\tdecoration.setShowOnlyOnFocus(true);\n\t\t\tFieldDecoration dec = getContentAssistFieldDecoration();\n\t\t\tdecoration.setImage(dec.getImage());\n\t\t\tdecoration.setDescriptionText(dec.getDescription());\n\t\t}\n\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate PolicyDescriptions createPolicyDescriptions(Map<URI, PolicyDescription> policies) {\n        System.out.println(\"setting policydescriptions # of policies: \"+policies.size());\n        PolicyDescriptions pd = new PolicyDescriptions();\n        for(URI key : policies.keySet()) {\n            PolicyDescriptionsEntry entry = new PolicyDescriptionsEntry();\n            entry.setKey(key);\n\n            entry.setValue(policies.get(key));\n            pd.getEntry().add(entry);\n\n            \n        }\n        return pd;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void drawKeyBackground(int drawableId, Canvas canvas, Key key) {\n        Drawable npd = mContext.getResources().getDrawable(\n                drawableId);\n        int[] drawableState = key.getCurrentDrawableState();\n        if (key.codes[0] != 0) {\n            npd.setState(drawableState);\n        }\n        npd.setBounds(key.x, key.y, key.x + key.width, key.y\n                + key.height);\n        npd.draw(canvas);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public void onNewFrame(HeadTransform headTransform) {\n    \t\n    \tfloat[] mtx = new float[16];\n        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);\n        surface.updateTexImage();\n        surface.getTransformMatrix(mtx); \n    \t\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprotected void init() {\n        pullProcessorConfigTask = new AsyncTaskManager<>(mwPrivate, \"Reading data processor config timed out\");\n        taskTimeout = new Runnable() {\n            @Override\n            public void run() {\n                pendingDataProcessors= null;\n                for(byte it: successfulProcessors) {\n                    removeProcessor(true, it);\n                }\n                createProcessorsTask.setError(new TimeoutException(\"Creating data processor timed out\"));\n            }\n        };\n\n        this.mwPrivate.addResponseHandler(new Pair<>(DATA_PROCESSOR.id, Util.setRead(ADD)), new RegisterResponseHandler() {\n            @Override\n            public void onResponseReceived(byte[] response) {\n                pullProcessorConfigTask.cancelTimeout();\n\n                ProcessorEntry entry = new ProcessorEntry();\n                entry.id = readId;\n                entry.offset = (byte) (response[5] & 0x1f);\n                entry.length = (byte) (((response[5] >> 5) & 0x7) + 1);\n\n                entry.source = new byte[3];\n                System.arraycopy(response, 2, entry.source, 0, entry.source.length);\n\n                entry.config = new byte[response.length - 6];\n                System.arraycopy(response, 6, entry.config, 0, entry.config.length);\n\n                pullChainResult.push(entry);\n\n                if (response[2] == DATA_PROCESSOR.id && response[3] == NOTIFY) {\n                    readId = response[4];\n                    mwPrivate.sendCommand(new byte[] {DATA_PROCESSOR.id, Util.setRead(ADD), response[4]});\n                    pullProcessorConfigTask.restartTimeout(Constant.RESPONSE_TIMEOUT);\n                } else {\n                    pullProcessorConfigTask.setResult(pullChainResult);\n                }\n            }\n        });\n        this.mwPrivate.addResponseHandler(new Pair<>(DATA_PROCESSOR.id, ADD), new RegisterResponseHandler() {\n            @Override\n            public void onResponseReceived(byte[] response) {\n                timeoutFuture.cancel(false);\n\n                Processor current = pendingDataProcessors.poll();\n                current.editor.source.eventConfig[2]= response[2];\n                if (current.state != null) {\n                    current.state.eventConfig[2] = response[2];\n                }\n                activeProcessors.put(response[2], current);\n                successfulProcessors.add(response[2]);\n\n                createProcessor();\n            }\n        });\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private PooledConnection createPooledConnection (\n            String user,\n            String password,\n            boolean requestPassword) throws SQLException {\n\n        return findDriver().getNewPooledConnection(\n            this, user, password, requestPassword);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n        this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n        BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n        this.updateNaturalParameterPrior(prior);\n\n        return learntBN;\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n\n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n\n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n\n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr graph) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), graph});\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public void onDownloadError(int index, String message) {\n    for (int i = 0; i < mDownloadStatus.length; i++) {\n        if (mDownloadStatus[i] != DownFile.DownloadStatus.FINISH && mDownloadStatus[i] != DownFile.DownloadStatus.ERROR) {\n            mDownloadThreads[i].cancel();\n        }\n    }\n        downFile.state = DownFile.DownloadStatus.ERROR;\n        notifyUpdate(downFile, Constants.WHAT_ERROR);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void insert(int itemNum, javax.microedition.lcdui.Item item)\n\t{\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static byte[] decodeHex(final char[] data) throws HexDecodeException {\n\n        final int len = data.length;\n\n        if ((len & 0x01) != 0) {\n            throw new HexDecodeException(\"Odd number of characters.\");\n        }\n\n        final byte[] out = new byte[len >> 1];\n\n        for (int i = 0, j = 0; j < len; i++) {\n            int f = toDigit(data[j], j) << 4;\n            j++;\n            f = f | toDigit(data[j], j);\n            j++;\n            out[i] = (byte) (f & 0xFF);\n        }\n\n        return out;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic ShortcutView(final Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t\tpm = context.getPackageManager();\n\t\t\n\t\tsec = PreferenceManager.getDefaultSharedPreferences(getContext());\n\n\t\tpkg = sec.getString(\"pkg\", \"\");\n\t\tpin = sec.getString(\"pin\", \"\");\t\t\n\t\t\n\t\t\n\t\tfor (int i = 0; i < CAPACITY; i++) {\n\t\t\tfinal int b = i;\n\t\t\tApplicationInfo ai = null;\n\t\t\tString sv = null;\n\t\t\tString s = Settings.System.getString(context.getContentResolver(), \"PiSC\" + i);\n\n\t\t\tif (s == null | s == \"\") {\n\n\t\t\t\tSettings.System.putString(context.getContentResolver(), \"PiSC\"+b, \"com.pilockerstable\");\n\t\t\t}\n\t\t\tsv = s;\n\t\t\tShortCut sc = new ShortCut(context, attrs);\n\t\t\t\n\t\t\ttry {\n\t\t\t\tai = pm.getApplicationInfo(sv, 0);\n\t\t\t} catch (NameNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\ttry{\n\t\t\tString App_Name = (String) pm.getApplicationLabel(ai);\n\t\t\tDrawable Icon = pm.getApplicationIcon(ai);\n\t\t\tShortcutter st = new Shortcutter(App_Name, Icon);\n\t\t\tsc.setName(st.getName());\n\t\t\tsc.setImage(st.getIcon());\t\t\t\n\t\t\taddView(sc);\n\t\t\t\n\t\t\t}catch(Exception e){\n\t\t\t\tSettings.System.putString(context.getContentResolver(), \"PiSC\"+b, \"com.pilockerstable\");\n\t\t\t}\n\t\t\t\n\t\t\tsc.setOnClickListener(new OnClickListener() {\n\t\t\t\t\n\t\t\t\tString sv = Settings.System.getString( context.getContentResolver(), \"PiSC\" + b);\n\n\t\t\t\t@Override \n\t\t\t\tpublic void onClick(View arg0) {\n\n\t\t\t\t\tif( pin.equals(\"\") || pin.equals(null) || pin.isEmpty()) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t((Activity) context).finish();\n\t\t\t\t\t\tIntent i = new Intent();\n\t\t\t\t\t\ti.setClass(getContext(), LockerService.class);\n\t\t\t\t\t\tcontext.startService(i);\n\t\t\t\t\t\tIntent LaunchIntent = context.getPackageManager().getLaunchIntentForPackage(sv);\n\t\t\t\t\t\tcontext.startActivity(LaunchIntent);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t}else{\n\t\t\t\t\t\n\t\t\t\t\tsave(\"pkg\", \"true\");\n\t\t\t\t\tIntent x = new Intent(getContext(), PinActivity.class);\n\t\t\t\t\tx.putExtra(\"sv\", sv);\n\t\t\t\t\tcontext.startActivity(x);\n\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void createRemoteDisplay(final Display disp){\n\t\t\ttry{\n\t\t\t\tif (disp == null){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (remoteDisplay != null && remoteDisplay.getDisplay() != disp) {\n\t\t\t\t\tremoteDisplay.dismissPresentation();\n\t\t\t\t}\n\n\t\t\t\tFutureTask<Boolean> fTask =  new FutureTask<Boolean>( new SdlRemoteDisplay.Creator(context, disp, remoteDisplay, remoteDisplayClass, new SdlRemoteDisplay.Callback(){\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onCreated(final SdlRemoteDisplay remoteDisplay) {\n\t\t\t\t\t\tVideoStreamingManager.this.remoteDisplay = remoteDisplay;\n\t\t\t\t\t\tremoteDisplay.getMainView().post(new Runnable() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\thapticManager.refreshHapticData(remoteDisplay.getMainView());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tImageResolution resolution = null;\n\t\t\t\t\t\tif(getWiProVersion()>=5){ //At this point we should already have the capability\n\t\t\t\t\t\t\tVideoStreamingCapability capability = (VideoStreamingCapability)_systemCapabilityManager.getCapability(SystemCapabilityType.VIDEO_STREAMING);\n\t\t\t\t\t\t\tresolution = capability.getPreferredResolution();\n\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\tDisplayCapabilities dispCap = (DisplayCapabilities) _systemCapabilityManager.getCapability(SystemCapabilityType.DISPLAY);\n\t\t\t\t\t\t\tif (dispCap != null) {\n\t\t\t\t\t\t\t\t resolution = (dispCap.getScreenParams().getImageResolution());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(resolution != null){\n\t\t\t\t\t\t\tDisplayMetrics displayMetrics = new DisplayMetrics();\n\t\t\t\t\t\t\tdisp.getMetrics(displayMetrics);\n\t\t\t\t\t\t\ttouchScalar[0] = ((float)displayMetrics.widthPixels) / resolution.getResolutionWidth();\n\t\t\t\t\t\t\ttouchScalar[1] = ((float)displayMetrics.heightPixels) / resolution.getResolutionHeight();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onInvalidated(final SdlRemoteDisplay remoteDisplay) {\n\t\t\t\t\t\tremoteDisplay.getMainView().post(new Runnable() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\thapticManager.refreshHapticData(remoteDisplay.getMainView());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} ));\n\t\t\t\tThread showPresentation = new Thread(fTask);\n\n\t\t\t\tshowPresentation.start();\n\t\t\t\t} catch (Exception ex) {\n\t\t\t\tLog.e(TAG, \"Unable to create Virtual Display.\");\n\t\t\t}\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1],\n                col = (int)val[2];\n            float toSet = val[3];\n            \n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            table.setVal(row-1, col-1, toSet);\n            return toSet;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate Set<Integer> initStatement(Statement stat) {\n\n    HashMap<Integer, Integer> mapCount = new HashMap<>();\n\n    List<VarExprent> condlst;\n\n    if (stat.getExprents() == null) {\n\n      List<Integer> childVars = new ArrayList<>();\n      List<Exprent> currVars = new ArrayList<>();\n\n      for (Object obj : stat.getSequentialObjects()) {\n        if (obj instanceof Statement) {\n          Statement st = (Statement)obj;\n          childVars.addAll(initStatement(st));\n\n          if (st.type == DoStatement.TYPE_DO) {\n            DoStatement dost = (DoStatement)st;\n            if (dost.getLooptype() != DoStatement.LOOP_FOR &&\n                dost.getLooptype() != DoStatement.LOOP_DO) {\n              currVars.add(dost.getConditionExprent());\n            }\n          }\n          else if (st.type == DoStatement.TYPE_CATCHALL) {\n            CatchAllStatement fin = (CatchAllStatement)st;\n            if (fin.isFinally() && fin.getMonitor() != null) {\n              currVars.add(fin.getMonitor());\n            }\n          }\n        }\n        else if (obj instanceof Exprent) {\n          currVars.add((Exprent)obj);\n        }\n      }\n\n      for (Integer index : childVars) {\n        Integer count = mapCount.get(index);\n        if (count == null) {\n          count = 0;\n        }\n        mapCount.put(index, count + 1);\n      }\n\n      condlst = getAllVars(currVars);\n    }\n    else {\n      condlst = getAllVars(stat.getExprents());\n    }\n\n    for (VarExprent var : condlst) {\n      mapCount.put(var.getIndex(), 2);\n    }\n\n\n    HashSet<Integer> set = new HashSet<>(mapCount.keySet());\n\n    for (Entry<Integer, Integer> en : mapCount.entrySet()) {\n      if (en.getValue().intValue() > 1) {\n        mapVarDefStatements.put(en.getKey(), stat);\n      }\n    }\n\n    mapStatementVars.put(stat.id, set);\n\n    return set;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic ContentAssistCommandAdapter(Control control,\n\t\t\tIControlContentAdapter controlContentAdapter,\n\t\t\tIContentProposalProvider proposalProvider, String commandId,\n\t\t\tchar[] autoActivationCharacters, boolean installDecoration) {\n\t\tsuper(control, controlContentAdapter, proposalProvider, null,\n\t\t\t\tautoActivationCharacters);\n\t\tthis.commandId = commandId;\n\t\tif (commandId == null) {\n\t\t\tthis.commandId= IWorkbenchCommandConstants.EDIT_CONTENT_ASSIST;\n\t\t}\n\n\t\tif (autoActivationCharacters == null) {\n\t\t\tthis.setAutoActivationCharacters(new char[] {});\n\t\t}\n\t\tsetAutoActivationDelay(DEFAULT_AUTO_ACTIVATION_DELAY);\n\n\t\tthis.handlerService = PlatformUI.getWorkbench()\n\t\t\t\t.getService(IHandlerService.class);\n\n\t\taddListeners(control);\n\n\t\tif (control.isFocusControl()) {\n\t\t\tactivateHandler();\n\t\t}\n\n\t\tif (installDecoration) {\n\t\t\tdecoration = new ControlDecoration(control, SWT.TOP | SWT.LEFT);\n\t\t\tdecoration.setShowOnlyOnFocus(true);\n\t\t\tFieldDecoration dec = getContentAssistFieldDecoration();\n\t\t\tdecoration.setImage(dec.getImage());\n\t\t\tdecoration.setDescriptionText(dec.getDescription());\n\t\t}\n\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private boolean isInContent(float x, float y, Sticker currentSticker) {\n\n\n\n        float[] pointsDst = currentSticker.getMapPointsDst();\n        if (x > pointsDst[0] && x < pointsDst[2] && y > pointsDst[3] && y < pointsDst[5])\n            return true;\n        return false;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate String loadJSONFromAsset(String file) {\n        String json = null;\n        try {\n            InputStream is = this.context.getAssets().open(\"json_lowpoly/\" + file);\n            int size = is.available();\n            byte[] buffer = new byte[size];\n            is.read(buffer);\n            is.close();\n            json = new String(buffer, \"UTF-8\");\n        } catch (IOException ex) {\n            ex.printStackTrace();\n            return null;\n        }\n        return json;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static String getMsgWithLineNumber(String msg) {\n        try {\n            for (StackTraceElement st : (new Throwable()).getStackTrace()) {\n                if (classname.equals(st.getClassName()) || methods.contains(st.getMethodName())) {\n                    continue;\n                } else {\n                    int b = st.getClassName().lastIndexOf(\".\") + 1;\n                    String tag = st.getClassName().substring(b);\n                    String message = tag + \"->\" + st.getMethodName() + \"():\" + st.getLineNumber() + \"->\" + msg;\n                    return message;\n                }\n\n            }\n        } catch (Exception e) {\n            LogUtil.e(e);\n        }\n        return msg;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic static float convertDpToPixel(float dp, Context context) {\n\t\tResources resources = context.getResources();\n\t\tDisplayMetrics metrics = resources.getDisplayMetrics();\n\t\tfloat px = dp * (metrics.densityDpi / 160f);\n\t\treturn px;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + order.m_lmtPrice +\n        \" auxPrice=\" + order.m_auxPrice +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + order.m_minQty +\n        \" percentOffset=\" + order.m_percentOffset +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + order.m_nbboPriceCap +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + order.m_startingPrice +\n        \" stockRefPrice=\" + order.m_stockRefPrice +\n        \" delta=\" + order.m_delta +\n        \" stockRangeLower=\" + order.m_stockRangeLower +\n        \" stockRangeUpper=\" + order.m_stockRangeUpper +\n        \" volatility=\" + order.m_volatility +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + order.m_trailStopPrice +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + order.m_basisPoints;\n        \t\tmsg += \" basisPointsType=\" + order.m_basisPointsType;\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public com.google.protobuf.ByteString\n        getSendInfoBytes() {\n      java.lang.Object ref = sendInfo_;\n      if (ref instanceof java.lang.String) {\n        com.google.protobuf.ByteString b = \n            com.google.protobuf.ByteString.copyFromUtf8(\n                (java.lang.String) ref);\n        sendInfo_ = b;\n        return b;\n      } else {\n        return (com.google.protobuf.ByteString) ref;\n      }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate HashMap addClasses(InstructionalOfferingModifyForm frm, InstrOfferingConfig ioc, Session hibSession){\n    \tHashMap tmpClsToRealClass = new HashMap();\n\t\tSchedulingSubpartDAO ssdao = new SchedulingSubpartDAO();\n\t\tSchedulingSubpart ss = null;\n\t\tClass_DAO cdao = new Class_DAO();\n\t\tClass_ parentClass = null;\n\t\tDepartmentDAO deptdao = new DepartmentDAO();\n\t\tDepartment managingDept = null;\n\t\tDatePatternDAO dpdao = new DatePatternDAO();\n\t\tDatePattern dp = null;\n\n\t\tIterator it1 = frm.getClassIds().listIterator();\n\t\tIterator it2 = frm.getSubpartIds().listIterator();\n\t\tIterator it3 = frm.getParentClassIds().listIterator();\n\t\tIterator it4 = frm.getMinClassLimits().listIterator();\n\t\tIterator it5 = frm.getDepartments().listIterator();\n\t\tIterator it6 = frm.getDatePatterns().listIterator();\n\t\tIterator it7 = frm.getNumberOfRooms().listIterator();\n\t\tIterator it8 = frm.getMaxClassLimits().listIterator();\n\t\tIterator it9 = frm.getRoomRatios().listIterator();\n\t\tIterator it10 = frm.getDisplayInstructors().listIterator();\n\t\tIterator it11 = frm.getEnabledForStudentScheduling().listIterator();\n\t\tIterator it12 = (frm.getEditExternalId() ? frm.getExternalIds().listIterator() : null);\n\n\t\tfor(;it1.hasNext();){\n\t\t\tLong classId = new Long(it1.next().toString());\n\t\t\tLong subpartId = new Long(it2.next().toString());\n\t\t\tString parentId = it3.next().toString();\n\t\t\tLong parentClassId = null;\n\t\t\tif (parentId.length() != 0)\n\t\t\t\tparentClassId = new Long(parentId);\n\t\t\tInteger minClassLimit = new Integer(it4.next().toString());\n\t\t\tString managingDeptIdString = (String)it5.next();\n\t\t\tLong managingDeptId = null;\n\t\t\tif (managingDeptIdString.length() != 0)\n\t\t\t\tmanagingDeptId = new Long(managingDeptIdString);\n\t\t\tString datePatternId = it6.next().toString();\n\t\t\tLong datePattern = null;\n\t\t\tif (datePatternId.length() != 0)\n\t\t\t\tdatePattern = new Long(datePatternId);\n\t\t\tInteger numberOfRooms = new Integer(it7.next().toString());\n\t\t\tInteger maxClassLimit = new Integer(it8.next().toString());\n\t\t\tFloat roomRatio = new Float(it9.next().toString());\n\t\t\tif (frm.isInstrOffrConfigUnlimited()) {\n\t\t\t\troomRatio = 1.0f;\n\t\t\t\tminClassLimit = 0;\n\t\t\t\tmaxClassLimit = 0;\n\t\t\t\tnumberOfRooms = 0;\n\t\t\t}\n\t\t\tString displayInstructorStr = null;\n\t\t\tif(it10.hasNext())\n\t\t\t\tdisplayInstructorStr = (String) it10.next();\n\t\t\tBoolean displayInstructor = new Boolean(false);\n\t\t\tif (displayInstructorStr != null && displayInstructorStr.length() > 0){\n\t\t\t\tdisplayInstructor = new Boolean(true);\n\t\t\t}\n\t\t\tString enabledForStudentSchedulingStr = null;\n\t\t\tif (it11.hasNext()) {\n\t\t\t\tenabledForStudentSchedulingStr = (String) it11.next();\n\t\t\t}\n\t\t\tBoolean enabledForStudentScheduling = new Boolean(false);\n\t\t\tif (enabledForStudentSchedulingStr != null && enabledForStudentSchedulingStr.length() > 0){\n\t\t\t\tenabledForStudentScheduling = new Boolean(true);\n\t\t\t}\n\t\t\tString suffix = (it12 == null ? null : it12.next().toString());\n\t\t\tif (suffix != null && suffix.isEmpty()) suffix = null;\n\n\t\t\tif (classId.longValue() < 0){\n\t\t\t\tClass_ newClass = new Class_();\n\t\t\t\tif (ss == null || !ss.getUniqueId().equals(subpartId))\n\t\t\t\t\tss = ssdao.get(subpartId);\n\t\t\t\tnewClass.setSchedulingSubpart(ss);\n\t\t\t\tss.addToclasses(newClass);\n\t\t\t\tif (parentClassId != null){\n\t\t\t\t\tif (parentClassId.longValue() > 0 && (parentClass == null || !parentClass.getUniqueId().equals(parentClassId)))\n\t\t\t\t\t\tparentClass = cdao.get(parentClassId);\n\t\t\t\t\telse if (parentClassId.longValue() < 0)\n\t\t\t\t\t\tparentClass = (Class_)tmpClsToRealClass.get(parentClassId);\n\t\t\t\t\tnewClass.setParentClass(parentClass);\n\t\t\t\t\tparentClass.addTochildClasses(newClass);\n\t\t\t\t}\n\t\t\t\tif (managingDept == null || !managingDept.getUniqueId().equals(managingDeptId))\n\t\t\t\t\tmanagingDept = deptdao.get(managingDeptId);\n\t\t\t\tnewClass.setControllingDept(ss.getControllingDept());\n\t\t\t\tnewClass.setManagingDept(managingDept, sessionContext.getUser(), hibSession);\n\t\t\t\tif (dp == null || !dp.getUniqueId().equals(datePattern))\n\t\t\t\t\tdp = dpdao.get(datePattern);\n\t\t\t\tnewClass.setDatePattern(dp);\n\t\t\t\tnewClass.setExpectedCapacity(minClassLimit);\n\t\t\t\tnewClass.setNbrRooms(numberOfRooms);\n\t\t\t\tnewClass.setMaxExpectedCapacity(maxClassLimit);\n\t\t\t\tnewClass.setRoomRatio(roomRatio);\n\t\t\t\tnewClass.setDisplayInstructor(displayInstructor);\n\t\t\t\tnewClass.setEnabledForStudentScheduling(enabledForStudentScheduling);\n\t\t\t\tnewClass.setClassSuffix(suffix);\n\t\t\t\tnewClass.setCancelled(false);\n\n\t\t\t\thibSession.save(newClass);\n\t\t\t\thibSession.save(ss);\n\t\t\t\ttmpClsToRealClass.put(classId, newClass);\n\t\t\t}\n\t\t}\n\t\treturn(tmpClsToRealClass);\n   }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\tChannel channel = ctx.channel();\n\t\t\tchannels.remove(channel);\n\t\t\tNode client = channel.attr(STATE).get();\n\t\t\tuserLinkList.delUser(client);\n\t\t\tcombobox.removeItem(client.username);\n\t\t\tsuper.channelUnregistered(ctx);\n\t\t\tbroadcasts(new LoginOutMessage(client.username));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(byte[] bytes, int start, int length) {\n        char[] chars = localBuffer.get();\n        if (chars == null || chars.length < length) {\n            chars = new char[length];\n            localBuffer.set(chars);\n        }\n        int outAt = 0;\n\n        for (int at = start; length > 0; ) {\n            int v0 = bytes[at] & 0xFF;\n            char out;\n            switch (v0 >> 4) {\n                case 0x00: case 0x01: case 0x02: case 0x03:\n                case 0x04: case 0x05: case 0x06: case 0x07: {\n                    length--;\n                    if (v0 == 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    out = (char) v0;\n                    at++;\n                    break;\n                }\n                case 0x0c: case 0x0d: {\n                    length -= 2;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int value = ((v0 & 0x1f) << 6) | (v1 & 0x3f);\n                    if ((value != 0) && (value < 0x80)) {\n                        \n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    out = (char) value;\n                    at += 2;\n                    break;\n                }\n                case 0x0e: {\n                    length -= 3;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int v2 = bytes[at + 2] & 0xFF;\n                    if ((v2 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    int value = ((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) |\n                            (v2 & 0x3f);\n                    if (value < 0x800) {\n                        \n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    out = (char) value;\n                    at += 3;\n                    break;\n                }\n                default: {\n                    return throwBadUtf8(v0, at);\n                }\n            }\n            chars[outAt] = out;\n            outAt++;\n        }\n\n        return new String(chars, 0, outAt);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n     public ConeSound(MediaContainer soundData,\n                      float initialGain,\n                      Point3f position,\n                      Vector3f direction) {\n\n        super(soundData, initialGain, position );\n\n        setDefaultReadCapabilities(readCapabilities);\n\n        ((ConeSoundRetained)this.retained).setDirection(direction);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static float convertDpToPixel(float dp, Context context) {\n        Resources resources = context.getResources();\n        DisplayMetrics metrics = resources.getDisplayMetrics();\n        float px = dp * ((float) metrics.densityDpi / DisplayMetrics.DENSITY_DEFAULT);\n        return px;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        PartialSufficientSatistics partialSufficientSatistics = PartialSufficientSatistics.createZeroPartialSufficientStatistics(efBayesianNetwork);\n        partialSufficientSatistics.copy(this.sumSS);\n        partialSufficientSatistics.normalize();\n        SufficientStatistics finalSS = efBayesianNetwork.createZeroSufficientStatistics();\n        finalSS.sum(partialSufficientSatistics.getCompoundVector());\n\n        efBayesianNetwork.setMomentParameters(finalSS);\n        return efBayesianNetwork.toBayesianNetwork(dag);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tprivate void completeAddAppWidget(final int appWidgetId, long container,\n\t\t\tint screen, AppWidgetHostView hostView,\n\t\t\tAppWidgetProviderInfo appWidgetInfo) {\n\t\tif (appWidgetInfo == null) {\n\t\t\tappWidgetInfo = mAppWidgetManager.getAppWidgetInfo(appWidgetId);\n\t\t}\n\n\t\tCellLayout layout = getCellLayout(container, screen);\n\n\t\tint[] minSpanXY = getMinSpanForWidget(this, appWidgetInfo);\n\t\tint[] spanXY = getSpanForWidget(this, appWidgetInfo);\n\n\t\tint[] cellXY = mTmpAddItemCellCoordinates;\n\t\tint[] touchXY = mPendingAddInfo.dropPos;\n\t\tint[] finalSpan = new int[2];\n\t\tboolean foundCellSpan = false;\n\t\tif (mPendingAddInfo.cellX >= 0 && mPendingAddInfo.cellY >= 0) {\n\t\t\tcellXY[0] = mPendingAddInfo.cellX;\n\t\t\tcellXY[1] = mPendingAddInfo.cellY;\n\t\t\tspanXY[0] = mPendingAddInfo.spanX;\n\t\t\tspanXY[1] = mPendingAddInfo.spanY;\n\t\t\tfoundCellSpan = true;\n\t\t} else if (touchXY != null) {\n\t\t\tint[] result = layout.findNearestVacantArea(touchXY[0], touchXY[1],\n\t\t\t\t\tminSpanXY[0], minSpanXY[1], spanXY[0], spanXY[1], cellXY,\n\t\t\t\t\tfinalSpan);\n\t\t\tspanXY[0] = finalSpan[0];\n\t\t\tspanXY[1] = finalSpan[1];\n\t\t\tfoundCellSpan = (result != null);\n\t\t} else {\n\t\t\tfoundCellSpan = layout.findCellForSpan(cellXY, minSpanXY[0],\n\t\t\t\t\tminSpanXY[1]);\n\t\t}\n\n\t\tif (!foundCellSpan) {\n\t\t\tif (appWidgetId != -1) {\n\t\t\t\tnew Thread(\"deleteAppWidgetId\") {\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tmAppWidgetHost.deleteAppWidgetId(appWidgetId);\n\t\t\t\t\t}\n\t\t\t\t}.start();\n\t\t\t}\n\t\t\tshowOutOfSpaceMessage(isHotseatLayout(layout));\n\t\t\treturn;\n\t\t}\n\n\t\tLauncherAppWidgetInfo launcherInfo = new LauncherAppWidgetInfo(\n\t\t\t\tappWidgetId, appWidgetInfo.provider);\n\t\tlauncherInfo.spanX = spanXY[0];\n\t\tlauncherInfo.spanY = spanXY[1];\n\t\tlauncherInfo.minSpanX = mPendingAddInfo.minSpanX;\n\t\tlauncherInfo.minSpanY = mPendingAddInfo.minSpanY;\n\n\t\tLauncherModel.addItemToDatabase(this, launcherInfo, container, screen,\n\t\t\t\tcellXY[0], cellXY[1], false);\n\n\t\tif (!mRestoring) {\n\t\t\tif (hostView == null) {\n\t\t\t\tlauncherInfo.hostView = mAppWidgetHost.createView(this,\n\t\t\t\t\t\tappWidgetId, appWidgetInfo);\n\t\t\t\tlauncherInfo.hostView.setAppWidget(appWidgetId, appWidgetInfo);\n\t\t\t} else {\n\t\t\t\tlauncherInfo.hostView = hostView;\n\t\t\t}\n\n\t\t\tlauncherInfo.hostView.setTag(launcherInfo);\n\t\t\tlauncherInfo.hostView.setVisibility(View.VISIBLE);\n\t\t\tlauncherInfo.notifyWidgetSizeChanged(this);\n\n\t\t\tmWorkspace.addInScreen(launcherInfo.hostView, container, screen,\n\t\t\t\t\tcellXY[0], cellXY[1], launcherInfo.spanX,\n\t\t\t\t\tlauncherInfo.spanY, isWorkspaceLocked());\n\t\t\tif(!TextUtils.isEmpty(appWidgetInfo.label) && appWidgetInfo.label.equals(getResources().getString(R.string.app_switcher_name))){\n\t\t\t    FlurryAgent.logEvent(FlurryHelper.ADD_YOUR_APPS_WIDGET);\n\t\t\t}else if(appWidgetInfo.provider != null && appWidgetInfo.provider.equals(FlurryHelper.PEACE_OF_MIND_WIDGET_COMPONENT)){\n                FlurryAgent.logEvent(FlurryHelper.PEACE_OF_MIND_WIDGET_ADDED);\n\t\t\t}\n\t\t\taddWidgetToAutoAdvanceIfNeeded(launcherInfo.hostView, appWidgetInfo);\n\t\t}\n\t\tresetAddInfo();\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps,\n                boolean isUserGenerated) {\n            Validate.notNull(objectProperty, \"objectProperty\");\n            Validate.containsNoNulls(bitmaps, \"bitmaps\");\n            if (action == null) {\n                throw new FacebookException(\"Can not set attachments prior to setting action.\");\n            }\n\n            List<String> attachmentUrls = addImageAttachments(bitmaps);\n            updateObjectAttachmentUrls(objectProperty, attachmentUrls, isUserGenerated);\n\n            return this;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\tChannel channel = ctx.channel();\n\t\t\tchannels.remove(channel);\n\t\t\tNode client = channel.attr(STATE).get();\n\t\t\tuserLinkList.delUser(client);\n\t\t\tcombobox.removeItem(client.username);\n\t\t\tsuper.channelUnregistered(ctx);\n\t\t\tbroadcasts(new LoginOutMessage(client.username));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n        this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n        BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n        this.updateNaturalParameterPrior(prior);\n\n        return learntBN;\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintWriter writer, boolean suppressLogin, char eolMarker, boolean showDirection)\n    {\n        __writer = writer;\n        __nologin = suppressLogin;\n        __eolMarker = eolMarker;\n        __directionMarker = showDirection;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void ensureScopeSetup() {\n\t\tif (scopeSetup) {\n\t\t\treturn; // don't do it again\n\t\t}\n\t\tClassScope scope = this.scope;\n\n\n\n\n\n\n\n\t\tif (scope != null) {\n\t\t\tinterTypeScope = new InterTypeScope(scope.parent, onTypeResolvedBinding, Collections.emptyList());\n\t\t\tscope.parent = interTypeScope;\n\t\t}\n\t\tscopeSetup = true;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tprotected List<String> prefetch() throws Exception {\n\t\n\t\tString[] cells;\n\t\tif((cells = reader.readNext()) == null) {\n\t\t\treturn finish();\n\t\t}\n\t\n\t\tList<String> result = Arrays.asList(cells);\t\n\n\t\treturn result;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate String loadJSONFromAsset(String file) {\n        String json = null;\n        try {\n            InputStream is = this.context.getAssets().open(\"json_lowpoly/\" + file);\n            int size = is.available();\n            byte[] buffer = new byte[size];\n            is.read(buffer);\n            is.close();\n            json = new String(buffer, \"UTF-8\");\n        } catch (IOException ex) {\n            ex.printStackTrace();\n            return null;\n        }\n        return json;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void visitLdcInsn(Object cst) {\n        if (mv != null) {\n            mv.visitLdcInsn(cst);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr adjacencyList) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), adjacencyList});\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void testAs()\n    {\n        check(\n            \"select x y from t\",\n            TestUtil.fold(\n                \"SELECT `X` AS `Y`\\n\"\n                + \"FROM `T`\"));\n\n        check(\n            \"select x AS y from t\",\n            TestUtil.fold(\n                \"SELECT `X` AS `Y`\\n\"\n                + \"FROM `T`\"));\n        check(\n            \"select sum(x) y from t group by z\",\n            TestUtil.fold(\n                \"SELECT SUM(`X`) AS `Y`\\n\"\n                + \"FROM `T`\\n\"\n                + \"GROUP BY `Z`\"));\n\n        check(\n            \"select count(z) over w foo from Bids window w as (order by x)\",\n            TestUtil.fold(\n                \"SELECT (COUNT(`Z`) OVER `W`) AS `FOO`\\n\"\n                + \"FROM `BIDS`\\n\"\n                + \"WINDOW `W` AS (ORDER BY `X`)\"));\n\n        final String expected =\n            TestUtil.fold(\n                \"SELECT `X`\\n\"\n                + \"FROM `T` AS `T1`\");\n        check(\"select x from t as t1\", expected);\n        check(\"select x from t t1\", expected);\n\n        checkFails(\n            \"select sum(x) over w from bids window w ^(order by x)\",\n            \"(?s).*Encountered \\\"\\\\(\\\".*\");\n\n        checkFails(\n            \"select count(*) as foo ^over^ w from Bids window w (order by x)\",\n            \"(?s).*Encountered \\\"over\\\".*\");\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public BufferedImage getRenderedImage(int t, int c)\n    {\n        final CustomVtkPanel vp = panel3D;\n        if (vp == null)\n            return null;\n\n        final int prevT = getPositionT();\n        final int prevC = getPositionC();\n\n        setPositionT(t);\n        setPositionC(c);\n        try\n        {\n            final vtkImageData imageData = getImageData();\n\n            invokeOnEDTSilent(new Runnable()\n            {\n                @Override\n                public void run()\n                {\n                    updateImageData(imageData);\n\n                    vp.setForceFineRendering(true);\n                    try\n                    {\n                        vp.paint(vp.getGraphics());\n                    }\n                    finally\n                    {\n                        vp.setForceFineRendering(false);\n                    }\n                }\n            });\n\n            try\n            {\n                final Robot robot = new Robot();\n                final Rectangle bounds = vp.getBounds();\n                bounds.setLocation(ComponentUtil.convertPointToScreen(bounds.getLocation(), vp));\n                return robot.createScreenCapture(bounds);\n            }\n            catch (AWTException e)\n            {\n                IcyExceptionHandler.showErrorMessage(e, true);\n                return null;\n            }\n\n        }\n        finally\n        {\n            setPositionT(prevT);\n            setPositionC(prevC);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr graph) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), graph});\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr graph) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), graph});\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode parse(org.apache.xmlbeans.xml.stream.XMLInputStream xis, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException, org.apache.xmlbeans.xml.stream.XMLStreamException {\n          return (com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( xis, type, options ); }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic static <T extends ResCloudlet> ResCloudlet getByIdAndUserId(\n\t\t\tList<T> list,\n\t\t\tint cloudletId,\n\t\t\tint userId) {\n\t\tfor (T rcl : list) {\n\t\t\tif (rcl.getCloudletId() == cloudletId && rcl.getUserId() == userId) {\n\t\t\t\treturn rcl;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public void onDownloadError(int index, String message) {\n    for (int i = 0; i < mDownloadStatus.length; i++) {\n        if (mDownloadStatus[i] != DownFile.DownloadStatus.FINISH && mDownloadStatus[i] != DownFile.DownloadStatus.ERROR) {\n            mDownloadThreads[i].error();\n        }\n    }\n        downFile.isError = true;\n        downFile.state = DownFile.DownloadStatus.ERROR;\n        notifyUpdate(downFile, Constants.WHAT_ERROR);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static void main(String[] args){\n\t\ttry {\n\t\t\t@SuppressWarnings(\"deprecation\")\n\t\t\t\n\t\t\tCommonsHttpSolrServer solbaseServer = new CommonsHttpSolrServer(\"http://den2sch21:8080/solbase/pbimages~4\");\n\n\t\t\t\n\t\t\t\n\t\t\tList<String> ids = new ArrayList<String>();\n\t\t\tids.add(127995479 + \"\"); // term vector didn't get deleted doc id\n\t\t\tids.add(134876977 + \"\"); // term vector did get deleted doc id\n\t\t\tsolbaseServer.deleteById(ids, true);\n\t\t} catch (MalformedURLException e) {\n\n\t\t} catch (SolrServerException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public boolean isTrue(String key) {\n        String val = get(key);\n        if(val != null) {\n            if(\"true\".equalsIgnoreCase(val)) return true;\n            if(\"1\".equalsIgnoreCase(val)) return true;\n        }\n        return false;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tprotected void systemLoader(Context context)\n\t{\n\t\tif (RockySdk.getInstance().getContext() != null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tContext application = context.getApplicationContext();\n\t\t\n\t\tWebView webview = new WebView(context);\n\t\twebview.layout(0, 0, 0, 0);\n\t\tWebSettings webSettings = webview.getSettings();\n\t\t\n\t\tApplicationInfo applicationInfo = context.getApplicationInfo();\n\t\t\n\t\tVersionInfo versionInfo = ManifestTools.getVersionInfo(application);\n\t\tString userAgent = webSettings.getUserAgentString();\n\t\t\n\t\tClientInfo clientInfo = new ClientInfo(application.getPackageName());\n\t\tclientInfo.setAppicon(applicationInfo.icon);\n\t\tclientInfo.setAppname(ManifestTools.getApplicationLable(application));\n\t\tclientInfo.setDeviceType(SdkConfig.Device.PHONE);\n\t\tclientInfo.setDeviceName(android.os.Build.MODEL);\n\t\tclientInfo.setAlias(android.os.Build.MODEL);\n\t\tclientInfo.setSdkVersion(android.os.Build.VERSION.SDK_INT);\n\t\tclientInfo.setMac(DeviceInfoManager.getMacAddress(application));\n\t\t\n\t\tclientInfo.setUserAgent(userAgent);\n\t\t\n\t\tif (versionInfo != null)\n\t\t{\n\t\t\tclientInfo.setVersionCode(versionInfo.getVersionCode());\n\t\t\tclientInfo.setVersionName(versionInfo.getVersionName());\n\t\t}\n\t\t\n\t\tclientInfo.addFlags(ClientInfo.FLAG_DEBUG | ClientInfo.FLAG_RELEASE);\n\t\t\n\t\tRockyConfig config = new RockyConfig.Builder(application)\n\t\t\t.clientInfo(clientInfo)\n\t\t\t.hasAdBanner(false)\t\t// \u93c4\u5267\u305a\u7ec9\ue21a\u578eBanner\n\t\t\t.hasAdPointsWall(true)\t// \u93c4\u5267\u305a\u7ec9\ue21a\u578e\u6fa7\n\t\t\t.build();\n\t\t\n\t\tRockySdk.getInstance().init(config);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void testParameterTypes() throws Exception\n    {\n        PreparedStatement pSt = prepareStatement(\n            \"create table t2(si smallint,i int, bi bigint, r real, f float, \"\n            + \"d double precision, n5_2 numeric(5,2), dec10_3 decimal(10,3), \"\n            + \"ch20 char(20),vc varchar(20), lvc long varchar, \"\n            + \"b20 char(23) for bit data, vb varchar(23) for bit data, \"\n            + \"lvb long varchar for bit data,  dt date, tm time, \"\n            + \"ts timestamp not null)\");\n        assertUpdateCount(pSt, 0);\n        pSt.close();\n\n        byte[] ba = new byte[] { 0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xa,\n                                 0xb,0xc,0xd,0xe,0xf,0x10,0x11,0x12,0x13 };\n\n        byte[] bapad = new byte[23];  // For padded byte data\n        System.arraycopy(ba, 0, bapad, 0, ba.length);\n        Arrays.fill(bapad, ba.length, bapad.length, (byte )0x20);\n\n        Object[][] t2_rows = {\n            {new Integer(1), new Integer(2), new Long(3), new Float(4.0),\n             new Double(5.0), new Double(6.0), new BigDecimal(\"77.77\"),\n             new BigDecimal(\"8.100\"), \"column9string       \",\n             \"column10vcstring\", \"column11lvcstring\", bapad, ba, ba,\n             Date.valueOf(\"2002-04-12\"), Time.valueOf(\"11:44:30\"),\n             Timestamp.valueOf(\"2002-04-12 11:44:30.000000000\")},\n            {new Integer(1), new Integer(2), new Long(3), new Float(4.0),\n             new Double(5.0), new Double(6.0), new BigDecimal(\"77.77\"),\n             new BigDecimal(\"8.100\"), \"column11string      \",\n             \"column10vcstring\", \"column11lvcstring\", bapad, ba, ba,\n             Date.valueOf(\"2002-04-12\"), Time.valueOf(\"11:44:30\"),\n             Timestamp.valueOf(\"2002-04-12 11:44:30.000000000\")},\n            {null, null, null, null, null, null, null, null, null, null, null,\n             null, null, null, null, null,\n             Timestamp.valueOf(\"2002-04-12 11:44:31.000000000\")}\n        };\n\n\n        pSt = prepareStatement(\n            \"insert into t2 values (?, ?, ?, ?,  ?, ?, ?, ?, ?, ?, ?, ?, ?, \"\n            + \"?, ? ,? , ?)\");\n        pSt.setShort(1, ((Integer )t2_rows[0][0]).shortValue());\n        pSt.setInt(2, ((Integer )t2_rows[0][1]).intValue());\n        pSt.setLong(3, ((Long )t2_rows[0][2]).longValue());\n        pSt.setFloat(4, ((Float )t2_rows[0][3]).floatValue());\n        pSt.setDouble(5, ((Double )t2_rows[0][4]).doubleValue());\n        pSt.setDouble(6, ((Double )t2_rows[0][5]).doubleValue());\n        pSt.setBigDecimal(7, (BigDecimal )t2_rows[0][6]);\n        pSt.setBigDecimal(8, new BigDecimal(\"8.1\")); // Diff. precision\n        pSt.setString(9, \"column9string\");  // Without padding\n        byte[] c10ba = ((String )t2_rows[0][9]).getBytes(\"UTF-8\");\n        int len = c10ba.length;\n        pSt.setAsciiStream(10, new ByteArrayInputStream(c10ba), len);\n        byte[] c11ba = ((String )t2_rows[0][10]).getBytes(\"UTF-8\");\n        len = c11ba.length;\n        pSt.setCharacterStream(11, new InputStreamReader\n                               (new ByteArrayInputStream(c11ba),\"UTF-8\"),len);\n        pSt.setBytes(12, ba);\n        pSt.setBinaryStream(13, new ByteArrayInputStream(ba), ba.length);\n        pSt.setBytes(14, ba);\n        pSt.setDate(15, ((Date )t2_rows[0][14]));\n        pSt.setTime(16, ((Time )t2_rows[0][15]));\n        pSt.setTimestamp(17, ((Timestamp )t2_rows[0][16]));\n        assertUpdateCount(pSt, 1);\n\n        for (int i=0; i<17; ++i) {\n            pSt.setObject(i+1, t2_rows[1][i]);\n        }\n        assertUpdateCount(pSt, 1);\n\n        pSt.setNull(1, java.sql.Types.SMALLINT);\n        pSt.setNull(2, java.sql.Types.INTEGER);\n        pSt.setNull(3, java.sql.Types.BIGINT);\n        pSt.setNull(4, java.sql.Types.REAL);\n        pSt.setNull(5, java.sql.Types.FLOAT);\n        pSt.setNull(6, java.sql.Types.DOUBLE);\n        pSt.setNull(7, java.sql.Types.NUMERIC);\n        pSt.setNull(8, java.sql.Types.DECIMAL);\n        pSt.setNull(9, java.sql.Types.CHAR);\n        pSt.setNull(10, java.sql.Types.VARCHAR);\n        pSt.setNull(11, java.sql.Types.LONGVARCHAR);\n        pSt.setNull(12, java.sql.Types.BINARY);\n        pSt.setNull(13, java.sql.Types.VARBINARY);\n        pSt.setNull(14, java.sql.Types.LONGVARBINARY);\n        pSt.setNull(15, java.sql.Types.DATE);\n        pSt.setNull(16, java.sql.Types.TIME);\n\n        pSt.setTimestamp(17, ((Timestamp )t2_rows[2][16]));\n        assertFalse(pSt.execute());\n        assertEquals(1, pSt.getUpdateCount());\n        pSt.close();\n\n        pSt = prepareStatement(\"select * from t2\");\n        ResultSet rs = pSt.executeQuery();\n        JDBC.assertFullResultSet(rs, t2_rows, false);\n        rs.close();\n        pSt.close();\n\n        try {\n            pSt = prepareStatement(\"select * from t2 where i = ?\");\n            rs = pSt.executeQuery();\n            fail(\"Exception expected above!\");\n        } catch (SQLException e) {\n            assertSQLState(\"07000\", e);\n        }\n        rs.close();\n        pSt.close();\n\n\n        try {\n            pSt = prepareStatement(\n                \"insert into t2 values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, \"\n                + \"?, ?, ?, ?, ?)\");\n            pSt.executeUpdate();\n            fail(\"Exception expected above!\");\n        } catch (SQLException e) {\n            assertSQLState(\"07000\", e);\n        }\n        pSt.close();\n\n        pSt = prepareStatement(\"create table d2558 (i int)\");\n        assertUpdateCount(pSt, 0);\n        pSt.close();\n        pSt = prepareStatement(\"insert into d2558 values (3), (4)\");\n        assertUpdateCount(pSt, 2);\n        pSt.close();\n        pSt = prepareStatement(\"select * from d2558 where i = ?\");\n        pSt.setObject(1,new Integer(3),java.sql.Types.INTEGER,0);\n        try {\n            pSt.setObject(2,new Integer(4), java.sql.Types.INTEGER,0);\n            rs = pSt.executeQuery();\n            rs.close();\n            fail(\"Exception expected above!\");\n        } catch (SQLException e) {\n            assertSQLState(\"XCL13\", e);\n        }\n        pSt.close();\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public Kernel(int width, int height, double factor, double data[]) {\n        this(width, height, (width - 1) / 2, (height - 1) / 2, factor, data);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static Mat zeros(Size size, int type)\n    {\n\n        Mat retVal = new Mat(n_zeros(size.width, size.height, type));\n\n        return retVal;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic FluidTankInfo[] getTankInfo() {\n\t\tFluidTankInfo[] infos = new FluidTankInfo[NUM_TANKS];\n\t\tfor(int i = 0; i < NUM_TANKS; i++) {\n\t\t\tinfos[i] = tanks[i].getInfo();\n\t\t}\n\n\t\treturn infos;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n    public void testNotEquals() throws UnsupportedEncodingException {\n        SoapSTSInstanceConfig ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/openam\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        SoapSTSInstanceConfig ric2 = createInstanceConfig(\"/bobo\", \"http://localhost:8080/openam\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/openam\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", !WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", !WITH_KEYSTORE_CONFIG,\n                !WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", !WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, !DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, !DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, !WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, !WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, !WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n    public void testSum() throws Exception {\n        String sqlText =\n                String.format(\"SELECT empnum, dept, salary, sum(salary) over (Partition by dept ORDER BY salary) as sumsal \" +\n                                \"from %s --SPLICE-PROPERTIES useSpark = %s \\n order by dept, empnum\",\n                        this.getTableReference(EMPTAB), useSpark);\n\n        ResultSet rs = methodWatcher.executeQuery(sqlText);\n        String expected =\n                \"EMPNUM |DEPT |SALARY |SUMSAL |\\n\" +\n                        \"------------------------------\\n\" +\n                        \"  10   |  1  | 50000 | 50000 |\\n\" +\n                        \"  20   |  1  | 75000 |282000 |\\n\" +\n                        \"  50   |  1  | 52000 |154000 |\\n\" +\n                        \"  55   |  1  | 52000 |154000 |\\n\" +\n                        \"  60   |  1  | 78000 |436000 |\\n\" +\n                        \"  70   |  1  | 76000 |358000 |\\n\" +\n                        \"  110  |  1  | 53000 |207000 |\\n\" +\n                        \"  40   |  2  | 52000 |155000 |\\n\" +\n                        \"  44   |  2  | 52000 |155000 |\\n\" +\n                        \"  49   |  2  | 53000 |208000 |\\n\" +\n                        \"  90   |  2  | 51000 | 51000 |\\n\" +\n                        \"  30   |  3  | 84000 |293000 |\\n\" +\n                        \"  80   |  3  | 79000 |209000 |\\n\" +\n                        \"  100  |  3  | 55000 | 55000 |\\n\" +\n                        \"  120  |  3  | 75000 |130000 |\";\n        assertEquals(\"\\n\"+sqlText+\"\\n\", expected, TestUtils.FormattedResult.ResultFactory.toStringUnsorted(rs));\n        rs.close();\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.xrm._2011.metadata.CascadeConfiguration newInstance(org.apache.xmlbeans.XmlOptions options) {\n          return (com.microsoft.schemas.xrm._2011.metadata.CascadeConfiguration) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().newInstance( type, options ); }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@NotNull\n    @Parameterized.Parameters\n    public static Collection<Object[]> combinations() {\n        @NotNull List<Object[]> list = new ArrayList<>();\n        for (char i = 0; i < 260; i++) {\n            list.add(new Object[]{i});\n        }\n        return list;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n        public View getView(final int position, View convertView, final ViewGroup parent) {\n            ViewHolder holder = null;\n            if (convertView == null) {\n                convertView = layoutInflater.inflate(R.layout.item_marray, null);\n            } else {\n                convertView.getTag();\n            }\n            holder = new ViewHolder(convertView);\n            holder.tv_name.setText(news.get(position).getName());\n            holder.tv_phone.setText(news.get(position).getPhone());\n            if (news.get(position).isShow) {\n                holder.ly_a.setVisibility(VISIBLE);\n                holder.ly_b.setVisibility(View.GONE);\n            } else {\n                holder.ly_a.setVisibility(View.GONE);\n                holder.ly_b.setVisibility(VISIBLE);\n            }\n            final ViewHolder finalHolder = holder;\n\n\n            return convertView;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\n    public static Bitmap fastblur(Context context, Bitmap sentBitmap, float radius) {\n\n        if (Build.VERSION.SDK_INT > 16 &&\n                    (!Build.MODEL.contains(\"google_sdk\")\n                             && !Build.MODEL.contains(\"Emulator\")\n                             && !Build.MODEL.contains(\"Android SDK\")\n                             && !Build.FINGERPRINT.contains(\"vbox86p\"))) {\n            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n            final RenderScript rs = RenderScript.create(context);\n            final Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n                                                                 Allocation.USAGE_SCRIPT);\n            final Allocation output = Allocation.createTyped(rs, input.getType());\n            final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n            script.setRadius(radius );\n            script.setInput(input);\n            script.forEach(output);\n            output.copyTo(bitmap);\n            return bitmap;\n        }\n\n        radius *= 0.1;\n        return blurfast(sentBitmap, (int) radius);\n\n\n\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; }\n        return retVal;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(java.io.File file) throws org.apache.xmlbeans.XmlException, java.io.IOException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( file, type, null ); }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void testMultipleUnknown() throws Exception\n      {\n          MoreNestedField moreNestedField = new MoreNestedField();\n          NestedTwoField nestedTwoField = new NestedTwoField();\n          nestedTwoField.setNested1(1);\n          nestedTwoField.setNested2(2);\n          moreNestedField.setF1(nestedTwoField);\n\n          byte[] in = MAPPER.writerFor(MoreNestedField.class)\n                  .with(MAPPER.generateSchemaFor(MoreNestedField.class))\n                  .writeValueAsBytes(moreNestedField);\n\n          LessNestedField lesser = MAPPER.readerFor(LessNestedField.class)\n                  .with(MAPPER.generateSchemaFor(LessNestedField.class))\n                  .with(JsonParser.Feature.IGNORE_UNDEFINED)\n                  .readValue(in);\n\n          assertEquals(moreNestedField.getF1().getNested2(), lesser.getF1().getNested2());\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprotected final Class[] parseTypes(String arg) throws ClassNotFoundException {\n\t\tString[] parts = arg.split(\";\");\n\t\tClass[] types = new Class[parts.length];\n\t\tfor (int i = 0; i < types.length; i++) {\n\t\t\ttypes[i] = this.parseType(parts[i]);\n\t\t}\n\t\treturn types;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + order.m_lmtPrice +\n        \" auxPrice=\" + order.m_auxPrice +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + order.m_minQty +\n        \" percentOffset=\" + order.m_percentOffset +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + order.m_nbboPriceCap +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + order.m_startingPrice +\n        \" stockRefPrice=\" + order.m_stockRefPrice +\n        \" delta=\" + order.m_delta +\n        \" stockRangeLower=\" + order.m_stockRangeLower +\n        \" stockRangeUpper=\" + order.m_stockRangeUpper +\n        \" volatility=\" + order.m_volatility +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + order.m_trailStopPrice +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + order.m_basisPoints;\n        \t\tmsg += \" basisPointsType=\" + order.m_basisPointsType;\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test public void\n    testBlock() throws Exception {\n        CompilationUnit cu = new CompilationUnit(\"AstTests.java\");\n\n        final PackageMemberClassDeclaration clazz = AstTest.createClass(cu);\n\n        List<Java.Statement> body = new ArrayList<Statement>();\n\n        Block sub = new Block(AstTest.getLocation());\n        sub.addStatement(AstTest.createVarDecl(\"x\", \"2.0\"));\n\n        body.add(sub);\n        body.add(\n            new ReturnStatement(\n                AstTest.getLocation(),\n                new Java.BinaryOperation(\n                    AstTest.getLocation(),\n                    AstTest.createVariableRef(\"x\"),\n                    \"*\",\n                    AstTest.createIntegerLiteral(\"3\")\n                )\n            )\n        );\n\n        AstTest.createMethod(clazz, body, AstTest.createDoubleType());\n\n        try {\n            AstTest.compileAndEval(cu);\n            Assert.fail(\"Block must limit the scope of variables in it\");\n        } catch (CompileException ex) {\n            Assert.assertTrue(ex.getMessage().endsWith(\"Expression \\\"x\\\" is not an rvalue\"));\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tprivate void buildElements()\n\t{\n\t\ttitleLabel = new Label(Box2DBumpers.APPLICATION_NAME, skin, URL_LABEL_FONT, Color.YELLOW);\n\n\t\tstartButton = new TextButton(\"Start\", skin);\n\t\taboutButton = new TextButton(\"About\", skin);\n\n\t\ttable = new Table();\n\n\t\ttable.setSize(getWidth(), getHeight());\n\n\t\ttable.row();\n\t\ttable.add(titleLabel).expandY().expandX();\n\t\ttable.row();\n\t\ttable.add(startButton).expandY().expandX();\n\t\ttable.row();\n\t\ttable.add(aboutButton).expandY().expandX();\n\n\t\ttable.setFillParent(true);\n\n\t\ttable.pack();\n\t\t\n\t\tstartButton.addListener(new ClickListener()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic void clicked(InputEvent event, float x, float y)\n\t\t\t{\n\t\t\t\tdirector.sendEvent(AppEvents.EVENT_TRANSITION_TO_MAIN_SCENE, event.getRelatedActor());\n\t\t\t}\n\n\t\t});\n\n\t\taboutButton.addListener(new ClickListener()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic void clicked(InputEvent event, float x, float y)\n\t\t\t{\n\t\t\t\tdirector.sendEvent(AppEvents.EVENT_TRANSITION_TO_ABOUT_SCENE, event.getRelatedActor());\n\t\t\t}\n\n\t\t});\n\n\t\ttable.pack();\n\n\t\taddActor(table);\n\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void systemLoader()\n\t\t{\n\t\t\t\n\t\t\tlong loginCount = mXPref.getUseTotalCount();\n\t\t\tmXPref.putUseTotalCount(loginCount + 1); // Login count++\n\t\t\t\n\t\t\tmXPref.putUseDayCount(mXPref.getUseDayCount() + 1);\t\t\t\n\t\t\t\n\t\t\tLog.I(TAG, String.format(\"Entry %1s %2s Times.\", getString(R.string.app_name), loginCount));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tprivate void completeAddAppWidget(final int appWidgetId, long container,\n\t\t\tint screen, AppWidgetHostView hostView,\n\t\t\tAppWidgetProviderInfo appWidgetInfo) {\n\t\tif (appWidgetInfo == null) {\n\t\t\tappWidgetInfo = mAppWidgetManager.getAppWidgetInfo(appWidgetId);\n\t\t}\n\n\t\tCellLayout layout = getCellLayout(container, screen);\n\n\t\tint[] minSpanXY = getMinSpanForWidget(this, appWidgetInfo);\n\t\tint[] spanXY = getSpanForWidget(this, appWidgetInfo);\n\n\t\tint[] cellXY = mTmpAddItemCellCoordinates;\n\t\tint[] touchXY = mPendingAddInfo.dropPos;\n\t\tint[] finalSpan = new int[2];\n\t\tboolean foundCellSpan = false;\n\t\tif (mPendingAddInfo.cellX >= 0 && mPendingAddInfo.cellY >= 0) {\n\t\t\tcellXY[0] = mPendingAddInfo.cellX;\n\t\t\tcellXY[1] = mPendingAddInfo.cellY;\n\t\t\tspanXY[0] = mPendingAddInfo.spanX;\n\t\t\tspanXY[1] = mPendingAddInfo.spanY;\n\t\t\tfoundCellSpan = true;\n\t\t} else if (touchXY != null) {\n\t\t\tint[] result = layout.findNearestVacantArea(touchXY[0], touchXY[1],\n\t\t\t\t\tminSpanXY[0], minSpanXY[1], spanXY[0], spanXY[1], cellXY,\n\t\t\t\t\tfinalSpan);\n\t\t\tspanXY[0] = finalSpan[0];\n\t\t\tspanXY[1] = finalSpan[1];\n\t\t\tfoundCellSpan = (result != null);\n\t\t} else {\n\t\t\tfoundCellSpan = layout.findCellForSpan(cellXY, minSpanXY[0],\n\t\t\t\t\tminSpanXY[1]);\n\t\t}\n\n\t\tif (!foundCellSpan) {\n\t\t\tif (appWidgetId != -1) {\n\t\t\t\tnew Thread(\"deleteAppWidgetId\") {\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tmAppWidgetHost.deleteAppWidgetId(appWidgetId);\n\t\t\t\t\t}\n\t\t\t\t}.start();\n\t\t\t}\n\t\t\tshowOutOfSpaceMessage(isHotseatLayout(layout));\n\t\t\treturn;\n\t\t}\n\n\t\tLauncherAppWidgetInfo launcherInfo = new LauncherAppWidgetInfo(\n\t\t\t\tappWidgetId, appWidgetInfo.provider);\n\t\tlauncherInfo.spanX = spanXY[0];\n\t\tlauncherInfo.spanY = spanXY[1];\n\t\tlauncherInfo.minSpanX = mPendingAddInfo.minSpanX;\n\t\tlauncherInfo.minSpanY = mPendingAddInfo.minSpanY;\n\n\t\tLauncherModel.addItemToDatabase(this, launcherInfo, container, screen,\n\t\t\t\tcellXY[0], cellXY[1], false);\n\n\t\tif (!mRestoring) {\n\t\t\tif (hostView == null) {\n\t\t\t\tlauncherInfo.hostView = mAppWidgetHost.createView(this,\n\t\t\t\t\t\tappWidgetId, appWidgetInfo);\n\t\t\t\tlauncherInfo.hostView.setAppWidget(appWidgetId, appWidgetInfo);\n\t\t\t} else {\n\t\t\t\tlauncherInfo.hostView = hostView;\n\t\t\t}\n\n\t\t\tlauncherInfo.hostView.setTag(launcherInfo);\n\t\t\tlauncherInfo.hostView.setVisibility(View.VISIBLE);\n\t\t\tlauncherInfo.notifyWidgetSizeChanged(this);\n\n\t\t\tmWorkspace.addInScreen(launcherInfo.hostView, container, screen,\n\t\t\t\t\tcellXY[0], cellXY[1], launcherInfo.spanX,\n\t\t\t\t\tlauncherInfo.spanY, isWorkspaceLocked());\n\n\t\t\taddWidgetToAutoAdvanceIfNeeded(launcherInfo.hostView, appWidgetInfo);\n\t\t}\n\t\tresetAddInfo();\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate Expression readCondition() throws SQLException {\n        Expression r = readConcat();\n        while (true) {\n            boolean not = false;\n            if (readIf(\"NOT\")) {\n                not = true;\n            }\n            Operator op = readCustom(not);\n            if (op != null) {\n                Expression b;\n                switch (op.getCardinality()) {\n                case ZERO: {\n                    b = null;\n                    break;\n                }\n                case ONE: {\n                    b = readConcat();\n                    break;\n                }\n                case MULTI: {\n                    read(\"(\");\n                  Collection<Expression> v = new ArrayList<Expression>();\n                  Expression last;\n                  do {\n                      last = readExpression();\n                      v.add(last);\n                  } while (readIf(\",\"));\n                  read(\")\");\n                  b = new Parameter(session, v);\n                  break;\n                }\n                default:\n                    throw new IllegalArgumentException(\"Can't handle \"\n                            + op.getCardinality());\n                }\n\n                Expression esc = null;\n                if (readIf(\"ESCAPE\")) {\n                    esc = readConcat();\n                }\n                recompileAlways = true;\n                r = new Comparison(session, op.getName(), r, b);\n            } //else if (readIf(\"REGEXP\")) {\n              if (readIf(\"IS\")) {\n                String type;\n                if (readIf(\"NOT\")) {\n                    type = Operator.IS_NOT_NULL;\n                } else {\n                    type = Operator.IS_NULL;\n                }\n                read(\"NULL\");\n                r = new Comparison(session, type, r, null);\n            } else {\n                String compareType = getCompareType(currentTokenType);\n                if (compareType == null) {\n                    break;\n                }\n                read();\n                    Expression right = readConcat();\n                        r = new Comparison(session, compareType, r, right);\n\n            }\n        }\n        return r;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static String getCertificateFriendlyName(X509Certificate cert) {\n        X500Principal principal = cert.getSubjectX500Principal();\n        String friendlyName=null;\n\n        \n        \n\n        \n        if(friendlyName==null)\n            friendlyName = principal.getName();\n\n\n\n        String[] parts = friendlyName.split(\",\");\n        for (int i=0;i<parts.length;i++){\n            String part = parts[i];\n            if (part.startsWith(\"1.2.840.113549.1.9.1=#16\")) {\n                parts[i] = \"email=\" + ia5decode(part.replace(\"1.2.840.113549.1.9.1=#16\", \"\"));\n            }\n        }\n        friendlyName = TextUtils.join(\",\", parts);\n        return friendlyName;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker, boolean showDirection) {\n        this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void testParameterTypes() throws Exception\n    {\n        PreparedStatement pSt = prepareStatement(\n            \"create table t2(si smallint,i int, bi bigint, r real, f float, \"\n            + \"d double precision, n5_2 numeric(5,2), dec10_3 decimal(10,3), \"\n            + \"ch20 char(20),vc varchar(20), lvc long varchar, \"\n            + \"b20 char(23) for bit data, vb varchar(23) for bit data, \"\n            + \"lvb long varchar for bit data,  dt date, tm time, \"\n            + \"ts timestamp not null)\");\n        assertUpdateCount(pSt, 0);\n        pSt.close();\n\n        byte[] ba = new byte[] { 0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xa,\n                                 0xb,0xc,0xd,0xe,0xf,0x10,0x11,0x12,0x13 };\n\n        byte[] bapad = new byte[23];  // For padded byte data\n        System.arraycopy(ba, 0, bapad, 0, ba.length);\n        Arrays.fill(bapad, ba.length, bapad.length, (byte )0x20);\n\n        Object[][] t2_rows = {\n            {1, 2, 3L, 4.0F,\n             5.0, 6.0, new BigDecimal(\"77.77\"),\n             new BigDecimal(\"8.100\"), \"column9string       \",\n             \"column10vcstring\", \"column11lvcstring\", bapad, ba, ba,\n             Date.valueOf(\"2002-04-12\"), Time.valueOf(\"11:44:30\"),\n             Timestamp.valueOf(\"2002-04-12 11:44:30.000000000\")},\n            {1, 2, 3L, 4.0F,\n             5.0, 6.0, new BigDecimal(\"77.77\"),\n             new BigDecimal(\"8.100\"), \"column11string      \",\n             \"column10vcstring\", \"column11lvcstring\", bapad, ba, ba,\n             Date.valueOf(\"2002-04-12\"), Time.valueOf(\"11:44:30\"),\n             Timestamp.valueOf(\"2002-04-12 11:44:30.000000000\")},\n            {null, null, null, null, null, null, null, null, null, null, null,\n             null, null, null, null, null,\n             Timestamp.valueOf(\"2002-04-12 11:44:31.000000000\")}\n        };\n\n\n        pSt = prepareStatement(\n            \"insert into t2 values (?, ?, ?, ?,  ?, ?, ?, ?, ?, ?, ?, ?, ?, \"\n            + \"?, ? ,? , ?)\");\n        pSt.setShort(1, ((Integer )t2_rows[0][0]).shortValue());\n        pSt.setInt(2, ((Integer )t2_rows[0][1]).intValue());\n        pSt.setLong(3, ((Long)t2_rows[0][2]).longValue());\n        pSt.setFloat(4, ((Float )t2_rows[0][3]).floatValue());\n        pSt.setDouble(5, ((Double )t2_rows[0][4]).doubleValue());\n        pSt.setDouble(6, ((Double )t2_rows[0][5]).doubleValue());\n        pSt.setBigDecimal(7, (BigDecimal )t2_rows[0][6]);\n        pSt.setBigDecimal(8, new BigDecimal(\"8.1\")); // Diff. precision\n        pSt.setString(9, \"column9string\");  // Without padding\n        byte[] c10ba = ((String )t2_rows[0][9]).getBytes(\"UTF-8\");\n        int len = c10ba.length;\n        pSt.setAsciiStream(10, new ByteArrayInputStream(c10ba), len);\n        byte[] c11ba = ((String )t2_rows[0][10]).getBytes(\"UTF-8\");\n        len = c11ba.length;\n        pSt.setCharacterStream(11, new InputStreamReader\n                               (new ByteArrayInputStream(c11ba),\"UTF-8\"),len);\n        pSt.setBytes(12, ba);\n        pSt.setBinaryStream(13, new ByteArrayInputStream(ba), ba.length);\n        pSt.setBytes(14, ba);\n        pSt.setDate(15, ((Date )t2_rows[0][14]));\n        pSt.setTime(16, ((Time )t2_rows[0][15]));\n        pSt.setTimestamp(17, ((Timestamp )t2_rows[0][16]));\n        assertUpdateCount(pSt, 1);\n\n        for (int i=0; i<17; ++i) {\n            pSt.setObject(i+1, t2_rows[1][i]);\n        }\n        assertUpdateCount(pSt, 1);\n\n        pSt.setNull(1, java.sql.Types.SMALLINT);\n        pSt.setNull(2, java.sql.Types.INTEGER);\n        pSt.setNull(3, java.sql.Types.BIGINT);\n        pSt.setNull(4, java.sql.Types.REAL);\n        pSt.setNull(5, java.sql.Types.FLOAT);\n        pSt.setNull(6, java.sql.Types.DOUBLE);\n        pSt.setNull(7, java.sql.Types.NUMERIC);\n        pSt.setNull(8, java.sql.Types.DECIMAL);\n        pSt.setNull(9, java.sql.Types.CHAR);\n        pSt.setNull(10, java.sql.Types.VARCHAR);\n        pSt.setNull(11, java.sql.Types.LONGVARCHAR);\n        pSt.setNull(12, java.sql.Types.BINARY);\n        pSt.setNull(13, java.sql.Types.VARBINARY);\n        pSt.setNull(14, java.sql.Types.LONGVARBINARY);\n        pSt.setNull(15, java.sql.Types.DATE);\n        pSt.setNull(16, java.sql.Types.TIME);\n\n        pSt.setTimestamp(17, ((Timestamp )t2_rows[2][16]));\n        assertFalse(pSt.execute());\n        assertEquals(1, pSt.getUpdateCount());\n        pSt.close();\n\n        pSt = prepareStatement(\"select * from t2\");\n        ResultSet rs = pSt.executeQuery();\n        JDBC.assertFullResultSet(rs, t2_rows, false);\n        rs.close();\n        pSt.close();\n\n        try {\n            pSt = prepareStatement(\"select * from t2 where i = ?\");\n            rs = pSt.executeQuery();\n            fail(\"Exception expected above!\");\n        } catch (SQLException e) {\n            assertSQLState(\"07000\", e);\n        }\n        rs.close();\n        pSt.close();\n\n\n        try {\n            pSt = prepareStatement(\n                \"insert into t2 values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, \"\n                + \"?, ?, ?, ?, ?)\");\n            pSt.executeUpdate();\n            fail(\"Exception expected above!\");\n        } catch (SQLException e) {\n            assertSQLState(\"07000\", e);\n        }\n        pSt.close();\n\n        pSt = prepareStatement(\"create table d2558 (i int)\");\n        assertUpdateCount(pSt, 0);\n        pSt.close();\n        pSt = prepareStatement(\"insert into d2558 values (3), (4)\");\n        assertUpdateCount(pSt, 2);\n        pSt.close();\n        pSt = prepareStatement(\"select * from d2558 where i = ?\");\n        pSt.setObject(1,3,java.sql.Types.INTEGER,0);\n        try {\n            pSt.setObject(2,4, java.sql.Types.INTEGER,0);\n            rs = pSt.executeQuery();\n            rs.close();\n            fail(\"Exception expected above!\");\n        } catch (SQLException e) {\n            assertSQLState(\"XCL13\", e);\n        }\n        pSt.close();\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public Matcher appendReplacement(StringBuffer sb, String replacement) {\n\n        if (first < 0)\n            throw new IllegalStateException(\"No match available\");\n\n        int cursor = 0;\n        StringBuilder result = new StringBuilder();\n\n        while (cursor < replacement.length()) {\n            char nextChar = replacement.charAt(cursor);\n            if (nextChar == '\\\\') {\n                cursor++;\n                nextChar = replacement.charAt(cursor);\n                result.append(nextChar);\n                cursor++;\n            } else if (nextChar == '$') {\n                cursor++;\n                int refNum = (int)replacement.charAt(cursor) - '0';\n                if ((refNum < 0)||(refNum > 9))\n                    throw new IllegalArgumentException(\n                        \"Illegal group reference\");\n                cursor++;\n\n                boolean done = false;\n                while (!done) {\n                    if (cursor >= replacement.length()) {\n                        break;\n                    }\n                    int nextDigit = replacement.charAt(cursor) - '0';\n                    if ((nextDigit < 0)||(nextDigit > 9)) { // not a number\n                        break;\n                    }\n                    int newRefNum = (refNum * 10) + nextDigit;\n                    if (groupCount() < newRefNum) {\n                        done = true;\n                    } else {\n                        refNum = newRefNum;\n                        cursor++;\n                    }\n                }\n                if (start(refNum) != -1 && end(refNum) != -1)\n                    result.append(text, start(refNum), end(refNum));\n            } else {\n                result.append(nextChar);\n                cursor++;\n            }\n        }\n        sb.append(text, lastAppendPosition, first);\n        sb.append(result);\n\n        lastAppendPosition = last;\n        return this;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(char ch) {\n        return isIdentifierIgnorable((int)ch);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public Quaternion multiplyLocal(final double scalar) {\n        setX(getX() * scalar);\n        setY(getY() * scalar);\n        setZ(getZ() * scalar);\n        setW(getW() * scalar);\n        return this;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tpublic PsiBuilder.Marker parseAndDone(ShaderLabParserBuilder builder, @NotNull PsiBuilder.Marker mark)\n\t{\n\t\tfor(ShaderLabRole role : myRoles)\n\t\t{\n\t\t\tif(role instanceof ShaderLabValueRole && ((ShaderLabValueRole) role).isMyValue(builder))\n\t\t\t{\n\t\t\t\treturn role.parseAndDone(builder, mark);\n\t\t\t}\n\t\t}\n\n\t\tdoneWithErrorSafe(builder, \"Wrong value\");\n\t\tmark.done(ShaderLabElements.SIMPLE_VALUE);\n\n\t\treturn mark;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void testMultipleUnknown() throws Exception\n    {\n        MoreNestedField moreNestedField = new MoreNestedField();\n        NestedTwoField nestedTwoField = new NestedTwoField();\n        nestedTwoField.setNested1(1);\n        nestedTwoField.setNested2(2);\n        moreNestedField.setF1(nestedTwoField);\n\n        byte[] in = MAPPER.writerFor(MoreNestedField.class)\n                .with(MAPPER.generateSchemaFor(MoreNestedField.class))\n                .writeValueAsBytes(moreNestedField);\n\n        LessNestedField lesser = MAPPER.readerFor(LessNestedField.class)\n                .with(MAPPER.generateSchemaFor(LessNestedField.class))\n                .with(JsonParser.Feature.IGNORE_UNDEFINED)\n                .readValue(in);\n\n        assertEquals(moreNestedField.getF1().getNested2(), lesser.getF1().getNested2());\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    protected void renderImageXform(SunGraphics2D sg, Image img,\n            AffineTransform tx, int interpType, int sx1, int sy1, int sx2,\n            int sy2, Color bgColor) {\n        SurfaceData dstData = sg.surfaceData;\n        SurfaceData srcData = dstData.getSourceSurfaceData(img,\n                SunGraphics2D.TRANSFORM_GENERIC, sg.imageComp, bgColor);\n\n        if (srcData != null && !isBgOperation(srcData, bgColor))  { // TODO: Do we bail out on bgBlits?\n            SurfaceType srcType = srcData.getSurfaceType();\n            SurfaceType dstType = dstData.getSurfaceType();\n\n            TransformBlit blit = TransformBlit.getFromCache(srcType,\n                    sg.imageComp, dstType);\n\n            if (blit != null) {\n                blit.Transform(srcData, dstData, sg.composite,\n                        sg.getCompClip(), tx, interpType, sx1, sy1, 0, 0, sx2\n                                - sx1, sy2 - sy1);\n                return;\n            }\n        }\n\n        super.renderImageXform(sg, img, tx, interpType, sx1, sy1, sx2, sy2,\n                bgColor);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate String endCapture() {\n    int end = current == -1 ? index : index - 1;\n    String captured;\n    if( captureBuffer.length() > 0 ) {\n      captureBuffer.append( buffer, captureStart, end - captureStart );\n      captured = captureBuffer.toString();\n      captureBuffer.setLength( 0 );\n    } else {\n      captured = new String( buffer, captureStart, end - captureStart );\n    }\n    captureStart = -1;\n    return captured;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public Kernel(int width, int height, double factor, double data[]) {\n        this(width, height, (width - 1) / 2, (height - 1) / 2, factor, data);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic ShortcutView(final Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t\tpm = context.getPackageManager();\n\t\t\n\t\tsec = PreferenceManager.getDefaultSharedPreferences(getContext());\n\n\t\tpkg = sec.getString(\"pkg\", \"\");\n\t\tpin = sec.getString(\"pin\", \"\");\t\t\n\t\t\n\t\t\n\t\tfor (int i = 0; i < CAPACITY; i++) {\n\t\t\tfinal int b = i;\n\t\t\tApplicationInfo ai = null;\n\t\t\tString sv = null;\n\t\t\tString s = Settings.System.getString(context.getContentResolver(), \"PiSC\" + i);\n\n\t\t\tif (s == null | s == \"\") {\n\n\t\t\t\tSettings.System.putString(context.getContentResolver(), \"PiSC\"+b, \"com.pilockerstable\");\n\t\t\t}\n\t\t\tsv = s;\n\t\t\tShortCut sc = new ShortCut(context, attrs);\n\t\t\t\n\t\t\ttry {\n\t\t\t\tai = pm.getApplicationInfo(sv, 0);\n\t\t\t} catch (NameNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\ttry{\n\t\t\tString App_Name = (String) pm.getApplicationLabel(ai);\n\t\t\tDrawable Icon = pm.getApplicationIcon(ai);\n\t\t\tShortcutter st = new Shortcutter(App_Name, Icon);\n\t\t\tsc.setName(st.getName());\n\t\t\tsc.setImage(st.getIcon());\t\t\t\n\t\t\taddView(sc);\n\t\t\t\n\t\t\t}catch(Exception e){\n\t\t\t\tSettings.System.putString(context.getContentResolver(), \"PiSC\"+b, \"com.pilockerstable\");\n\t\t\t}\n\t\t\t\n\t\t\tsc.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t\n\t\t\t\tString sv = Settings.System.getString( context.getContentResolver(), \"PiSC\" + b);\n\n\t\t\t\t@Override \n\t\t\t\tpublic void onClick(View arg0) {\n\n\t\t\t\t\tif( pin.equals(\"\") || pin.equals(null) || pin.isEmpty()) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t((Activity) context).finish();\n\t\t\t\t\t\tIntent i = new Intent();\n\t\t\t\t\t\ti.setClass(getContext(), LockerService.class);\n\t\t\t\t\t\tcontext.startService(i);\n\t\t\t\t\t\tIntent LaunchIntent = context.getPackageManager().getLaunchIntentForPackage(sv);\n\t\t\t\t\t\tcontext.startActivity(LaunchIntent);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t}else{\n\t\t\t\t\t\n\t\t\t\t\tsave(\"pkg\", \"true\");\n\t\t\t\t\tIntent x = new Intent(getContext(), PinActivity.class);\n\t\t\t\t\tx.putExtra(\"sv\", sv);\n\t\t\t\t\tcontext.startActivity(x);\n\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public Kernel(int width, int height, float data[]) {\n        this.width  = width;\n        this.height = height;\n        this.xOrigin  = (width-1)>>1;\n        this.yOrigin  = (height-1)>>1;\n        int len = width*height;\n        if (data.length < len) {\n            throw new IllegalArgumentException(\"Data array too small \"+\n                                               \"(is \"+data.length+\n                                               \" and should be \"+len);\n        }\n        this.data = new float[len];\n        System.arraycopy(data, 0, this.data, 0, len);\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, com.ib.client.Contract contractIB, com.ib.client.Order order,\n\t\t\tOrderState orderState) {\n\t\ttry {\n\n\t\t\tTWSBrokerModel.logOrderState(orderState);\n\t\t\tTWSBrokerModel.logTradeOrder(order);\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(new Integer(order.m_orderId));\n\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170,\n\t\t\t\t\t\t\"Warning Order not found for Order Key: \" + order.m_orderId + \" make sure Client ID: \"\n\t\t\t\t\t\t\t\t+ this.m_clientId + \" is not the master in TWS. On openOrder update.\");\n\t\t\t\ttransientInstance = new TradeOrder();\n\t\t\t\ttransientInstance.setOrderKey(order.m_orderId);\n\t\t\t\ttransientInstance.setCreateDate(TradingCalendar.getDateTimeNowMarketTimeZone());\n\t\t\t\tTWSBrokerModel.updateTradeOrder(order, orderState, transientInstance);\n\t\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (TWSBrokerModel.updateTradeOrder(order, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t_log.debug(\"Open order filled Order Key:\" + transientInstance.getOrderKey());\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (transientInstance.hasTradePosition() && !transientInstance.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(transientInstance.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Open order state changed. Status:\" + orderState.m_status);\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(transientInstance);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.fireTradeOrderStatusChanged(transientInstance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n        public void onReply(int num, String value, String msg)\n        {\n            switch (num)\n            {\n                case 353:\n                    tmpUserList.addAll(CollectionUtil.asList(msg.split(\" \")));\n                    break;\n\n                case 366:\n                    userList.setListData(tmpUserList.toArray(new String[tmpUserList.size()]));\n                    tmpUserList.clear();\n                    break;\n\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 250:\n                case 251:\n                case 252:\n                case 253:\n                case 254:\n                case 255:\n                case 256:\n                case 257:\n                case 258:\n                case 259:\n                case 261:\n                case 262:\n                case 263:\n                case 265:\n                case 266:\n                case 372:\n                case 375:\n                case 376:\n                    break;\n\n                default:\n                    onReceive(null, null, msg);\n            }\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate ExternalCarrierBillingInstrumentProto(Builder builder) {\n    this(builder.instrumentKey, builder.subscriberIdentifier, builder.accountType, builder.subscriberCurrency, builder.transactionLimit, builder.subscriberName, builder.address1, builder.address2, builder.city, builder.state, builder.postalCode, builder.country, builder.encryptedSubscriberInfo);\n    setBuilder(builder);\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, ClassTransformer transformer, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            MethodPair methodPair = transformer.methods.get(\"()V\" + method);\n            if (methodPair == null)\n            {\n                continue;\n            }\n            lineNumber = InvokerGenerator.printMethod(mv, clazz, method, Modifier.isStatic(methodPair.node.access), lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public String getReplyString()\n    {\n        StringBuilder buffer = new StringBuilder(256);\n\n        for (String entry : _replyLines)\n        {\n            buffer.append(entry);\n            buffer.append(SocketClient.NETASCII_EOL);\n        }\n\n        return buffer.toString();\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate Component buildHeader() {\n        HorizontalLayout header = new HorizontalLayout();\n        header.addStyleName(\"viewheader\");\n        header.setSpacing(true);\n\n        titleLabel = new Label(MsgUtil.getMsgFallbackToSelf(messageSource, \"view.dashboard.\", \"title\"));\n        titleLabel.setId(TITLE_ID);\n        titleLabel.setSizeUndefined();\n        titleLabel.addStyleName(ValoTheme.LABEL_H1);\n        titleLabel.addStyleName(ValoTheme.LABEL_NO_MARGIN);\n        header.addComponent(titleLabel);\n\n        \n        \n        return header;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tprotected void systemLoader(Context context)\n\t{\n\t\tif (RockySdk.getInstance().getContext() != null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tContext application = context.getApplicationContext();\n\t\t\n\t\tWebView webview = new WebView(context);\n\t\twebview.layout(0, 0, 0, 0);\n\t\tWebSettings webSettings = webview.getSettings();\n\t\t\n\t\tApplicationInfo applicationInfo = context.getApplicationInfo();\n\t\t\n\t\tVersionInfo versionInfo = ManifestTools.getVersionInfo(application);\n\t\tString userAgent = webSettings.getUserAgentString();\n\t\t\n\t\tClientInfo clientInfo = new ClientInfo(application.getPackageName());\n\t\tclientInfo.setAppicon(applicationInfo.icon);\n\t\tclientInfo.setAppname(ManifestTools.getApplicationLable(application));\n\t\tclientInfo.setDeviceType(SdkConfig.Device.PHONE);\n\t\tclientInfo.setDeviceName(android.os.Build.MODEL);\n\t\tclientInfo.setAlias(android.os.Build.MODEL);\n\t\tclientInfo.setSdkVersion(android.os.Build.VERSION.SDK_INT);\n\t\tclientInfo.setMac(DeviceInfoManager.getMacAddress(application));\n\t\t\n\t\tclientInfo.setUserAgent(userAgent);\n\t\t\n\t\tif (versionInfo != null)\n\t\t{\n\t\t\tclientInfo.setVersionCode(versionInfo.getVersionCode());\n\t\t\tclientInfo.setVersionName(versionInfo.getVersionName());\n\t\t}\n\t\t\n\t\tclientInfo.addFlags(ClientInfo.FLAG_DEBUG | ClientInfo.FLAG_RELEASE);\n\t\t\n\t\tRockyConfig config = new RockyConfig.Builder(application)\n\t\t\t.clientInfo(clientInfo)\n\t\t\t.hasAdBanner(false)\t\t// \u93c4\u5267\u305a\u7ec9\ue21a\u578eBanner\n\t\t\t.hasAdPointsWall(true)\t// \u93c4\u5267\u305a\u7ec9\ue21a\u578e\u6fa7\n\t\t\t.build();\n\t\t\n\t\tRockySdk.getInstance().init(config);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void testAs()\n    {\n        check(\n            \"select x y from t\",\n            TestUtil.fold(\n                \"SELECT `X` AS `Y`\\n\"\n                + \"FROM `T`\"));\n\n        check(\n            \"select x AS y from t\",\n            TestUtil.fold(\n                \"SELECT `X` AS `Y`\\n\"\n                + \"FROM `T`\"));\n        check(\n            \"select sum(x) y from t group by z\",\n            TestUtil.fold(\n                \"SELECT SUM(`X`) AS `Y`\\n\"\n                + \"FROM `T`\\n\"\n                + \"GROUP BY `Z`\"));\n\n        check(\n            \"select count(z) over w foo from Bids window w as (order by x)\",\n            TestUtil.fold(\n                \"SELECT (COUNT(`Z`) OVER `W`) AS `FOO`\\n\"\n                + \"FROM `BIDS`\\n\"\n                + \"WINDOW `W` AS (ORDER BY `X`)\"));\n\n        final String expected =\n            TestUtil.fold(\n                \"SELECT `X`\\n\"\n                + \"FROM `T` AS `T1`\");\n        check(\"select x from t as t1\", expected);\n        check(\"select x from t t1\", expected);\n\n        checkFails(\n            \"select sum(x) over w from bids window w ^(order by x)\",\n            \"(?s).*Encountered \\\"\\\\(\\\".*\");\n\n        checkFails(\n            \"select count(*) as foo ^over^ w from Bids window w (order by x)\",\n            \"(?s).*Encountered \\\"over\\\".*\");\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate URI api(String path) {\n        if (!path.toLowerCase().matches(\"https?://.*\")) {\n            path = urlJoin(this.context, path);\n        }\n        if (!path.contains(\"?\")) {\n            if (!path.endsWith(\"/stop\")) {\n                path = urlJoin(path, \"api/json\");\n            }\n        } else {\n            String[] components = path.split(\"\\\\?\", 2);\n            path = urlJoin(components[0], \"api/json\") + \"?\" + components[1];\n        }\n        URI requestUri = uri.resolve(\"/\").resolve(path);\n        return requestUri;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate long getLongFromString(String stringVal) throws SQLException {\n\t\tif (stringVal == null || stringVal.trim().length() == 0) {\n\t\t\tthis.lastWasNull = true;\n\t\t\treturn 0L;\n\t\t}\n\t\ttry {\n\t\t\tint decimalIndex = stringVal.indexOf(\".\");\n\n\t\t\tif (decimalIndex != -1) {\n\t\t\t\tdouble valueAsDouble = Double.parseDouble(stringVal);\n\t\t\t\treturn (long) valueAsDouble;\n\t\t\t}\n\n\t\t\treturn Long.parseLong(stringVal);\n\t\t} catch (NumberFormatException e) {\n\t\t\tthrow new SQLException(\"Parse integer error:\" + stringVal);\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void paintIcon(Component c, Graphics g, int x, int y) {\n            AbstractButton b = (AbstractButton) c;\n            ButtonModel model = b.getModel();\n\n            boolean flat = false;\n\n            if(b instanceof JCheckBox) {\n                flat = ((JCheckBox)b).isBorderPaintedFlat();\n            }\n\n            boolean isPressed = model.isPressed();\n            boolean isArmed = model.isArmed();\n            boolean isEnabled = model.isEnabled();\n            boolean isSelected = model.isSelected();\n\n            boolean checkToggleIn = ((isPressed &&\n                                      !isArmed   &&\n                                      isSelected) ||\n                                     (isPressed &&\n                                      isArmed   &&\n                                      !isSelected));\n            boolean uncheckToggleOut = ((isPressed &&\n                                         !isArmed &&\n                                         !isSelected) ||\n                                        (isPressed &&\n                                         isArmed &&\n                                         isSelected));\n\n            boolean checkIn = (!isPressed  &&\n                               isArmed    &&\n                               isSelected  ||\n                               (!isPressed &&\n                                !isArmed  &&\n                                isSelected));\n\n\n            if(flat) {\n                g.setColor(shadow);\n                g.drawRect(x+2,y,csize-1,csize-1);\n                if(uncheckToggleOut || checkToggleIn) {\n                    g.setColor(control);\n                    g.fillRect(x+3,y+1,csize-2,csize-2);\n                }\n            }\n\n            if (checkToggleIn) {\n                drawCheckBezel(g,x,y,csize,true,false,false,flat);\n            } else if (uncheckToggleOut) {\n                drawCheckBezel(g,x,y,csize,true,true,false,flat);\n            } else if (checkIn) {\n                drawCheckBezel(g,x,y,csize,false,false,true,flat);\n            } else if(!flat) {\n                drawCheckBezelOut(g,x,y,csize);\n            }\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(byte[] bytes, int start, int length) {\n        char[] chars = localBuffer.get();\n        if (chars == null || chars.length < length) {\n            chars = new char[length];\n            localBuffer.set(chars);\n        }\n        int outAt = 0;\n\n        for (int at = start; length > 0; ) {\n            int v0 = bytes[at] & 0xFF;\n            char out;\n            switch (v0 >> 4) {\n                case 0x00: case 0x01: case 0x02: case 0x03:\n                case 0x04: case 0x05: case 0x06: case 0x07: {\n                    length--;\n                    if (v0 == 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    out = (char) v0;\n                    at++;\n                    break;\n                }\n                case 0x0c: case 0x0d: {\n                    length -= 2;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int value = ((v0 & 0x1f) << 6) | (v1 & 0x3f);\n                    if ((value != 0) && (value < 0x80)) {\n                        \n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    out = (char) value;\n                    at += 2;\n                    break;\n                }\n                case 0x0e: {\n                    length -= 3;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int v2 = bytes[at + 2] & 0xFF;\n                    if ((v2 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    int value = ((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) |\n                            (v2 & 0x3f);\n                    if (value < 0x800) {\n                        \n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    out = (char) value;\n                    at += 3;\n                    break;\n                }\n                default: {\n                    return throwBadUtf8(v0, at);\n                }\n            }\n            chars[outAt] = out;\n            outAt++;\n        }\n\n        return new String(chars, 0, outAt);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr graph) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), graph});\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic boolean handleControlWord(RtfCtrlWordData ctrlWordData) {\n\t\tboolean result = true;\n\t\t\n\t\tif(ctrlWordData.ctrlWord.equals(\"f\")) { this.setFontNumber(ctrlWordData.param); result=true;}\n\t\tif(ctrlWordData.ctrlWord.equals(\"fcharset\")) { this.setCharset(ctrlWordData.param); result=true; }\n\n\t\tif(ctrlWordData.ctrlWord.equals(\"fnil\")) { this.setFontFamily(\"roman\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"froman\")) { this.setFontFamily(\"roman\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fswiss\")) { this.setFontFamily(\"swiss\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fmodern\")) { this.setFontFamily(\"modern\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fscript\")) { this.setFontFamily(\"script\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fdecor\")) { this.setFontFamily(\"decor\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"ftech\")) { this.setFontFamily(\"tech\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fbidi\")) { this.setFontFamily(\"bidi\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fprq\")) { this.setPitch(ctrlWordData.param); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fbias\")) { this.setBias(ctrlWordData.param); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"flomajor\")) { this.setThemeFont(\"flomajor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fhimajor\")) { this.setThemeFont(\"fhimajor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fdbmajor\")) { this.setThemeFont(\"fdbmajor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fbimajor\")) { this.setThemeFont(\"fbimajor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"flominor\")) { this.setThemeFont(\"flominor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fhiminor\")) { this.setThemeFont(\"fhiminor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fdbminor\")) { this.setThemeFont(\"fdbminor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fbiminor\")) { this.setThemeFont(\"fbiminor\"); result= true; }\n\n\t\tif(ctrlWordData.ctrlWord.equals(\"panose\")) {state = SETTING_PANOSE; result = true; }\n\t\t\n\t\tif(ctrlWordData.ctrlWord.equals(\"fname\")) {state = SETTING_FONTNAME; result = true; }\n\n\t\tif(ctrlWordData.ctrlWord.equals(\"falt\")) { state = SETTING_ALTERNATE; result = true; }\n\t\t\n\t\tif(ctrlWordData.ctrlWord.equals(\"fontemb\")) { state = SETTING_FONT_EMBED; result = true; }\n\n\t\tif(ctrlWordData.ctrlWord.equals(\"ftnil\")) { this.setTrueType(\"ftnil\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fttruetype\")) { this.setTrueType(\"fttruetype\"); result= true; }\n\t\t\n\t\tif(ctrlWordData.ctrlWord.equals(\"fontemb\")) { state = SETTING_FONT_FILE; result = true; }\n\n\t\tif(ctrlWordData.ctrlWord.equals(\"cpg\")) { this.setCodePage(ctrlWordData.param); result= true; }\n\t\t\n\t\tthis.lastCtrlWord = ctrlWordData;\n\t\treturn result;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1];\n            int col = 1;\n            if (val.length > 2)\n                col = Math.max(1, (int)val[2]);\n\n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            Object o = table.data.get(row-1)[col-1];\n            if (o instanceof Float)\n                return (Float)o;\n            return 0f;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n        this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n        BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n        this.updateNaturalParameterPrior(prior);\n\n        return learntBN;\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic int normalizeMe() throws IllegalArgumentException {\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint i;\n\t\tfor (i = nWords - 1; i >= 0 && (l = data[i]) == 0; i--)\n\t\t\tj++;\n\n\t\tif (i < 0)\n\t\t\tthrow new IllegalArgumentException(\"zero value\");\n\t\tnWords -= j;\n\t\tif ((l & -268435456) != 0) {\n\t\t\tfor (k = 32; (l & -268435456) != 0; k--)\n\t\t\t\tl >>>= 1;\n\n\t\t} else {\n\t\t\twhile (l <= 1048575) {\n\t\t\t\tl <<= 8;\n\t\t\t\tk += 8;\n\t\t\t}\n\t\t\twhile (l <= 134217727) {\n\t\t\t\tl <<= 1;\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t\tif (k != 0)\n\t\t\tlshiftMe(k);\n\t\treturn k;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        int length = bytes.size();\n        char[] chars = new char[length]; // This is sized to avoid a realloc.\n        int outAt = 0;\n\n        for (int at = 0; length > 0; ) {\n            int v0 = bytes.getUnsignedByte(at);\n            char out;\n            switch (v0 >> 4) {\n                case 0x00: case 0x01: case 0x02: case 0x03:\n                case 0x04: case 0x05: case 0x06: case 0x07: {\n                    length--;\n                    if (v0 == 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    out = (char) v0;\n                    at++;\n                    break;\n                }\n                case 0x0c: case 0x0d: {\n                    length -= 2;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes.getUnsignedByte(at + 1);\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int value = ((v0 & 0x1f) << 6) | (v1 & 0x3f);\n                    if ((value != 0) && (value < 0x80)) {\n                        \n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    out = (char) value;\n                    at += 2;\n                    break;\n                }\n                case 0x0e: {\n                    length -= 3;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes.getUnsignedByte(at + 1);\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int v2 = bytes.getUnsignedByte(at + 2);\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    int value = ((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) |\n                        (v2 & 0x3f);\n                    if (value < 0x800) {\n                        \n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    out = (char) value;\n                    at += 3;\n                    break;\n                }\n                default: {\n                    return throwBadUtf8(v0, at);\n                }\n            }\n            chars[outAt] = out;\n            outAt++;\n        }\n\n        return new String(chars, 0, outAt);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate ExternalCarrierBillingInstrumentProto(Builder builder) {\n    this(builder.instrumentKey, builder.subscriberIdentifier, builder.accountType, builder.subscriberCurrency, builder.transactionLimit, builder.subscriberName, builder.address1, builder.address2, builder.city, builder.state, builder.postalCode, builder.country, builder.encryptedSubscriberInfo);\n    setBuilder(builder);\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void cleanData(HashMap<String, String> data) {\n        preventOverwrite(data, ChannelType.FIELD_NAME);\n        preventOverwrite(data, CreationDate.FIELD_NAME);\n        preventOverwrite(data, Creator.FIELD_NAME);\n        preventOverwrite(data, ContentType.FIELD_NAME);\n\n        ensurePresent(data, NodeTitle.FIELD_NAME);\n        ensurePresent(data, NodeDescription.FIELD_NAME);\n        ensurePresent(data, AccessModel.FIELD_NAME);\n        ensurePresent(data, Affiliation.FIELD_NAME);\n\n        setLastUpdatedDate(data);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1];\n            int col = 1;\n            if (val.length > 2)\n                col = Math.max(1, (int)val[2]);\n\n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            Object o = table.data.get(row-1)[col-1];\n            if (o instanceof Float)\n                return (Float)o;\n            return 0f;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void Bld_all(Xoa_lang_mgr lang_mgr, Xoa_fsys_mgr fsys_mgr, Xol_lang_transform lang_transform) {\n\t\tIo_url lang_root = fsys_mgr.Cfg_lang_core_dir().OwnerDir();\n\t\tParse_mediawiki(lang_mgr, lang_root.GenSubDir(\"mediawiki\"), lang_transform);\n\t\tSave_langs(lang_mgr, lang_root.GenSubDir(Xol_mw_lang_parser.Dir_name_core), Ordered_hash_.New_bry(), Ordered_hash_.New_bry());\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static Filter methodFilter(final java.lang.reflect.Method m,\n            final boolean isTest,\n            Object[] extraArgs, final Object falseResult) {\n        Class[] params = m.getParameterTypes();\n        final boolean isStatic = java.lang.reflect.Modifier.isStatic(m.getModifiers());\n        int insertLen = (isStatic ? 1 : 0);\n        if (insertLen + (extraArgs == null ? 0 : extraArgs.length) > params.length) {\n            throw new IllegalArgumentException(\"too many arguments\");\n        }\n        final Object[] args = (params.length == insertLen) ? null\n                : new Object[params.length];\n        final Class valueType = !isStatic ? m.getDeclaringClass() : params[0];\n        if (valueType.isPrimitive()) {\n            throw new IllegalArgumentException(\"filtered value must be reference type\");\n        }\n        int fillp = insertLen;\n        if (extraArgs != null) {\n            for (int i = 0; i < extraArgs.length; i++) {\n                args[fillp++] = extraArgs[i];\n            }\n        }\n        if (args != null) {\n            while (fillp < args.length) {\n                Class param = params[fillp];\n                args[fillp++] = param.isPrimitive() ? zeroArgs.get(param) : null;\n            }\n        }\n        final Thread curt = Thread.currentThread();\n        class MFilt implements Filter {\n\n            public Object filter(Object value) {\n                if (!valueType.isInstance(value)) {\n                    return null;  // filter fails quickly\n                }\n                Object[] args1 = args;\n                if (isStatic) {\n                    if (args1 == null) {\n                        args1 = new Object[1];\n                    } else if (curt != Thread.currentThread()) // Dirty hack to curtail array copying in common case.\n                    {\n                        args1 = (Object[]) args1.clone();\n                    }\n                    args1[0] = value;\n                }\n                Object res;\n                try {\n                    res = m.invoke(value, args1);\n                } catch (java.lang.reflect.InvocationTargetException te) {\n                    Throwable ee = te.getCause();\n                    if (ee instanceof RuntimeException) {\n                        throw (RuntimeException) ee;\n                    }\n                    if (ee instanceof Error) {\n                        throw (Error) ee;\n                    }\n                    throw new RuntimeException(\"throw in filter\", ee);\n                } catch (IllegalAccessException ee) {\n                    throw new RuntimeException(\"access error in filter\", ee);\n                }\n                if (res == null) {\n                    if (!isTest && m.getReturnType() == Void.TYPE) {\n                        res = value;\n                    }\n                } else {\n                    if (falseResult != null && falseResult.equals(res)) {\n                        res = null;\n                    } else if (isTest) {\n                        res = value;\n                    }\n                }\n                return res;\n            }\n\n            @Override\n            public String toString() {\n                return \"<Method>\" + m + \"</Method>\";\n            }\n        }\n        return new MFilt();\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tprivate void buildElements()\n\t{\n\t\tImage image = new Image(logo);\n\n\t\timage.setWidth(getWidth());\n\t\timage.setHeight(getHeight());\n\n\t\turlLabel = new Label(\"www.netthreads.co.uk\", skin, URL_LABEL_FONT, Color.WHITE);\n\n\t\tversionLabel = new Label(Box2DBumpers.VERSION_TEXT, skin, URL_LABEL_FONT, Color.WHITE);\n\n\t\ttable = new Table();\n\n\t\ttable.setSize((int) getWidth(), (int) getHeight());\n\n\t\ttable.row();\n\t\ttable.add(urlLabel).expandY().expandX();\n\t\ttable.row();\n\t\ttable.add(image);\n\t\ttable.row();\n\t\ttable.add(versionLabel).expandY().expandX();\n\n\t\ttable.pack();\n\n\t\ttable.setFillParent(true);\n\n\t\taddActor(table);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    protected void fireVetoableChange(String propertyName, Object oldValue,\n                                      Object newValue)\n        throws PropertyVetoException\n    {\n        if (oldValue == newValue) {\n            return;\n        }\n        VetoableChangeSupport vetoableSupport =\n            this.vetoableSupport;\n        if (vetoableSupport != null) {\n            vetoableSupport.fireVetoableChange(propertyName, oldValue,\n                                               newValue);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1],\n                col = (int)val[2];\n            float toSet = val[3];\n            \n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            table.setVal(row-1, col-1, toSet);\n            return toSet;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprotected void onReply(long msgId, Buffer headerBuffer, Buffer bodyBuffer) {\n    TcpRequest request = requestMap.remove(msgId);\n    if (request == null) {\n      LOGGER.error(\"Unknown reply msgId {}, waiting count {}\", msgId, requestMap.size());\n      return;\n    }\n\n    request.onReply(headerBuffer, bodyBuffer);\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n\n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n\n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n\n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static boolean isWhitespace(String str) {\n        if (str == null) {\n            return false;\n        }\n        int sz = str.length();\n        for (int i = 0; i < sz; i++) {\n            if ((Character.isWhitespace(str.charAt(i)) == false)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void addShaped(IItemStack output, IIngredient[][] ingredients, IRecipeFunction function, boolean mirrored) {\n\t\tShapedRecipe recipe = new ShapedRecipe(output, ingredients, function, mirrored);\n\t\tIRecipe irecipe = RecipeConverter.convert(recipe);\n\t\tMineTweakerAPI.apply(new ActionAddRecipe(irecipe, recipe));\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic List<ValidationIssue> checkExtensions(final Certificate cert,\n            final X509IssuerInfo issuerInfo, final Extensions requestedExtensions,\n            final X500Name requestedSubject) {\n        ParamUtil.requireNonNull(\"cert\", cert);\n        ParamUtil.requireNonNull(\"issuerInfo\", issuerInfo);\n\n        X509Certificate jceCert;\n        try {\n            jceCert = X509Util.toX509Cert(cert);\n        } catch (CertificateException ex) {\n            throw new IllegalArgumentException(\"invalid cert: \" + ex.getMessage());\n        }\n\n        List<ValidationIssue> result = new LinkedList<>();\n\n        Set<ASN1ObjectIdentifier> presentExtenionTypes =\n                getExensionTypes(cert, issuerInfo, requestedExtensions);\n\n        Extensions extensions = cert.getTBSCertificate().getExtensions();\n        ASN1ObjectIdentifier[] oids = extensions.getExtensionOIDs();\n\n        if (oids == null) {\n            ValidationIssue issue = new ValidationIssue(\"X509.EXT.GEN\", \"extension general\");\n            result.add(issue);\n            issue.setFailureMessage(\"no extension is present\");\n            return result;\n        }\n\n        List<ASN1ObjectIdentifier> certExtTypes = Arrays.asList(oids);\n\n        for (ASN1ObjectIdentifier extType : presentExtenionTypes) {\n            if (!certExtTypes.contains(extType)) {\n                ValidationIssue issue = createExtensionIssue(extType);\n                result.add(issue);\n                issue.setFailureMessage(\"extension is absent but is required\");\n            }\n        }\n\n        Map<ASN1ObjectIdentifier, ExtensionControl> extensionControls =\n                certProfile.extensionControls();\n        for (ASN1ObjectIdentifier oid : certExtTypes) {\n            ValidationIssue issue = createExtensionIssue(oid);\n            result.add(issue);\n            if (!presentExtenionTypes.contains(oid)) {\n                issue.setFailureMessage(\"extension is present but is not permitted\");\n                continue;\n            }\n\n            Extension ext = extensions.getExtension(oid);\n            StringBuilder failureMsg = new StringBuilder();\n            ExtensionControl extControl = extensionControls.get(oid);\n\n            if (extControl.isCritical() != ext.isCritical()) {\n                addViolation(failureMsg, \"critical\", ext.isCritical(), extControl.isCritical());\n            }\n\n            byte[] extensionValue = ext.getExtnValue().getOctets();\n            try {\n                if (Extension.authorityKeyIdentifier.equals(oid)) {\n                    checkExtensionIssuerKeyIdentifier(failureMsg, extensionValue, issuerInfo);\n                } else if (Extension.subjectKeyIdentifier.equals(oid)) {\n                    checkExtensionSubjectKeyIdentifier(failureMsg, extensionValue,\n                            cert.getSubjectPublicKeyInfo());\n                } else if (Extension.keyUsage.equals(oid)) {\n                    checkExtensionKeyUsage(failureMsg, extensionValue, jceCert.getKeyUsage(),\n                            requestedExtensions, extControl);\n                } else if (Extension.certificatePolicies.equals(oid)) {\n                    checkExtensionCertificatePolicies(failureMsg, extensionValue,\n                            requestedExtensions, extControl);\n                } else if (Extension.policyMappings.equals(oid)) {\n                    checkExtensionPolicyMappings(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.subjectAlternativeName.equals(oid)) {\n                    checkExtensionSubjectAltName(failureMsg, extensionValue, requestedExtensions,\n                            extControl, requestedSubject);\n                } else if (Extension.subjectDirectoryAttributes.equals(oid)) {\n                    checkExtensionSubjectDirAttrs(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.issuerAlternativeName.equals(oid)) {\n                    checkExtensionIssuerAltNames(failureMsg, extensionValue, issuerInfo);\n                } else if (Extension.basicConstraints.equals(oid)) {\n                    checkExtensionBasicConstraints(failureMsg, extensionValue);\n                } else if (Extension.nameConstraints.equals(oid)) {\n                    checkExtensionNameConstraints(failureMsg, extensionValue, extensions,\n                            extControl);\n                } else if (Extension.policyConstraints.equals(oid)) {\n                    checkExtensionPolicyConstraints(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.extendedKeyUsage.equals(oid)) {\n                    checkExtensionExtendedKeyUsage(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.cRLDistributionPoints.equals(oid)) {\n                    checkExtensionCrlDistributionPoints(failureMsg, extensionValue, issuerInfo);\n                } else if (Extension.inhibitAnyPolicy.equals(oid)) {\n                    checkExtensionInhibitAnyPolicy(failureMsg, extensionValue, extensions,\n                            extControl);\n                } else if (Extension.freshestCRL.equals(oid)) {\n                    checkExtensionDeltaCrlDistributionPoints(failureMsg, extensionValue,\n                            issuerInfo);\n                } else if (Extension.authorityInfoAccess.equals(oid)) {\n                    checkExtensionAuthorityInfoAccess(failureMsg, extensionValue, issuerInfo);\n                } else if (Extension.subjectInfoAccess.equals(oid)) {\n                    checkExtensionSubjectInfoAccess(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (ObjectIdentifiers.id_extension_admission.equals(oid)) {\n                    checkExtensionAdmission(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (ObjectIdentifiers.id_extension_pkix_ocsp_nocheck.equals(oid)) {\n                    checkExtensionOcspNocheck(failureMsg, extensionValue);\n                } else if (ObjectIdentifiers.id_extension_restriction.equals(oid)) {\n                    checkExtensionRestriction(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (ObjectIdentifiers.id_extension_additionalInformation.equals(oid)) {\n                    checkExtensionAdditionalInformation(failureMsg, extensionValue,\n                            requestedExtensions, extControl);\n                } else if (ObjectIdentifiers.id_extension_validityModel.equals(oid)) {\n                    checkExtensionValidityModel(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.privateKeyUsagePeriod.equals(oid)) {\n                    checkExtensionPrivateKeyUsagePeriod(failureMsg, extensionValue,\n                            jceCert.getNotBefore(), jceCert.getNotAfter());\n                } else if (Extension.qCStatements.equals(oid)) {\n                    checkExtensionQcStatements(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.biometricInfo.equals(oid)) {\n                    checkExtensionBiometricInfo(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (ObjectIdentifiers.id_pe_tlsfeature.equals(oid)) {\n                    checkExtensionTlsFeature(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (ObjectIdentifiers.id_xipki_ext_authorizationTemplate.equals(oid)) {\n                    checkExtensionAuthorizationTemplate(failureMsg, extensionValue,\n                            requestedExtensions, extControl);\n                } else {\n                    byte[] expected;\n                    if (ObjectIdentifiers.id_smimeCapabilities.equals(oid)) {\n                        expected = smimeCapabilities.value();\n                    } else {\n                        expected = getExpectedExtValue(oid, requestedExtensions, extControl);\n                    }\n\n                    if (!Arrays.equals(expected, extensionValue)) {\n                        addViolation(failureMsg, \"extension valus\", hex(extensionValue),\n                                (expected == null) ? \"not present\" : hex(expected));\n                    }\n                }\n\n                if (failureMsg.length() > 0) {\n                    issue.setFailureMessage(failureMsg.toString());\n                }\n\n            } catch (IllegalArgumentException | ClassCastException\n                    | ArrayIndexOutOfBoundsException ex) {\n                LOG.debug(\"extension value does not have correct syntax\", ex);\n                issue.setFailureMessage(\"extension value does not have correct syntax\");\n            }\n        }\n\n        return result;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void useProxyIndirection() {\n        Class[] targetInterfaces = getReferenceClass().getInterfaces();\n        if (!getReferenceClass().isInterface() && getReferenceClass().getSuperclass() == null) {\n            setIndirectionPolicy(new ProxyIndirectionPolicy(targetInterfaces));\n        } else {\n            HashSet targetInterfacesCol = new HashSet();\n            if (getReferenceClass().getSuperclass() != null) {\n                buildTargetInterfaces(getReferenceClass(), targetInterfacesCol);\n            }\n            if (getReferenceClass().isInterface()) {\n                targetInterfacesCol.add(getReferenceClass());\n            }\n            targetInterfaces = (Class[])targetInterfacesCol.toArray(targetInterfaces);\n            setIndirectionPolicy(new ProxyIndirectionPolicy(targetInterfaces));\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public <T> List<T> toBeanList(ResultSet rs, Class<? extends T> type) throws SQLException {\n        List<T> results = new ArrayList<T>();\n\n        if (!rs.next()) {\n            return results;\n        }\n\n        PropertyDescriptor[] props = this.propertyDescriptors(type);\n        ResultSetMetaData rsmd = rs.getMetaData();\n        int[] columnToProperty = this.mapColumnsToProperties(rsmd, props);\n\n        do {\n            results.add(this.createBean(rs, type, props, columnToProperty));\n        } while (rs.next());\n\n        return results;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintWriter writer, boolean suppressLogin, char eolMarker, boolean showDirection)\n    {\n        __writer = writer;\n        __nologin = suppressLogin;\n        __eolMarker = eolMarker;\n        __directionMarker = showDirection;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nCurve createCurve() {\n        switch (type) {\n            case Polygon:\n                return new PolygonCurve();\n            case QuadraticBezier:\n                return null;\n            case CubicBezier:\n                return new CubicBezierCurve();\n            case QuadraticBasis:\n                return new QuadraticBasisSpline();\n            case CubicBasis:\n                return new CubicBasisSpline();\n            case QuadraticRational:\n                return new QuadraticRationalSpline();\n            case CubicRational:\n                return new CubicRationalSpline();\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void visitLdcInsn(Object cst) {\n        if (mv != null) {\n            mv.visitLdcInsn(cst);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(byte[] bytes, int start, int length) {\n        char[] chars = localBuffer.get();\n        if (chars == null || chars.length < length) {\n            chars = new char[length];\n            localBuffer.set(chars);\n        }\n        int outAt = 0;\n\n        for (int at = start; length > 0; ) {\n            int v0 = bytes[at] & 0xFF;\n            char out;\n            switch (v0 >> 4) {\n                case 0x00: case 0x01: case 0x02: case 0x03:\n                case 0x04: case 0x05: case 0x06: case 0x07: {\n                    length--;\n                    if (v0 == 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    out = (char) v0;\n                    at++;\n                    break;\n                }\n                case 0x0c: case 0x0d: {\n                    length -= 2;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int value = ((v0 & 0x1f) << 6) | (v1 & 0x3f);\n                    if ((value != 0) && (value < 0x80)) {\n                        \n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    out = (char) value;\n                    at += 2;\n                    break;\n                }\n                case 0x0e: {\n                    length -= 3;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int v2 = bytes[at + 2] & 0xFF;\n                    if ((v2 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    int value = ((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) |\n                            (v2 & 0x3f);\n                    if (value < 0x800) {\n                        \n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    out = (char) value;\n                    at += 3;\n                    break;\n                }\n                default: {\n                    return throwBadUtf8(v0, at);\n                }\n            }\n            chars[outAt] = out;\n            outAt++;\n        }\n\n        return new String(chars, 0, outAt);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public BufferedImage getRenderedImage(int t, int c)\n    {\n        final CustomVtkPanel vp = panel3D;\n        if (vp == null)\n            return null;\n\n        final int prevT = getPositionT();\n        final int prevC = getPositionC();\n\n        setPositionT(t);\n        setPositionC(c);\n        try\n        {\n            final vtkImageData imageData = getImageData();\n\n            invokeOnEDTSilent(new Runnable()\n            {\n                @Override\n                public void run()\n                {\n                    updateImageData(imageData);\n\n                    vp.setForceFineRendering(true);\n                    try\n                    {\n                        vp.paint(vp.getGraphics());\n                    }\n                    finally\n                    {\n                        vp.setForceFineRendering(false);\n                    }\n                }\n            });\n\n            try\n            {\n                final Robot robot = new Robot();\n                final Rectangle bounds = vp.getBounds();\n                bounds.setLocation(ComponentUtil.convertPointToScreen(bounds.getLocation(), vp));\n                return robot.createScreenCapture(bounds);\n            }\n            catch (AWTException e)\n            {\n                IcyExceptionHandler.showErrorMessage(e, true);\n                return null;\n            }\n\n        }\n        finally\n        {\n            setPositionT(prevT);\n            setPositionC(prevC);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public void load() {\n        List<ListItemViewModel> viewModels = new ArrayList<>(DUMMY_MODEL_COUNT);\n        for (int i = 0; i < DUMMY_MODEL_COUNT; i++) {\n            ListItemViewModel vm = new ListItemViewModel();\n            if (i % 10 == 0 && isAddingHeaders) {\n                vm.primary = \"Heading \" + i;\n                vm.layout = R.layout.list_group_heading;\n            } else {\n                vm.primary = \"Primary \" + i;\n                vm.secondary = \"Secondary \" + i;\n                vm.tertiary = \"Tertiary \" + i;\n                vm.imageUrl = \"http://rdiodynimages0-a.akamaihd.net/?l=a\" + (i + 100000) + \"-0\";\n            }\n            viewModels.add(vm);\n            if (vm.layout == R.layout.list_group_heading) {\n                onHeaderAdded(vm, i);\n            } else {\n                onItemAdded(vm, i);\n            }\n        }\n        setViewModels(viewModels);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void setGlobalProperties(Map<String, Object> globalProperties) {\n        this.globalProperties = globalProperties;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@BeforeClass\n    public static void setUp(){\n    \tfinal Properties props = new Properties();\n    \ttry {\n    \tprops.load(new FileInputStream(PATH_TO_TEST_PROPERTIES));\n    \t} catch (Exception e) {\n    \t\tlog.error(\"Error occured while reading mule.test.properties\", e);\n    \t}    \t\n    \tSystem.setProperty(\"sfdc.key\", props.getProperty(\"sfdc.key\"));\n    \tSystem.setProperty(\"sfdc.secret\", props.getProperty(\"sfdc.secret\"));\n    \tUSERNAME = props.getProperty(\"sfdc.user\");\n    \tPASSWORD = props.getProperty(\"sfdc.password\");\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n            CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n            this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n            BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n            this.updateNaturalParameterPrior(prior);\n\n            return learntBN;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test public void\n    testBlock() throws Exception {\n        CompilationUnit cu = new CompilationUnit(\"AstTests.java\");\n\n        final PackageMemberClassDeclaration clazz = AstTest.createClass(cu);\n\n        List<Java.Statement> body = new ArrayList<Statement>();\n\n        Block sub = new Block(AstTest.getLocation());\n        sub.addStatement(AstTest.createVarDecl(\"x\", \"2.0\"));\n\n        body.add(sub);\n        body.add(\n            new ReturnStatement(\n                AstTest.getLocation(),\n                new Java.BinaryOperation(\n                    AstTest.getLocation(),\n                    AstTest.createVariableRef(\"x\"),\n                    \"*\",\n                    AstTest.createIntegerLiteral(\"3\")\n                )\n            )\n        );\n\n        AstTest.createMethod(clazz, body, AstTest.createDoubleType());\n\n        try {\n            AstTest.compileAndEval(cu);\n            Assert.fail(\"Block must limit the scope of variables in it\");\n        } catch (CompileException ex) {\n            Assert.assertTrue(ex.getMessage().endsWith(\"Expression \\\"x\\\" is not an rvalue\"));\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; }\n        return retVal;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static com.google.bigtable.v2.Column parseFrom(\n      java.io.InputStream input,\n      com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n      throws java.io.IOException {\n    return com.google.protobuf.GeneratedMessageV3\n        .parseWithIOException(PARSER, input, extensionRegistry);\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic Result(DescriptiveStatistics latencies, SummaryStatistics throughputs, Map<String, DescriptiveStatistics> perHostLat, Map<String, SummaryStatistics> perHostThr) {\n\t\t\tthis.latencies = latencies;\n\t\t\tthis.throughputs = throughputs;\n\t\t\tthis.perHostLat = perHostLat;\n\t\t\tthis.perHostThr = perHostThr;\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\n    public static Bitmap fastblur(Context context, Bitmap sentBitmap, float radius) {\n\n        if (Build.VERSION.SDK_INT > 16 &&\n                    (!Build.MODEL.contains(\"google_sdk\")\n                             && !Build.MODEL.contains(\"Emulator\")\n                             && !Build.MODEL.contains(\"Android SDK\")\n                             && !Build.FINGERPRINT.contains(\"vbox86p\"))) {\n            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n            final RenderScript rs = RenderScript.create(context);\n            final Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n                                                                 Allocation.USAGE_SCRIPT);\n            final Allocation output = Allocation.createTyped(rs, input.getType());\n            final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n            script.setRadius(radius );\n            script.setInput(input);\n            script.forEach(output);\n            output.copyTo(bitmap);\n            return bitmap;\n        }\n\n        radius *= 0.1;\n        return blurfast(sentBitmap, (int) radius);\n\n\n\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, final Contract contract, final TradeOrder tradeOrder,\n\t\t\tfinal OrderState orderState) {\n\n\t\ttry {\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(tradeOrder.getOrderKey());\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170, \"Warning Order not found for Order Key: \" + orderId + \" make sure Client ID: \" + 0\n\t\t\t\t\t\t+ \" is not the master in TWS. On openOrder update.\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (BackTestBrokerModel.updateTradeOrder(tradeOrder, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\n\t\t\t\t\t_log.debug(\"Order Key: \" + transientInstance.getOrderKey() + \" filled.\");\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (updatedOrder.hasTradePosition() && !updatedOrder.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(updatedOrder.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Order key: \" + transientInstance.getOrderKey() + \" state changed. Status:\"\n\t\t\t\t\t\t\t+ orderState.m_status);\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(updatedOrder.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(updatedOrder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void quickSendFail( int clazz, Map<Integer,byte[]> parameters, byte[] tag )\n\t{\n\t\tParameterHandleValueMap map = TypeFactory.newParameterMap();\n\t\tif( parameters != null )\n\t\t{\n\t\t\tfor( Integer key : parameters.keySet() )\n\t\t\t{\n\t\t\t\tmap.put( TypeFactory.getParameterHandle(key), parameters.get(key) );\n\t\t\t}\n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\t\n\t\t\trtiamb.sendInteraction( TypeFactory.getInteractionHandle(clazz), map, tag );\n\t\t\tAssert.fail( \"Was expecting the sending of interaction [\" + clazz + \"] to fail\" );\n\t\t}\n\t\tcatch( Exception e )\n\t\t{\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void appendReplacement(StringBuffer sb, Matcher m)\n\t{\n\t\tString key = m.group(1), value;\n\t\tint ascii;\n\t\t\n\t\tif ((value = m_tags.get(key.toLowerCase())) != null)\n\t\t\tm.appendReplacement(sb, value);\n\t\telse if ((ascii = getASCII(key)) != -1)\n\t\t\tm.appendReplacement(sb, Character.toString((char)ascii));\n\t\telse\n\t\t\tm.appendReplacement(sb, m.group());\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr graph) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), graph});\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static Mat zeros(Size size, int type)\n    {\n\n        Mat retVal = new Mat(n_zeros(size.width, size.height, type));\n\n        return retVal;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static ITextViewer getViewer(IEditorPart editorPart) {\n        Object viewer = editorPart.getAdapter(ITextOperationTarget.class);\n\n        return (viewer instanceof ITextViewer) ? (ITextViewer) viewer : null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void addShaped(IItemStack output, IIngredient[][] ingredients, IRecipeFunction function, boolean mirrored) {\n\t\tShapedRecipe recipe = new ShapedRecipe(output, ingredients, function, mirrored);\n\t\tIRecipe irecipe = RecipeConverter.convert(recipe);\n\t\tMineTweakerAPI.apply(new ActionAddRecipe(irecipe, recipe));\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static int blendColors(int from, int to, float ratio) {\n        final float inverseRatio = 1f - ratio;\n\n        final float r = Color.red(to) * ratio + Color.red(from) * inverseRatio;\n        final float g = Color.green(to) * ratio + Color.green(from) * inverseRatio;\n        final float b = Color.blue(to) * ratio + Color.blue(from) * inverseRatio;\n\n        return Color.rgb((int) r, (int) g, (int) b);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps) {\n            return setImageAttachmentsForObject(objectProperty, bitmaps, false);\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\n    public static Bitmap fastblur(Context context, Bitmap sentBitmap, float radius) {\n\n        if (Build.VERSION.SDK_INT > 16 &&\n                    (!Build.MODEL.contains(\"google_sdk\")\n                             && !Build.MODEL.contains(\"Emulator\")\n                             && !Build.MODEL.contains(\"Android SDK\")\n                             && !Build.FINGERPRINT.contains(\"vbox86p\"))) {\n            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n            final RenderScript rs = RenderScript.create(context);\n            final Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n                                                                 Allocation.USAGE_SCRIPT);\n            final Allocation output = Allocation.createTyped(rs, input.getType());\n            final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n            script.setRadius(radius );\n            script.setInput(input);\n            script.forEach(output);\n            output.copyTo(bitmap);\n            return bitmap;\n        }\n\n        radius *= 0.1;\n        return blurfast(sentBitmap, (int) radius);\n\n\n\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate ExternalCarrierBillingInstrumentProto(Builder builder) {\n    this(builder.instrumentKey, builder.subscriberIdentifier, builder.accountType, builder.subscriberCurrency, builder.transactionLimit, builder.subscriberName, builder.address1, builder.address2, builder.city, builder.state, builder.postalCode, builder.country, builder.encryptedSubscriberInfo);\n    setBuilder(builder);\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public Value<Integer> run(Integer intermediate, String userEmail) {\n      String prompt =\n          \"The intermediate result is \" + intermediate + \".\"\n               + \" Please give one more int\";\n      PromisedValue<Integer> oneMoreInt = newPromise();\n      ExternalAgentJob.getIntFromUser(prompt, userEmail, oneMoreInt.getHandle());\n      return oneMoreInt;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static float convertDpToPixel(float dp, Context context) {\n        Resources resources = context.getResources();\n        DisplayMetrics metrics = resources.getDisplayMetrics();\n        float px = dp * ((float) metrics.densityDpi / DisplayMetrics.DENSITY_DEFAULT);\n        return px;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        PartialSufficientSatistics partialSufficientSatistics = PartialSufficientSatistics.createZeroPartialSufficientStatistics(efBayesianNetwork);\n        partialSufficientSatistics.copy(this.sumSS);\n        partialSufficientSatistics.normalize();\n        SufficientStatistics finalSS = efBayesianNetwork.createZeroSufficientStatistics();\n        finalSS.sum(partialSufficientSatistics.getCompoundVector());\n\n        efBayesianNetwork.setMomentParameters(finalSS);\n        return efBayesianNetwork.toBayesianNetwork(dag);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void setColumnWidth(int columnIndex, int width) {\n        _sheet.setColumnWidth(columnIndex, width);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1];\n            int col = 1;\n            if (val.length > 2)\n                col = Math.max(1, (int)val[2]);\n\n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            Object o = table.data.get(row-1)[col-1];\n            if (o instanceof Float)\n                return (Float)o;\n            return 0f;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic SmoothStreamingRendererBuilder(String userAgent, String url, String contentId,\n      MediaDrmCallback drmCallback, TextView debugTextView) {\n    this.userAgent = userAgent;\n    this.url = url;\n    this.contentId = contentId;\n    this.drmCallback = drmCallback;\n    this.debugTextView = debugTextView;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprotected final Class[] parseTypes(String arg) throws ClassNotFoundException {\n\t\tString[] parts = arg.split(\";\");\n\t\tClass[] types = new Class[parts.length];\n\t\tfor (int i = 0; i < types.length; i++) {\n\t\t\ttypes[i] = this.parseType(parts[i]);\n\t\t}\n\t\treturn types;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static void initConfig(Context context) {\n\t\tif(init) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tInputStream inputStream =  context.getResources().openRawResource(R.raw.config);\n\t\t\tProperties properties  = new Properties();\n\t\t\tproperties.load(inputStream);\n\t\t\tdebug = Boolean.valueOf(properties.getProperty(\"debug\"));\n\t\t\tL.e(\"Debug:\"+debug);\n\t\t\tpersistLog = Boolean.valueOf(properties.getProperty(\"persistLog\"));\n\t\t\tL.e(\"persistLog:\"+persistLog);\n\n\t\t\tmainCategoruUrl = properties.getProperty(\"mainCategoruUrl\");\n\t\t\tL.e(\"mainCategoruUrl:\"+mainCategoruUrl);\n\t\t\tinit = true;\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public void deliverIncomingMessage(IIPCHandle handle, long mid, long rmid, Object payload, Exception exception) {\n        HyracksClientInterfaceFunctions.Function fn = (HyracksClientInterfaceFunctions.Function) payload;\n        switch (fn.getFunctionId()) {\n            case GET_CLUSTER_CONTROLLER_INFO:\n                try {\n                    handle.send(mid, ccs.getClusterControllerInfo(), null);\n                } catch (IPCException e) {\n                    LOGGER.log(Level.WARNING, \"Error sending response to GET_CLUSTER_CONTROLLER_INFO request\", e);\n                }\n                break;\n            case GET_JOB_STATUS:\n                HyracksClientInterfaceFunctions.GetJobStatusFunction gjsf =\n                        (HyracksClientInterfaceFunctions.GetJobStatusFunction) fn;\n                ccs.getWorkQueue().schedule(\n                        new GetJobStatusWork(ccs.getJobManager(), gjsf.getJobId(), new IPCResponder<>(handle, mid)));\n                break;\n            case GET_JOB_INFO:\n                HyracksClientInterfaceFunctions.GetJobInfoFunction gjif =\n                        (HyracksClientInterfaceFunctions.GetJobInfoFunction) fn;\n                ccs.getWorkQueue().schedule(new GetJobInfoWork(ccs.getJobManager(), gjif.getJobId(),\n                        new IPCResponder<JobInfo>(handle, mid)));\n                break;\n            case DISTRIBUTE_JOB:\n                HyracksClientInterfaceFunctions.DistributeJobFunction djf =\n                        (HyracksClientInterfaceFunctions.DistributeJobFunction) fn;\n                ccs.getWorkQueue().schedule(new DistributeJobWork(ccs, djf.getACGGFBytes(), jobIdFactory,\n                        new IPCResponder<JobId>(handle, mid)));\n                break;\n            case DESTROY_JOB:\n                HyracksClientInterfaceFunctions.DestroyJobFunction dsjf =\n                        (HyracksClientInterfaceFunctions.DestroyJobFunction) fn;\n                ccs.getWorkQueue()\n                        .schedule(new DestroyJobWork(ccs, dsjf.getJobId(), new IPCResponder<JobId>(handle, mid)));\n                break;\n            case CANCEL_JOB:\n                HyracksClientInterfaceFunctions.CancelJobFunction cjf =\n                        (HyracksClientInterfaceFunctions.CancelJobFunction) fn;\n                ccs.getWorkQueue().schedule(\n                        new CancelJobWork(ccs.getJobManager(), cjf.getJobId(), new IPCResponder<Void>(handle, mid)));\n                break;\n            case START_JOB:\n                HyracksClientInterfaceFunctions.StartJobFunction sjf =\n                        (HyracksClientInterfaceFunctions.StartJobFunction) fn;\n                ccs.getWorkQueue().schedule(new JobStartWork(ccs, sjf.getDeploymentId(), sjf.getACGGFBytes(),\n                        sjf.getJobFlags(), sjf.getJobId(), new IPCResponder<JobId>(handle, mid), jobIdFactory));\n                break;\n            case GET_DATASET_DIRECTORY_SERIVICE_INFO:\n                ccs.getWorkQueue().schedule(\n                        new GetDatasetDirectoryServiceInfoWork(ccs, new IPCResponder<NetworkAddress>(handle, mid)));\n                break;\n            case GET_DATASET_RESULT_STATUS:\n                HyracksClientInterfaceFunctions.GetDatasetResultStatusFunction gdrsf =\n                        (HyracksClientInterfaceFunctions.GetDatasetResultStatusFunction) fn;\n                ccs.getWorkQueue().schedule(new GetResultStatusWork(ccs, gdrsf.getJobId(), gdrsf.getResultSetId(),\n                        new IPCResponder<Status>(handle, mid)));\n                break;\n            case GET_DATASET_RESULT_LOCATIONS:\n                HyracksClientInterfaceFunctions.GetDatasetResultLocationsFunction gdrlf =\n                        (HyracksClientInterfaceFunctions.GetDatasetResultLocationsFunction) fn;\n                ccs.getWorkQueue().schedule(new GetResultPartitionLocationsWork(ccs, gdrlf.getJobId(),\n                        gdrlf.getResultSetId(), gdrlf.getKnownRecords(), new IPCResponder<>(handle, mid)));\n                break;\n            case WAIT_FOR_COMPLETION:\n                HyracksClientInterfaceFunctions.WaitForCompletionFunction wfcf =\n                        (HyracksClientInterfaceFunctions.WaitForCompletionFunction) fn;\n                ccs.getWorkQueue()\n                        .schedule(new WaitForJobCompletionWork(ccs, wfcf.getJobId(), new IPCResponder<>(handle, mid)));\n                break;\n            case GET_NODE_CONTROLLERS_INFO:\n                ccs.getWorkQueue().schedule(\n                        new GetNodeControllersInfoWork(ccs.getNodeManager(), new IPCResponder<>(handle, mid)));\n                break;\n            case GET_CLUSTER_TOPOLOGY:\n                try {\n                    handle.send(mid, ccs.getCCContext().getClusterTopology(), null);\n                } catch (IPCException e) {\n                    LOGGER.log(Level.WARNING, \"Error sending response to GET_CLUSTER_TOPOLOGY request\", e);\n                }\n                break;\n            case CLI_DEPLOY_BINARY:\n                HyracksClientInterfaceFunctions.CliDeployBinaryFunction dbf =\n                        (HyracksClientInterfaceFunctions.CliDeployBinaryFunction) fn;\n                ccs.getWorkQueue().schedule(new CliDeployBinaryWork(ccs, dbf.getBinaryURLs(), dbf.getDeploymentId(),\n                        new IPCResponder<>(handle, mid)));\n                break;\n            case CLI_UNDEPLOY_BINARY:\n                HyracksClientInterfaceFunctions.CliUnDeployBinaryFunction udbf =\n                        (HyracksClientInterfaceFunctions.CliUnDeployBinaryFunction) fn;\n                ccs.getWorkQueue().schedule(\n                        new CliUnDeployBinaryWork(ccs, udbf.getDeploymentId(), new IPCResponder<>(handle, mid)));\n                break;\n            case CLUSTER_SHUTDOWN:\n                HyracksClientInterfaceFunctions.ClusterShutdownFunction csf =\n                        (HyracksClientInterfaceFunctions.ClusterShutdownFunction) fn;\n                ccs.getWorkQueue().schedule(\n                        new ClusterShutdownWork(ccs, csf.isTerminateNCService(), new IPCResponder<>(handle, mid)));\n                break;\n            case GET_NODE_DETAILS_JSON:\n                HyracksClientInterfaceFunctions.GetNodeDetailsJSONFunction gndjf =\n                        (HyracksClientInterfaceFunctions.GetNodeDetailsJSONFunction) fn;\n                ccs.getWorkQueue()\n                        .schedule(new GetNodeDetailsJSONWork(ccs.getNodeManager(), ccs.getCCConfig(), gndjf.getNodeId(),\n                                gndjf.isIncludeStats(), gndjf.isIncludeConfig(), new IPCResponder<>(handle, mid)));\n                break;\n            case THREAD_DUMP:\n                HyracksClientInterfaceFunctions.ThreadDumpFunction tdf =\n                        (HyracksClientInterfaceFunctions.ThreadDumpFunction) fn;\n                ccs.getWorkQueue()\n                        .schedule(new GetThreadDumpWork(ccs, tdf.getNode(), new IPCResponder<String>(handle, mid)));\n                break;\n            default:\n                try {\n                    handle.send(mid, null, new IllegalArgumentException(\"Unknown function \" + fn.getFunctionId()));\n                } catch (IPCException e) {\n                    LOGGER.log(Level.WARNING, \"Error sending Unknown function response\", e);\n                }\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1],\n                col = (int)val[2];\n            float toSet = val[3];\n            \n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            table.setVal(row-1, col-1, toSet);\n            return toSet;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr graph) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), graph});\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public XMLElement(HashMap entities,\n                      boolean skipLeadingWhitespace,\n                      boolean ignoreCase) {\n        this(entities, skipLeadingWhitespace, true, ignoreCase);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public void removePropertyChangeListener(PropertyChangeListener listener) {\n            if (accessibleAWTComponentHandler != null) {\n                Component.this.removeComponentListener(accessibleAWTComponentHandler);\n                accessibleAWTComponentHandler = null;\n            }\n            if (accessibleAWTFocusHandler != null) {\n                Component.this.removeFocusListener(accessibleAWTFocusHandler);\n                accessibleAWTFocusHandler = null;\n            }\n            super.removePropertyChangeListener(listener);\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public long testBlock(String filename, int blockSize) throws IOException {\n    LOGGER.info(\"Searching for divider in blocks of {}...\", blockSize);\n    long start = System.currentTimeMillis();\n\n    RandomAccessInputStream in = new RandomAccessInputStream(filename);\n    long offset = in.findString(blockSize, TAG).length();\n    in.close();\n\n    long end = System.currentTimeMillis();\n    LOGGER.info(\"Search result: {} -- in {} ms\", offset, end - start);\n    return offset;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public MissionData(String missionName, String missionId, float lengthOfGameMinutes,\n            float lengthOfIntervalMinutes, float challengePaceMinutesPerMile,\n            HashMap<String, Moment> allMoments, String firstMomentId, String currentMomentId) {\n        this.mMissionName = missionName;\n        this.mMissionId = missionId;\n        this.mLengthOfMissionMinutes = lengthOfGameMinutes;\n        this.mLengthOfIntervalMinutes = lengthOfIntervalMinutes;\n        this.mChallengePaceMinutesPerMile = challengePaceMinutesPerMile;\n        this.mAllMoments = allMoments;\n        this.mFirstMomentId = firstMomentId;\n        this.mCurrentMomentId = currentMomentId;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static <A extends Closeable> A api(Class<A> apitype, final String provider, final String credId, final Properties overrides) {\n        Thread.currentThread().setContextClassLoader(Apis.class.getClassLoader());\n        return CredentialsHelper.setCredentials(ContextBuilder.newBuilder(provider), credId)\n            .overrides(overrides).modules(MODULES).buildApi(typeToken(apitype));\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprotected final Class[] parseTypes(String arg) throws ClassNotFoundException {\n\t\tString[] parts = arg.split(\";\");\n\t\tClass[] types = new Class[parts.length];\n\t\tfor (int i = 0; i < types.length; i++) {\n\t\t\ttypes[i] = this.parseType(parts[i]);\n\t\t}\n\t\treturn types;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void writeTerm() throws IOException {\n        if (fieldIsIntType) {\n            if (previousTermInt == -1 && currentTermInt == previousTermInt) {\n                out.write(0x80);\n                out.write(0);\n            } else {\n                writeVLong(currentTermInt - previousTermInt, out);\n            }\n            previousTermInt = currentTermInt;\n        } else {\n            final int pLen = prefixLen(previousTermBytes, currentTermBytes, Math.min(previousTermLength, currentTermLength));\n            writeVLong((previousTermLength - pLen) + 1, out);\n            writeVLong(currentTermLength - pLen, out);\n            out.write(currentTermBytes, pLen, currentTermLength - pLen);\n            previousTermBytes = copyInto(currentTermBytes, currentTermLength, previousTermBytes);\n            previousTermLength = currentTermLength;\n        }\n        writeSVLong(currentTermDocFreq, out);\n        termWritten = true;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(java.io.File file) throws org.apache.xmlbeans.XmlException, java.io.IOException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( file, type, null ); }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public Runner() {\n        this.ps = DEFAULT_PRINT_STREAM;\n        this.eval = new Eval();\n        this.elementFinder = new WebDriverElementFinder();\n        this.subCommandMap = new SubCommandMap();\n        this.commandFactory = new CommandFactory(this);\n        this.varsMap = new VarsMap();\n        this.styleBackups = new ArrayDeque<>();\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate Expression readCondition() throws SQLException {\n        Expression r = readConcat();\n        while (true) {\n            boolean not = false;\n            if (readIf(\"NOT\")) {\n                not = true;\n            }\n            Operator op = readCustom(not);\n            if (op != null) {\n                Expression b;\n                switch (op.getCardinality()) {\n                case ZERO: {\n                    b = null;\n                    break;\n                }\n                case ONE: {\n                    b = readConcat();\n                    break;\n                }\n                case MULTI: {\n                    read(\"(\");\n                  Collection<Expression> v = new ArrayList<Expression>();\n                  Expression last;\n                  do {\n                      last = readExpression();\n                      v.add(last);\n                  } while (readIf(\",\"));\n                  read(\")\");\n                  b = new Parameter(session, v);\n                  break;\n                }\n                default:\n                    throw new IllegalArgumentException(\"Can't handle \"\n                            + op.getCardinality());\n                }\n\n                Expression esc = null;\n                if (readIf(\"ESCAPE\")) {\n                    esc = readConcat();\n                }\n                recompileAlways = true;\n                r = new Comparison(session, op.getName(), r, b);\n            } //else if (readIf(\"REGEXP\")) {\n              if (readIf(\"IS\")) {\n                String type;\n                if (readIf(\"NOT\")) {\n                    type = Operator.IS_NOT_NULL;\n                } else {\n                    type = Operator.IS_NULL;\n                }\n                read(\"NULL\");\n                r = new Comparison(session, type, r, null);\n            } else {\n                String compareType = getCompareType(currentTokenType);\n                if (compareType == null) {\n                    break;\n                }\n                read();\n                    Expression right = readConcat();\n                        r = new Comparison(session, compareType, r, right);\n\n            }\n        }\n        return r;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public Collection createRenderableCollectionNS(String opName,\n                                                   ParameterBlock args) {\n        return createRenderableCollectionNS(opName, args, null);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void testParameterTypes() throws SQLException {\n\n        Connection conn = getConnection();\n        Statement s = createStatement();\n\n        s.execute(\"create table PT1(A integer not null primary key, \" +\n                  \"                 B char(10), C varchar(20))\");\n        s.execute(\n            \"create procedure PT1(in a int, in b char(10), c varchar(20)) \" +\n            \"parameter style java dynamic result sets 1 language java \" +\n            \"modifies sql data \" +\n            \"external name '\" + thisClassName + \".parameter1'\");\n\n        String[] sysaliasDefinition = {\n            \"APP.PT1 AS \" + thisClassName + \".parameter1\" +\n            \"(IN \\\"A\\\" INTEGER,IN \\\"B\\\" CHAR(10),IN \\\"C\\\" VARCHAR(20)) \" +\n            \"LANGUAGE JAVA PARAMETER STYLE JAVA \" +\n            \"MODIFIES SQL DATA DYNAMIC RESULT SETS 1\" };\n\n        String[] dbMetadataDefinition = {\n            \"APP.PT1 AS \" + thisClassName + \".parameter1 \" +\n            \"type procedureNoResult\" };\n\n        String[] columnDefinition = {\n            \"procedureColumnIn A INTEGER\",\n            \"procedureColumnIn B CHAR\", \"procedureColumnIn C VARCHAR\" };\n\n        checkMatchingProcedures(conn, \"PT1\", sysaliasDefinition,\n                dbMetadataDefinition, columnDefinition);\n\n        CallableStatement pt1 = conn.prepareCall(\"call PT1(?, ?, ?)\");\n\n        pt1.setInt(1, 20);\n        pt1.setString(2, \"abc\");\n        pt1.setString(3, \"efgh\");\n        pt1.execute();\n        JDBC.assertFullResultSet(pt1.getResultSet(), new String[][] { { \"20\",\n                \"abc\", \"10\", \"efgh\", \"4\" } });\n\n        pt1.setInt(1, 30);\n        pt1.setString(2, \"abc   \");\n        pt1.setString(3, \"efgh  \");\n        pt1.execute();\n        JDBC.assertFullResultSet(pt1.getResultSet(), new String[][] { { \"30\",\n                \"abc\", \"10\", \"efgh\", \"6\" } });\n\n        pt1.setInt(1, 40);\n\n        char[] c75 = new char[75]; Arrays.fill(c75, ' ');\n        char[] c77 = new char[77]; Arrays.fill(c77, ' ');\n        pt1.setString(2, \"abc\" + new String(c75));\n        pt1.setString(3, \"efgh\" + new String(c77));\n\n        pt1.execute();\n        JDBC.assertFullResultSet(pt1.getResultSet(), new String[][] { { \"40\",\n                \"abc\", \"10\", \"efgh\", \"20\" } });\n\n        pt1.setInt(1, 50);\n        pt1.setString(2, \"0123456789X\");\n        pt1.setString(3, \"efgh  \");\n        assertPreparedStatementError(LANG_STRING_TRUNCATION, pt1);\n\n        pt1.setInt(1, 50);\n        pt1.setString(2, \"0123456789\");\n        pt1.setString(3, \"efgh  \");\n        pt1.execute();\n        JDBC.assertFullResultSet(pt1.getResultSet(), new String[][] { { \"50\",\n                \"0123456789\", \"10\", \"efgh\", \"6\" } });\n        pt1.close();\n\n        s.execute(\"drop procedure PT1\");\n\n        s.execute(\n            \"create procedure PT2(in a int, in b DECIMAL(4), c DECIMAL(7,3)) \" +\n            \"parameter style java dynamic result sets 1 language java \" +\n            \"modifies sql data \" +\n            \"external name '\" + thisClassName + \".parameter2'\");\n\n        sysaliasDefinition = new String[] {\n            \"APP.PT2 AS \" + thisClassName + \".parameter2\" +\n            \"(IN \\\"A\\\" INTEGER,IN \\\"B\\\" DECIMAL(4,0),IN \\\"C\\\" DECIMAL(7,3)) \" +\n            \"LANGUAGE JAVA PARAMETER STYLE JAVA \" +\n            \"MODIFIES SQL DATA DYNAMIC RESULT SETS 1\" };\n\n        dbMetadataDefinition = new String[] {\n            \"APP.PT2 AS \" +\n            thisClassName + \".parameter2 type procedureNoResult\" };\n\n        columnDefinition = new String[] { \"procedureColumnIn A INTEGER\",\n                \"procedureColumnIn B DECIMAL\", \"procedureColumnIn C DECIMAL\" };\n\n        checkMatchingProcedures(conn, \"PT2\", sysaliasDefinition,\n                dbMetadataDefinition, columnDefinition);\n\n        CallableStatement pt2 = conn.prepareCall(\"call PT2(?, ?, ?)\");\n\n        pt2.setInt(1, 60);\n        pt2.setString(2, \"34\");\n        pt2.setString(3, \"54.1\");\n        boolean firstIsResultSet = pt2.execute();\n        ResultSet rs = pt2.getResultSet();\n        JDBC.assertFullResultSet(rs,\n                new String[][] { { \"60\", \"34\", \"54.100\" } });\n\n        pt2.setInt(1, 70);\n        pt2.setBigDecimal(2, new BigDecimal(\"831\"));\n        pt2.setBigDecimal(3, new BigDecimal(\"45.7\"));\n        pt2.execute();\n        rs = pt2.getResultSet();\n        JDBC.assertFullResultSet(rs,\n                new String[][] { { \"70\", \"831\", \"45.700\" } });\n\n        pt2.setInt(1, -1);\n        pt2.setBigDecimal(2, new BigDecimal(\"10243\"));\n        pt2.setBigDecimal(3, null);\n\n        try {\n            pt2.execute();\n            fail(\"FAIL - too many digits in decimal value accepted\");\n        } catch (SQLException sqle) {\n            assertSQLState(\"22003\", sqle);\n        }\n        pt2.setInt(1, 80);\n        pt2.setBigDecimal(2, new BigDecimal(\"993\"));\n        pt2.setBigDecimal(3, new BigDecimal(\"1234.5678\"));\n        pt2.execute();\n        rs = pt2.getResultSet();\n        JDBC.assertFullResultSet(rs,\n                new String[][] { { \"80\", \"993\", \"1234.567\" } });\n        pt2.close();\n\n        s.execute(\"drop procedure PT2\");\n\n        s.execute(\n            \"create procedure PTSMALLINT2(\" +\n            \"    in    p_in    SMALLINT, \" +\n            \"    inout p_inout SMALLINT, \" +\n            \"    out   p_out   SMALLINT) \" +\n            \"parameter style java dynamic result sets 0 language java \" +\n            \"no sql \" +\n            \"external name '\" + thisClassName + \".pSMALLINT'\");\n\n        sysaliasDefinition = new String[] {\n            \"APP.PTSMALLINT2 AS \" + thisClassName + \".pSMALLINT\" +\n            \"(IN \\\"P_IN\\\" SMALLINT,\" +\n            \"INOUT \\\"P_INOUT\\\" SMALLINT,\" +\n            \"OUT \\\"P_OUT\\\" SMALLINT) \" +\n            \"LANGUAGE JAVA PARAMETER STYLE JAVA NO SQL\" };\n\n        dbMetadataDefinition = new String[] {\n            \"APP.PTSMALLINT2 AS \" +\n            thisClassName + \".pSMALLINT type procedureNoResult\" };\n\n        columnDefinition = new String[] { \"procedureColumnIn P_IN SMALLINT\",\n                \"procedureColumnInOut P_INOUT SMALLINT\",\n                \"procedureColumnOut P_OUT SMALLINT\" };\n\n        checkMatchingProcedures(conn, \"PT2\", sysaliasDefinition,\n                dbMetadataDefinition, columnDefinition);\n\n        CallableStatement ptsi = conn.prepareCall(\"call PTSMALLINT2(?, ?, ?)\");\n        ptsi.registerOutParameter(2, Types.SMALLINT);\n        ptsi.registerOutParameter(3, Types.SMALLINT);\n\n        ptsi.setNull(1, Types.SMALLINT);\n        ptsi.setShort(2, (short) 7);\n        try {\n            ptsi.execute();\n            fail(\"FAIL NULL PASSED to  primitive\");\n        } catch (SQLException sqle) {\n            assertSQLState(\"39004\", sqle);\n        }\n\n        ptsi.setShort(1, (short) 4);\n        ptsi.setNull(2, Types.SMALLINT);\n        try {\n            ptsi.execute();\n            fail(\"FAIL NULL PASSED to  primitive\");\n        } catch (SQLException sqle) {\n            assertSQLState(\"39004\", sqle);\n        }\n\n        ptsi.setShort(1, (short) 6);\n        ptsi.setShort(2, (short) 3);\n        ptsi.execute();\n        assertEquals(\"wrong value for p_inout\", \"9\", ptsi.getObject(2)\n                .toString());\n        assertEquals(\"wrong value for p_out\", \"6\", ptsi.getObject(3).toString());\n\n        ptsi.setShort(2, (short) 3);\n        ptsi.execute();\n        assertEquals(\"wrong value for p_inout\", \"9\", ptsi.getObject(2)\n                .toString());\n        assertEquals(\"wrong value for p_out\", \"6\", ptsi.getObject(3).toString());\n\n        ptsi.setObject(1, 6);\n        ptsi.setObject(2, 3);\n\n        ptsi.execute();\n        assertEquals(\"wrong value for p_inout\", \"9\", ptsi.getObject(2)\n                .toString());\n        assertFalse(ptsi.wasNull());\n        assertEquals(\"wrong value for p_out\", \"6\", ptsi.getObject(3).toString());\n        assertFalse(ptsi.wasNull());\n\n        ptsi.close();\n\n        s.execute(\"drop procedure PTSMALLINT2\");\n        s.execute(\"drop table PT1\");\n\n        s.close();\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nboolean resolveBundle(boolean resolve, HashSet<BundleClassLoader> hashSet) throws BundleException {\n        int i;\n        if (Framework.DEBUG_CLASSLOADING && log.isInfoEnabled()) {\n            log.info(\"BundleClassLoader: Resolving \" + this.bundle + (resolve ? \" (critical)\" : \" (not critical)\"));\n        }\n        HashSet hashSet2;\n        if (this.exports.length > 0) {\n            HashSet hashSet3 = new HashSet(this.exports.length);\n            for (String parsePackageString : this.exports) {\n                hashSet3.add(Package.parsePackageString(parsePackageString)[0]);\n            }\n            hashSet2 = hashSet3;\n        } else {\n            hashSet2 = null;\n        }\n        if (this.imports.length > 0) {\n            if (this.importDelegations == null) {\n                this.importDelegations = new HashMap(this.imports.length);\n            }\n            for (int i2 = 0; i2 < this.imports.length; i2++) {\n                String obj = Package.parsePackageString(this.imports[i2])[0];\n                if (!FRAMEWORK_PACKAGES.contains(obj)\n                        && this.importDelegations.get(obj) == null\n                        && (hashSet2 == null || !hashSet2.contains(obj))) {\n                    BundleClassLoader bundleClassLoader = Framework.getImport(\n                            this.bundle, this.imports[i2], resolve, hashSet);\n                    if (bundleClassLoader != null) {\n                        if (bundleClassLoader != this) {\n                            this.importDelegations.put(obj, bundleClassLoader);\n                        }\n                    } else if (resolve) {\n                        throw new BundleException(\"Unsatisfied import \"\n                                + this.imports[i2] + \" for bundle \"\n                                + this.bundle.toString(),\n                                new ClassNotFoundException(\n                                        \"Unsatisfied import \"\n                                                + this.imports[i2]));\n                    } else {\n                        if (this.exports.length > 0) {\n                            Framework.export(this, this.exports, false);\n                        }\n                        if (!Framework.DEBUG_CLASSLOADING\n                                || !log.isInfoEnabled()) {\n                            return false;\n                        }\n                        log.info(\"BundleClassLoader: Missing import \"\n                                + this.imports[i2]\n                                + \". Resolving attempt terminated unsuccessfully.\");\n                        return false;\n                    }\n                }\n            }\n        }\n        if (this.exports.length > 0) {\n            if (this.importDelegations == null) {\n                this.importDelegations = new HashMap(this.imports.length);\n            }\n            for (i = 0; i < this.exports.length; i++) {\n                BundleClassLoader bundleClassLoader2 = Framework.getImport(\n                        this.bundle,\n                        Package.parsePackageString(this.exports[i])[0], false,\n                        null);\n                if (!(bundleClassLoader2 == null || bundleClassLoader2 == this)) {\n                    this.importDelegations.put(\n                            Package.parsePackageString(this.exports[i])[0],\n                            bundleClassLoader2);\n                }\n            }\n        }\n        if (this.exports.length > 0) {\n            Framework.export(this, this.exports, true);\n        }\n        return true;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic static <E> List<E> toBeanList(Class<E> cla, List<Map<String, Object>> mapList) {\n\t\tList<E> list = new ArrayList<E>(mapList.size());\n\t\tfor (Map<String, Object> map : mapList) {\n\t\t\tE obj = toBean(cla, map);\n\t\t\tlist.add(obj);\n\t\t}\n\t\treturn list;\n\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, ClassTransformer transformer, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            MethodPair methodPair = transformer.methods.get(\"()V\" + method);\n            if (methodPair == null)\n            {\n                continue;\n            }\n            lineNumber = InvokerGenerator.printMethod(mv, clazz, method, Modifier.isStatic(methodPair.node.access), lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public double interpolateZ(Coordinate p)\n  {\n    if (p == null)\n      throw new IllegalArgumentException(\"Supplied point is null.\");\n    return interpolateZ(p, this.p0, this.p1, this.p2);\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void addFooterView(View v, Object data, boolean isSelectable) {\n\n\n        FixedViewInfo info = new FixedViewInfo();\n        info.view = v;\n        info.data = data;\n        info.isSelectable = isSelectable;\n        mFooterViewInfos.add(info);\n\n        if (mAdapter != null && mObserver != null) {\n            mObserver.onChanged();\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, ClassTransformer transformer, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            MethodPair methodPair = transformer.methods.get(\"()V\" + method);\n            if (methodPair == null)\n            {\n                continue;\n            }\n            lineNumber = InvokerGenerator.printMethod(mv, clazz, method, Modifier.isStatic(methodPair.node.access), lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprotected Getter addGetter(List<Getter> getterChain, Getter prevGetter, String nextPart) {\n        Class nextClass = prevGetter != null ? prevGetter.getReturnType() : parent.getBaseClass();\n        Getter nextGetter = parent.getPropertyGetter(nextClass, nextPart);\n        getterChain.add(nextGetter);\n        return nextGetter;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public BeanConnector(Class<E> beanClass) {\n        final Method[] methods = beanClass.getMethods();\n        for (int m = 0; m < methods.length; m++) {\n            if(methods[m].getParameterTypes().length != 1) continue;\n            if(methods[m].getParameterTypes()[0] != PropertyChangeListener.class) continue;\n            if(methods[m].getName().startsWith(\"add\")) this.addListenerMethod = methods[m];\n            if(methods[m].getName().startsWith(\"remove\")) this.removeListenerMethod = methods[m];\n        }\n\n        if (this.addListenerMethod == null || this.removeListenerMethod == null)\n            throw new IllegalArgumentException(\"Couldn't find listener methods for \" + beanClass.getName());\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, final Contract contract, final TradeOrder tradeOrder,\n\t\t\tfinal OrderState orderState) {\n\n\t\ttry {\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(tradeOrder.getOrderKey());\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170, \"Warning Order not found for Order Key: \" + orderId + \" make sure Client ID: \" + 0\n\t\t\t\t\t\t+ \" is not the master in TWS. On openOrder update.\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (BackTestBrokerModel.updateTradeOrder(tradeOrder, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\n\t\t\t\t\t_log.debug(\"Order Key: \" + transientInstance.getOrderKey() + \" filled.\");\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (updatedOrder.hasTradePosition() && !updatedOrder.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(updatedOrder.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Order key: \" + transientInstance.getOrderKey() + \" state changed. Status:\"\n\t\t\t\t\t\t\t+ orderState.m_status);\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(updatedOrder.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(updatedOrder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        Connection c = ConnectionManager.getInstance().addConnection(ctx);\n        ctx.attr(conn).set(c);\n        GameChannelManager.getInstance().addChannel(\"allUser\").addConnection(c);\n        super.channelActive(ctx);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public void handlePatch(final PatchParam patchParam) throws Throwable {\n        {\n            Class<?> cls = null;\n            try {\n                cls= patchParam.context.getClass().getClassLoader().loadClass(\"com.taobao.dexposed.TestFragment\");\n            } catch (Exception e) {\n                e.printStackTrace();\n                return;\n            }\n\n            \n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2007.webservices.GetInvoiceProductsFromOpportunityRequest parse(java.io.File file) throws org.apache.xmlbeans.XmlException, java.io.IOException {\n          return (com.microsoft.schemas.crm._2007.webservices.GetInvoiceProductsFromOpportunityRequest) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( file, type, null ); }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate URI api(String path) {\n        if (!path.toLowerCase().matches(\"https?://.*\")) {\n            path = urlJoin(this.context, path);\n        }\n        if (!path.contains(\"?\")) {\n            if (!path.endsWith(\"/stop\")) {\n                path = urlJoin(path, \"api/json\");\n            }\n        } else {\n            String[] components = path.split(\"\\\\?\", 2);\n            path = urlJoin(components[0], \"api/json\") + \"?\" + components[1];\n        }\n        URI requestUri = uri.resolve(\"/\").resolve(path);\n        return requestUri;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static void main(String[] args) {\n        try {\n            Method method = android.os.Process.class.getDeclaredMethod(\"setArgV0\", String.class);\n            method.setAccessible(true);\n            method.invoke(null, PROCESS);\n            LogUtil.i(\"Set process name success\");\n        } catch (Exception e) {\n            LogUtil.e(\"Set process name failed:\" + e.toString());\n        }\n        ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n        Class<?> clz;\n        try {\n            clz = classLoader.loadClass(\"android.ddm.DdmHandleAppName\");\n        } catch (ClassNotFoundException e) {\n            LogUtil.w(\"Set DDM name failed:\" + e.toString());\n            clz = null;\n        }\n        if (clz != null) {\n            try {\n                Method method = clz.getDeclaredMethod(\"setAppName\", String.class);\n                method.invoke(clz, PROCESS);\n                LogUtil.i(\"Set process name success with M1\");\n            } catch (Exception e) {\n                try {\n                    Method method = clz.getDeclaredMethod(\"setAppName\", String.class, int.class);\n                    method.invoke(clz, PROCESS, 0);\n                    LogUtil.i(\"Set process name success with M2\");\n                } catch (Exception ex) {\n                    LogUtil.w(\"Set DDM name failed:\" + ex.toString());\n                }\n            }\n        }\n        Looper.prepare();\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (sPower) {\n                    String cmd = String.format(\"am startservice%s-n com.stkj.newslocker/\" +\n                                    \"com.stkj.newslocker.services.LockService\",\n                            SysUtil.isAfter17() ? \" --user 0 \" : \" \");\n                    LogUtil.i(\"CMD exec \" + cmd);\n                    try {\n                        Runtime.getRuntime().exec(cmd);\n                    } catch (IOException e) {\n                        LogUtil.w(\"CMD exec failed:\" + e.toString());\n                        Intent intent = new Intent();\n                        ComponentName component = new ComponentName(\"com.stkj.newslocker\",\n                                LockService.class.getName());\n                        intent.setComponent(component);\n                        IActivityManager am = ActivityManagerNative.getDefault();\n                        Method method;\n                        try {\n                            method = am.getClass().getMethod(\"startService\",\n                                    IApplicationThread.class, Intent.class, String.class,\n                                    int.class);\n                            Object cn = method.invoke(am, null, intent, intent.getType(), 0);\n                            LogUtil.i(\"start service return: \" + cn);\n                        } catch (NoSuchMethodException ex) {\n                            try {\n                                method = am.getClass().getMethod(\"startService\",\n                                        IApplicationThread.class, Intent.class, String.class);\n                                Object cn = method.invoke(am, null, intent, intent.getType());\n                                LogUtil.i(\"start service return: \" + cn);\n                            } catch (NoSuchMethodException exc) {\n                                LogUtil.i(\"start service method not found: \" + exc);\n                            } catch (Exception exc) {\n                                LogUtil.e(\"Start service failed:\" + exc.toString());\n                            }\n                        } catch (Exception ex) {\n                            LogUtil.e(\"Start service failed:\" + ex.toString());\n                        }\n                    }\n                    try {\n                        Thread.sleep(180000);\n                    } catch (InterruptedException e) {\n                        LogUtil.w(\"Thread sleep failed:\" + e.toString());\n                    }\n                }\n            }\n        }).start();\n        Looper.loop();\n        LogUtil.i(\"====================Daemon exit with error====================\");\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void registerReceiver() {\n\t\tIntentFilter updateIntent = new IntentFilter();\n\t\tupdateIntent.addAction(ACTION_UPDATE_WEATHER);\n\t\tupdateIntent.addAction(ACTION_SWITH_CITY);\n\t\tupdateIntent.addAction(ACTION_NEXT_CITY);\n\t\tupdateIntent.addAction(ACTION_TIME_SET);\n\t\tupdateIntent.addAction(Intent.ACTION_TIME_TICK);\n\t\tupdateIntent.addAction(Intent.ACTION_DATE_CHANGED);\n\t\tupdateIntent.addAction(Intent.ACTION_TIMEZONE_CHANGED);\n\t\tregisterReceiver(mTimePickerBroadcast, updateIntent);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tpublic List<Gadget> findAll(int start, int end,\n\t\tOrderByComparator orderByComparator) throws SystemException {\n\t\tboolean pagination = true;\n\t\tFinderPath finderPath = null;\n\t\tObject[] finderArgs = null;\n\n\t\tif ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) &&\n\t\t\t\t(orderByComparator == null)) {\n\t\t\tpagination = false;\n\t\t\tfinderPath = FINDER_PATH_WITHOUT_PAGINATION_FIND_ALL;\n\t\t\tfinderArgs = FINDER_ARGS_EMPTY;\n\t\t}\n\t\telse {\n\t\t\tfinderPath = FINDER_PATH_WITH_PAGINATION_FIND_ALL;\n\t\t\tfinderArgs = new Object[] { start, end, orderByComparator };\n\t\t}\n\n\t\tList<Gadget> list = (List<Gadget>)FinderCacheUtil.getResult(finderPath,\n\t\t\t\tfinderArgs, this);\n\n\t\tif (list == null) {\n\t\t\tStringBundler query = null;\n\t\t\tString sql = null;\n\n\t\t\tif (orderByComparator != null) {\n\t\t\t\tquery = new StringBundler(2 +\n\t\t\t\t\t\t(orderByComparator.getOrderByFields().length * 3));\n\n\t\t\t\tquery.append(_SQL_SELECT_GADGET);\n\n\t\t\t\tappendOrderByComparator(query, _ORDER_BY_ENTITY_ALIAS,\n\t\t\t\t\torderByComparator);\n\n\t\t\t\tsql = query.toString();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsql = _SQL_SELECT_GADGET;\n\n\t\t\t\tif (pagination) {\n\t\t\t\t\tsql = sql.concat(GadgetModelImpl.ORDER_BY_JPQL);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSession session = null;\n\n\t\t\ttry {\n\t\t\t\tsession = openSession();\n\n\t\t\t\tQuery q = session.createQuery(sql);\n\n\t\t\t\tif (!pagination) {\n\t\t\t\t\tlist = (List<Gadget>)QueryUtil.list(q, getDialect(), start,\n\t\t\t\t\t\t\tend, false);\n\n\t\t\t\t\tCollections.sort(list);\n\n\t\t\t\t\tlist = new UnmodifiableList<Gadget>(list);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlist = (List<Gadget>)QueryUtil.list(q, getDialect(), start,\n\t\t\t\t\t\t\tend);\n\t\t\t\t}\n\n\t\t\t\tcacheResult(list);\n\n\t\t\t\tFinderCacheUtil.putResult(finderPath, finderArgs, list);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tFinderCacheUtil.removeResult(finderPath, finderArgs);\n\n\t\t\t\tthrow processException(e);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tcloseSession(session);\n\t\t\t}\n\t\t}\n\n\t\treturn list;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tpublic void onClick(View v) {\n\t\tautoTest = false;\n\t\tswitch (v.getId()) {\n\t\tcase R.id.normal_btn:\n\t\t\tif (layout == null)\n\t\t\t\treturn;\n\t\t\tAdViewLayout.isTest = false;\n\t\t\tadViewLayout = new AdViewLayout(this, sdkKey);\n\t\t\tbreak;\n\t\t}\n\t\tif (null != adViewLayout) {\n\t\t\tAdViewUtil.logInfo(\"setInterFace\");\n\t\t\tadViewLayout.setAdViewInterface(this);\n\t\t\tlayout.removeAllViews();\n\t\t\tlayout.addView(adViewLayout);\n\t\t\tlayout.invalidate();\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void initStatement(int type, int concurrency, int holdability,\n                               int autoGeneratedKeys, String[] columnNames,\n                               int[] columnIndexes) throws SqlException {\n        switch (type) {\n        case ResultSet.TYPE_FORWARD_ONLY:\n        case ResultSet.TYPE_SCROLL_INSENSITIVE:\n        case ResultSet.TYPE_SCROLL_SENSITIVE:\n            resultSetType_ = type;\n            break;\n        default:\n            throw new SqlException(agent_.logWriter_, \n                new ClientMessageId(SQLState.INVALID_API_PARAMETER),\n                type, \"type\", \"createStatement()\");\n        }\n\n        switch (concurrency) {\n        case ResultSet.CONCUR_READ_ONLY:\n        case ResultSet.CONCUR_UPDATABLE:\n            resultSetConcurrency_ = concurrency;\n            break;\n        default:\n            throw new SqlException(agent_.logWriter_, \n                new ClientMessageId(SQLState.INVALID_API_PARAMETER),\n                concurrency, \"concurrency\", \"createStatement()\");\n        }\n\n        switch (holdability) {\n        case ResultSet.CLOSE_CURSORS_AT_COMMIT:\n        case ResultSet.HOLD_CURSORS_OVER_COMMIT:\n            resultSetHoldability_ = holdability;\n            break;\n        default:\n            throw new SqlException(agent_.logWriter_,\n                new ClientMessageId(SQLState.INVALID_API_PARAMETER),\n                holdability, \"holdability\", \"createStatement()\");\n        }\n\n        switch (autoGeneratedKeys) {\n        case Statement.NO_GENERATED_KEYS:\n        case Statement.RETURN_GENERATED_KEYS:\n            autoGeneratedKeys_ = autoGeneratedKeys;\n            break;\n        default:\n            throw new SqlException(agent_.logWriter_, \n                new ClientMessageId(SQLState.INVALID_API_PARAMETER),\n                autoGeneratedKeys, \"autoGeneratedKeys\", \"createStatement\");\n        }\n\n        generatedKeysColumnNames_ = columnNames;\n        generatedKeysColumnIndexes_ = columnIndexes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic boolean handleControlWord(RtfCtrlWordData ctrlWordData) {\n\t\tboolean result = true;\n\t\t\n\t\tif(ctrlWordData.ctrlWord.equals(\"f\")) { this.setFontNumber(ctrlWordData.param); result=true;}\n\t\tif(ctrlWordData.ctrlWord.equals(\"fcharset\")) { this.setCharset(ctrlWordData.param); result=true; }\n\n\t\tif(ctrlWordData.ctrlWord.equals(\"fnil\")) { this.setFontFamily(\"roman\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"froman\")) { this.setFontFamily(\"roman\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fswiss\")) { this.setFontFamily(\"swiss\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fmodern\")) { this.setFontFamily(\"modern\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fscript\")) { this.setFontFamily(\"script\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fdecor\")) { this.setFontFamily(\"decor\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"ftech\")) { this.setFontFamily(\"tech\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fbidi\")) { this.setFontFamily(\"bidi\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fprq\")) { this.setPitch(ctrlWordData.param); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fbias\")) { this.setBias(ctrlWordData.param); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"flomajor\")) { this.setThemeFont(\"flomajor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fhimajor\")) { this.setThemeFont(\"fhimajor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fdbmajor\")) { this.setThemeFont(\"fdbmajor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fbimajor\")) { this.setThemeFont(\"fbimajor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"flominor\")) { this.setThemeFont(\"flominor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fhiminor\")) { this.setThemeFont(\"fhiminor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fdbminor\")) { this.setThemeFont(\"fdbminor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fbiminor\")) { this.setThemeFont(\"fbiminor\"); result= true; }\n\n\t\tif(ctrlWordData.ctrlWord.equals(\"panose\")) {state = SETTING_PANOSE; result = true; }\n\t\t\n\t\tif(ctrlWordData.ctrlWord.equals(\"fname\")) {state = SETTING_FONTNAME; result = true; }\n\n\t\tif(ctrlWordData.ctrlWord.equals(\"falt\")) { state = SETTING_ALTERNATE; result = true; }\n\t\t\n\t\tif(ctrlWordData.ctrlWord.equals(\"fontemb\")) { state = SETTING_FONT_EMBED; result = true; }\n\n\t\tif(ctrlWordData.ctrlWord.equals(\"ftnil\")) { this.setTrueType(\"ftnil\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fttruetype\")) { this.setTrueType(\"fttruetype\"); result= true; }\n\t\t\n\t\tif(ctrlWordData.ctrlWord.equals(\"fontemb\")) { state = SETTING_FONT_FILE; result = true; }\n\n\t\tif(ctrlWordData.ctrlWord.equals(\"cpg\")) { this.setCodePage(ctrlWordData.param); result= true; }\n\t\t\n\t\tthis.lastCtrlWord = ctrlWordData;\n\t\treturn result;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic BlameGenerator push(String description, byte[] contents)\n\t\t\tthrows IOException {\n\t\treturn push(description, new RawText(contents));\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1],\n                col = (int)val[2];\n            float toSet = val[3];\n            \n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            table.setVal(row-1, col-1, toSet);\n            return toSet;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n  public EvaluationResult evaluate(MyrrixRecommender recommender,\n                                   RescorerProvider provider, // ignored\n                                   Multimap<Long,RecommendedItem> testData) throws TasteException {\n    FastByIDMap<FastIDSet> converted = new FastByIDMap<FastIDSet>(testData.size());\n    for (long userID : testData.keySet()) {\n      Collection<RecommendedItem> userTestData = testData.get(userID);\n      FastIDSet itemIDs = new FastIDSet(userTestData.size());\n      converted.put(userID, itemIDs);\n      for (RecommendedItem datum : userTestData) {\n        itemIDs.add(datum.getItemID());\n      }\n    }\n    return evaluate(recommender, converted);\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic WebSocketServer(InetSocketAddress address, int decodercount, List<Draft> drafts, Collection<WebSocket> connectionscontainer) {\n        if (address == null || decodercount < 1 || connectionscontainer == null) {\n            throw new IllegalArgumentException(\"address and connectionscontainer must not be null and you need at least 1 decoder\");\n        }\n\n        if (drafts == null)\n            this.drafts = Collections.emptyList();\n        else\n            this.drafts = drafts;\n\n        this.address = address;\n        this.connections = connectionscontainer;\n\n        iqueue = new LinkedList<WebSocketImpl>();\n\n        decoders = new ArrayList<WebSocketWorker>(decodercount);\n        buffers = new LinkedBlockingQueue<ByteBuffer>();\n        for (int i = 0; i < decodercount; i++) {\n            WebSocketWorker ex = new WebSocketWorker();\n            decoders.add(ex);\n            ex.start();\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic void registerResources(Context context) {\n        if (sInitialized) {\n            return;\n        }\n\n        AwResource.setResources(context.getResources());\n\n\n        AwResource.setErrorPageResources(R.raw.loaderror, R.raw.nodomain);\n        AwResource.setDefaultTextEncoding(R.string.default_encoding);\n\n        sInitialized = true;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void quadrantRotate(int numquadrants) {\n        switch (numquadrants & 3) {\n        case 0:\n            break;\n        case 1:\n            rotate90();\n            break;\n        case 2:\n            rotate180();\n            break;\n        case 3:\n            rotate270();\n            break;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public final boolean isConstant() {\n    if (this.getVariableDecls().length > 0) return false;\n\n    this.levelCheck(1) ;\n      \n    OpDefNode[] opDefs = this.getOpDefs();\n    for (int i = 0; i < opDefs.length; i++) {\n      if (opDefs[i].getKind() != ModuleInstanceKind &&\n          opDefs[i].getBody().getLevel() != ConstantLevel)\n        return false;\n    }\n\n    for (int i = 0; i < theoremVec.size(); i++) {\n      if (((TheoremNode)(theoremVec.elementAt(i))).getLevel() != ConstantLevel) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        return CharacterData.of(codePoint).isIdentifierIgnorable(codePoint);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private boolean isInContent(float x, float y, Sticker currentSticker) {\n\n\n\n        float[] pointsDst = currentSticker.getMapPointsDst();\n        if (x > pointsDst[0] && x < pointsDst[2] && y > pointsDst[3] && y < pointsDst[5])\n            return true;\n        return false;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic List<ValidationIssue> checkExtensions(final Certificate cert,\n            final X509IssuerInfo issuerInfo, final Extensions requestedExtensions,\n            final X500Name requestedSubject) {\n        ParamUtil.requireNonNull(\"cert\", cert);\n        ParamUtil.requireNonNull(\"issuerInfo\", issuerInfo);\n\n        X509Certificate jceCert;\n        try {\n            jceCert = X509Util.toX509Cert(cert);\n        } catch (CertificateException ex) {\n            throw new IllegalArgumentException(\"invalid cert: \" + ex.getMessage());\n        }\n\n        List<ValidationIssue> result = new LinkedList<>();\n\n        Set<ASN1ObjectIdentifier> presentExtenionTypes =\n                getExensionTypes(cert, issuerInfo, requestedExtensions);\n\n        Extensions extensions = cert.getTBSCertificate().getExtensions();\n        ASN1ObjectIdentifier[] oids = extensions.getExtensionOIDs();\n\n        if (oids == null) {\n            ValidationIssue issue = new ValidationIssue(\"X509.EXT.GEN\", \"extension general\");\n            result.add(issue);\n            issue.setFailureMessage(\"no extension is present\");\n            return result;\n        }\n\n        List<ASN1ObjectIdentifier> certExtTypes = Arrays.asList(oids);\n\n        for (ASN1ObjectIdentifier extType : presentExtenionTypes) {\n            if (!certExtTypes.contains(extType)) {\n                ValidationIssue issue = createExtensionIssue(extType);\n                result.add(issue);\n                issue.setFailureMessage(\"extension is absent but is required\");\n            }\n        }\n\n        Map<ASN1ObjectIdentifier, ExtensionControl> extensionControls =\n                certProfile.extensionControls();\n        for (ASN1ObjectIdentifier oid : certExtTypes) {\n            ValidationIssue issue = createExtensionIssue(oid);\n            result.add(issue);\n            if (!presentExtenionTypes.contains(oid)) {\n                issue.setFailureMessage(\"extension is present but is not permitted\");\n                continue;\n            }\n\n            Extension ext = extensions.getExtension(oid);\n            StringBuilder failureMsg = new StringBuilder();\n            ExtensionControl extControl = extensionControls.get(oid);\n\n            if (extControl.isCritical() != ext.isCritical()) {\n                addViolation(failureMsg, \"critical\", ext.isCritical(), extControl.isCritical());\n            }\n\n            byte[] extensionValue = ext.getExtnValue().getOctets();\n            try {\n                if (Extension.authorityKeyIdentifier.equals(oid)) {\n                    checkExtensionIssuerKeyIdentifier(failureMsg, extensionValue, issuerInfo);\n                } else if (Extension.subjectKeyIdentifier.equals(oid)) {\n                    checkExtensionSubjectKeyIdentifier(failureMsg, extensionValue,\n                            cert.getSubjectPublicKeyInfo());\n                } else if (Extension.keyUsage.equals(oid)) {\n                    checkExtensionKeyUsage(failureMsg, extensionValue, jceCert.getKeyUsage(),\n                            requestedExtensions, extControl);\n                } else if (Extension.certificatePolicies.equals(oid)) {\n                    checkExtensionCertificatePolicies(failureMsg, extensionValue,\n                            requestedExtensions, extControl);\n                } else if (Extension.policyMappings.equals(oid)) {\n                    checkExtensionPolicyMappings(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.subjectAlternativeName.equals(oid)) {\n                    checkExtensionSubjectAltName(failureMsg, extensionValue, requestedExtensions,\n                            extControl, requestedSubject);\n                } else if (Extension.subjectDirectoryAttributes.equals(oid)) {\n                    checkExtensionSubjectDirAttrs(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.issuerAlternativeName.equals(oid)) {\n                    checkExtensionIssuerAltNames(failureMsg, extensionValue, issuerInfo);\n                } else if (Extension.basicConstraints.equals(oid)) {\n                    checkExtensionBasicConstraints(failureMsg, extensionValue);\n                } else if (Extension.nameConstraints.equals(oid)) {\n                    checkExtensionNameConstraints(failureMsg, extensionValue, extensions,\n                            extControl);\n                } else if (Extension.policyConstraints.equals(oid)) {\n                    checkExtensionPolicyConstraints(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.extendedKeyUsage.equals(oid)) {\n                    checkExtensionExtendedKeyUsage(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.cRLDistributionPoints.equals(oid)) {\n                    checkExtensionCrlDistributionPoints(failureMsg, extensionValue, issuerInfo);\n                } else if (Extension.inhibitAnyPolicy.equals(oid)) {\n                    checkExtensionInhibitAnyPolicy(failureMsg, extensionValue, extensions,\n                            extControl);\n                } else if (Extension.freshestCRL.equals(oid)) {\n                    checkExtensionDeltaCrlDistributionPoints(failureMsg, extensionValue,\n                            issuerInfo);\n                } else if (Extension.authorityInfoAccess.equals(oid)) {\n                    checkExtensionAuthorityInfoAccess(failureMsg, extensionValue, issuerInfo);\n                } else if (Extension.subjectInfoAccess.equals(oid)) {\n                    checkExtensionSubjectInfoAccess(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (ObjectIdentifiers.id_extension_admission.equals(oid)) {\n                    checkExtensionAdmission(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (ObjectIdentifiers.id_extension_pkix_ocsp_nocheck.equals(oid)) {\n                    checkExtensionOcspNocheck(failureMsg, extensionValue);\n                } else if (ObjectIdentifiers.id_extension_restriction.equals(oid)) {\n                    checkExtensionRestriction(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (ObjectIdentifiers.id_extension_additionalInformation.equals(oid)) {\n                    checkExtensionAdditionalInformation(failureMsg, extensionValue,\n                            requestedExtensions, extControl);\n                } else if (ObjectIdentifiers.id_extension_validityModel.equals(oid)) {\n                    checkExtensionValidityModel(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.privateKeyUsagePeriod.equals(oid)) {\n                    checkExtensionPrivateKeyUsagePeriod(failureMsg, extensionValue,\n                            jceCert.getNotBefore(), jceCert.getNotAfter());\n                } else if (Extension.qCStatements.equals(oid)) {\n                    checkExtensionQcStatements(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.biometricInfo.equals(oid)) {\n                    checkExtensionBiometricInfo(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (ObjectIdentifiers.id_pe_tlsfeature.equals(oid)) {\n                    checkExtensionTlsFeature(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (ObjectIdentifiers.id_xipki_ext_authorizationTemplate.equals(oid)) {\n                    checkExtensionAuthorizationTemplate(failureMsg, extensionValue,\n                            requestedExtensions, extControl);\n                } else {\n                    byte[] expected;\n                    if (ObjectIdentifiers.id_smimeCapabilities.equals(oid)) {\n                        expected = smimeCapabilities.value();\n                    } else {\n                        expected = getExpectedExtValue(oid, requestedExtensions, extControl);\n                    }\n\n                    if (!Arrays.equals(expected, extensionValue)) {\n                        addViolation(failureMsg, \"extension valus\", hex(extensionValue),\n                                (expected == null) ? \"not present\" : hex(expected));\n                    }\n                }\n\n                if (failureMsg.length() > 0) {\n                    issue.setFailureMessage(failureMsg.toString());\n                }\n\n            } catch (IllegalArgumentException | ClassCastException\n                    | ArrayIndexOutOfBoundsException ex) {\n                LOG.debug(\"extension value does not have correct syntax\", ex);\n                issue.setFailureMessage(\"extension value does not have correct syntax\");\n            }\n        }\n\n        return result;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n\n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n\n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n\n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic ShortcutView(final Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t\tpm = context.getPackageManager();\n\t\t\n\t\tsec = PreferenceManager.getDefaultSharedPreferences(getContext());\n\n\t\tpkg = sec.getString(\"pkg\", \"\");\n\t\tpin = sec.getString(\"pin\", \"\");\t\t\n\t\t\n\t\t\n\t\tfor (int i = 0; i < CAPACITY; i++) {\n\t\t\tfinal int b = i;\n\t\t\tApplicationInfo ai = null;\n\t\t\tString sv = null;\n\t\t\tString s = Settings.System.getString(context.getContentResolver(), \"PiSC\" + i);\n\n\t\t\tif (s == null | s == \"\") {\n\n\t\t\t\tSettings.System.putString(context.getContentResolver(), \"PiSC\"+b, \"com.pilockerstable\");\n\t\t\t}\n\t\t\tsv = s;\n\t\t\tShortCut sc = new ShortCut(context, attrs);\n\t\t\t\n\t\t\ttry {\n\t\t\t\tai = pm.getApplicationInfo(sv, 0);\n\t\t\t} catch (NameNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\ttry{\n\t\t\tString App_Name = (String) pm.getApplicationLabel(ai);\n\t\t\tDrawable Icon = pm.getApplicationIcon(ai);\n\t\t\tShortcutter st = new Shortcutter(App_Name, Icon);\n\t\t\tsc.setName(st.getName());\n\t\t\tsc.setImage(st.getIcon());\t\t\t\n\t\t\taddView(sc);\n\t\t\t\n\t\t\t}catch(Exception e){\n\t\t\t\tSettings.System.putString(context.getContentResolver(), \"PiSC\"+b, \"com.pilockerstable\");\n\t\t\t}\n\t\t\t\n\t\t\tsc.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t\n\t\t\t\tString sv = Settings.System.getString( context.getContentResolver(), \"PiSC\" + b);\n\n\t\t\t\t@Override \n\t\t\t\tpublic void onClick(View arg0) {\n\n\t\t\t\t\tif( pin.equals(\"\") || pin.equals(null) || pin.isEmpty()) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t((Activity) context).finish();\n\t\t\t\t\t\tIntent i = new Intent();\n\t\t\t\t\t\ti.setClass(getContext(), LockerService.class);\n\t\t\t\t\t\tcontext.startService(i);\n\t\t\t\t\t\tIntent LaunchIntent = context.getPackageManager().getLaunchIntentForPackage(sv);\n\t\t\t\t\t\tcontext.startActivity(LaunchIntent);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t}else{\n\t\t\t\t\t\n\t\t\t\t\tsave(\"pkg\", \"true\");\n\t\t\t\t\tIntent x = new Intent(getContext(), PinActivity.class);\n\t\t\t\t\tx.putExtra(\"sv\", sv);\n\t\t\t\t\tcontext.startActivity(x);\n\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr graph) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), graph});\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tpublic double[] sample(Random rng) {\n\t\tfinal Matrix vec = new Matrix(N, 1);\n\n\t\tfor (int i = 0; i < N; i++)\n\t\t\tvec.set(i, 0, rng.nextGaussian());\n\n\t\tfinal Matrix result = this.mean.plus(chol.times(vec).transpose());\n\n\t\treturn result.getArray()[0];\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic JavaFileObject getFileObject(RelativeDirectory subdirectory, String file) {\n        RelativeFile fullZipFileName = new RelativeFile(subdirectory, file);\n        ZipFileIndex.Entry entry = zfIndex.getZipIndexEntry(fullZipFileName);\n        JavaFileObject ret = new ZipFileIndexFileObject(fileManager, zfIndex, entry, zfIndex.getZipFile());\n        return ret;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static final void encodeRun(StringBuffer buffer, byte value, int length,\n                                        byte[] state) {\n        if (length < 4) {\n            for (int j=0; j<length; ++j) {\n                if (value == ESCAPE_BYTE) appendEncodedByte(buffer, ESCAPE_BYTE, state);\n                appendEncodedByte(buffer, value, state);\n            }\n        }\n        else {\n            if (length == ESCAPE_BYTE) {\n                if (value == ESCAPE_BYTE) appendEncodedByte(buffer, ESCAPE_BYTE, state);\n                appendEncodedByte(buffer, value, state);\n                --length;\n            }\n            appendEncodedByte(buffer, ESCAPE_BYTE, state);\n            appendEncodedByte(buffer, (byte)length, state);\n            appendEncodedByte(buffer, value, state); // Don't need to escape this value\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tprotected void func_143011_b(NBTTagCompound par1NBTTagCompound) {\n\t\tsuper.func_143011_b(par1NBTTagCompound);\n        this.size = par1NBTTagCompound.getInteger(\"towerSize\");\n        this.height = par1NBTTagCompound.getInteger(\"towerHeight\");\n        \n        this.readOpeningsFromArray(par1NBTTagCompound.getIntArray(\"doorInts\"));\n        \n        this.highestOpening = par1NBTTagCompound.getInteger(\"highestOpening\");\n        this.openingTowards[0] = par1NBTTagCompound.getBoolean(\"openingTowards0\");\n        this.openingTowards[1] = par1NBTTagCompound.getBoolean(\"openingTowards1\");\n        this.openingTowards[2] = par1NBTTagCompound.getBoolean(\"openingTowards2\");\n        this.openingTowards[3] = par1NBTTagCompound.getBoolean(\"openingTowards3\");\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(char ch) {\n        return isIdentifierIgnorable((int)ch);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static Collection<AttributeValue<?>>\textractValues(String datatype, Field field, Object object) throws IllegalArgumentException, IllegalAccessException, DataTypeException {\n\t\tDataTypeFactory dtFactory = getDataTypeFactory();\n\t\tif (dtFactory == null) {\n\t\t\tlogger.error(\"Could not create data type factory\");\n\t\t\treturn null;\n\t\t}\n\t\tCollection<AttributeValue<?>> values = new ArrayList<AttributeValue<?>>();\n\t\tObject fieldObject = field.get(object);\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(fieldObject);\n\t\t}\n\t\tif (fieldObject == null) {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"field's object is null.\");\n\t\t\t}\n\t\t\treturn values;\n\t\t}\n\t\tif (field.get(object) instanceof Collection || field.get(object) instanceof Map) {\n\t\t\tCollection<?> objects = (Collection<?>) field.get(object);\n\t\t\tif (objects == null || objects.isEmpty()) {\n\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\tlogger.trace(\"empty collection\");\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"Object is a collection\");\n\t\t\t}\n\t\t\tfor (Object obj : objects) {\n\t\t\t\tvalues.add(extractValue(datatype, obj));\n\t\t\t}\n\t\t} else if (fieldObject.getClass().isArray()) {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"Object is an array\");\n\t\t\t}\n\t\t\tfor (int i = 0; i < Array.getLength(fieldObject); i++) {\n\t\t\t\tvalues.add(extractValue(datatype, Array.get(fieldObject, i)));\n\t\t\t}\n\t\t} else {\n\t\t\tvalues.add(extractValue(datatype, field.get(object)));\n\t\t}\n\t\treturn values;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    void reserveSlot(Type type, int slot) {\n        assert slot >= 0;\n        final int size = type.getSize();\n        assert size == 1 || size == 2;\n        if (slot + size > types.length) {\n            types = grow(types);\n        }\n        assert types[slot] == null && (size == 1 || types[slot + 1] == null);\n        assign(slot, type);\n        activate(slot);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public XMLElement(HashMap entities,\n                      boolean skipLeadingWhitespace,\n                      boolean ignoreCase) {\n        this(entities, skipLeadingWhitespace, true, ignoreCase);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic static boolean putMapNotEmptyKeyAndValue(Map<String, String> map,\n\t\t\tString key, String value, String defaultValue) {\n\t\tif (map == null || StringUtil.isEmpty(key)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tmap.put(key, StringUtil.isEmpty(value) ? defaultValue : value);\n\t\treturn true;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public long testBlock(String filename, int blockSize) throws IOException {\n    LOGGER.info(\"Searching for divider in blocks of {}...\", blockSize);\n    long start = System.currentTimeMillis();\n\n    RandomAccessInputStream in = new RandomAccessInputStream(filename);\n    long offset = in.findString(blockSize, TAG).length();\n    in.close();\n\n    long end = System.currentTimeMillis();\n    LOGGER.info(\"Search result: {} -- in {} ms\", offset, end - start);\n    return offset;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic ImageData getImageData(BufferedImage bufferedImage){\n        DirectColorModel colorModel = (DirectColorModel) bufferedImage.getColorModel();\n        PaletteData palette = new PaletteData(colorModel.getRedMask(), colorModel.getGreenMask(), colorModel\n                .getBlueMask());\n        ImageData data = new ImageData(bufferedImage.getWidth(), bufferedImage.getHeight(), colorModel\n                .getPixelSize(), palette);\n        WritableRaster raster = bufferedImage.getRaster();\n        int[] pixelArray = new int[3];\n        for (int y = 0; y < data.height; y++) {\n            for (int x = 0; x < data.width; x++) {\n                raster.getPixel(x, y, pixelArray);\n                int pixel = palette.getPixel(new RGB(pixelArray[0], pixelArray[1], pixelArray[2]));\n                data.setPixel(x, y, pixel);\n            }\n        }\n        return data;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tpublic void checkPrivileges(MPrincipal principal, List<MPrivilege> privileges) throws SqoopException {\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"==> RangerSqoopAuthorizer.checkPrivileges()\");\n\t\t}\n\n\t\ttry {\n\t\t\tactivatePluginClassLoader();\n\n\t\t\tauthorizationValidator.checkPrivileges(principal, privileges);\n\t\t} finally {\n\t\t\tdeactivatePluginClassLoader();\n\t\t}\n\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"<== RangerSqoopAuthorizer.checkPrivileges()\");\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private PooledConnection createPooledConnection (\n            String user,\n            String password,\n            boolean requestPassword) throws SQLException {\n\n        return findDriver().getNewPooledConnection(\n            this, user, password, requestPassword);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tprivate void completeAddAppWidget(final int appWidgetId, long container,\n\t\t\tint screen, AppWidgetHostView hostView,\n\t\t\tAppWidgetProviderInfo appWidgetInfo) {\n\t\tif (appWidgetInfo == null) {\n\t\t\tappWidgetInfo = mAppWidgetManager.getAppWidgetInfo(appWidgetId);\n\t\t}\n\n\t\tCellLayout layout = getCellLayout(container, screen);\n\n\t\tint[] minSpanXY = getMinSpanForWidget(this, appWidgetInfo);\n\t\tint[] spanXY = getSpanForWidget(this, appWidgetInfo);\n\n\t\tint[] cellXY = mTmpAddItemCellCoordinates;\n\t\tint[] touchXY = mPendingAddInfo.dropPos;\n\t\tint[] finalSpan = new int[2];\n\t\tboolean foundCellSpan = false;\n\t\tif (mPendingAddInfo.cellX >= 0 && mPendingAddInfo.cellY >= 0) {\n\t\t\tcellXY[0] = mPendingAddInfo.cellX;\n\t\t\tcellXY[1] = mPendingAddInfo.cellY;\n\t\t\tspanXY[0] = mPendingAddInfo.spanX;\n\t\t\tspanXY[1] = mPendingAddInfo.spanY;\n\t\t\tfoundCellSpan = true;\n\t\t} else if (touchXY != null) {\n\t\t\tint[] result = layout.findNearestVacantArea(touchXY[0], touchXY[1],\n\t\t\t\t\tminSpanXY[0], minSpanXY[1], spanXY[0], spanXY[1], cellXY,\n\t\t\t\t\tfinalSpan);\n\t\t\tspanXY[0] = finalSpan[0];\n\t\t\tspanXY[1] = finalSpan[1];\n\t\t\tfoundCellSpan = (result != null);\n\t\t} else {\n\t\t\tfoundCellSpan = layout.findCellForSpan(cellXY, minSpanXY[0],\n\t\t\t\t\tminSpanXY[1]);\n\t\t}\n\n\t\tif (!foundCellSpan) {\n\t\t\tif (appWidgetId != -1) {\n\t\t\t\tnew Thread(\"deleteAppWidgetId\") {\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tmAppWidgetHost.deleteAppWidgetId(appWidgetId);\n\t\t\t\t\t}\n\t\t\t\t}.start();\n\t\t\t}\n\t\t\tshowOutOfSpaceMessage(isHotseatLayout(layout));\n\t\t\treturn;\n\t\t}\n\n\t\tLauncherAppWidgetInfo launcherInfo = new LauncherAppWidgetInfo(\n\t\t\t\tappWidgetId, appWidgetInfo.provider);\n\t\tlauncherInfo.spanX = spanXY[0];\n\t\tlauncherInfo.spanY = spanXY[1];\n\t\tlauncherInfo.minSpanX = mPendingAddInfo.minSpanX;\n\t\tlauncherInfo.minSpanY = mPendingAddInfo.minSpanY;\n\n\t\tLauncherModel.addItemToDatabase(this, launcherInfo, container, screen,\n\t\t\t\tcellXY[0], cellXY[1], false);\n\n\t\tif (!mRestoring) {\n\t\t\tif (hostView == null) {\n\t\t\t\tlauncherInfo.hostView = mAppWidgetHost.createView(this,\n\t\t\t\t\t\tappWidgetId, appWidgetInfo);\n\t\t\t\tlauncherInfo.hostView.setAppWidget(appWidgetId, appWidgetInfo);\n\t\t\t} else {\n\t\t\t\tlauncherInfo.hostView = hostView;\n\t\t\t}\n\n\t\t\tlauncherInfo.hostView.setTag(launcherInfo);\n\t\t\tlauncherInfo.hostView.setVisibility(View.VISIBLE);\n\t\t\tlauncherInfo.notifyWidgetSizeChanged(this);\n\n\t\t\tmWorkspace.addInScreen(launcherInfo.hostView, container, screen,\n\t\t\t\t\tcellXY[0], cellXY[1], launcherInfo.spanX,\n\t\t\t\t\tlauncherInfo.spanY, isWorkspaceLocked());\n\t\t\tif(!TextUtils.isEmpty(appWidgetInfo.label) && appWidgetInfo.label.equals(getResources().getString(R.string.app_switcher_name))){\n\t\t\t    FlurryAgent.logEvent(FlurryHelper.ADD_YOUR_APPS_WIDGET);\n\t\t\t}else if(appWidgetInfo.provider != null && appWidgetInfo.provider.equals(FlurryHelper.PEACE_OF_MIND_WIDGET_COMPONENT)){\n                FlurryAgent.logEvent(FlurryHelper.PEACE_OF_MIND_WIDGET_ADDED);\n\t\t\t}\n\t\t\taddWidgetToAutoAdvanceIfNeeded(launcherInfo.hostView, appWidgetInfo);\n\t\t}\n\t\tresetAddInfo();\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(byte[] bytes, int start, int length) {\n        char[] chars = localBuffer.get();\n        if (chars == null || chars.length < length) {\n            chars = new char[length];\n            localBuffer.set(chars);\n        }\n        int outAt = 0;\n\n        for (int at = start; length > 0; ) {\n            int v0 = bytes[at] & 0xFF;\n            char out;\n            switch (v0 >> 4) {\n                case 0x00: case 0x01: case 0x02: case 0x03:\n                case 0x04: case 0x05: case 0x06: case 0x07: {\n                    length--;\n                    if (v0 == 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    out = (char) v0;\n                    at++;\n                    break;\n                }\n                case 0x0c: case 0x0d: {\n                    length -= 2;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int value = ((v0 & 0x1f) << 6) | (v1 & 0x3f);\n                    if ((value != 0) && (value < 0x80)) {\n                        \n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    out = (char) value;\n                    at += 2;\n                    break;\n                }\n                case 0x0e: {\n                    length -= 3;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int v2 = bytes[at + 2] & 0xFF;\n                    if ((v2 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    int value = ((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) |\n                            (v2 & 0x3f);\n                    if (value < 0x800) {\n                        \n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    out = (char) value;\n                    at += 3;\n                    break;\n                }\n                default: {\n                    return throwBadUtf8(v0, at);\n                }\n            }\n            chars[outAt] = out;\n            outAt++;\n        }\n\n        return new String(chars, 0, outAt);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, com.ib.client.Contract contractIB, com.ib.client.Order order,\n\t\t\tOrderState orderState) {\n\t\ttry {\n\n\t\t\tTWSBrokerModel.logOrderState(orderState);\n\t\t\tTWSBrokerModel.logTradeOrder(order);\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(new Integer(order.m_orderId));\n\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170,\n\t\t\t\t\t\t\"Warning Order not found for Order Key: \" + order.m_orderId + \" make sure Client ID: \"\n\t\t\t\t\t\t\t\t+ this.m_clientId + \" is not the master in TWS. On openOrder update.\");\n\t\t\t\ttransientInstance = new TradeOrder();\n\t\t\t\ttransientInstance.setOrderKey(order.m_orderId);\n\t\t\t\ttransientInstance.setCreateDate(TradingCalendar.getDateTimeNowMarketTimeZone());\n\t\t\t\tTWSBrokerModel.updateTradeOrder(order, orderState, transientInstance);\n\t\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (TWSBrokerModel.updateTradeOrder(order, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t_log.debug(\"Open order filled Order Key:\" + transientInstance.getOrderKey());\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (transientInstance.hasTradePosition() && !transientInstance.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(transientInstance.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Open order state changed. Status:\" + orderState.m_status);\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(transientInstance);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.fireTradeOrderStatusChanged(transientInstance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + order.m_lmtPrice +\n        \" auxPrice=\" + order.m_auxPrice +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + order.m_minQty +\n        \" percentOffset=\" + order.m_percentOffset +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + order.m_nbboPriceCap +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + order.m_startingPrice +\n        \" stockRefPrice=\" + order.m_stockRefPrice +\n        \" delta=\" + order.m_delta +\n        \" stockRangeLower=\" + order.m_stockRangeLower +\n        \" stockRangeUpper=\" + order.m_stockRangeUpper +\n        \" volatility=\" + order.m_volatility +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + order.m_trailStopPrice +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + order.m_basisPoints;\n        \t\tmsg += \" basisPointsType=\" + order.m_basisPointsType;\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t@Deprecated\n\tpublic ExecutionEvent(@SuppressWarnings(\"rawtypes\") final Map parameters, final Object trigger,\n\t\t\tfinal Object applicationContext) {\n\t\tthis(null, parameters, trigger, applicationContext);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void quadrantRotate(int numquadrants,\n                               double anchorx, double anchory)\n    {\n        switch (numquadrants & 3) {\n        case 0:\n            return;\n        case 1:\n            m02 += anchorx * (m00 - m01) + anchory * (m01 + m00);\n            m12 += anchorx * (m10 - m11) + anchory * (m11 + m10);\n            rotate90();\n            break;\n        case 2:\n            m02 += anchorx * (m00 + m00) + anchory * (m01 + m01);\n            m12 += anchorx * (m10 + m10) + anchory * (m11 + m11);\n            rotate180();\n            break;\n        case 3:\n            m02 += anchorx * (m00 + m01) + anchory * (m01 - m00);\n            m12 += anchorx * (m10 + m11) + anchory * (m11 - m10);\n            rotate270();\n            break;\n        }\n        if (m02 == 0.0 && m12 == 0.0) {\n            state &= ~APPLY_TRANSLATE;\n        } else {\n            state |= APPLY_TRANSLATE;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\tChannel channel = ctx.channel();\n\t\t\tchannels.remove(channel);\n\t\t\tNode client = channel.attr(STATE).get();\n\t\t\tuserLinkList.delUser(client);\n\t\t\tcombobox.removeItem(client.username);\n\t\t\tsuper.channelUnregistered(ctx);\n\t\t\tbroadcasts(new LoginOutMessage(client.username));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1],\n                col = (int)val[2];\n            float toSet = val[3];\n            \n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            table.setVal(row-1, col-1, toSet);\n            return toSet;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PluginLoadOrder getLoad() {\n        return order;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.xrm._2011.metadata.CascadeConfiguration newInstance(org.apache.xmlbeans.XmlOptions options) {\n          return (com.microsoft.schemas.xrm._2011.metadata.CascadeConfiguration) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().newInstance( type, options ); }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\tChannel channel = ctx.channel();\n\t\t\tchannels.remove(channel);\n\t\t\tNode client = channel.attr(STATE).get();\n\t\t\tuserLinkList.delUser(client);\n\t\t\tcombobox.removeItem(client.username);\n\t\t\tsuper.channelUnregistered(ctx);\n\t\t\tbroadcasts(new LoginOutMessage(client.username));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    protected void fireVetoableChange(String propertyName, Object oldValue,\n                                      Object newValue)\n        throws PropertyVetoException\n    {\n        if (oldValue == newValue) {\n            return;\n        }\n        VetoableChangeSupport vetoableSupport =\n            this.vetoableSupport;\n        if (vetoableSupport != null) {\n            vetoableSupport.fireVetoableChange(propertyName, oldValue,\n                                               newValue);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void actionPerformed(ActionEvent e) {\n                                                                                                int i = 0;\n                                                                                                for (i = 0; i < runners\n                                                                                                    .size(); i++) {\n                                                                                                    if (runners\n                                                                                                        .get(\n                                                                                                            i)\n                                                                                                        .isAlive())\n                                                                                                        break;\n                                                                                                }\n\n                                                                                                if (i == runners\n                                                                                                    .size()) {\n                                                                                                    Display\n                                                                                                        .getDefault()\n                                                                                                        .asyncExec(\n                                                                                                            new Runnable() {\n                                                                                                                public void run() {\n                                                                                                                    stop(true);\n                                                                                                                    setButton(\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true,\n                                                                                                                        true);\n                                                                                                                }\n                                                                                                            });\n\n                                                                                                }\n                                                                                            }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void printMethods() {\n\t\tif (TypeUtil.isClassLike(type)) {\n\t\t\tfor (List<IMethodBinding> e : methods.values()) {\n\t\t\t\tfor (IMethodBinding mb : e) {\n\t\t\t\t\taccess = TransformUtil.declareBridge(ctx, out, type, mb,\n\t\t\t\t\t\t\tdeps, access);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tList<IMethodBinding> superMethods = hiddenMethods(type, ctx, methods);\n\n\t\tfor (IMethodBinding mb : superMethods) {\n\t\t\taccess = printAccess(out, mb.getModifiers(), access);\n\t\t\tprint(i1);\n\t\t\tTransformUtil.printSignature(ctx, out, type,\n\t\t\t\t\tmb.getMethodDeclaration(), deps, false);\n\t\t\tif (Modifier.isAbstract(mb.getModifiers())) {\n\t\t\t\tprint(\" = 0\");\n\t\t\t}\n\n\t\t\tprintln(\";\");\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic ImageData getImageData(BufferedImage bufferedImage){\n        DirectColorModel colorModel = (DirectColorModel) bufferedImage.getColorModel();\n        PaletteData palette = new PaletteData(colorModel.getRedMask(), colorModel.getGreenMask(), colorModel\n                .getBlueMask());\n        ImageData data = new ImageData(bufferedImage.getWidth(), bufferedImage.getHeight(), colorModel\n                .getPixelSize(), palette);\n        WritableRaster raster = bufferedImage.getRaster();\n        int[] pixelArray = new int[3];\n        for (int y = 0; y < data.height; y++) {\n            for (int x = 0; x < data.width; x++) {\n                raster.getPixel(x, y, pixelArray);\n                int pixel = palette.getPixel(new RGB(pixelArray[0], pixelArray[1], pixelArray[2]));\n                data.setPixel(x, y, pixel);\n            }\n        }\n        return data;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public static <E> E argmax(Counter<E> c, Comparator<E> tieBreaker) {\n    double max = Double.NEGATIVE_INFINITY;\n    E argmax = null;\n    for (E key : c.keySet()) {\n      double count = c.getCount(key);\n      if (argmax == null || count > max || (count == max && tieBreaker.compare(key, argmax) < 0)) {\n        max = count;\n        argmax = key;\n      }\n    }\n    return argmax;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void printMethods(){\n        MethodData[] methods = cls.getMethods();\n        for(int m = 0; m < methods.length; m++){\n            String[] accflags = methods[m].getAccess();\n            if(checkAccess(accflags)){\n                if(!(env. showLineAndLocal || env.showDisassembled || env.showVerbose\n                     ||  env.showInternalSigs || env.showallAttr)){\n                    out.print(\"    \");\n                }\n                printMethodSignature(methods[m], accflags);\n                printExceptions(methods[m]);\n                out.println(\";\");\n\n                if (env.showInternalSigs){\n                    out.println(\"  Signature: \" + (methods[m].getInternalSig()));\n                }\n\n                if(env.showDisassembled && ! env.showallAttr) {\n                    printcodeSequence(methods[m]);\n                    printExceptionTable(methods[m]);\n                    out.println();\n                }\n\n                if (env.showLineAndLocal) {\n                    printLineNumTable(methods[m]);\n                    printLocVarTable(methods[m]);\n                    out.println();\n                }\n\n                if (env.showallAttr){\n                    printMethodAttributes(methods[m]);\n                }\n            }\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr graph) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), graph});\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public final boolean isConstant() {\n    if (this.getVariableDecls().length > 0) return false;\n\n    this.levelCheck(1) ;\n      \n    OpDefNode[] opDefs = this.getOpDefs();\n    for (int i = 0; i < opDefs.length; i++) {\n      if (opDefs[i].getKind() != ModuleInstanceKind &&\n          opDefs[i].getBody().getLevel() != ConstantLevel)\n        return false;\n    }\n\n    for (int i = 0; i < theoremVec.size(); i++) {\n      if (((TheoremNode)(theoremVec.elementAt(i))).getLevel() != ConstantLevel) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public Object getObject(String columnName) throws SQLException {\n        return getObject(getColIdxByName(columnName));\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(byte[] bytes, int start, int length) {\n        char[] chars = localBuffer.get();\n        if (chars == null || chars.length < length) {\n            chars = new char[length];\n            localBuffer.set(chars);\n        }\n        int outAt = 0;\n\n        for (int at = start; length > 0; ) {\n            int v0 = bytes[at] & 0xFF;\n            char out;\n            switch (v0 >> 4) {\n                case 0x00: case 0x01: case 0x02: case 0x03:\n                case 0x04: case 0x05: case 0x06: case 0x07: {\n                    length--;\n                    if (v0 == 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    out = (char) v0;\n                    at++;\n                    break;\n                }\n                case 0x0c: case 0x0d: {\n                    length -= 2;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int value = ((v0 & 0x1f) << 6) | (v1 & 0x3f);\n                    if ((value != 0) && (value < 0x80)) {\n                        \n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    out = (char) value;\n                    at += 2;\n                    break;\n                }\n                case 0x0e: {\n                    length -= 3;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int v2 = bytes[at + 2] & 0xFF;\n                    if ((v2 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    int value = ((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) |\n                            (v2 & 0x3f);\n                    if (value < 0x800) {\n                        \n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    out = (char) value;\n                    at += 3;\n                    break;\n                }\n                default: {\n                    return throwBadUtf8(v0, at);\n                }\n            }\n            chars[outAt] = out;\n            outAt++;\n        }\n\n        return new String(chars, 0, outAt);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void quadrantRotate(int numquadrants,\n                               double anchorx, double anchory)\n    {\n        switch (numquadrants & 3) {\n        case 0:\n            return;\n        case 1:\n            m02 += anchorx * (m00 - m01) + anchory * (m01 + m00);\n            m12 += anchorx * (m10 - m11) + anchory * (m11 + m10);\n            rotate90();\n            break;\n        case 2:\n            m02 += anchorx * (m00 + m00) + anchory * (m01 + m01);\n            m12 += anchorx * (m10 + m10) + anchory * (m11 + m11);\n            rotate180();\n            break;\n        case 3:\n            m02 += anchorx * (m00 + m01) + anchory * (m01 - m00);\n            m12 += anchorx * (m10 + m11) + anchory * (m11 - m10);\n            rotate270();\n            break;\n        }\n        if (m02 == 0.0 && m12 == 0.0) {\n            state &= ~APPLY_TRANSLATE;\n        } else {\n            state |= APPLY_TRANSLATE;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void printMethods() {\n\t\tif (TypeUtil.isClassLike(type)) {\n\t\t\tfor (List<IMethodBinding> e : methods.values()) {\n\t\t\t\tfor (IMethodBinding mb : e) {\n\t\t\t\t\taccess = TransformUtil.declareBridge(ctx, out, type, mb,\n\t\t\t\t\t\t\tdeps, access);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tList<IMethodBinding> superMethods = hiddenMethods(type, ctx, methods);\n\n\t\tfor (IMethodBinding mb : superMethods) {\n\t\t\taccess = printAccess(out, mb.getModifiers(), access);\n\t\t\tprint(i1);\n\t\t\tTransformUtil.printSignature(ctx, out, type,\n\t\t\t\t\tmb.getMethodDeclaration(), deps, false);\n\t\t\tif (Modifier.isAbstract(mb.getModifiers())) {\n\t\t\t\tprint(\" = 0\");\n\t\t\t}\n\n\t\t\tprintln(\";\");\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\n    public static Bitmap fastblur(Context context, Bitmap sentBitmap, float radius) {\n\n        if (Build.VERSION.SDK_INT > 16 &&\n                    (!Build.MODEL.contains(\"google_sdk\")\n                             && !Build.MODEL.contains(\"Emulator\")\n                             && !Build.MODEL.contains(\"Android SDK\")\n                             && !Build.FINGERPRINT.contains(\"vbox86p\"))) {\n            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n            final RenderScript rs = RenderScript.create(context);\n            final Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n                                                                 Allocation.USAGE_SCRIPT);\n            final Allocation output = Allocation.createTyped(rs, input.getType());\n            final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n            script.setRadius(radius );\n            script.setInput(input);\n            script.forEach(output);\n            output.copyTo(bitmap);\n            return bitmap;\n        }\n\n        radius *= 0.1;\n        return blurfast(sentBitmap, (int) radius);\n\n\n\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n\n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n\n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n\n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tprivate void buildElements()\n\t{\n\t\ttitleLabel = new Label(Box2DBumpers.APPLICATION_NAME, skin, URL_LABEL_FONT, Color.YELLOW);\n\n\t\tstartButton = new TextButton(\"Start\", skin);\n\t\taboutButton = new TextButton(\"About\", skin);\n\n\t\ttable = new Table();\n\n\t\ttable.setSize(getWidth(), getHeight());\n\n\t\ttable.row();\n\t\ttable.add(titleLabel).expandY().expandX();\n\t\ttable.row();\n\t\ttable.add(startButton).expandY().expandX();\n\t\ttable.row();\n\t\ttable.add(aboutButton).expandY().expandX();\n\n\t\ttable.setFillParent(true);\n\n\t\ttable.pack();\n\t\t\n\t\tstartButton.addListener(new ClickListener()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic void clicked(InputEvent event, float x, float y)\n\t\t\t{\n\t\t\t\tdirector.sendEvent(AppEvents.EVENT_TRANSITION_TO_MAIN_SCENE, event.getRelatedActor());\n\t\t\t}\n\n\t\t});\n\n\t\taboutButton.addListener(new ClickListener()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic void clicked(InputEvent event, float x, float y)\n\t\t\t{\n\t\t\t\tdirector.sendEvent(AppEvents.EVENT_TRANSITION_TO_ABOUT_SCENE, event.getRelatedActor());\n\t\t\t}\n\n\t\t});\n\n\t\ttable.pack();\n\n\t\taddActor(table);\n\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic BlameGenerator push(String description, byte[] contents)\n\t\t\tthrows IOException {\n\t\treturn push(description, new RawText(contents));\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void drawLeadingMargin(Canvas c, Paint p, int x, int dir,\n                                  int top, int baseline, int bottom,\n                                  CharSequence text, int start, int end,\n                                  boolean first, Layout layout) {\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr adjacencyList) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), adjacencyList});\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static URI resolve(URI base, URI child) {\n        if (child.isOpaque() || base.isOpaque())\n            return child;\n\n        if ((child.scheme == null) && (child.authority == null)\n            && child.path.equals(\"\") && (child.fragment != null)\n            && (child.query == null)) {\n            if ((base.fragment != null)\n                && child.fragment.equals(base.fragment)) {\n                return base;\n            }\n            URI ru = new URI();\n            ru.scheme = base.scheme;\n            ru.authority = base.authority;\n            ru.userInfo = base.userInfo;\n            ru.host = base.host;\n            ru.port = base.port;\n            ru.path = base.path;\n            ru.fragment = child.fragment;\n            ru.query = base.query;\n            return ru;\n        }\n\n        if (child.scheme != null)\n            return child;\n\n        URI ru = new URI();             // Resolved URI\n        ru.scheme = base.scheme;\n        ru.query = child.query;\n        ru.fragment = child.fragment;\n\n        if (child.authority == null) {\n            ru.authority = base.authority;\n            ru.host = base.host;\n            ru.userInfo = base.userInfo;\n            ru.port = base.port;\n\n            String cp = (child.path == null) ? \"\" : child.path;\n            if ((cp.length() > 0) && (cp.charAt(0) == '/')) {\n                ru.path = child.path;\n            } else {\n                ru.path = resolvePath(base.path, cp, base.isAbsolute());\n            }\n        } else {\n            ru.authority = child.authority;\n            ru.host = child.host;\n            ru.userInfo = child.userInfo;\n            ru.host = child.host;\n            ru.port = child.port;\n            ru.path = child.path;\n        }\n\n        return ru;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tpublic void checkPrivileges(MPrincipal principal, List<MPrivilege> privileges) throws SqoopException {\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"==> RangerSqoopAuthorizer.checkPrivileges()\");\n\t\t}\n\n\t\ttry {\n\t\t\tactivatePluginClassLoader();\n\n\t\t\tauthorizationValidator.checkPrivileges(principal, privileges);\n\t\t} finally {\n\t\t\tdeactivatePluginClassLoader();\n\t\t}\n\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"<== RangerSqoopAuthorizer.checkPrivileges()\");\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static String stringFromStream(InputStream is) throws IOException {\n\t\tStringBuffer sb = new StringBuffer();\n\t    byte[] b = new byte[4096];\n\t    int n;\n\t    while((n = is.read(b)) != -1) {\n\t        sb.append(new String(b, 0, n));\n\t    }\n\t    return sb.toString();\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate PolicyDescriptions createPolicyDescriptions(Map<URI, PolicyDescription> policies) {\n        System.out.println(\"setting policydescriptions # of policies: \"+policies.size());\n        PolicyDescriptions pd = new PolicyDescriptions();\n        for(URI key : policies.keySet()) {\n            PolicyDescriptionsEntry entry = new PolicyDescriptionsEntry();\n            entry.setKey(key);\n\n            entry.setValue(policies.get(key));\n            pd.getEntry().add(entry);\n\n            \n        }\n        return pd;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void setColumnWidth(int columnIndex, int width) {\n        _sheet.setColumnWidth(columnIndex, width);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; }\n        return retVal;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + order.m_lmtPrice +\n        \" auxPrice=\" + order.m_auxPrice +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + order.m_minQty +\n        \" percentOffset=\" + order.m_percentOffset +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + order.m_nbboPriceCap +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + order.m_startingPrice +\n        \" stockRefPrice=\" + order.m_stockRefPrice +\n        \" delta=\" + order.m_delta +\n        \" stockRangeLower=\" + order.m_stockRangeLower +\n        \" stockRangeUpper=\" + order.m_stockRangeUpper +\n        \" volatility=\" + order.m_volatility +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + order.m_trailStopPrice +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + order.m_basisPoints;\n        \t\tmsg += \" basisPointsType=\" + order.m_basisPointsType;\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tpublic PsiBuilder.Marker parseAndDone(ShaderLabParserBuilder builder, PsiBuilder.Marker mark)\n\t{\n\t\tif(builder.getTokenType() == ShaderLabTokens.LPAR)\n\t\t{\n\t\t\tPsiBuilder.Marker valueMarker = builder.mark();\n\t\t\tparseElementsInBraces(builder, ShaderLabTokens.LPAR, ShaderLabTokens.RPAR, ShaderLabTokens.INTEGER_LITERAL);\n\t\t\tvalueMarker.done(ShaderLabElements.PROPERTY_VALUE);\n\t\t}\n\t\telse if(builder.getTokenType() == ShaderLabTokens.LBRACKET)\n\t\t{\n\t\t\tparseBracketReference(builder);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbuilder.error(\"Expected value\");\n\t\t}\n\t\tmark.done(ShaderLabElements.SIMPLE_VALUE);\n\t\treturn mark;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate ExternalCarrierBillingInstrumentProto(Builder builder) {\n    this(builder.instrumentKey, builder.subscriberIdentifier, builder.accountType, builder.subscriberCurrency, builder.transactionLimit, builder.subscriberName, builder.address1, builder.address2, builder.city, builder.state, builder.postalCode, builder.country, builder.encryptedSubscriberInfo);\n    setBuilder(builder);\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintWriter writer, boolean suppressLogin, char eolMarker, boolean showDirection)\n    {\n        __writer = writer;\n        __nologin = suppressLogin;\n        __eolMarker = eolMarker;\n        __directionMarker = showDirection;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic WebSocketServer(InetSocketAddress address, int decodercount, List<Draft> drafts, Collection<WebSocket> connectionscontainer) {\n        if (address == null || decodercount < 1 || connectionscontainer == null) {\n            throw new IllegalArgumentException(\"address and connectionscontainer must not be null and you need at least 1 decoder\");\n        }\n\n        if (drafts == null)\n            this.drafts = Collections.emptyList();\n        else\n            this.drafts = drafts;\n\n        this.address = address;\n        this.connections = connectionscontainer;\n\n        iqueue = new LinkedList<WebSocketImpl>();\n\n        decoders = new ArrayList<WebSocketWorker>(decodercount);\n        buffers = new LinkedBlockingQueue<ByteBuffer>();\n        for (int i = 0; i < decodercount; i++) {\n            WebSocketWorker ex = new WebSocketWorker();\n            decoders.add(ex);\n            ex.start();\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t@SideOnly(Side.CLIENT)\n\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n\tpublic void addInformation(ItemStack stack, EntityPlayer player, List list, boolean bool)\n\t{\n\t\tsuper.addInformation(stack, player, list, bool);\n\t\tGrcItemBase.addDescription(this, stack, player, list, bool);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tpublic double[] sample(Random rng) {\n\t\tfinal Matrix vec = new Matrix(N, 1);\n\n\t\tfor (int i = 0; i < N; i++)\n\t\t\tvec.set(i, 0, rng.nextGaussian());\n\n\t\tfinal Matrix result = this.mean.plus(chol.times(vec).transpose());\n\n\t\treturn result.getArray()[0];\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void changeSelection(int delta, int keyCode) {\n\t\tboolean sideways = keyCode == KeyEvent.VK_LEFT || keyCode == KeyEvent.VK_RIGHT;\n\n\t\tT item = lc.changeSelection(itemList, selectedItem, delta, sideways);\n\t\tif (item != null) {\n\t\t\tselectItem(item);\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic FluidTankInfo[] getTankInfo() {\n\t\tFluidTankInfo[] infos = new FluidTankInfo[NUM_TANKS];\n\t\tfor(int i = 0; i < NUM_TANKS; i++) {\n\t\t\tinfos[i] = tanks[i].getInfo();\n\t\t}\n\n\t\treturn infos;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate boolean r_standard_suffix() {\n\t\tint among_var;\n\t\tint v_1;\n\t\tint v_2;\n\t\tint v_3;\n\t\tint v_4;\n\t\tint v_5;\n\t\tint v_6;\n\t\tint v_7;\n\t\tint v_8;\n\t\tint v_9;\n\t\tint v_10;\n\t\tv_1 = limit - cursor;\n\t\tlab0: do {\n\t\t\tket = cursor;\n\t\t\tamong_var = find_among_b(a_1, 7);\n\t\t\tif (among_var == 0) {\n\t\t\t\tbreak lab0;\n\t\t\t}\n\t\t\tbra = cursor;\n\t\t\tif (!r_R1()) {\n\t\t\t\tbreak lab0;\n\t\t\t}\n\t\t\tswitch (among_var) {\n\t\t\tcase 0:\n\t\t\t\tbreak lab0;\n\t\t\tcase 1:\n\t\t\t\tslice_del();\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tslice_del();\n\t\t\t\tv_2 = limit - cursor;\n\t\t\t\tlab1: do {\n\t\t\t\t\tket = cursor;\n\t\t\t\t\tif (!(eq_s_b(1, \"s\"))) {\n\t\t\t\t\t\tcursor = limit - v_2;\n\t\t\t\t\t\tbreak lab1;\n\t\t\t\t\t}\n\t\t\t\t\tbra = cursor;\n\t\t\t\t\tif (!(eq_s_b(3, \"nis\"))) {\n\t\t\t\t\t\tcursor = limit - v_2;\n\t\t\t\t\t\tbreak lab1;\n\t\t\t\t\t}\n\t\t\t\t\tslice_del();\n\t\t\t\t} while (false);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tif (!(in_grouping_b(g_s_ending, 98, 116))) {\n\t\t\t\t\tbreak lab0;\n\t\t\t\t}\n\t\t\t\tslice_del();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while (false);\n\t\tcursor = limit - v_1;\n\t\tv_3 = limit - cursor;\n\t\tlab2: do {\n\t\t\tket = cursor;\n\t\t\tamong_var = find_among_b(a_2, 4);\n\t\t\tif (among_var == 0) {\n\t\t\t\tbreak lab2;\n\t\t\t}\n\t\t\tbra = cursor;\n\t\t\tif (!r_R1()) {\n\t\t\t\tbreak lab2;\n\t\t\t}\n\t\t\tswitch (among_var) {\n\t\t\tcase 0:\n\t\t\t\tbreak lab2;\n\t\t\tcase 1:\n\t\t\t\tslice_del();\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tif (!(in_grouping_b(g_st_ending, 98, 116))) {\n\t\t\t\t\tbreak lab2;\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tint c = cursor - 3;\n\t\t\t\t\tif (limit_backward > c || c > limit) {\n\t\t\t\t\t\tbreak lab2;\n\t\t\t\t\t}\n\t\t\t\t\tcursor = c;\n\t\t\t\t}\n\t\t\t\tslice_del();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while (false);\n\t\tcursor = limit - v_3;\n\t\tv_4 = limit - cursor;\n\t\tlab3: do {\n\t\t\tket = cursor;\n\t\t\tamong_var = find_among_b(a_4, 8);\n\t\t\tif (among_var == 0) {\n\t\t\t\tbreak lab3;\n\t\t\t}\n\t\t\tbra = cursor;\n\t\t\tif (!r_R2()) {\n\t\t\t\tbreak lab3;\n\t\t\t}\n\t\t\tswitch (among_var) {\n\t\t\tcase 0:\n\t\t\t\tbreak lab3;\n\t\t\tcase 1:\n\t\t\t\tslice_del();\n\t\t\t\tv_5 = limit - cursor;\n\t\t\t\tlab4: do {\n\t\t\t\t\tket = cursor;\n\t\t\t\t\tif (!(eq_s_b(2, \"ig\"))) {\n\t\t\t\t\t\tcursor = limit - v_5;\n\t\t\t\t\t\tbreak lab4;\n\t\t\t\t\t}\n\t\t\t\t\tbra = cursor;\n\t\t\t\t\t{\n\t\t\t\t\t\tv_6 = limit - cursor;\n\t\t\t\t\t\tlab5: do {\n\t\t\t\t\t\t\tif (!(eq_s_b(1, \"e\"))) {\n\t\t\t\t\t\t\t\tbreak lab5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcursor = limit - v_5;\n\t\t\t\t\t\t\tbreak lab4;\n\t\t\t\t\t\t} while (false);\n\t\t\t\t\t\tcursor = limit - v_6;\n\t\t\t\t\t}\n\t\t\t\t\tif (!r_R2()) {\n\t\t\t\t\t\tcursor = limit - v_5;\n\t\t\t\t\t\tbreak lab4;\n\t\t\t\t\t}\n\t\t\t\t\tslice_del();\n\t\t\t\t} while (false);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t{\n\t\t\t\tv_7 = limit - cursor;\n\t\t\t\tlab6: do {\n\t\t\t\t\tif (!(eq_s_b(1, \"e\"))) {\n\t\t\t\t\t\tbreak lab6;\n\t\t\t\t\t}\n\t\t\t\t\tbreak lab3;\n\t\t\t\t} while (false);\n\t\t\t\tcursor = limit - v_7;\n\t\t\t}\n\t\t\t\tslice_del();\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tslice_del();\n\t\t\t\tv_8 = limit - cursor;\n\t\t\t\tlab7: do {\n\t\t\t\t\tket = cursor;\n\t\t\t\t\tlab8: do {\n\t\t\t\t\t\tv_9 = limit - cursor;\n\t\t\t\t\t\tlab9: do {\n\t\t\t\t\t\t\tif (!(eq_s_b(2, \"er\"))) {\n\t\t\t\t\t\t\t\tbreak lab9;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak lab8;\n\t\t\t\t\t\t} while (false);\n\t\t\t\t\t\tcursor = limit - v_9;\n\t\t\t\t\t\tif (!(eq_s_b(2, \"en\"))) {\n\t\t\t\t\t\t\tcursor = limit - v_8;\n\t\t\t\t\t\t\tbreak lab7;\n\t\t\t\t\t\t}\n\t\t\t\t\t} while (false);\n\t\t\t\t\tbra = cursor;\n\t\t\t\t\tif (!r_R1()) {\n\t\t\t\t\t\tcursor = limit - v_8;\n\t\t\t\t\t\tbreak lab7;\n\t\t\t\t\t}\n\t\t\t\t\tslice_del();\n\t\t\t\t} while (false);\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tslice_del();\n\t\t\t\tv_10 = limit - cursor;\n\t\t\t\tlab10: do {\n\t\t\t\t\tket = cursor;\n\t\t\t\t\tamong_var = find_among_b(a_3, 2);\n\t\t\t\t\tif (among_var == 0) {\n\t\t\t\t\t\tcursor = limit - v_10;\n\t\t\t\t\t\tbreak lab10;\n\t\t\t\t\t}\n\t\t\t\t\tbra = cursor;\n\t\t\t\t\tif (!r_R2()) {\n\t\t\t\t\t\tcursor = limit - v_10;\n\t\t\t\t\t\tbreak lab10;\n\t\t\t\t\t}\n\t\t\t\t\tswitch (among_var) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tcursor = limit - v_10;\n\t\t\t\t\t\tbreak lab10;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tslice_del();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} while (false);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while (false);\n\t\tcursor = limit - v_4;\n\t\treturn true;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        return CharacterData.of(codePoint).isIdentifierIgnorable(codePoint);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public Value<Integer> run(Integer intermediate, String userEmail) {\n      String prompt =\n          \"The intermediate result is \" + intermediate + \".\"\n               + \" Please give one more int\";\n      PromisedValue<Integer> oneMoreInt = newPromise();\n      ExternalAgentJob.getIntFromUser(prompt, userEmail, oneMoreInt.getHandle());\n      return oneMoreInt;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void updateHighOrderDerivativesPhase2(final T[] start, final T[] end,\n                                                 final Array2DRowFieldMatrix<T> highOrder) {\n        transformer.updateHighOrderDerivativesPhase2(start, end, highOrder);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n    public void testNotEquals() throws UnsupportedEncodingException {\n        SoapSTSInstanceConfig ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/openam\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        SoapSTSInstanceConfig ric2 = createInstanceConfig(\"/bobo\", \"http://localhost:8080/openam\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/openam\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", !WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", !WITH_KEYSTORE_CONFIG,\n                !WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", !WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, !DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, !DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, !WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, !WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, !WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; }\n        return retVal;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public E argmax(Comparator<E> tieBreaker) {\n    int max = Integer.MIN_VALUE;\n    E argmax = null;\n    for (E key : keySet()) {\n      int count = getIntCount(key);\n      if (argmax == null || count > max || (count == max && tieBreaker.compare(key, argmax) < 0)) {\n        max = count;\n        argmax = key;\n      }\n    }\n    return argmax;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Parameterized.Parameters\n    public static Collection<Object[]> combinations() {\n        return Arrays.asList(\n                new Object[]{(Function<Bytes, Wire>) bytes -> new BinaryWire(bytes, false, true, false, 128, \"binary\", false)},\n                new Object[]{WireType.TEXT},\n                new Object[]{WireType.BINARY},\n                new Object[]{WireType.BINARY_LIGHT},\n                new Object[]{WireType.FIELDLESS_BINARY},\n                new Object[]{WireType.JSON}\n        );\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic SmoothStreamingRendererBuilder(String userAgent, String url, String contentId,\n      MediaDrmCallback drmCallback, TextView debugTextView) {\n    this.userAgent = userAgent;\n    this.url = url;\n    this.contentId = contentId;\n    this.drmCallback = drmCallback;\n    this.debugTextView = debugTextView;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public Object getObject(String columnName) throws SQLException {\n        return getObject(getColIdxByName(columnName));\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void registerReceiver() {\n\t\tIntentFilter updateIntent = new IntentFilter();\n\t\tupdateIntent.addAction(ACTION_UPDATE_WEATHER);\n\t\tupdateIntent.addAction(ACTION_SWITH_CITY);\n\t\tupdateIntent.addAction(ACTION_NEXT_CITY);\n\t\tupdateIntent.addAction(ACTION_TIME_SET);\n\t\tupdateIntent.addAction(Intent.ACTION_TIME_TICK);\n\t\tupdateIntent.addAction(Intent.ACTION_DATE_CHANGED);\n\t\tupdateIntent.addAction(Intent.ACTION_TIMEZONE_CHANGED);\n\t\tregisterReceiver(mTimePickerBroadcast, updateIntent);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic SmoothStreamingRendererBuilder(String userAgent, String url, String contentId,\n      MediaDrmCallback drmCallback, TextView debugTextView) {\n    this.userAgent = userAgent;\n    this.url = url;\n    this.contentId = contentId;\n    this.drmCallback = drmCallback;\n    this.debugTextView = debugTextView;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void printMethods() {\n\t\tif (TypeUtil.isClassLike(type)) {\n\t\t\tfor (List<IMethodBinding> e : methods.values()) {\n\t\t\t\tfor (IMethodBinding mb : e) {\n\t\t\t\t\taccess = TransformUtil.declareBridge(ctx, out, type, mb,\n\t\t\t\t\t\t\tdeps, access);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tList<IMethodBinding> superMethods = hiddenMethods(type, ctx, methods);\n\n\t\tfor (IMethodBinding mb : superMethods) {\n\t\t\taccess = printAccess(out, mb.getModifiers(), access);\n\t\t\tprint(i1);\n\t\t\tTransformUtil.printSignature(ctx, out, type,\n\t\t\t\t\tmb.getMethodDeclaration(), deps, false);\n\t\t\tif (Modifier.isAbstract(mb.getModifiers())) {\n\t\t\t\tprint(\" = 0\");\n\t\t\t}\n\n\t\t\tprintln(\";\");\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {\n    EList<EObject> _contents = resource.getContents();\n    EObject _head = IterableExtensions.<EObject>head(_contents);\n    Model model = ((Model) _head);\n    String _packageName = model.getPackageName();\n    PreferencesBlock _preferencesBlock = model.getPreferencesBlock();\n    String _name = _preferencesBlock.getName();\n    String _pascalize = Strings.pascalize(_name);\n    String _concat = _pascalize.concat(\"Preferences\");\n    String _resolveFileName = Strings.resolveFileName(_packageName, _concat);\n    CharSequence _generate = this.mPreferencesGenerator.generate(model);\n    fsa.generateFile(_resolveFileName, _generate);\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(java.io.File file) throws org.apache.xmlbeans.XmlException, java.io.IOException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( file, type, null ); }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void quadrantRotate(int numquadrants) {\n        switch (numquadrants & 3) {\n        case 0:\n            break;\n        case 1:\n            rotate90();\n            break;\n        case 2:\n            rotate180();\n            break;\n        case 3:\n            rotate270();\n            break;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic static boolean putMapNotEmptyKeyAndValue(Map<String, String> map,\n\t\t\tString key, String value, String defaultValue) {\n\t\tif (map == null || StringUtil.isEmpty(key)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tmap.put(key, StringUtil.isEmpty(value) ? defaultValue : value);\n\t\treturn true;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n        public View getView(final int position, View convertView, final ViewGroup parent) {\n            ViewHolder holder = null;\n            if (convertView == null) {\n                convertView = layoutInflater.inflate(R.layout.item_marray, null);\n            } else {\n                convertView.getTag();\n            }\n            holder = new ViewHolder(convertView);\n            holder.tv_name.setText(news.get(position).getName());\n            holder.tv_phone.setText(news.get(position).getPhone());\n            if (news.get(position).isShow) {\n                holder.ly_a.setVisibility(VISIBLE);\n                holder.ly_b.setVisibility(View.GONE);\n            } else {\n                holder.ly_a.setVisibility(View.GONE);\n                holder.ly_b.setVisibility(VISIBLE);\n            }\n            final ViewHolder finalHolder = holder;\n\n\n            return convertView;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void updateHighOrderDerivativesPhase2(final T[] start, final T[] end,\n                                                 final Array2DRowFieldMatrix<T> highOrder) {\n        transformer.updateHighOrderDerivativesPhase2(start, end, highOrder);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps) {\n            return setImageAttachmentsForObject(objectProperty, bitmaps, false);\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr graph) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), graph});\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static Endpoint create(String bindingId, Object implementor) {\n        return Provider.provider().createEndpoint(bindingId, implementor);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(java.io.File file) throws org.apache.xmlbeans.XmlException, java.io.IOException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( file, type, null ); }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic static boolean putMapNotEmptyKeyAndValue(Map<String, String> map,\n\t\t\tString key, String value, String defaultValue) {\n\t\tif (map == null || StringUtil.isEmpty(key)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tmap.put(key, StringUtil.isEmpty(value) ? defaultValue : value);\n\t\treturn true;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\tChannel channel = ctx.channel();\n\t\t\tchannels.remove(channel);\n\t\t\tNode client = channel.attr(STATE).get();\n\t\t\tuserLinkList.delUser(client);\n\t\t\tcombobox.removeItem(client.username);\n\t\t\tsuper.channelUnregistered(ctx);\n\t\t\tbroadcasts(new LoginOutMessage(client.username));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private boolean isInContent(double x, double y, Sticker currentSticker) {\n        long startTime = System.currentTimeMillis();\n\n        PointD pointF_1 = getMidpointCoordinate(currentSticker.getMapPointsDst()[0], currentSticker.getMapPointsDst()[1], currentSticker.getMapPointsDst()[2], currentSticker.getMapPointsDst()[3]);\n        double a1 = lineSpace(currentSticker.getMapPointsDst()[8], currentSticker.getMapPointsDst()[9], pointF_1.getX(), pointF_1.getY());\n        double b1 = lineSpace(currentSticker.getMapPointsDst()[8], currentSticker.getMapPointsDst()[9], x, y);\n        if (b1 <= a1) {\n            return true;\n        }\n        double c1 = lineSpace(pointF_1.getX(), pointF_1.getY(), x, y);\n        double p1 = (a1 + b1 + c1) / 2;\n        double s1 = Math.sqrt(p1 * (p1 - a1) * (p1 - b1) * (p1 - c1));\n        double d1 = 2 * s1 / a1;\n        if (d1 > a1) {\n            return false;\n        }\n\n        PointD pointF_2 = getMidpointCoordinate(currentSticker.getMapPointsDst()[2], currentSticker.getMapPointsDst()[3], currentSticker.getMapPointsDst()[4], currentSticker.getMapPointsDst()[5]);\n        double a2 = a1;\n        double b2 = b1;\n        double c2 = lineSpace(pointF_2.getX(), pointF_2.getY(), x, y);\n        double p2 = (a2 + b2 + c2) / 2;\n        double temp = p2 * (p2 - a2) * (p2 - b2) * (p2 - c2);\n        double s2 = Math.sqrt(temp);\n        double d2 = 2 * s2 / a2;\n        if (d2 > a1) {\n            return false;\n        }\n        long endTime = System.currentTimeMillis();\n        long time = endTime - startTime;\n\n        if (d1 <= a1 && d2 <= a1) {\n            return true;\n        }\n\n        return false;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, com.ib.client.Contract contractIB, com.ib.client.Order order,\n\t\t\tOrderState orderState) {\n\t\ttry {\n\n\t\t\tTWSBrokerModel.logOrderState(orderState);\n\t\t\tTWSBrokerModel.logTradeOrder(order);\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(new Integer(order.m_orderId));\n\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170,\n\t\t\t\t\t\t\"Warning Order not found for Order Key: \" + order.m_orderId + \" make sure Client ID: \"\n\t\t\t\t\t\t\t\t+ this.m_clientId + \" is not the master in TWS. On openOrder update.\");\n\t\t\t\ttransientInstance = new TradeOrder();\n\t\t\t\ttransientInstance.setOrderKey(order.m_orderId);\n\t\t\t\ttransientInstance.setCreateDate(TradingCalendar.getDateTimeNowMarketTimeZone());\n\t\t\t\tTWSBrokerModel.updateTradeOrder(order, orderState, transientInstance);\n\t\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (TWSBrokerModel.updateTradeOrder(order, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t_log.debug(\"Open order filled Order Key:\" + transientInstance.getOrderKey());\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (transientInstance.hasTradePosition() && !transientInstance.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(transientInstance.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Open order state changed. Status:\" + orderState.m_status);\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(transientInstance);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.fireTradeOrderStatusChanged(transientInstance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tstatic Varargs gsub( Varargs args ) {\n\t\tLuaString src = args.checkstring( 1 );\n\t\tfinal int srclen = src.length();\n\t\tLuaString p = args.checkstring( 2 );\n\t\tLuaValue repl = args.arg( 3 );\n\t\tint max_s = args.optint( 4, srclen + 1 );\n\t\tfinal boolean anchor = p.length() > 0 && p.charAt( 0 ) == '^';\n\t\t\n\t\tBuffer lbuf = new Buffer( srclen );\n\t\tMatchState ms = new MatchState( args, src, p );\n\t\t\n\t\tint soffset = 0;\n\t\tint n = 0;\n\t\twhile ( n < max_s ) {\n\t\t\tms.reset();\n\t\t\tint res = ms.match( soffset, anchor ? 1 : 0 );\n\t\t\tif ( res != -1 ) {\n\t\t\t\tn++;\n\t\t\t\tms.add_value( lbuf, soffset, res, repl );\n\t\t\t}\n\t\t\tif ( res != -1 && res > soffset )\n\t\t\t\tsoffset = res;\n\t\t\telse if ( soffset < srclen )\n\t\t\t\tlbuf.append( (byte) src.luaByte( soffset++ ) );\n\t\t\telse\n\t\t\t\tbreak;\n\t\t\tif ( anchor )\n\t\t\t\tbreak;\n\t\t}\n\t\tlbuf.append( src.substring( soffset, srclen ) );\n\t\treturn varargsOf(lbuf.tostring(), valueOf(n));\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static Filter methodFilter(final java.lang.reflect.Method m,\n            final boolean isTest,\n            Object[] extraArgs, final Object falseResult) {\n        Class[] params = m.getParameterTypes();\n        final boolean isStatic = java.lang.reflect.Modifier.isStatic(m.getModifiers());\n        int insertLen = (isStatic ? 1 : 0);\n        if (insertLen + (extraArgs == null ? 0 : extraArgs.length) > params.length) {\n            throw new IllegalArgumentException(\"too many arguments\");\n        }\n        final Object[] args = (params.length == insertLen) ? null\n                : new Object[params.length];\n        final Class valueType = !isStatic ? m.getDeclaringClass() : params[0];\n        if (valueType.isPrimitive()) {\n            throw new IllegalArgumentException(\"filtered value must be reference type\");\n        }\n        int fillp = insertLen;\n        if (extraArgs != null) {\n            for (int i = 0; i < extraArgs.length; i++) {\n                args[fillp++] = extraArgs[i];\n            }\n        }\n        if (args != null) {\n            while (fillp < args.length) {\n                Class param = params[fillp];\n                args[fillp++] = param.isPrimitive() ? zeroArgs.get(param) : null;\n            }\n        }\n        final Thread curt = Thread.currentThread();\n        class MFilt implements Filter {\n\n            public Object filter(Object value) {\n                if (!valueType.isInstance(value)) {\n                    return null;  // filter fails quickly\n                }\n                Object[] args1 = args;\n                if (isStatic) {\n                    if (args1 == null) {\n                        args1 = new Object[1];\n                    } else if (curt != Thread.currentThread()) // Dirty hack to curtail array copying in common case.\n                    {\n                        args1 = (Object[]) args1.clone();\n                    }\n                    args1[0] = value;\n                }\n                Object res;\n                try {\n                    res = m.invoke(value, args1);\n                } catch (java.lang.reflect.InvocationTargetException te) {\n                    Throwable ee = te.getCause();\n                    if (ee instanceof RuntimeException) {\n                        throw (RuntimeException) ee;\n                    }\n                    if (ee instanceof Error) {\n                        throw (Error) ee;\n                    }\n                    throw new RuntimeException(\"throw in filter\", ee);\n                } catch (IllegalAccessException ee) {\n                    throw new RuntimeException(\"access error in filter\", ee);\n                }\n                if (res == null) {\n                    if (!isTest && m.getReturnType() == Void.TYPE) {\n                        res = value;\n                    }\n                } else {\n                    if (falseResult != null && falseResult.equals(res)) {\n                        res = null;\n                    } else if (isTest) {\n                        res = value;\n                    }\n                }\n                return res;\n            }\n\n            @Override\n            public String toString() {\n                return \"<Method>\" + m + \"</Method>\";\n            }\n        }\n        return new MFilt();\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void addFooterView(View v, Object data, boolean isSelectable) {\n        FixedViewInfo info = new FixedViewInfo();\n        info.view = v;\n        info.data = data;\n        info.isSelectable = isSelectable;\n        mFooterViewInfos.add(info);\n\n        if (mDataSetObserver != null) {\n            mDataSetObserver.onChanged();\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public double interpolateZ(Coordinate p)\n  {\n    if (p == null)\n      throw new IllegalArgumentException(\"Supplied point is null.\");\n    return interpolateZ(p, this.p0, this.p1, this.p2);\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static void drawQuad() {\n        \n        if (!Debug.noVBO) {\n            vertex_VBO.bindWithFormat(3, Format.FLOAT, 0, 0); \n    \n            texture_VBO.bindWithFormat(2, Format.FLOAT, 0, 0); \n            \n            index_VBO.bindAsIndex();\n            \n            VBO.render(6, Format.UNSIGNED_SHORT);\n        } else {\n            vertex_VBO.bindImmediate(3, Format.FLOAT, 0); \n    \n            texture_VBO.bindImmediate(2, Format.FLOAT, 0); \n            \n            index_VBO.renderImmediate(6, Format.UNSIGNED_SHORT);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr graph) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), graph});\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tprotected void systemLoader(Context context)\n\t{\n\t\tif (RockySdk.getInstance().getContext() != null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tContext application = context.getApplicationContext();\n\t\t\n\t\tWebView webview = new WebView(context);\n\t\twebview.layout(0, 0, 0, 0);\n\t\tWebSettings webSettings = webview.getSettings();\n\t\t\n\t\tApplicationInfo applicationInfo = context.getApplicationInfo();\n\t\t\n\t\tVersionInfo versionInfo = ManifestTools.getVersionInfo(application);\n\t\tString userAgent = webSettings.getUserAgentString();\n\t\t\n\t\tClientInfo clientInfo = new ClientInfo(application.getPackageName());\n\t\tclientInfo.setAppicon(applicationInfo.icon);\n\t\tclientInfo.setAppname(ManifestTools.getApplicationLable(application));\n\t\tclientInfo.setDeviceType(SdkConfig.Device.PHONE);\n\t\tclientInfo.setDeviceName(android.os.Build.MODEL);\n\t\tclientInfo.setAlias(android.os.Build.MODEL);\n\t\tclientInfo.setSdkVersion(android.os.Build.VERSION.SDK_INT);\n\t\tclientInfo.setMac(DeviceInfoManager.getMacAddress(application));\n\t\t\n\t\tclientInfo.setUserAgent(userAgent);\n\t\t\n\t\tif (versionInfo != null)\n\t\t{\n\t\t\tclientInfo.setVersionCode(versionInfo.getVersionCode());\n\t\t\tclientInfo.setVersionName(versionInfo.getVersionName());\n\t\t}\n\t\t\n\t\tclientInfo.addFlags(ClientInfo.FLAG_DEBUG | ClientInfo.FLAG_RELEASE);\n\t\t\n\t\tRockyConfig config = new RockyConfig.Builder(application)\n\t\t\t.clientInfo(clientInfo)\n\t\t\t.hasAdBanner(false)\t\t// \u93c4\u5267\u305a\u7ec9\ue21a\u578eBanner\n\t\t\t.hasAdPointsWall(true)\t// \u93c4\u5267\u305a\u7ec9\ue21a\u578e\u6fa7\n\t\t\t.build();\n\t\t\n\t\tRockySdk.getInstance().init(config);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static String getMsgWithLineNumber(String msg) {\n        try {\n            for (StackTraceElement st : (new Throwable()).getStackTrace()) {\n                if (classname.equals(st.getClassName()) || methods.contains(st.getMethodName())) {\n                    continue;\n                } else {\n                    int b = st.getClassName().lastIndexOf(\".\") + 1;\n                    String tag = st.getClassName().substring(b);\n                    String message = tag + \"->\" + st.getMethodName() + \"():\" + st.getLineNumber() + \"->\" + msg;\n                    return message;\n                }\n\n            }\n        } catch (Exception e) {\n            LogUtil.e(e);\n        }\n        return msg;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\tChannel channel = ctx.channel();\n\t\t\tchannels.remove(channel);\n\t\t\tNode client = channel.attr(STATE).get();\n\t\t\tuserLinkList.delUser(client);\n\t\t\tcombobox.removeItem(client.username);\n\t\t\tsuper.channelUnregistered(ctx);\n\t\t\tbroadcasts(new LoginOutMessage(client.username));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate boolean isLinked(String nodeIdInQuestion, Node nodeThatCouldBeRoutedTo,\n            NetworkedNode root, Node me, List<NodeGroupLink> allLinks) {\n        if (root != null) {\n            if (nodeIdInQuestion != null && nodeThatCouldBeRoutedTo != null\n                    && !nodeIdInQuestion.equals(nodeThatCouldBeRoutedTo.getNodeId())) {\n                NetworkedNode networkedNodeInQuestion = root.findNetworkedNode(nodeIdInQuestion);\n                NetworkedNode networkedNodeThatCouldBeRoutedTo = root\n                        .findNetworkedNode(nodeThatCouldBeRoutedTo.getNodeId());\n                if (networkedNodeInQuestion != null) {\n                    if (networkedNodeInQuestion.isInParentHierarchy(nodeThatCouldBeRoutedTo\n                            .getNodeId())) {\n                        return true;\n                    }\n\n                    String createdAtNodeId = networkedNodeInQuestion.getNode().getCreatedAtNodeId();\n                    if (createdAtNodeId != null\n                            && !createdAtNodeId.equals(me.getNodeId())\n                            && !networkedNodeInQuestion.getNode().getNodeId()\n                                    .equals(me.getNodeId())) {\n                        if (createdAtNodeId.equals(nodeThatCouldBeRoutedTo.getNodeId())) {\n                            return true;\n                        } else if (networkedNodeThatCouldBeRoutedTo != null) {\n                            return networkedNodeThatCouldBeRoutedTo\n                                    .isInChildHierarchy(createdAtNodeId);\n                        }\n                    }\n\n                    String groupId = networkedNodeInQuestion.getNode().getNodeGroupId();\n                    Set<String> groupsThatWillBeInterested = new HashSet<String>();\n                    for (NodeGroupLink nodeGroupLink : allLinks) {\n                        if (nodeGroupLink.getTargetNodeGroupId().equals(groupId)) {\n                            groupsThatWillBeInterested.add(nodeGroupLink.getSourceNodeGroupId());\n                        } else if (nodeGroupLink.getSourceNodeGroupId().equals(groupId)) {\n                            groupsThatWillBeInterested.add(nodeGroupLink.getTargetNodeGroupId());\n                        }\n                    }\n\n                    if (groupsThatWillBeInterested.contains(nodeThatCouldBeRoutedTo\n                            .getNodeGroupId())) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                } else {\n                    return false;\n                }\n                \n            } else {\n                return true;\n            }\n        } else {\n            return false;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public void onDownloadError(int index, String message) {\n    for (int i = 0; i < mDownloadStatus.length; i++) {\n        if (mDownloadStatus[i] != DownFile.DownloadStatus.FINISH && mDownloadStatus[i] != DownFile.DownloadStatus.ERROR) {\n            mDownloadThreads[i].cancel();\n        }\n    }\n    notifyError(message);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\tChannel channel = ctx.channel();\n\t\t\tchannels.remove(channel);\n\t\t\tNode client = channel.attr(STATE).get();\n\t\t\tuserLinkList.delUser(client);\n\t\t\tcombobox.removeItem(client.username);\n\t\t\tsuper.channelUnregistered(ctx);\n\t\t\tbroadcasts(new LoginOutMessage(client.username));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic SmoothStreamingRendererBuilder(Context context, String userAgent, String url,\n      MediaDrmCallback drmCallback) {\n    this.context = context;\n    this.userAgent = userAgent;\n    this.url = Util.toLowerInvariant(url).endsWith(\"/manifest\") ? url : url + \"/Manifest\";\n    this.drmCallback = drmCallback;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\tChannel channel = ctx.channel();\n\t\t\tchannels.remove(channel);\n\t\t\tNode client = channel.attr(STATE).get();\n\t\t\tuserLinkList.delUser(client);\n\t\t\tcombobox.removeItem(client.username);\n\t\t\tsuper.channelUnregistered(ctx);\n\t\t\tbroadcasts(new LoginOutMessage(client.username));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public static <E> E argmax(Counter<E> c, Comparator<E> tieBreaker) {\n    double max = Double.NEGATIVE_INFINITY;\n    E argmax = null;\n    for (E key : c.keySet()) {\n      double count = c.getCount(key);\n      if (argmax == null || count > max || (count == max && tieBreaker.compare(key, argmax) < 0)) {\n        max = count;\n        argmax = key;\n      }\n    }\n    return argmax;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate Expression readCondition() throws SQLException {\n        Expression r = readConcat();\n        while (true) {\n            boolean not = false;\n            if (readIf(\"NOT\")) {\n                not = true;\n            }\n            Operator op = readCustom(not);\n            if (op != null) {\n                Expression b;\n                switch (op.getCardinality()) {\n                case ZERO: {\n                    b = null;\n                    break;\n                }\n                case ONE: {\n                    b = readConcat();\n                    break;\n                }\n                case MULTI: {\n                    read(\"(\");\n                  Collection<Expression> v = new ArrayList<Expression>();\n                  Expression last;\n                  do {\n                      last = readExpression();\n                      v.add(last);\n                  } while (readIf(\",\"));\n                  read(\")\");\n                  b = new Parameter(session, v);\n                  break;\n                }\n                default:\n                    throw new IllegalArgumentException(\"Can't handle \"\n                            + op.getCardinality());\n                }\n\n                Expression esc = null;\n                if (readIf(\"ESCAPE\")) {\n                    esc = readConcat();\n                }\n                recompileAlways = true;\n                r = new Comparison(session, op.getName(), r, b);\n            } //else if (readIf(\"REGEXP\")) {\n              if (readIf(\"IS\")) {\n                String type;\n                if (readIf(\"NOT\")) {\n                    type = Operator.IS_NOT_NULL;\n                } else {\n                    type = Operator.IS_NULL;\n                }\n                read(\"NULL\");\n                r = new Comparison(session, type, r, null);\n            } else {\n                String compareType = getCompareType(currentTokenType);\n                if (compareType == null) {\n                    break;\n                }\n                read();\n                    Expression right = readConcat();\n                        r = new Comparison(session, compareType, r, right);\n\n            }\n        }\n        return r;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void createInstances() {\n        asadmin(\"create-node-ssh\", NODE_HOST_OPTION, LOCALHOST, FORCE_OPTION,\n                TRUE, LB_NODE1);\n        asadmin(\"create-node-ssh\", NODE_HOST_OPTION, LOCALHOST, FORCE_OPTION,\n                TRUE, LB_NODE2);\n\n        asadmin(\"create-cluster\", CLUSTER);\n\n        asadmin(\"create-instance\", CLUSTER_OPTION, CLUSTER, NODE_OPTION,\n                LB_NODE1, INSTANCE1);\n        asadmin(\"create-instance\", CLUSTER_OPTION, CLUSTER, NODE_OPTION,\n                LB_NODE2, INSTANCE2);\n        asadmin(\"create-instance\", CLUSTER_OPTION, CLUSTER, NODE_OPTION,\n                LB_NODE1, INSTANCE3);\n\n        asadmin(\"create-cluster\", CLUSTER2);\n\n        asadmin(\"create-instance\", CLUSTER_OPTION, CLUSTER2, NODE_OPTION,\n                LB_NODE1, INSTANCE4);\n        asadmin(\"create-instance\", CLUSTER_OPTION, CLUSTER2, NODE_OPTION,\n                LB_NODE2, INSTANCE5);\n\n        asadmin(\"create-instance\", NODE_OPTION, LB_NODE1, STANDALONE_INSTANCE1);\n        asadmin(\"create-instance\", NODE_OPTION, LB_NODE2, STANDALONE_INSTANCE2);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static boolean isEmptyOrWhitespace(String s) {\n        s = makeSafe(s);\n        for (int i = 0, n = s.length(); i < n; i++) {\n            if (!Character.isWhitespace(s.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static <A extends Closeable> A api(Class<A> apitype, final String provider, final String credId, final Properties overrides) {\n        Thread.currentThread().setContextClassLoader(Apis.class.getClassLoader());\n        return CredentialsHelper.setCredentials(ContextBuilder.newBuilder(provider), credId)\n            .overrides(overrides).modules(MODULES).buildApi(typeToken(apitype));\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic Output (int n, long value, String address, long txIndex, String script, boolean spent) {\n        this.n = n;\n        this.value = value;\n        this.address = address;\n        this.txIndex = txIndex;\n        this.script = script;\n        this.spent = spent;\n        if (address != \"\") {\n            spentToAddress = true;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void printMethods() {\n\t\tif (TypeUtil.isClassLike(type)) {\n\t\t\tfor (List<IMethodBinding> e : methods.values()) {\n\t\t\t\tfor (IMethodBinding mb : e) {\n\t\t\t\t\taccess = TransformUtil.declareBridge(ctx, out, type, mb,\n\t\t\t\t\t\t\tdeps, access);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tList<IMethodBinding> superMethods = hiddenMethods(type, ctx, methods);\n\n\t\tfor (IMethodBinding mb : superMethods) {\n\t\t\taccess = printAccess(out, mb.getModifiers(), access);\n\t\t\tprint(i1);\n\t\t\tTransformUtil.printSignature(ctx, out, type,\n\t\t\t\t\tmb.getMethodDeclaration(), deps, false);\n\t\t\tif (Modifier.isAbstract(mb.getModifiers())) {\n\t\t\t\tprint(\" = 0\");\n\t\t\t}\n\n\t\t\tprintln(\";\");\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic final boolean platformRequest(String urlString) throws ConnectionNotFoundException{\n\t\tif(urlString == null) {\n\t\t\tthrow new IllegalArgumentException(\"Parameter 'url' must not be null.\");\n\t\t}\n\t\tif(\"\".equals(urlString)) {\n\t\t\treturn false;\n\t\t}\n\t\tif(urlString.startsWith(\"tel:\")) {\n\t\t\tString number = urlString.substring(4);\n\t\t\tboolean matches = java.util.regex.Pattern.compile(\"\\\\+?\\\\d+\").matcher(number).matches();\n\t\t\tif(!matches) {\n\t\t\t\tthrow new ConnectionNotFoundException(\"The telephone number '\"+number+\"' is malformed. It must be described by the regular expression '\\\\+?\\\\d+'\");\n\t\t\t}\n\t\t\tIntent i = new Intent();\n\t\t\ti.setAction(Intent.ACTION_DIAL);\n\t\t\tUri numberUri = Uri.parse(\"tel:\"+number);\n\t\t\tSystem.out.println(\"Uri for phone number:\"+numberUri);\n\t\t\ti.setData(numberUri);\n\t\t\tstartActivity(i);\n\t\t\treturn false;\n\t\t}\n\t\tif(urlString.startsWith(\"http:\") || urlString.startsWith(\"https:\")) {\n\t\t\tUri uri = Uri.parse(urlString);\n\t\t\tIntent intent = new Intent(Intent.ACTION_VIEW,uri);\n\t\t\tstartActivity(intent);\n\t\t\treturn false;\n\t\t}\n\t\tif(urlString.startsWith(\"device://show/settings/gps\")) {\n\t\t\tIntent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);\n\t\t\tstartActivity(intent);\n\t\t\treturn false;\n\t\t}\n\t\tthrow new ConnectionNotFoundException(\"The url '\"+urlString+\"' can not behandled. The url scheme is not supported\");\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)\n            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {\n        serialize(parentQName, xmlWriter, false);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n    void sampleValueAboveMaximumExpectedValue() {\n        statsConfig.setMaximumExpectedValue(2);\n\n        TimeWindowLatencyHistogram histogram = new TimeWindowLatencyHistogram(Clock.SYSTEM, statsConfig);\n        histogram.record(3);\n        assertThat(histogram.histogramCountAtValue(3)).isEqualTo(1);\n        assertThat(histogram.histogramCountAtValue(Long.MAX_VALUE)).isEqualTo(1);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(byte[] bytes) {\n        int length = bytes.length;\n        if (tempBuffer == null || tempBuffer.length < length) {\n            tempBuffer = new char[length];\n        }\n        char[] chars = tempBuffer;\n        int outAt = 0;\n\n        for (int at = 0; length > 0; ) {\n            int v0 = bytes[at] & 0xFF;\n            char out;\n            switch (v0 >> 4) {\n                case 0x00: case 0x01: case 0x02: case 0x03:\n                case 0x04: case 0x05: case 0x06: case 0x07: {\n                    length--;\n                    if (v0 == 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    out = (char) v0;\n                    at++;\n                    break;\n                }\n                case 0x0c: case 0x0d: {\n                    length -= 2;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int value = ((v0 & 0x1f) << 6) | (v1 & 0x3f);\n                    if ((value != 0) && (value < 0x80)) {\n                        \n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    out = (char) value;\n                    at += 2;\n                    break;\n                }\n                case 0x0e: {\n                    length -= 3;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int v2 = bytes[at + 2] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    int value = ((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) |\n                        (v2 & 0x3f);\n                    if (value < 0x800) {\n                        \n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    out = (char) value;\n                    at += 3;\n                    break;\n                }\n                default: {\n                    return throwBadUtf8(v0, at);\n                }\n            }\n            chars[outAt] = out;\n            outAt++;\n        }\n\n        return new String(chars, 0, outAt);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static String escapeCssIdentifier(final String text,\n                                         final CssIdentifierEscapeType type, final CssIdentifierEscapeLevel level) {\n\n        if (type == null) {\n            throw new IllegalArgumentException(\"The 'type' argument cannot be null\");\n        }\n\n        if (level == null) {\n            throw new IllegalArgumentException(\"The 'level' argument cannot be null\");\n        }\n\n        return CssIdentifierEscapeUtil.escape(text, type, level);\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tpublic UUID getGuid(String fieldName)\n\t\t\tthrows DecodingException\n\t{\n\t\ttry {\n\t\t\tbyte[] enc = new byte[16];\n\n\t\t\tenc[3] = in.get();\n\t\t\tenc[2] = in.get();\n\t\t\tenc[1] = in.get();\n\t\t\tenc[0] = in.get();\n\t\t\tenc[5] = in.get();\n\t\t\tenc[4] = in.get();\n\t\t\tenc[7] = in.get();\n\t\t\tenc[6] = in.get();\n\t\t\tfor (int i = 8; i < 16; i++)\n\t\t\t\tenc[i] = in.get();;\n\n\t\t\t\tlong hiBits = 0;\n\t\t\t\tlong loBits = 0;\n\t\t\t\tfor (int i = 0; i < 8; i++)\n\t\t\t\t\thiBits = (hiBits << 8) | (enc[i] & 0xff);\n\t\t\t\tfor (int i = 8; i < 16; i++)\n\t\t\t\t\tloBits = (loBits << 8) | (enc[i] & 0xff);\n\n\t\t\t\treturn new UUID(hiBits, loBits);\n\t\t} catch (IOException e) {\n\t\t\tthrow toDecodingException(e);\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n        \n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n        \n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n        \n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private PooledConnection createPooledConnection (\n            String user,\n            String password,\n            boolean requestPassword) throws SQLException {\n\n        return findDriver().getNewPooledConnection(\n            this, user, password, requestPassword);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\n    public static Bitmap fastblur(Context context, Bitmap sentBitmap, float radius) {\n\n        if (Build.VERSION.SDK_INT > 16 &&\n                    (!Build.MODEL.contains(\"google_sdk\")\n                             && !Build.MODEL.contains(\"Emulator\")\n                             && !Build.MODEL.contains(\"Android SDK\")\n                             && !Build.FINGERPRINT.contains(\"vbox86p\"))) {\n            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n            final RenderScript rs = RenderScript.create(context);\n            final Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n                                                                 Allocation.USAGE_SCRIPT);\n            final Allocation output = Allocation.createTyped(rs, input.getType());\n            final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n            script.setRadius(radius );\n            script.setInput(input);\n            script.forEach(output);\n            output.copyTo(bitmap);\n            return bitmap;\n        }\n\n        radius *= 0.1;\n        return blurfast(sentBitmap, (int) radius);\n\n\n\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void defaultAction(HttpServletRequest req, HttpServletResponse res)\n                   throws ServletException, IOException\n    {\n     bmsample1home home = null;\n     bmsample1 remote = null;\n     res.setContentType(\"text/plain\");\n     PrintWriter out = res.getWriter();\n     Context ctx;\n     Properties p;\n\t       \n     try\n      {\n   \t  Hashtable env = new Hashtable(1);\n      env.put(\"javax.naming.factory.initial\", \"com.netscape.server.jndi.RootContextFactory\");\n \t  ctx = new InitialContext(env);\n      Object objref = ctx.lookup(\"ejb/bmsamplebean1\");\n      home = (bmsample1home)PortableRemoteObject.narrow(objref, bmsample1home.class);\n      remote = home.create();\n      out.println(\"calling M1 ->DB1\");\n      out.println(\" the result of invoking the ejb method is \" + remote.performDBOps());\n       out.println(\"calling M2 ->DB2\");\n      out.println(\"...... result of invoking the ejb method is \" + remote.performDBOps2());\n\t   }\n       catch (Exception e)\n       {\n\t   System.out.println(\" ERROR: \" + e);\n       }\n      try\n        {\n        javax.sql.DataSource ds,ds2;\n        java.sql.Connection conn = null,conn2 = null;\n        java.sql.Statement stmt = null,stmt2 = null;\n        java.sql.ResultSet rs = null,rs2 = null;\n\tctx = new InitialContext();\n\tds = (DataSource)ctx.lookup(\"java:comp/env/jdbc/oraclethird\");\n\tds2 = (DataSource)ctx.lookup(\"java:comp/env/jdbc/oracleds2\");\n        \n        conn = ds.getConnection();\n\tconn2 = ds2.getConnection();\n\tstmt=conn.createStatement();\n\tstmt2=conn2.createStatement();\n\tout.println(\"..........Verifying table contents ....\");\n\trs=stmt.executeQuery(\"select * from status21\");\n\tint count=0;\n         while (rs.next())\n        {count++;\n         out.println(\"record = \"+rs.getString(1));\n        }\n         rs2=stmt2.executeQuery(\"select * from status2\");\n         int count2=0;\n        while (rs2.next())\n         {count2++;\n         out.println(\"record = \"+rs2.getString(1));\n         }\n         out.println(\"Total Records in table1 = \"+count);\n        out.println(\"Total Records in table2 = \"+count2);\n\tif ((count==1)&&(count2==1))\n         out.println(\"Result:FAIL\");\n         else\n         out.println(\"Result:PASS\");\n         stmt.executeUpdate(\"delete from status21\");\n         stmt2.executeUpdate(\"delete from status2\");\n         conn.commit();\n         conn2.commit();  \n         rs.close();\n         out.println(\"deleted in 1\");\n         out.println(\"deleted in 2\");\n\t rs2.close();\n         stmt.close();\n\tstmt2.close();\n\n\t conn.close();\n\t conn2.close();\n        }catch(Exception e){}\t\t\t      \n\t\t\t\t\t\t\t\t      \n\t  \n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1];\n            int col = 1;\n            if (val.length > 2)\n                col = Math.max(1, (int)val[2]);\n\n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            Object o = table.data.get(row-1)[col-1];\n            if (o instanceof Float)\n                return (Float)o;\n            return 0f;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate boolean performAction(int action) {\n\t\tfinal int size = rows.getChildCount();\n\t\tfinal ArrayList<RelationMemberRow> selected = new ArrayList<RelationMemberRow>();\n\t\tfinal ArrayList<Integer> selectedPos = new ArrayList<Integer>();\n\t\tfor (int i = 0; i < size; i++) {\n\t\t\tView view = rows.getChildAt(i);\n\t\t\tRelationMemberRow row = (RelationMemberRow)view;\n\t\t\tif (row.isSelected()) {\n\t\t\t\tselected.add(row);\n\t\t\t\tselectedPos.add(i);\n\t\t\t}\n\t\t} \n\t\tfinal int selectedCount = selectedPos.size();\n\t\tint change = 1;\n\t\tswitch (action) {\n\t\tcase MENU_ITEM_DELETE: // Note real work is done in super\n\t\t\t((RelationMembersFragment) caller).setIcons();\n\t\t\treturn true;\n\t\tcase MENU_ITEM_MOVE_TOP:\n\t\t\tchange = selectedPos.get(0).intValue();\n\t\tcase MENU_ITEM_MOVE_UP:\n\t\t\tfor (int i = 0;i<selectedCount;i++) {\n\t\t\t\tint p = selectedPos.get(i).intValue();\n\t\t\t\tint newPos = p - change;\n\t\t\t\trows.removeViewAt(p);\n\t\t\t\tif (newPos < 0) {\n\t\t\t\t\tselectedPos.set(i,size-1);\n\t\t\t\t\tfor (int j=i+1;j<selectedCount;j++) {\n\t\t\t\t\t\tselectedPos.set(j,selectedPos.get(j)-1);\n\t\t\t\t\t}\t\n\t\t\t\t\trows.addView(selected.get(i)); // add at end\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tselectedPos.set(i,newPos);\n\t\t\t\t\trows.addView(selected.get(i),newPos);\n\t\t\t\t}\n\t\t\t}\n\t\t\t((RelationMembersFragment)caller).scrollToRow(selected.get(0),true, action==MENU_ITEM_MOVE_TOP || forceScroll(selectedPos.get(0),size));\n\t\t\t((RelationMembersFragment)caller).setIcons();\n\t\t\treturn true;\n\t\tcase MENU_ITEM_MOVE_BOTTOM:\n\t\t\tchange = size - selectedPos.get(selectedCount-1).intValue() -1;\n\t\tcase MENU_ITEM_MOVE_DOWN:\n\t\t\tfor (int i = selectedCount-1;i>=0;i--) {\n\t\t\t\tint p = selectedPos.get(i).intValue();\n\t\t\t\tint newPos = p + change;\n\t\t\t\trows.removeViewAt(p);\n\t\t\t\tif (newPos > size -1) {\n\t\t\t\t\tselectedPos.set(i,0);\n\t\t\t\t\tfor (int j=i-1;j>=0;j--) {\n\t\t\t\t\t\tselectedPos.set(j,selectedPos.get(j)+1);\n\t\t\t\t\t}\t\n\t\t\t\t\trows.addView(selected.get(i),0); // add at end\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tselectedPos.set(i,newPos);\n\t\t\t\t\trows.addView(selected.get(i),newPos);\n\t\t\t\t}\n\t\t\t}\n\t\t\t((RelationMembersFragment)caller).scrollToRow(selected.get(selected.size()-1),false, action==MENU_ITEM_MOVE_BOTTOM || forceScroll(selectedPos.get(selected.size()-1),size));\n\t\t\t((RelationMembersFragment)caller).setIcons();\n\t\t\treturn true;\n\t\tcase MENU_ITEM_SORT:\n\t\t\tList<RelationMemberDescription>rmds = new ArrayList<RelationMemberDescription>();\n\t\t\tMap<RelationMemberDescription, RelationMemberRow>relationMemberRows = new HashMap<RelationMemberDescription, RelationMemberRow>();\n\t\t\tint top = selectedPos.get(0).intValue();\n\t\t\tfor (int i = 0;i<selectedCount;i++) {\n\t\t\t\tRelationMemberRow row = selected.get(i);\n\t\t\t\tRelationMemberDescription rmd = row.getRelationMemberDescription();\n\t\t\t\trmds.add(rmd);\t\n\t\t\t\trelationMemberRows.put(rmd, row);\n\t\t\t\trows.removeView(row);\n\t\t\t}\n\t\t\trmds = Util.sortRelationMembers(rmds);\n\t\t\tint pos = top;\n\t\t\tfor (RelationMemberDescription rmd:rmds) {\n\t\t\t\trows.addView(relationMemberRows.get(rmd), pos);\n\t\t\t\tpos++;\n\t\t\t}\n\t\t\t((RelationMembersFragment)caller).scrollToRow(rows.getChildAt(top),false, false);\n\t\t\t((RelationMembersFragment)caller).setIcons();\n\t\t\treturn true;\n\t\tcase MENU_ITEM_REVERSE_ORDER:\n\t\t\ttop = selectedPos.get(0).intValue();\n\t\t\tList<RelationMemberRow>temp = new ArrayList<RelationMemberRow>(selected);\n\t\t\tCollections.reverse(temp);\n\t\t\tfor (RelationMemberRow row:selected) {\n\t\t\t\trows.removeView(row);\n\t\t\t}\n\t\t\tfor (int i=0;i<selectedPos.size();i++) {\n\t\t\t\tpos = selectedPos.get(i);\n\t\t\t\trows.addView(temp.get(i), pos);\n\t\t\t}\n\t\t\t((RelationMembersFragment)caller).scrollToRow(rows.getChildAt(top),false, false);\n\t\t\t((RelationMembersFragment)caller).setIcons();\n\t\t\treturn true;\n\t\tcase MENU_ITEM_TOP:\n\t\tcase MENU_ITEM_BOTTOM:\n\t\t\t((RelationMembersFragment)caller).scrollToRow(null,action==MENU_ITEM_TOP,false);\n\t\t\treturn true;\n\t\tcase MENU_ITEM_DOWNLOAD:\n\t\t\tProgress.showDialog(caller.getActivity(), Progress.PROGRESS_DOWNLOAD);\n\t\t\tPostAsyncActionHandler handler = new PostAsyncActionHandler() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onSuccess() {\n\t\t\t\t\tif (currentAction != null) {\n\t\t\t\t\t\tfor (int i = 0;i<selectedCount;i++) {\n\t\t\t\t\t\t\tRelationMemberRow row = selected.get(i);\n\t\t\t\t\t\t\tif (!row.getRelationMemberDescription().downloaded()) {\n\t\t\t\t\t\t\t\tupdateRow(row, selectedPos.get(i));\n\t\t\t\t\t\t\t\tselected.set(i,row);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcurrentAction.finish();\n\t\t\t\t\t\tProgress.dismissDialog(caller.getActivity(), Progress.PROGRESS_DOWNLOAD);\n\t\t\t\t\t\t((RelationMembersFragment)caller).setIcons();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void onError() {\n\t\t\t\t}\n\t\t\t};\n\t\t\tfinal Logic logic = App.getLogic();\n\t\t\tif (selectedCount < size) {\n\t\t\t\tList<Long>nodes = new ArrayList<Long>();\n\t\t\t\tList<Long>ways = new ArrayList<Long>();\n\t\t\t\tList<Long>relations = new ArrayList<Long>();\n\t\t\t\tfor (int i = 0;i<selectedCount;i++) {\n\t\t\t\t\tRelationMemberRow row = selected.get(i);\n\t\t\t\t\tif (!row.getRelationMemberDescription().downloaded()) {\n\t\t\t\t\t\tif (Node.NAME.equals(row.getType())) {\n\t\t\t\t\t\t\tnodes.add(row.getOsmId());\n\t\t\t\t\t\t} else if (Way.NAME.equals(row.getType())) {\n\t\t\t\t\t\t\tways.add(row.getOsmId());\n\t\t\t\t\t\t} else if (Relation.NAME.equals(row.getType())) {\n\t\t\t\t\t\t\trelations.add(row.getOsmId());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlogic.downloadElements(caller.getActivity(), nodes, ways, relations, handler);\n\t\t\t} else {\n\t\t\t\tlogic.downloadElement(caller.getActivity(), Relation.NAME, ((RelationMembersFragment)caller).getOsmId(), \n\t\t\t\t\ttrue, false, handler);\n\t\t\t}\n\t\t\t\n\t\t\tinvalidate();\n\t\t\treturn true;\n\t\tdefault: return false;\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps) {\n            return setImageAttachmentsForObject(objectProperty, bitmaps, false);\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\tChannel channel = ctx.channel();\n\t\t\tchannels.remove(channel);\n\t\t\tNode client = channel.attr(STATE).get();\n\t\t\tuserLinkList.delUser(client);\n\t\t\tcombobox.removeItem(client.username);\n\t\t\tsuper.channelUnregistered(ctx);\n\t\t\tbroadcasts(new LoginOutMessage(client.username));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        Connection c = ConnectionManager.getInstance().addConnection(ctx);\n        ctx.attr(conn).set(c);\n        GameChannelManager.getInstance().addChannel(\"allUser\").addConnection(c);\n        super.channelActive(ctx);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic MockUnit<Character> from(String alphabet) {\n        notEmpty(alphabet, \"alphabet\");\n        Supplier<Character> supp = () -> {\n            int idx = mock.getRandom().nextInt(alphabet.length());\n            return alphabet.charAt(idx);\n        };\n        return () -> supp;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1];\n            int col = 1;\n            if (val.length > 2)\n                col = Math.max(1, (int)val[2]);\n\n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            Object o = table.data.get(row-1)[col-1];\n            if (o instanceof Float)\n                return (Float)o;\n            return 0f;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\n    public static Bitmap fastblur(Context context, Bitmap sentBitmap, float radius) {\n\n        if (Build.VERSION.SDK_INT > 16 &&\n                    (!Build.MODEL.contains(\"google_sdk\")\n                             && !Build.MODEL.contains(\"Emulator\")\n                             && !Build.MODEL.contains(\"Android SDK\")\n                             && !Build.FINGERPRINT.contains(\"vbox86p\"))) {\n            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n            final RenderScript rs = RenderScript.create(context);\n            final Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n                                                                 Allocation.USAGE_SCRIPT);\n            final Allocation output = Allocation.createTyped(rs, input.getType());\n            final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n            script.setRadius(radius );\n            script.setInput(input);\n            script.forEach(output);\n            output.copyTo(bitmap);\n            return bitmap;\n        }\n\n        radius *= 0.1;\n        return blurfast(sentBitmap, (int) radius);\n\n\n\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nboolean execute2(final CommandSender sender, final String commandLabel, final String rest) {\n\t\tfinal ScriptCommandEvent event = new ScriptCommandEvent(ScriptCommand.this, sender);\n\t\t\n\t\tfinal ParseLogHandler log = SkriptLogger.startParseLogHandler();\n\t\ttry {\n\t\t\tfinal boolean ok = SkriptParser.parseArguments(rest, ScriptCommand.this, event);\n\t\t\tif (!ok) {\n\t\t\t\tfinal LogEntry e = log.getError();\n\t\t\t\tif (e != null)\n\t\t\t\t\tsender.sendMessage(ChatColor.DARK_RED + e.getMessage());\n\t\t\t\tsender.sendMessage(Commands.m_correct_usage + \" \" + usage);\n\t\t\t\tlog.clear();\n\t\t\t\tlog.printLog();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlog.clear();\n\t\t\tlog.printLog();\n\t\t} finally {\n\t\t\tlog.stop();\n\t\t}\n\t\t\n\t\tif (Skript.log(Verbosity.VERY_HIGH))\n\t\t\tSkript.info(\"# /\" + name + \" \" + rest);\n\t\tfinal long startTrigger = System.nanoTime();\n\t\t\n\t\tif (!trigger.execute(event))\n\t\t\tsender.sendMessage(Commands.m_internal_error.toString());\n\t\t\n\t\tif (Skript.log(Verbosity.VERY_HIGH))\n\t\t\tSkript.info(\"# \" + name + \" took \" + 1. * (System.nanoTime() - startTrigger) / 1000000. + \" milliseconds\");\n\t\treturn true;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static String[] appendSelectionArgs(String[] paramArrayOfString1, String[] paramArrayOfString2)\n  {\n    if ((paramArrayOfString1 == null) || (paramArrayOfString1.length == 0))\n      return paramArrayOfString2;\n    String[] arrayOfString = new String[paramArrayOfString1.length + paramArrayOfString2.length];\n    System.arraycopy(paramArrayOfString1, 0, arrayOfString, 0, paramArrayOfString1.length);\n    System.arraycopy(paramArrayOfString2, 0, arrayOfString, paramArrayOfString1.length, paramArrayOfString2.length);\n    return arrayOfString;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n        \n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n        \n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n        \n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic final boolean platformRequest(String urlString) throws ConnectionNotFoundException{\n\t\tif(urlString == null) {\n\t\t\tthrow new IllegalArgumentException(\"Parameter 'url' must not be null.\");\n\t\t}\n\t\tif(\"\".equals(urlString)) {\n\t\t\treturn false;\n\t\t}\n\t\tif(urlString.startsWith(\"tel:\")) {\n\t\t\tString number = urlString.substring(4);\n\t\t\tboolean matches = java.util.regex.Pattern.compile(\"\\\\+?\\\\d+\").matcher(number).matches();\n\t\t\tif(!matches) {\n\t\t\t\tthrow new ConnectionNotFoundException(\"The telephone number '\"+number+\"' is malformed. It must be described by the regular expression '\\\\+?\\\\d+'\");\n\t\t\t}\n\t\t\tIntent i = new Intent();\n\t\t\ti.setAction(Intent.ACTION_DIAL);\n\t\t\tUri numberUri = Uri.parse(\"tel:\"+number);\n\t\t\tSystem.out.println(\"Uri for phone number:\"+numberUri);\n\t\t\ti.setData(numberUri);\n\t\t\tstartActivity(i);\n\t\t\treturn false;\n\t\t}\n\t\tif(urlString.startsWith(\"http:\") || urlString.startsWith(\"https:\")) {\n\t\t\tUri uri = Uri.parse(urlString);\n\t\t\tIntent intent = new Intent(Intent.ACTION_VIEW,uri);\n\t\t\tstartActivity(intent);\n\t\t\treturn false;\n\t\t}\n\t\tif(urlString.startsWith(\"device://show/settings/gps\")) {\n\t\t\tIntent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);\n\t\t\tstartActivity(intent);\n\t\t\treturn false;\n\t\t}\n\t\tthrow new ConnectionNotFoundException(\"The url '\"+urlString+\"' can not behandled. The url scheme is not supported\");\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate double readDecimalLiteral(int c) {\n        assert c == '-' || isDecimalDigit(c);\n        TokenStreamInput input = this.input;\n        StrBuffer buffer = this.buffer();\n        if (c == '-') {\n            buffer.append(c);\n            if (!isDecimalDigit(c = input.getChar())) {\n                throw error(Messages.Key.JSONInvalidNumberLiteral);\n            }\n        }\n        buffer.append(c);\n        if (c != '0') {\n            while (isDecimalDigit(c = input.getChar())) {\n                buffer.append(c);\n            }\n        } else {\n            c = input.getChar();\n        }\n        if (!(c == '.' || c == 'e' || c == 'E')) {\n            input.ungetChar(c);\n            return parseSignedInteger(buffer.array(), buffer.length());\n        }\n        if (c == '.') {\n            buffer.append(c);\n            if (!isDecimalDigit(c = input.getChar())) {\n                throw error(Messages.Key.JSONInvalidNumberLiteral);\n            }\n            do {\n                buffer.append(c);\n            } while (isDecimalDigit(c = input.getChar()));\n        }\n        if (c == 'e' || c == 'E') {\n            buffer.append(c);\n            c = input.getChar();\n            if (c == '+' || c == '-') {\n                buffer.append(c);\n                c = input.getChar();\n            }\n            if (!isDecimalDigit(c)) {\n                throw error(Messages.Key.JSONInvalidNumberLiteral);\n            }\n            do {\n                buffer.append(c);\n            } while (isDecimalDigit(c = input.getChar()));\n        }\n        input.ungetChar(c);\n        return parseDecimal(buffer.array(), buffer.length());\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate URI api(String path) {\n        if (!path.toLowerCase().matches(\"https?://.*\")) {\n            path = urlJoin(this.context, path);\n        }\n        if (!path.contains(\"?\")) {\n            if (!path.endsWith(\"/stop\")) {\n                path = urlJoin(path, \"api/json\");\n            }\n        } else {\n            String[] components = path.split(\"\\\\?\", 2);\n            path = urlJoin(components[0], \"api/json\") + \"?\" + components[1];\n        }\n        URI requestUri = uri.resolve(\"/\").resolve(path);\n        return requestUri;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void printMethods() {\n\t\tif (TypeUtil.isClassLike(type)) {\n\t\t\tfor (List<IMethodBinding> e : methods.values()) {\n\t\t\t\tfor (IMethodBinding mb : e) {\n\t\t\t\t\taccess = TransformUtil.declareBridge(ctx, out, type, mb,\n\t\t\t\t\t\t\tdeps, access);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tList<IMethodBinding> superMethods = hiddenMethods(type, ctx, methods);\n\n\t\tfor (IMethodBinding mb : superMethods) {\n\t\t\taccess = printAccess(out, mb.getModifiers(), access);\n\t\t\tprint(i1);\n\t\t\tTransformUtil.printSignature(ctx, out, type,\n\t\t\t\t\tmb.getMethodDeclaration(), deps, false);\n\t\t\tif (Modifier.isAbstract(mb.getModifiers())) {\n\t\t\t\tprint(\" = 0\");\n\t\t\t}\n\n\t\t\tprintln(\";\");\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tpublic double[] sample(Random rng) {\n\t\tfinal Matrix vec = new Matrix(N, 1);\n\n\t\tfor (int i = 0; i < N; i++)\n\t\t\tvec.set(i, 0, rng.nextGaussian());\n\n\t\tfinal Matrix result = this.mean.plus(chol.times(vec).transpose());\n\n\t\treturn result.getArray()[0];\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public com.google.protobuf.ByteString\n        getSendInfoBytes() {\n      java.lang.Object ref = sendInfo_;\n      if (ref instanceof java.lang.String) {\n        com.google.protobuf.ByteString b = \n            com.google.protobuf.ByteString.copyFromUtf8(\n                (java.lang.String) ref);\n        sendInfo_ = b;\n        return b;\n      } else {\n        return (com.google.protobuf.ByteString) ref;\n      }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic String operatorName(int tag) {\n        switch(tag) {\n            case JCTree.POS:     return \"+\";\n            case JCTree.NEG:     return \"-\";\n            case JCTree.NOT:     return \"!\";\n            case JCTree.COMPL:   return \"~\";\n            case JCTree.PREINC:  return \"++\";\n            case JCTree.PREDEC:  return \"--\";\n            case JCTree.POSTINC: return \"++\";\n            case JCTree.POSTDEC: return \"--\";\n            case JCTree.NULLCHK: return \"<*nullchk*>\";\n            case JCTree.OR:      return \"||\";\n            case JCTree.AND:     return \"&&\";\n            case JCTree.EQ:      return \"==\";\n            case JCTree.NE:      return \"!=\";\n            case JCTree.LT:      return \"<\";\n            case JCTree.GT:      return \">\";\n            case JCTree.LE:      return \"<=\";\n            case JCTree.GE:      return \">=\";\n            case JCTree.BITOR:   return \"|\";\n            case JCTree.BITXOR:  return \"^\";\n            case JCTree.BITAND:  return \"&\";\n            case JCTree.SL:      return \"<<\";\n            case JCTree.SR:      return \">>\";\n            case JCTree.USR:     return \">>>\";\n            case JCTree.PLUS:    return \"+\";\n            case JCTree.MINUS:   return \"-\";\n            case JCTree.MUL:     return \"*\";\n            case JCTree.DIV:     return \"/\";\n            case JCTree.MOD:     return \"%\";\n            default: throw new Error();\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nboolean resolveBundle(boolean resolve, HashSet<BundleClassLoader> hashSet) throws BundleException {\n        int i;\n        if (Framework.DEBUG_CLASSLOADING && log.isInfoEnabled()) {\n            log.info(\"BundleClassLoader: Resolving \" + this.bundle + (resolve ? \" (critical)\" : \" (not critical)\"));\n        }\n        HashSet hashSet2;\n        if (this.exports.length > 0) {\n            HashSet hashSet3 = new HashSet(this.exports.length);\n            for (String parsePackageString : this.exports) {\n                hashSet3.add(Package.parsePackageString(parsePackageString)[0]);\n            }\n            hashSet2 = hashSet3;\n        } else {\n            hashSet2 = null;\n        }\n        if (this.imports.length > 0) {\n            if (this.importDelegations == null) {\n                this.importDelegations = new HashMap(this.imports.length);\n            }\n            for (int i2 = 0; i2 < this.imports.length; i2++) {\n                String obj = Package.parsePackageString(this.imports[i2])[0];\n                if (!FRAMEWORK_PACKAGES.contains(obj)\n                        && this.importDelegations.get(obj) == null\n                        && (hashSet2 == null || !hashSet2.contains(obj))) {\n                    BundleClassLoader bundleClassLoader = Framework.getImport(\n                            this.bundle, this.imports[i2], resolve, hashSet);\n                    if (bundleClassLoader != null) {\n                        if (bundleClassLoader != this) {\n                            this.importDelegations.put(obj, bundleClassLoader);\n                        }\n                    } else if (resolve) {\n                        throw new BundleException(\"Unsatisfied import \"\n                                + this.imports[i2] + \" for bundle \"\n                                + this.bundle.toString(),\n                                new ClassNotFoundException(\n                                        \"Unsatisfied import \"\n                                                + this.imports[i2]));\n                    } else {\n                        if (this.exports.length > 0) {\n                            Framework.export(this, this.exports, false);\n                        }\n                        if (!Framework.DEBUG_CLASSLOADING\n                                || !log.isInfoEnabled()) {\n                            return false;\n                        }\n                        log.info(\"BundleClassLoader: Missing import \"\n                                + this.imports[i2]\n                                + \". Resolving attempt terminated unsuccessfully.\");\n                        return false;\n                    }\n                }\n            }\n        }\n        if (this.exports.length > 0) {\n            if (this.importDelegations == null) {\n                this.importDelegations = new HashMap(this.imports.length);\n            }\n            for (i = 0; i < this.exports.length; i++) {\n                BundleClassLoader bundleClassLoader2 = Framework.getImport(\n                        this.bundle,\n                        Package.parsePackageString(this.exports[i])[0], false,\n                        null);\n                if (!(bundleClassLoader2 == null || bundleClassLoader2 == this)) {\n                    this.importDelegations.put(\n                            Package.parsePackageString(this.exports[i])[0],\n                            bundleClassLoader2);\n                }\n            }\n        }\n        if (this.exports.length > 0) {\n            Framework.export(this, this.exports, true);\n        }\n        return true;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void addFooterView(View v, Object data, boolean isSelectable) {\n\n\n        FixedViewInfo info = new FixedViewInfo();\n        info.view = v;\n        info.data = data;\n        info.isSelectable = isSelectable;\n        mFooterViewInfos.add(info);\n\n        if (mAdapter != null && mObserver != null) {\n            mObserver.onChanged();\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void clearContexts(Resource... contexts)\n\t\tthrows IOException\n\t{\n\t\tlogger.debug(\"clearing contexts...\");\n\t\tluceneIndex.begin();\n\t\ttry {\n\t\t\tluceneIndex.clearContexts(contexts);\n\t\t\tluceneIndex.commit();\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tlogger.error(\"Rolling back\", e);\n\t\t\tluceneIndex.rollback();\n\t\t\tthrow e;\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(byte[] bytes, int start, int length) {\n        char[] chars = localBuffer.get();\n        if (chars == null || chars.length < length) {\n            chars = new char[length];\n            localBuffer.set(chars);\n        }\n        int outAt = 0;\n\n        for (int at = start; length > 0; ) {\n            int v0 = bytes[at] & 0xFF;\n            char out;\n            switch (v0 >> 4) {\n                case 0x00: case 0x01: case 0x02: case 0x03:\n                case 0x04: case 0x05: case 0x06: case 0x07: {\n                    length--;\n                    if (v0 == 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    out = (char) v0;\n                    at++;\n                    break;\n                }\n                case 0x0c: case 0x0d: {\n                    length -= 2;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int value = ((v0 & 0x1f) << 6) | (v1 & 0x3f);\n                    if ((value != 0) && (value < 0x80)) {\n                        \n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    out = (char) value;\n                    at += 2;\n                    break;\n                }\n                case 0x0e: {\n                    length -= 3;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int v2 = bytes[at + 2] & 0xFF;\n                    if ((v2 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    int value = ((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) |\n                            (v2 & 0x3f);\n                    if (value < 0x800) {\n                        \n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    out = (char) value;\n                    at += 3;\n                    break;\n                }\n                default: {\n                    return throwBadUtf8(v0, at);\n                }\n            }\n            chars[outAt] = out;\n            outAt++;\n        }\n\n        return new String(chars, 0, outAt);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void drawQuad( FloatBuffer vertices ) {\n\t\t\n\t\tvertices.position( 0 );\n\t\taXY.vertexPointer( 2, 4, vertices );\n\t\t\n\t\tvertices.position( 2 );\n\t\taUV.vertexPointer( 2, 4, vertices );\n\n\t\tGLES20.glDrawElements( GLES20.GL_TRIANGLES, Quad.SIZE, GLES20.GL_UNSIGNED_SHORT, Quad.getIndices( 1 ) );\n\t\t\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n\n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n\n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n\n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static void main(String[] args) {\n        try {\n            Method method = android.os.Process.class.getDeclaredMethod(\"setArgV0\", String.class);\n            method.setAccessible(true);\n            method.invoke(null, PROCESS);\n            LogUtil.i(\"Set process name success\");\n        } catch (Exception e) {\n            LogUtil.e(\"Set process name failed:\" + e.toString());\n        }\n        ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n        Class<?> clz;\n        try {\n            clz = classLoader.loadClass(\"android.ddm.DdmHandleAppName\");\n        } catch (ClassNotFoundException e) {\n            LogUtil.w(\"Set DDM name failed:\" + e.toString());\n            clz = null;\n        }\n        if (clz != null) {\n            try {\n                Method method = clz.getDeclaredMethod(\"setAppName\", String.class);\n                method.invoke(clz, PROCESS);\n                LogUtil.i(\"Set process name success with M1\");\n            } catch (Exception e) {\n                try {\n                    Method method = clz.getDeclaredMethod(\"setAppName\", String.class, int.class);\n                    method.invoke(clz, PROCESS, 0);\n                    LogUtil.i(\"Set process name success with M2\");\n                } catch (Exception ex) {\n                    LogUtil.w(\"Set DDM name failed:\" + ex.toString());\n                }\n            }\n        }\n        Looper.prepare();\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (sPower) {\n                    String cmd = String.format(\"am startservice%s-n com.stkj.newslocker/\" +\n                                    \"com.stkj.newslocker.services.LockService\",\n                            SysUtil.isAfter17() ? \" --user 0 \" : \" \");\n                    LogUtil.i(\"CMD exec \" + cmd);\n                    try {\n                        Runtime.getRuntime().exec(cmd);\n                    } catch (IOException e) {\n                        LogUtil.w(\"CMD exec failed:\" + e.toString());\n                        Intent intent = new Intent();\n                        ComponentName component = new ComponentName(\"com.stkj.newslocker\",\n                                LockService.class.getName());\n                        intent.setComponent(component);\n                        IActivityManager am = ActivityManagerNative.getDefault();\n                        Method method;\n                        try {\n                            method = am.getClass().getMethod(\"startService\",\n                                    IApplicationThread.class, Intent.class, String.class,\n                                    int.class);\n                            Object cn = method.invoke(am, null, intent, intent.getType(), 0);\n                            LogUtil.i(\"start service return: \" + cn);\n                        } catch (NoSuchMethodException ex) {\n                            try {\n                                method = am.getClass().getMethod(\"startService\",\n                                        IApplicationThread.class, Intent.class, String.class);\n                                Object cn = method.invoke(am, null, intent, intent.getType());\n                                LogUtil.i(\"start service return: \" + cn);\n                            } catch (NoSuchMethodException exc) {\n                                LogUtil.i(\"start service method not found: \" + exc);\n                            } catch (Exception exc) {\n                                LogUtil.e(\"Start service failed:\" + exc.toString());\n                            }\n                        } catch (Exception ex) {\n                            LogUtil.e(\"Start service failed:\" + ex.toString());\n                        }\n                    }\n                    try {\n                        Thread.sleep(180000);\n                    } catch (InterruptedException e) {\n                        LogUtil.w(\"Thread sleep failed:\" + e.toString());\n                    }\n                }\n            }\n        }).start();\n        Looper.loop();\n        LogUtil.i(\"====================Daemon exit with error====================\");\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t@SideOnly(Side.CLIENT)\n\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n\tpublic void addInformation(ItemStack stack, EntityPlayer player, List list, boolean bool)\n\t{\n\t\tsuper.addInformation(stack, player, list, bool);\n\t\tGrcItemBase.addDescription(this, stack, player, list, bool);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tstatic Varargs gsub( Varargs args ) {\n\t\tLuaString src = args.checkstring( 1 );\n\t\tfinal int srclen = src.length();\n\t\tLuaString p = args.checkstring( 2 );\n\t\tLuaValue repl = args.arg( 3 );\n\t\tint max_s = args.optint( 4, srclen + 1 );\n\t\tfinal boolean anchor = p.length() > 0 && p.charAt( 0 ) == '^';\n\t\t\n\t\tBuffer lbuf = new Buffer( srclen );\n\t\tMatchState ms = new MatchState( args, src, p );\n\t\t\n\t\tint soffset = 0;\n\t\tint n = 0;\n\t\twhile ( n < max_s ) {\n\t\t\tms.reset();\n\t\t\tint res = ms.match( soffset, anchor ? 1 : 0 );\n\t\t\tif ( res != -1 ) {\n\t\t\t\tn++;\n\t\t\t\tms.add_value( lbuf, soffset, res, repl );\n\t\t\t}\n\t\t\tif ( res != -1 && res > soffset )\n\t\t\t\tsoffset = res;\n\t\t\telse if ( soffset < srclen )\n\t\t\t\tlbuf.append( (byte) src.luaByte( soffset++ ) );\n\t\t\telse\n\t\t\t\tbreak;\n\t\t\tif ( anchor )\n\t\t\t\tbreak;\n\t\t}\n\t\tlbuf.append( src.substring( soffset, srclen ) );\n\t\treturn varargsOf(lbuf.tostring(), valueOf(n));\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic final void setText(char[] text, int start, int len) {\n        int oldlen = 0;\n\n        if (start < 0 || len < 0 || start + len > text.length) {\n            throw new IndexOutOfBoundsException(\"\" +start + len);\n        }\n\n        oldlen = mText.length();\n        sendBeforeTextChanged(mText, 0, oldlen, len);\n\n        if (mCharWrapper == null) {\n            mCharWrapper = new CharWrapper(text, start, len);\n        } else {\n            mCharWrapper.set(text, start, len);\n        }\n\n        setText(mCharWrapper, mBufferType, false, oldlen);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic WebSocketServer(InetSocketAddress address, int decodercount, List<Draft> drafts, Collection<WebSocket> connectionscontainer) {\n        if (address == null || decodercount < 1 || connectionscontainer == null) {\n            throw new IllegalArgumentException(\"address and connectionscontainer must not be null and you need at least 1 decoder\");\n        }\n\n        if (drafts == null)\n            this.drafts = Collections.emptyList();\n        else\n            this.drafts = drafts;\n\n        this.address = address;\n        this.connections = connectionscontainer;\n\n        iqueue = new LinkedList<WebSocketImpl>();\n\n        decoders = new ArrayList<WebSocketWorker>(decodercount);\n        buffers = new LinkedBlockingQueue<ByteBuffer>();\n        for (int i = 0; i < decodercount; i++) {\n            WebSocketWorker ex = new WebSocketWorker();\n            decoders.add(ex);\n            ex.start();\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintWriter writer, boolean suppressLogin, char eolMarker, boolean showDirection)\n    {\n        __writer = writer;\n        __nologin = suppressLogin;\n        __eolMarker = eolMarker;\n        __directionMarker = showDirection;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n        this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n        BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n        this.updateNaturalParameterPrior(prior);\n\n        return learntBN;\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, final Contract contract, final TradeOrder tradeOrder,\n\t\t\tfinal OrderState orderState) {\n\n\t\ttry {\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(tradeOrder.getOrderKey());\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170, \"Warning Order not found for Order Key: \" + orderId + \" make sure Client ID: \" + 0\n\t\t\t\t\t\t+ \" is not the master in TWS. On openOrder update.\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (BackTestBrokerModel.updateTradeOrder(tradeOrder, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\n\t\t\t\t\t_log.debug(\"Order Key: \" + transientInstance.getOrderKey() + \" filled.\");\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (updatedOrder.hasTradePosition() && !updatedOrder.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(updatedOrder.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Order key: \" + transientInstance.getOrderKey() + \" state changed. Status:\"\n\t\t\t\t\t\t\t+ orderState.m_status);\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(updatedOrder.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(updatedOrder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic JavaFileObject getFileObject(RelativeDirectory subdirectory, String file) {\n        RelativeFile fullZipFileName = new RelativeFile(subdirectory, file);\n        ZipFileIndex.Entry entry = zfIndex.getZipIndexEntry(fullZipFileName);\n        JavaFileObject ret = new ZipFileIndexFileObject(fileManager, zfIndex, entry, zfIndex.getZipFile());\n        return ret;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n        public View getView(final int position, View convertView, final ViewGroup parent) {\n            ViewHolder holder = null;\n            if (convertView == null) {\n                convertView = layoutInflater.inflate(R.layout.item_marray, null);\n            } else {\n                convertView.getTag();\n            }\n            holder = new ViewHolder(convertView);\n            holder.tv_name.setText(news.get(position).getName());\n            holder.tv_phone.setText(news.get(position).getPhone());\n            if (news.get(position).isShow) {\n                holder.ly_a.setVisibility(VISIBLE);\n                holder.ly_b.setVisibility(View.GONE);\n            } else {\n                holder.ly_a.setVisibility(View.GONE);\n                holder.ly_b.setVisibility(VISIBLE);\n            }\n            final ViewHolder finalHolder = holder;\n\n\n            return convertView;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\n    public static Bitmap fastblur(Context context, Bitmap sentBitmap, float radius) {\n\n        if (Build.VERSION.SDK_INT > 16 &&\n                    (!Build.MODEL.contains(\"google_sdk\")\n                             && !Build.MODEL.contains(\"Emulator\")\n                             && !Build.MODEL.contains(\"Android SDK\")\n                             && !Build.FINGERPRINT.contains(\"vbox86p\"))) {\n            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n            final RenderScript rs = RenderScript.create(context);\n            final Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n                                                                 Allocation.USAGE_SCRIPT);\n            final Allocation output = Allocation.createTyped(rs, input.getType());\n            final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n            script.setRadius(radius );\n            script.setInput(input);\n            script.forEach(output);\n            output.copyTo(bitmap);\n            return bitmap;\n        }\n\n        radius *= 0.1;\n        return blurfast(sentBitmap, (int) radius);\n\n\n\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n\n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n\n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n\n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Deprecated\n    public static boolean isJavaLetterOrDigit(char ch) {\n        return isJavaIdentifierPart(ch);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public void onDownloadError(int index, String message) {\n    for (int i = 0; i < mDownloadStatus.length; i++) {\n        if (mDownloadStatus[i] != DownFile.DownloadStatus.FINISH && mDownloadStatus[i] != DownFile.DownloadStatus.ERROR) {\n            mDownloadThreads[i].cancel();\n        }\n    }\n    notifyError(message);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" deltaNeutralOpenClose=\" + order.m_deltaNeutralOpenClose +\n        \" deltaNeutralShortSale=\" + order.m_deltaNeutralShortSale +\n        \" deltaNeutralShortSaleSlot=\" + order.m_deltaNeutralShortSaleSlot +\n        \" deltaNeutralDesignatedLocation=\" + order.m_deltaNeutralDesignatedLocation +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic GradientRadialBackground( int innerColor, int outerColor, int start, int end, int centerX, int centerY ) {\n\t\tthis( innerColor, outerColor, new Dimension(start, true), new Dimension(end, true), new Dimension(centerX, true), new Dimension(centerY, true));\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic synchronized String[] getFieldNames() {\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {\n            MODELMBEAN_LOGGER.logp(Level.FINEST,\n                    DescriptorSupport.class.getName(),\n                    \"getFieldNames()\", \"Entry\");\n        }\n        int numberOfEntries = descriptorMap.size();\n\n        String[] responseFields = new String[numberOfEntries];\n        Set<Map.Entry<String, Object>> returnedSet = descriptorMap.entrySet();\n\n        int i = 0;\n\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {\n            MODELMBEAN_LOGGER.logp(Level.FINEST,\n                    DescriptorSupport.class.getName(),\n                    \"getFieldNames()\",\n                    \"Returning \" + numberOfEntries + \" fields\");\n        }\n\n        for (Iterator<Map.Entry<String, Object>> iter = returnedSet.iterator();\n             iter.hasNext(); i++) {\n            Map.Entry<String, Object> currElement = iter.next();\n\n            if (( currElement == null ) || (currElement.getKey() == null)) {\n                if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {\n                    MODELMBEAN_LOGGER.logp(Level.FINEST,\n                            DescriptorSupport.class.getName(),\n                            \"getFieldNames()\", \"Field is null\");\n                }\n            } else {\n                responseFields[i] = currElement.getKey().toString();\n            }\n        }\n\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {\n            MODELMBEAN_LOGGER.logp(Level.FINEST,\n                    DescriptorSupport.class.getName(),\n                    \"getFieldNames()\", \"Exit\");\n        }\n\n        return responseFields;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private PooledConnection createPooledConnection (\n            String user,\n            String password,\n            boolean requestPassword) throws SQLException {\n\n        return findDriver().getNewPooledConnection(\n            this, user, password, requestPassword);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate PolicyDescriptions createPolicyDescriptions(Map<URI, PolicyDescription> policies) {\n        System.out.println(\"setting policydescriptions # of policies: \"+policies.size());\n        PolicyDescriptions pd = new PolicyDescriptions();\n        for(URI key : policies.keySet()) {\n            PolicyDescriptionsEntry entry = new PolicyDescriptionsEntry();\n            entry.setKey(key);\n\n            entry.setValue(policies.get(key));\n            pd.getEntry().add(entry);\n\n            \n        }\n        return pd;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static final void writeIntLittleEndian(byte[] array, int pos,\n\t    int value) {\n\tarray[pos + 3] = (byte) (value >>> 24);\n\tarray[pos + 2] = (byte) (value >>> 16);\n\tarray[pos + 1] = (byte) (value >>> 8);\n\tarray[pos] = (byte) (value & 0xFF);\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker, boolean showDirection) {\n        this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic Params(@NotNull String path, @NotNull String[] comment, boolean stealLock, @NotNull int[] rev) {\n      this.path = path;\n      this.comment = comment;\n      this.stealLock = stealLock;\n      this.rev = rev;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n\n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n\n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n\n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void setJoinType(int type) throws SQLException {\n\n       if (type >= JoinRowSet.CROSS_JOIN && type <= JoinRowSet.FULL_JOIN) {\n           if (type != JoinRowSet.INNER_JOIN) {\n               throw new SQLException(resBundle.handleGetObject(\"joinrowsetimpl.notsupported\").toString());\n           } else {\n              Integer Intgr = new Integer(JoinRowSet.INNER_JOIN);\n              vecJoinType.add(Intgr);\n           }\n       } else {\n          throw new SQLException(resBundle.handleGetObject(\"joinrowsetimpl.notdefined\").toString());\n       }  //end if\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic static <P extends IUnlistedProperty<T>, T> T getStatePropertySafely(@Nullable TileEntity te, Class<? extends Block> block, P property, T defaultVal, boolean actual, boolean extended) {\n\t\tif(te == null || te.getWorld() == null) {\n\t\t\treturn defaultVal;\n\t\t}\n\t\tIBlockState state = te.getWorld().getBlockState(te.getPos());\n\t\tif(block.isInstance(state.getBlock())) {\n\t\t\tif(actual) {\n\t\t\t\tstate = state.getActualState(te.getWorld(), te.getPos());\n\t\t\t}\n\t\t\tif(extended) {\n\t\t\t\tstate = state.getBlock().getExtendedState(state, te.getWorld(), te.getPos());\n\t\t\t}\n\t\t\tif(state instanceof IExtendedBlockState) {\n\t\t\t\treturn ((IExtendedBlockState)state).getValue(property);\n\t\t\t}\n\t\t}\n\t\treturn defaultVal;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic synchronized KeyFrameMeta analyzeKeyFrames() {\n\t\tif (keyframeMeta != null) {\n\t\t\treturn keyframeMeta;\n\t\t}\n\t\tif (keyframeCache != null) {\n\t\t\tkeyframeMeta = keyframeCache.loadKeyFrameMeta(file);\n\t\t\tif (keyframeMeta != null) {\n\t\t\t\tduration = keyframeMeta.duration;\n\t\t\t\tposTimeMap = new HashMap<Long, Long>();\n\t\t\t\tfor (int i = 0; i < keyframeMeta.positions.length; i++) {\n\t\t\t\t\tposTimeMap.put(keyframeMeta.positions[i], (long) keyframeMeta.timestamps[i]);\n\t\t\t\t}\n\t\t\t\treturn keyframeMeta;\n\t\t\t}\n\t\t}\n\t\tList<Long> positionList = new ArrayList<Long>();\n\t\tList<Integer> timestampList = new ArrayList<Integer>();\n\t\tList<Long> audioPositionList = new ArrayList<Long>();\n\t\tList<Integer> audioTimestampList = new ArrayList<Integer>();\n\t\tlong origPos = getCurrentPosition();\n\t\tsetCurrentPosition(9);\n\n\t\tboolean audioOnly = true;\n\t\twhile (this.hasMoreTags()) {\n\t\t\tlong pos = getCurrentPosition();\n\t\t\tITag tmpTag = this.readTagHeader();\n\t\t\tduration = tmpTag.getTimestamp();\n\t\t\tif (tmpTag.getDataType() == IoConstants.TYPE_VIDEO) {\n\t\t\t\tif (audioOnly) {\n\t\t\t\t\taudioOnly = false;\n\t\t\t\t\taudioPositionList.clear();\n\t\t\t\t\taudioTimestampList.clear();\n\t\t\t\t}\n\t\t\t\tif (firstVideoTag == -1) {\n\t\t\t\t\tfirstVideoTag = pos;\n\t\t\t\t}\n\n\t\t\t\tfillBuffer(1);\n\t\t\t\tbyte frametype = in.get();\n\t\t\t\tif (((frametype & MASK_VIDEO_FRAMETYPE) >> 4) == FLAG_FRAMETYPE_KEYFRAME) {\n\t\t\t\t\tpositionList.add(pos);\n\t\t\t\t\ttimestampList.add(tmpTag.getTimestamp());\n\t\t\t\t}\n\n\t\t\t} else if (tmpTag.getDataType() == IoConstants.TYPE_AUDIO) {\n\t\t\t\tif (firstAudioTag == -1) {\n\t\t\t\t\tfirstAudioTag = pos;\n\t\t\t\t}\n\t\t\t\tif (audioOnly) {\n\t\t\t\t\taudioPositionList.add(pos);\n\t\t\t\t\taudioTimestampList.add(tmpTag.getTimestamp());\n\t\t\t\t}\n\t\t\t}\n\t\t\tlong newPosition = pos + tmpTag.getBodySize() + 15;\n\t\t\tif (newPosition >= getTotalBytes()) {\n\t\t\t\tlog.error(\"New position exceeds limit\");\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tsetCurrentPosition(newPosition);\n\t\t\t}\n\t\t}\n\t\tsetCurrentPosition(origPos);\n\n\t\tkeyframeMeta = new KeyFrameMeta();\n\t\tkeyframeMeta.duration = duration;\n\t\tposTimeMap = new HashMap<Long, Long>();\n\t\tif (audioOnly) {\n\t\t\tpositionList = audioPositionList;\n\t\t\ttimestampList = audioTimestampList;\n\t\t}\n\t\tkeyframeMeta.audioOnly = audioOnly;\n\t\tkeyframeMeta.positions = new long[positionList.size()];\n\t\tkeyframeMeta.timestamps = new int[timestampList.size()];\n\t\tfor (int i = 0; i < keyframeMeta.positions.length; i++) {\n\t\t\tkeyframeMeta.positions[i] = positionList.get(i);\n\t\t\tkeyframeMeta.timestamps[i] = timestampList.get(i);\n\t\t\tposTimeMap.put((long) positionList.get(i), (long) timestampList.get(i));\n\t\t}\n\t\tif (keyframeCache != null) {\n\t\t\tkeyframeCache.saveKeyFrameMeta(file, keyframeMeta);\n\t\t}\n\t\treturn keyframeMeta;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic static float convertDpToPixel(float dp, Context context) {\n\t\tResources resources = context.getResources();\n\t\tDisplayMetrics metrics = resources.getDisplayMetrics();\n\t\tfloat px = dp * (metrics.densityDpi / 160f);\n\t\treturn px;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void addShaped(IItemStack output, IIngredient[][] ingredients, IRecipeFunction function, boolean mirrored) {\n\t\tShapedRecipe recipe = new ShapedRecipe(output, ingredients, function, mirrored);\n\t\tIRecipe irecipe = RecipeConverter.convert(recipe);\n\t\tMineTweakerAPI.apply(new ActionAddRecipe(irecipe, recipe));\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PluginLoadOrder getLoad() {\n        return order;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic void writeLength(OutputStream out, int len) throws IOException\n  {\n    if (len < 128)\n      out.write(len);\n    else if (len < 256)\n      {\n        out.write(0x81);\n        out.write(len);\n      }\n    else if (len < 65536)\n      {\n        out.write(0x82);\n        out.write(len >> 8);\n        out.write(len);\n      }\n    else if (len < 16777216)\n      {\n        out.write(0x83);\n        out.write(len >> 16);\n        out.write(len >>  8);\n        out.write(len);\n      }\n    else\n      {\n        out.write(0x84);\n        out.write(len >> 24);\n        out.write(len >> 16);\n        out.write(len >>  8);\n        out.write(len);\n      }\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr graph) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), graph});\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void useProxyIndirection() {\n        Class[] targetInterfaces = getReferenceClass().getInterfaces();\n        if (!getReferenceClass().isInterface() && getReferenceClass().getSuperclass() == null) {\n            setIndirectionPolicy(new ProxyIndirectionPolicy(targetInterfaces));\n        } else {\n            HashSet targetInterfacesCol = new HashSet();\n            if (getReferenceClass().getSuperclass() != null) {\n                buildTargetInterfaces(getReferenceClass(), targetInterfacesCol);\n            }\n            if (getReferenceClass().isInterface()) {\n                targetInterfacesCol.add(getReferenceClass());\n            }\n            targetInterfaces = (Class[])targetInterfacesCol.toArray(targetInterfaces);\n            setIndirectionPolicy(new ProxyIndirectionPolicy(targetInterfaces));\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n\tpublic void testBlock () throws ValidationException\n\t{\n\t\tBlk b1 =\n\t\t\t\tBlk.fromWireDump (\"\");\n\t\tassertTrue (b1.getHash ().equals (\"0000000000000449ee5b94ba7a051caffff5c23d6a03335f6e20e3985b5ffa61\"));\n\t\tBlk b2 = Blk.fromWireDump (b1.toWireDump ());\n\t\tb2.computeHash ();\n\t\tassertTrue (b1.getHash ().equals (b2.getHash ()));\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps) {\n            return setImageAttachmentsForObject(objectProperty, bitmaps, false);\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void ensureScopeSetup() {\n\t\tif (scopeSetup) {\n\t\t\treturn; // don't do it again\n\t\t}\n\t\tClassScope scope = this.scope;\n\n\n\n\n\n\n\n\t\tif (scope != null) {\n\t\t\tinterTypeScope = new InterTypeScope(scope.parent, onTypeResolvedBinding, Collections.emptyList());\n\t\t\tscope.parent = interTypeScope;\n\t\t}\n\t\tscopeSetup = true;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; }\n        return retVal;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public void handlePatch(final PatchParam patchParam) throws Throwable {\n        {\n            Class<?> cls = null;\n            try {\n                cls= patchParam.context.getClass().getClassLoader().loadClass(\"com.taobao.dexposed.TestFragment\");\n            } catch (Exception e) {\n                e.printStackTrace();\n                return;\n            }\n\n            \n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, ClassTransformer transformer, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            MethodPair methodPair = transformer.methods.get(\"()V\" + method);\n            if (methodPair == null)\n            {\n                continue;\n            }\n            lineNumber = InvokerGenerator.printMethod(mv, clazz, method, Modifier.isStatic(methodPair.node.access), lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic Class<?> toClass() {\n            switch (this) {\n            case Boolean:\n                return boolean.class;\n            case String:\n                return CharSequence.class;\n            case Number:\n                return double.class;\n            case Number_int:\n                return int.class;\n            case Number_uint:\n                return long.class;\n            case Object:\n                return ScriptObject.class;\n            case Reference:\n                return Reference.class;\n            case Null:\n                return Null.class;\n            case Undefined:\n                return Undefined.class;\n            case Any:\n                return Object.class;\n            case Empty:\n            default:\n                throw new AssertionError();\n            }\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static URI resolve(URI base, URI child) {\n        if (child.isOpaque() || base.isOpaque())\n            return child;\n\n        if ((child.scheme == null) && (child.authority == null)\n            && child.path.equals(\"\") && (child.fragment != null)\n            && (child.query == null)) {\n            if ((base.fragment != null)\n                && child.fragment.equals(base.fragment)) {\n                return base;\n            }\n            URI ru = new URI();\n            ru.scheme = base.scheme;\n            ru.authority = base.authority;\n            ru.userInfo = base.userInfo;\n            ru.host = base.host;\n            ru.port = base.port;\n            ru.path = base.path;\n            ru.fragment = child.fragment;\n            ru.query = base.query;\n            return ru;\n        }\n\n        if (child.scheme != null)\n            return child;\n\n        URI ru = new URI();             // Resolved URI\n        ru.scheme = base.scheme;\n        ru.query = child.query;\n        ru.fragment = child.fragment;\n\n        if (child.authority == null) {\n            ru.authority = base.authority;\n            ru.host = base.host;\n            ru.userInfo = base.userInfo;\n            ru.port = base.port;\n\n            String cp = (child.path == null) ? \"\" : child.path;\n            if ((cp.length() > 0) && (cp.charAt(0) == '/')) {\n                ru.path = child.path;\n            } else {\n                ru.path = resolvePath(base.path, cp, base.isAbsolute());\n            }\n        } else {\n            ru.authority = child.authority;\n            ru.host = child.host;\n            ru.userInfo = child.userInfo;\n            ru.host = child.host;\n            ru.port = child.port;\n            ru.path = child.path;\n        }\n\n        return ru;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public boolean isTrue(String key) {\n        String val = get(key);\n        if(val != null) {\n            if(\"true\".equalsIgnoreCase(val)) return true;\n            if(\"1\".equalsIgnoreCase(val)) return true;\n        }\n        return false;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public void load() {\n        List<ListItemViewModel> viewModels = new ArrayList<>(DUMMY_MODEL_COUNT);\n        for (int i = 0; i < DUMMY_MODEL_COUNT; i++) {\n            ListItemViewModel vm = new ListItemViewModel();\n            if (i % 10 == 0 && isAddingHeaders) {\n                vm.primary = stringProvider.getStringForResource(R.string.item_primary_prefix) + \" \" + i;\n                vm.layout = R.layout.list_group_heading;\n            } else {\n                vm.primary = stringProvider.getStringForResource(R.string.item_primary_prefix) + \" \" + i;\n                vm.secondary = stringProvider.getStringForResource(R.string.item_secondary_prefix) + \" \" + i;\n                vm.tertiary = i + \" \" + stringProvider.getStringForResource(R.string.item_tertiary_prefix);\n                int randAlbum = new Random().nextInt(ITEM_IMAGE_URLS.length);\n                vm.imageUrl = ITEM_IMAGE_URLS[randAlbum];\n            }\n            viewModels.add(vm);\n            if (vm.layout == R.layout.list_group_heading) {\n                onHeaderAdded(vm, i);\n            } else {\n                onItemAdded(vm, i);\n            }\n        }\n        setViewModels(viewModels);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic Output (int n, long value, String address, long txIndex, String script, boolean spent) {\n        this.n = n;\n        this.value = value;\n        this.address = address;\n        this.txIndex = txIndex;\n        this.script = script;\n        this.spent = spent;\n        if (address != \"\") {\n            spentToAddress = true;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic static String getActionName(ActionListener listener)\n\t{\n\t\tEnumeration enumerator = getActions();\n\t\twhile(enumerator.hasMoreElements())\n\t\t{\n\t\t\tString name = (String)enumerator.nextElement();\n\t\t\tActionListener _listener = getAction(name);\n\t\t\tif(_listener == listener)\n\t\t\t\treturn name;\n\t\t}\n\t\treturn null;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n\n\n        Debug.i();\n        Debug.v();\n        Debug.d();\n        Debug.e();\n        Debug.d();\n        Debug.w();\n\n        Debug.i(\"savedInstanceState: %s\", savedInstanceState);\n        Debug.v(\"savedInstanceState: %s\", savedInstanceState);\n        Debug.d(\"savedInstanceState: %s\", savedInstanceState);\n        Debug.e(\"savedInstanceState: %s\", savedInstanceState);\n        Debug.d(\"savedInstanceState: %s\", savedInstanceState);\n        Debug.w(\"savedInstanceState: %s\", savedInstanceState);\n\n        Debug.i(\"onCreate here!\");\n        Debug.i(1, 2, 3, 4, 5);\n        Debug.i(\"0\", \"1\", \"2\", \"3\"); // will just enumerate strings\n        Debug.i(\"%s %s %s\", null, null, null); // will call String.format\n        Debug.i(1, 2, 3, 4);\n\n        for (int i = 0; i < 10; i++, Debug.i(\"hello from a for loop\")) {\n            Debug.i(\"body of a for loop\");\n        }\n\n        if (savedInstanceState == null) {\n            getSupportFragmentManager()\n                    .beginTransaction()\n                    .add(R.id.content, new MainFragment())\n                    .commit();\n        }\n\n        Debug.trace(100);\n\n        someMethod(1, 5, \"Hello!\");\n\n        someMethodWithException();\n\n        tracking: simpleMethod();\n\n        Debug.e(\"ok\");\n\n        throwException();\n\n        objectPrint();\n\n        labels();\n\n        Debug.e(new UnknownHostException());\n\n        final UnknownHostException exception = new UnknownHostException();\n        exception.initCause(new Throwable(new RuntimeException(new IllegalStateException())));\n        Debug.e(exception, \"Hello this is a message for exception\");\n\n        final String bigOne;\n        {\n            final int length = 8001;\n            final char[] chars = new char[length];\n            Arrays.fill(chars, 'c');\n            bigOne = new String(chars);\n            Debug.i(bigOne);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private void reqBaiduPaymentViaAPP(final Map<String, Object> responseMap) {\n        String orderInfo = (String) responseMap.get(\"orderInfo\");\n\n\n        Map<String, String> map = new HashMap<String, String>();\n        baiduPay = BaiduPay.getInstance();\n        baiduPay.doPay(mContextActivity, orderInfo, new PayCallBack() {\n            public void onPayResult(int stateCode, String payDesc) {\n\n                String result;\n                int errCode;\n                String errMsg;\n                String errDetail;\n\n                switch (stateCode) {\n                    case PayCallBackManager.PayStateModle.PAY_STATUS_SUCCESS:// \u95c7\u7455\u4f78\u57cc\u93c8\u5d85\u59df\u7ed4\ue21e\u7359\u7487\u4f79\u656e\u6d60\u6a3c\u7ca8\u93cb\n\n                        result = BCPayResult.RESULT_SUCCESS;\n                        errCode = BCPayResult.APP_PAY_SUCC_CODE;\n                        errMsg = BCPayResult.RESULT_SUCCESS;\n                        errDetail = errMsg;\n                        break;\n                    case PayCallBackManager.PayStateModle.PAY_STATUS_PAYING:// \u95c7\u7455\u4f78\u57cc\u93c8\u5d85\u59df\u7ed4\ue21e\u7359\u7487\u4f79\u656e\u6d60\u6a3c\u7ca8\u93cb\n                        result = BCPayResult.RESULT_UNKNOWN;\n                        errCode = BCPayResult.APP_INTERNAL_THIRD_CHANNEL_ERR_CODE;\n                        errMsg = BCPayResult.RESULT_PAYING_UNCONFIRMED;\n                        errDetail = \"\u7481\u3220\u5d1f\u59dd\uff45\u6e6a\u6fb6\u52ed\u608a\u6d93\ue168\u7d1d\u93c3\u72b3\u7876\u947e\u5cf0\u5f47\u93b4\u612c\u59db\u7ead\ue1bf\ue17b\u6dc7\u2103\u4f05\";\n                        break;\n                    case PayCallBackManager.PayStateModle.PAY_STATUS_CANCEL:\n                        result = BCPayResult.RESULT_CANCEL;\n                        errCode = BCPayResult.APP_PAY_CANCEL_CODE;\n                        errDetail = errMsg = BCPayResult.RESULT_CANCEL;\n                        break;\n                    case PayCallBackManager.PayStateModle.PAY_STATUS_NOSUPPORT:\n                        result = BCPayResult.RESULT_FAIL;\n                        errCode = BCPayResult.APP_INTERNAL_THIRD_CHANNEL_ERR_CODE;\n                        errMsg = BCPayResult.FAIL_ERR_FROM_CHANNEL;\n                        errDetail = \"\u6d93\u5d86\u656e\u93b8\u4f7d\ue1da\u7ec9\u5d86\u656e\u6d60\u6a3b\u67df\u5bee\";\n                        break;\n                    case PayCallBackManager.PayStateModle.PAY_STATUS_TOKEN_INVALID:\n                        result = BCPayResult.RESULT_FAIL;\n                        errCode = BCPayResult.APP_INTERNAL_THIRD_CHANNEL_ERR_CODE;\n                        errMsg = BCPayResult.FAIL_ERR_FROM_CHANNEL;\n                        errDetail = \"\u93c3\u72b3\u6665\u9428\u52ed\u6ae5\u95c4\u55d9\u59f8\u93ac\";\n                        break;\n                    case PayCallBackManager.PayStateModle.PAY_STATUS_LOGIN_ERROR:\n                        result = BCPayResult.RESULT_FAIL;\n                        errCode = BCPayResult.APP_INTERNAL_THIRD_CHANNEL_ERR_CODE;\n                        errMsg = BCPayResult.FAIL_ERR_FROM_CHANNEL;\n                        errDetail = \"\u9427\u5a5a\u6ab0\u6fb6\u8fab\u89e6\";\n                        break;\n                    case PayCallBackManager.PayStateModle.PAY_STATUS_ERROR:\n                        result = BCPayResult.RESULT_FAIL;\n                        errCode = BCPayResult.APP_INTERNAL_THIRD_CHANNEL_ERR_CODE;\n                        errMsg = BCPayResult.FAIL_ERR_FROM_CHANNEL;\n                        errDetail = \"\u93c0\ue219\u7caf\u6fb6\u8fab\u89e6\";\n                        break;\n                    case PayCallBackManager.PayStateModle.PAY_STATUS_LOGIN_OUT:\n                        result = BCPayResult.RESULT_FAIL;\n                        errCode = BCPayResult.APP_INTERNAL_THIRD_CHANNEL_ERR_CODE;\n                        errMsg = BCPayResult.FAIL_ERR_FROM_CHANNEL;\n                        errDetail = \"\u95ab\u9351\u8679\u6ae5\u8930\";\n                        break;\n                    default:\n                        result = BCPayResult.RESULT_FAIL;\n                        errCode = BCPayResult.APP_INTERNAL_THIRD_CHANNEL_ERR_CODE;\n                        errMsg = BCPayResult.FAIL_ERR_FROM_CHANNEL;\n                        errDetail = \"\u93c0\ue219\u7caf\u6fb6\u8fab\u89e6\";\n                        break;\n                }\n\n                payCallback.done(new BCPayResult(result, errCode, errMsg,\n                        errDetail + \"#result=\" + stateCode + \"#desc=\" + payDesc,\n                        BCCache.getInstance().billID));\n            }\n\n            public boolean isHideLoadingDialog() {\n                return true;\n            }\n        }, map);\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(byte[] bytes, int start, int length) {\n        char[] chars = localBuffer.get();\n        if (chars == null || chars.length < length) {\n            chars = new char[length];\n            localBuffer.set(chars);\n        }\n        int outAt = 0;\n\n        for (int at = start; length > 0; ) {\n            int v0 = bytes[at] & 0xFF;\n            char out;\n            switch (v0 >> 4) {\n                case 0x00: case 0x01: case 0x02: case 0x03:\n                case 0x04: case 0x05: case 0x06: case 0x07: {\n                    length--;\n                    if (v0 == 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    out = (char) v0;\n                    at++;\n                    break;\n                }\n                case 0x0c: case 0x0d: {\n                    length -= 2;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int value = ((v0 & 0x1f) << 6) | (v1 & 0x3f);\n                    if ((value != 0) && (value < 0x80)) {\n                        \n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    out = (char) value;\n                    at += 2;\n                    break;\n                }\n                case 0x0e: {\n                    length -= 3;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int v2 = bytes[at + 2] & 0xFF;\n                    if ((v2 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    int value = ((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) |\n                            (v2 & 0x3f);\n                    if (value < 0x800) {\n                        \n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    out = (char) value;\n                    at += 3;\n                    break;\n                }\n                default: {\n                    return throwBadUtf8(v0, at);\n                }\n            }\n            chars[outAt] = out;\n            outAt++;\n        }\n\n        return new String(chars, 0, outAt);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic int normalizeMe() throws IllegalArgumentException {\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint i;\n\t\tfor (i = nWords - 1; i >= 0 && (l = data[i]) == 0; i--)\n\t\t\tj++;\n\n\t\tif (i < 0)\n\t\t\tthrow new IllegalArgumentException(\"zero value\");\n\t\tnWords -= j;\n\t\tif ((l & -268435456) != 0) {\n\t\t\tfor (k = 32; (l & -268435456) != 0; k--)\n\t\t\t\tl >>>= 1;\n\n\t\t} else {\n\t\t\twhile (l <= 1048575) {\n\t\t\t\tl <<= 8;\n\t\t\t\tk += 8;\n\t\t\t}\n\t\t\twhile (l <= 134217727) {\n\t\t\t\tl <<= 1;\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t\tif (k != 0)\n\t\t\tlshiftMe(k);\n\t\treturn k;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void printMethods() {\n\t\tif (TypeUtil.isClassLike(type)) {\n\t\t\tfor (List<IMethodBinding> e : methods.values()) {\n\t\t\t\tfor (IMethodBinding mb : e) {\n\t\t\t\t\taccess = TransformUtil.declareBridge(ctx, out, type, mb,\n\t\t\t\t\t\t\tdeps, access);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tList<IMethodBinding> superMethods = hiddenMethods(type, ctx, methods);\n\n\t\tfor (IMethodBinding mb : superMethods) {\n\t\t\taccess = printAccess(out, mb.getModifiers(), access);\n\t\t\tprint(i1);\n\t\t\tTransformUtil.printSignature(ctx, out, type,\n\t\t\t\t\tmb.getMethodDeclaration(), deps, false);\n\t\t\tif (Modifier.isAbstract(mb.getModifiers())) {\n\t\t\t\tprint(\" = 0\");\n\t\t\t}\n\n\t\t\tprintln(\";\");\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic boolean handleControlWord(RtfCtrlWordData ctrlWordData) {\n\t\tboolean result = true;\n\t\t\n\t\tif(ctrlWordData.ctrlWord.equals(\"f\")) { this.setFontNumber(ctrlWordData.param); result=true;}\n\t\tif(ctrlWordData.ctrlWord.equals(\"fcharset\")) { this.setCharset(ctrlWordData.param); result=true; }\n\n\t\tif(ctrlWordData.ctrlWord.equals(\"fnil\")) { this.setFontFamily(\"roman\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"froman\")) { this.setFontFamily(\"roman\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fswiss\")) { this.setFontFamily(\"swiss\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fmodern\")) { this.setFontFamily(\"modern\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fscript\")) { this.setFontFamily(\"script\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fdecor\")) { this.setFontFamily(\"decor\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"ftech\")) { this.setFontFamily(\"tech\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fbidi\")) { this.setFontFamily(\"bidi\"); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fprq\")) { this.setPitch(ctrlWordData.param); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fbias\")) { this.setBias(ctrlWordData.param); result=true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"flomajor\")) { this.setThemeFont(\"flomajor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fhimajor\")) { this.setThemeFont(\"fhimajor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fdbmajor\")) { this.setThemeFont(\"fdbmajor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fbimajor\")) { this.setThemeFont(\"fbimajor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"flominor\")) { this.setThemeFont(\"flominor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fhiminor\")) { this.setThemeFont(\"fhiminor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fdbminor\")) { this.setThemeFont(\"fdbminor\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fbiminor\")) { this.setThemeFont(\"fbiminor\"); result= true; }\n\n\t\tif(ctrlWordData.ctrlWord.equals(\"panose\")) {state = SETTING_PANOSE; result = true; }\n\t\t\n\t\tif(ctrlWordData.ctrlWord.equals(\"fname\")) {state = SETTING_FONTNAME; result = true; }\n\n\t\tif(ctrlWordData.ctrlWord.equals(\"falt\")) { state = SETTING_ALTERNATE; result = true; }\n\t\t\n\t\tif(ctrlWordData.ctrlWord.equals(\"fontemb\")) { state = SETTING_FONT_EMBED; result = true; }\n\n\t\tif(ctrlWordData.ctrlWord.equals(\"ftnil\")) { this.setTrueType(\"ftnil\"); result= true; }\n\t\tif(ctrlWordData.ctrlWord.equals(\"fttruetype\")) { this.setTrueType(\"fttruetype\"); result= true; }\n\t\t\n\t\tif(ctrlWordData.ctrlWord.equals(\"fontemb\")) { state = SETTING_FONT_FILE; result = true; }\n\n\t\tif(ctrlWordData.ctrlWord.equals(\"cpg\")) { this.setCodePage(ctrlWordData.param); result= true; }\n\t\t\n\t\tthis.lastCtrlWord = ctrlWordData;\n\t\treturn result;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        return CharacterData.of(codePoint).isIdentifierIgnorable(codePoint);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate ExternalCarrierBillingInstrumentProto(Builder builder) {\n    this(builder.instrumentKey, builder.subscriberIdentifier, builder.accountType, builder.subscriberCurrency, builder.transactionLimit, builder.subscriberName, builder.address1, builder.address2, builder.city, builder.state, builder.postalCode, builder.country, builder.encryptedSubscriberInfo);\n    setBuilder(builder);\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public void onNewFrame(HeadTransform headTransform) {\n    \t\n    \tfloat[] mtx = new float[16];\n        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);\n        surface.updateTexImage();\n        surface.getTransformMatrix(mtx); \n    \t\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void systemLoader()\n\t\t{\n\t\t\t\n\t\t\tlong loginCount = mXPref.getUseTotalCount();\n\t\t\tmXPref.putUseTotalCount(loginCount + 1); // Login count++\n\t\t\t\n\t\t\tmXPref.putUseDayCount(mXPref.getUseDayCount() + 1);\t\t\t\n\t\t\t\n\t\t\tLog.I(TAG, String.format(\"Entry %1s %2s Times.\", getString(R.string.app_name), loginCount));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Nonnull\n    public static <K, V, T> ProcessorMetaSupplier streamRemoteMapP(\n            @Nonnull String mapName,\n            @Nonnull ClientConfig clientConfig,\n            @Nullable DistributedPredicate<EventJournalMapEvent<K, V>> predicate,\n            @Nullable DistributedFunction<EventJournalMapEvent<K, V>, T> projection,\n            boolean startFromLatestSequence\n    ) {\n        return StreamEventJournalP.streamMapP(mapName, clientConfig, predicate, projection, startFromLatestSequence);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tprivate void completeAddAppWidget(Intent data, CellLayout.CellInfo cellInfo) {\n\t\tBundle extras = data.getExtras();\n\t\tint appWidgetId = extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID, -1);\n\n\t\tLog.d(LOG_TAG, \"dumping extras content=\" + extras.toString());\n\n\t\tAppWidgetProviderInfo appWidgetInfo = appWidgetManager.getAppWidgetInfo(appWidgetId);\n\n\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    protected void fireVetoableChange(String propertyName, Object oldValue,\n                                      Object newValue)\n        throws PropertyVetoException\n    {\n        if (oldValue == newValue) {\n            return;\n        }\n        VetoableChangeSupport vetoableSupport =\n            this.vetoableSupport;\n        if (vetoableSupport != null) {\n            vetoableSupport.fireVetoableChange(propertyName, oldValue,\n                                               newValue);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic Transformation(String type, String resource, FToken token_T, FToken token_H){\n\t\t\n\t\tthis.type = type;\n\t\tthis.resource = resource;\n\t\tthis.token_T = token_T;\n\t\tthis.token_H = token_H;\n\t\t\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\n    public static Bitmap fastblur(Context context, Bitmap sentBitmap, float radius) {\n\n        if (Build.VERSION.SDK_INT > 16 &&\n                    (!Build.MODEL.contains(\"google_sdk\")\n                             && !Build.MODEL.contains(\"Emulator\")\n                             && !Build.MODEL.contains(\"Android SDK\")\n                             && !Build.FINGERPRINT.contains(\"vbox86p\"))) {\n            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n            final RenderScript rs = RenderScript.create(context);\n            final Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n                                                                 Allocation.USAGE_SCRIPT);\n            final Allocation output = Allocation.createTyped(rs, input.getType());\n            final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n            script.setRadius(radius );\n            script.setInput(input);\n            script.forEach(output);\n            output.copyTo(bitmap);\n            return bitmap;\n        }\n\n        radius *= 0.1;\n        return blurfast(sentBitmap, (int) radius);\n\n\n\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public CompletableFuture<Void> raise(RemoteEvent event,\n                                         Option...   options)\n    {\n        if (isOpen())\n        {\n            List<CompletableFuture<?>> futures = remoteChannels.values().stream().map((channel) -> {\n                                                         try\n                                                         {\n                                                             return channel.raise(event, options);\n                                                         }\n                                                         catch (Throwable e)\n                                                         {\n                                                             return CompletableFuture.completedFuture(null);\n                                                         }\n                                                     }).collect(Collectors.toList());\n\n            return CompletableFuture.allOf(futures.toArray(new CompletableFuture[futures.size()]));\n        }\n\n        return CompletableFuture.completedFuture(null);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void visitLdcInsn(Object cst) {\n        if (mv != null) {\n            mv.visitLdcInsn(cst);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static String[] getCryptoImpls( String serviceType )\n    {\n        Set<String> result = new HashSet<String>();\n\n        Provider[] providers = Security.getProviders();\n\n        for ( Provider provider : providers )\n        {\n            Set<Object> keys = provider.keySet();\n\n            for ( Object keyObject : keys )\n            {\n                String key = ( String ) keyObject;\n                key = key.split( \" \" )[0];\n\n                if ( key.startsWith( serviceType + \".\" ) )\n                {\n                    result.add( key.substring( serviceType.length() + 1 ) );\n                }\n                else if ( key.startsWith( \"Alg.Alias.\" + serviceType + \".\" ) )\n                {\n                    result.add( key.substring( serviceType.length() + 11 ) );\n                }\n            }\n        }\n\n        return result.toArray( new String[result.size()] );\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void testParameterTypes() throws Exception\n    {\n        PreparedStatement pSt = prepareStatement(\n            \"create table t2(si smallint,i int, bi bigint, r real, f float, \"\n            + \"d double precision, n5_2 numeric(5,2), dec10_3 decimal(10,3), \"\n            + \"ch20 char(20),vc varchar(20), lvc long varchar, \"\n            + \"b20 char(23) for bit data, vb varchar(23) for bit data, \"\n            + \"lvb long varchar for bit data,  dt date, tm time, \"\n            + \"ts timestamp not null)\");\n        assertUpdateCount(pSt, 0);\n        pSt.close();\n\n        byte[] ba = new byte[] { 0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xa,\n                                 0xb,0xc,0xd,0xe,0xf,0x10,0x11,0x12,0x13 };\n\n        byte[] bapad = new byte[23];  // For padded byte data\n        System.arraycopy(ba, 0, bapad, 0, ba.length);\n        Arrays.fill(bapad, ba.length, bapad.length, (byte )0x20);\n\n        Object[][] t2_rows = {\n            {new Integer(1), new Integer(2), new Long(3), new Float(4.0),\n             new Double(5.0), new Double(6.0), new BigDecimal(\"77.77\"),\n             new BigDecimal(\"8.100\"), \"column9string       \",\n             \"column10vcstring\", \"column11lvcstring\", bapad, ba, ba,\n             Date.valueOf(\"2002-04-12\"), Time.valueOf(\"11:44:30\"),\n             Timestamp.valueOf(\"2002-04-12 11:44:30.000000000\")},\n            {new Integer(1), new Integer(2), new Long(3), new Float(4.0),\n             new Double(5.0), new Double(6.0), new BigDecimal(\"77.77\"),\n             new BigDecimal(\"8.100\"), \"column11string      \",\n             \"column10vcstring\", \"column11lvcstring\", bapad, ba, ba,\n             Date.valueOf(\"2002-04-12\"), Time.valueOf(\"11:44:30\"),\n             Timestamp.valueOf(\"2002-04-12 11:44:30.000000000\")},\n            {null, null, null, null, null, null, null, null, null, null, null,\n             null, null, null, null, null,\n             Timestamp.valueOf(\"2002-04-12 11:44:31.000000000\")}\n        };\n\n\n        pSt = prepareStatement(\n            \"insert into t2 values (?, ?, ?, ?,  ?, ?, ?, ?, ?, ?, ?, ?, ?, \"\n            + \"?, ? ,? , ?)\");\n        pSt.setShort(1, ((Integer )t2_rows[0][0]).shortValue());\n        pSt.setInt(2, ((Integer )t2_rows[0][1]).intValue());\n        pSt.setLong(3, ((Long )t2_rows[0][2]).longValue());\n        pSt.setFloat(4, ((Float )t2_rows[0][3]).floatValue());\n        pSt.setDouble(5, ((Double )t2_rows[0][4]).doubleValue());\n        pSt.setDouble(6, ((Double )t2_rows[0][5]).doubleValue());\n        pSt.setBigDecimal(7, (BigDecimal )t2_rows[0][6]);\n        pSt.setBigDecimal(8, new BigDecimal(\"8.1\")); // Diff. precision\n        pSt.setString(9, \"column9string\");  // Without padding\n        byte[] c10ba = ((String )t2_rows[0][9]).getBytes(\"UTF-8\");\n        int len = c10ba.length;\n        pSt.setAsciiStream(10, new ByteArrayInputStream(c10ba), len);\n        byte[] c11ba = ((String )t2_rows[0][10]).getBytes(\"UTF-8\");\n        len = c11ba.length;\n        pSt.setCharacterStream(11, new InputStreamReader\n                               (new ByteArrayInputStream(c11ba),\"UTF-8\"),len);\n        pSt.setBytes(12, ba);\n        pSt.setBinaryStream(13, new ByteArrayInputStream(ba), ba.length);\n        pSt.setBytes(14, ba);\n        pSt.setDate(15, ((Date )t2_rows[0][14]));\n        pSt.setTime(16, ((Time )t2_rows[0][15]));\n        pSt.setTimestamp(17, ((Timestamp )t2_rows[0][16]));\n        assertUpdateCount(pSt, 1);\n\n        for (int i=0; i<17; ++i) {\n            pSt.setObject(i+1, t2_rows[1][i]);\n        }\n        assertUpdateCount(pSt, 1);\n\n        pSt.setNull(1, java.sql.Types.SMALLINT);\n        pSt.setNull(2, java.sql.Types.INTEGER);\n        pSt.setNull(3, java.sql.Types.BIGINT);\n        pSt.setNull(4, java.sql.Types.REAL);\n        pSt.setNull(5, java.sql.Types.FLOAT);\n        pSt.setNull(6, java.sql.Types.DOUBLE);\n        pSt.setNull(7, java.sql.Types.NUMERIC);\n        pSt.setNull(8, java.sql.Types.DECIMAL);\n        pSt.setNull(9, java.sql.Types.CHAR);\n        pSt.setNull(10, java.sql.Types.VARCHAR);\n        pSt.setNull(11, java.sql.Types.LONGVARCHAR);\n        pSt.setNull(12, java.sql.Types.BINARY);\n        pSt.setNull(13, java.sql.Types.VARBINARY);\n        pSt.setNull(14, java.sql.Types.LONGVARBINARY);\n        pSt.setNull(15, java.sql.Types.DATE);\n        pSt.setNull(16, java.sql.Types.TIME);\n\n        pSt.setTimestamp(17, ((Timestamp )t2_rows[2][16]));\n        assertFalse(pSt.execute());\n        assertEquals(1, pSt.getUpdateCount());\n        pSt.close();\n\n        pSt = prepareStatement(\"select * from t2\");\n        ResultSet rs = pSt.executeQuery();\n        JDBC.assertFullResultSet(rs, t2_rows, false);\n        rs.close();\n        pSt.close();\n\n        try {\n            pSt = prepareStatement(\"select * from t2 where i = ?\");\n            rs = pSt.executeQuery();\n            fail(\"Exception expected above!\");\n        } catch (SQLException e) {\n            assertSQLState(\"07000\", e);\n        }\n        rs.close();\n        pSt.close();\n\n\n        try {\n            pSt = prepareStatement(\n                \"insert into t2 values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, \"\n                + \"?, ?, ?, ?, ?)\");\n            pSt.executeUpdate();\n            fail(\"Exception expected above!\");\n        } catch (SQLException e) {\n            assertSQLState(\"07000\", e);\n        }\n        pSt.close();\n\n        pSt = prepareStatement(\"create table d2558 (i int)\");\n        assertUpdateCount(pSt, 0);\n        pSt.close();\n        pSt = prepareStatement(\"insert into d2558 values (3), (4)\");\n        assertUpdateCount(pSt, 2);\n        pSt.close();\n        pSt = prepareStatement(\"select * from d2558 where i = ?\");\n        pSt.setObject(1,new Integer(3),java.sql.Types.INTEGER,0);\n        try {\n            pSt.setObject(2,new Integer(4), java.sql.Types.INTEGER,0);\n            rs = pSt.executeQuery();\n            rs.close();\n            fail(\"Exception expected above!\");\n        } catch (SQLException e) {\n            assertSQLState(\"XCL13\", e);\n        }\n        pSt.close();\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        return CharacterData.of(codePoint).isIdentifierIgnorable(codePoint);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static void drawQuad() {\n        \n        if (!Debug.noVBO) {\n            vertex_VBO.bindWithFormat(3, Format.FLOAT, 0, 0); \n    \n            texture_VBO.bindWithFormat(2, Format.FLOAT, 0, 0); \n            \n            index_VBO.bindAsIndex();\n            \n            VBO.render(6, Format.UNSIGNED_SHORT);\n        } else {\n            vertex_VBO.bindImmediate(3, Format.FLOAT, 0); \n    \n            texture_VBO.bindImmediate(2, Format.FLOAT, 0); \n            \n            index_VBO.renderImmediate(6, Format.UNSIGNED_SHORT);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n\n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n\n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n\n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static List<Picture> getPictures() {\n        final List<Picture> pictures = new ArrayList<Picture>();\n        pictures.add(new Picture(\"https://i.imgur.com/8LOZwbE.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/EfLvmlO.png\", \"Cheetahs\"));\n        pictures.add(new Picture(\"https://i.imgur.com/VfH1siL.png\", \"Cloud Break\"));\n        pictures.add(new Picture(\"https://i.imgur.com/rmU8E53.png\", \"Lighthouse\"));\n        pictures.add(new Picture(\"https://i.imgur.com/qZCCdFW.png\", \"Uluru\"));\n        pictures.add(new Picture(\"https://i.imgur.com/zkt4IEl.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/xL9BSy3.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/lYQPhnY.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/5tM1vxy.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/lUbn6U6.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/fk4l1QY.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/wk49eIK.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/qwz8VUx.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/XR8Dc2D.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/lGBUYjK.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/8AgQWCh.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/YMwlUy3.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/MyWKsZf.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/gTghrcj.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/ePH4nP4.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/KVJuX7O.png\", \"National photo contest\"));\n        return pictures;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n        this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n        BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n        this.updateNaturalParameterPrior(prior);\n\n        return learntBN;\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_optimize_item_click);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n\n        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);\n        fab.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\n                        .setAction(\"Action\", null).show();\n            }\n        });\n        mRecyclerView = (RecyclerView) findViewById(R.id.list);\n        GridLayoutManager layoutManager = new GridLayoutManager(this,4);\n        mRecyclerView.setLayoutManager(layoutManager);\n        initAdapter();\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static void getTypeLabel(ITypeBinding binding, long flags, StringBuffer buffer) {\n\t\tif ((flags & JavaElementLabels.T_FULLY_QUALIFIED) != 0) {\n\t\t\tfinal IPackageBinding pack= binding.getPackage();\n\t\t\tif (pack != null && !pack.isUnnamed()) {\n\t\t\t\tbuffer.append(pack.getName());\n\t\t\t\tbuffer.append('.');\n\t\t\t}\n\t\t}\n\t\tif ((flags & (JavaElementLabels.T_FULLY_QUALIFIED | JavaElementLabels.T_CONTAINER_QUALIFIED)) != 0) {\n\t\t\tfinal ITypeBinding declaring= binding.getDeclaringClass();\n\t\t\tif (declaring != null) {\n\t\t\t\tgetTypeLabel(declaring, JavaElementLabels.T_CONTAINER_QUALIFIED | (flags & JavaElementLabels.P_COMPRESSED), buffer);\n\t\t\t\tbuffer.append('.');\n\t\t\t}\n\t\t\tfinal IMethodBinding declaringMethod= binding.getDeclaringMethod();\n\t\t\tif (declaringMethod != null) {\n\t\t\t\tgetMethodLabel(declaringMethod, 0, buffer);\n\t\t\t\tbuffer.append('.');\n\t\t\t}\n\t\t}\n\n\t\tif (binding.isCapture()) {\n\t\t\tgetTypeLabel(binding.getWildcard(), flags & JavaElementLabels.T_TYPE_PARAMETERS, buffer);\n\t\t} else if (binding.isWildcardType()) {\n\t\t\tbuffer.append('?');\n\t\t\tITypeBinding bound= binding.getBound();\n\t\t\tif (bound != null) {\n\t\t\t\tif (binding.isUpperbound()) {\n\t\t\t\t\tbuffer.append(\" extends \"); //$NON-NLS-1$\n\t\t\t\t} else {\n\t\t\t\t\tbuffer.append(\" super \"); //$NON-NLS-1$\n\t\t\t\t}\n\t\t\t\tgetTypeLabel(bound, flags & JavaElementLabels.T_TYPE_PARAMETERS, buffer);\n\t\t\t}\n\t\t} else if (binding.isArray()) {\n\t\t\tgetTypeLabel(binding.getElementType(), flags & JavaElementLabels.T_TYPE_PARAMETERS, buffer);\n\t\t\tappendDimensions(binding.getDimensions(), buffer);\n\t\t} else { // type variables, primitive, reftype\n\t\t\tString name= binding.getTypeDeclaration().getName();\n\t\t\tif (name.length() == 0) {\n\t\t\t\tif (binding.isEnum()) {\n\t\t\t\t\tbuffer.append('{' + JavaElementLabels.ELLIPSIS_STRING + '}');\n\t\t\t\t} else if (binding.isAnonymous()) {\n\t\t\t\t\tITypeBinding[] superInterfaces= binding.getInterfaces();\n\t\t\t\t\tITypeBinding baseType;\n\t\t\t\t\tif (superInterfaces.length > 0) {\n\t\t\t\t\t\tbaseType= superInterfaces[0];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbaseType= binding.getSuperclass();\n\t\t\t\t\t}\n\t\t\t\t\tif (baseType != null) {\n\t\t\t\t\t\tStringBuffer anonymBaseType= new StringBuffer();\n\t\t\t\t\t\tgetTypeLabel(baseType, flags & JavaElementLabels.T_TYPE_PARAMETERS, anonymBaseType);\n\t\t\t\t\t\tbuffer.append(Messages.format(JavaUIMessages.JavaElementLabels_anonym_type, anonymBaseType.toString()));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuffer.append(JavaUIMessages.JavaElementLabels_anonym);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbuffer.append(\"UNKNOWN\"); //$NON-NLS-1$\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbuffer.append(name);\n\t\t\t}\n\n\t\t\tif ((flags & JavaElementLabels.T_TYPE_PARAMETERS) != 0) {\n\t\t\t\tif (binding.isGenericType()) {\n\t\t\t\t\tgetTypeParametersLabel(binding.getTypeParameters(), buffer);\n\t\t\t\t} else if (binding.isParameterizedType()) {\n\t\t\t\t\tgetTypeArgumentsLabel(binding.getTypeArguments(), flags, buffer);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\tif ((flags & JavaElementLabels.T_POST_QUALIFIED) != 0) {\n\t\t\tfinal IMethodBinding declaringMethod= binding.getDeclaringMethod();\n\t\t\tfinal ITypeBinding declaringType= binding.getDeclaringClass();\n\t\t\tif (declaringMethod != null) {\n\t\t\t\tbuffer.append(JavaElementLabels.CONCAT_STRING);\n\t\t\t\tgetMethodLabel(declaringMethod, JavaElementLabels.T_FULLY_QUALIFIED | (flags & JavaElementLabels.P_COMPRESSED), buffer);\n\t\t\t} else if (declaringType != null) {\n\t\t\t\tbuffer.append(JavaElementLabels.CONCAT_STRING);\n\t\t\t\tgetTypeLabel(declaringType, JavaElementLabels.T_FULLY_QUALIFIED | (flags & JavaElementLabels.P_COMPRESSED), buffer);\n\t\t\t} else {\n\t\t\t\tfinal IPackageBinding pack= binding.getPackage();\n\t\t\t\tif (pack != null && !pack.isUnnamed()) {\n\t\t\t\t\tbuffer.append(JavaElementLabels.CONCAT_STRING);\n\t\t\t\t\tbuffer.append(pack.getName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic long getblock(byte[] key, int i) {\n      return\n           (((long) key[i + 0] & 0x00000000000000FFL) << 0)\n         | (((long) key[i + 1] & 0x00000000000000FFL) << 8)\n         | (((long) key[i + 2] & 0x00000000000000FFL) << 16)\n         | (((long) key[i + 3] & 0x00000000000000FFL) << 24)\n         | (((long) key[i + 4] & 0x00000000000000FFL) << 32)\n         | (((long) key[i + 5] & 0x00000000000000FFL) << 40)\n         | (((long) key[i + 6] & 0x00000000000000FFL) << 48)\n         | (((long) key[i + 7] & 0x00000000000000FFL) << 56);\n   }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tprotected Method getAccessor(Object obj, Field field, boolean isGetter)\n\t{\n\t\tString name = field.getName();\n\t\tname = name.substring(0, 1).toUpperCase() + name.substring(1);\n\n\t\tif (!isGetter)\n\t\t{\n\t\t\tname = \"set\" + name;\n\t\t}\n\t\telse if (boolean.class.isAssignableFrom(field.getType()))\n\t\t{\n\t\t\tname = \"is\" + name;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tname = \"get\" + name;\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\tif (isGetter)\n\t\t\t{\n\t\t\t\treturn getMethod(obj, name, null);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn getMethod(obj, name, new Class[] { field.getType() });\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e1)\n\t\t{\n\t\t}\n\n\t\treturn null;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static void getTypeLabel(ITypeBinding binding, long flags, StringBuffer buffer) {\n\t\tif ((flags & JavaElementLabels.T_FULLY_QUALIFIED) != 0) {\n\t\t\tfinal IPackageBinding pack= binding.getPackage();\n\t\t\tif (pack != null && !pack.isUnnamed()) {\n\t\t\t\tbuffer.append(pack.getName());\n\t\t\t\tbuffer.append('.');\n\t\t\t}\n\t\t}\n\t\tif ((flags & (JavaElementLabels.T_FULLY_QUALIFIED | JavaElementLabels.T_CONTAINER_QUALIFIED)) != 0) {\n\t\t\tfinal ITypeBinding declaring= binding.getDeclaringClass();\n\t\t\tif (declaring != null) {\n\t\t\t\tgetTypeLabel(declaring, JavaElementLabels.T_CONTAINER_QUALIFIED | (flags & JavaElementLabels.P_COMPRESSED), buffer);\n\t\t\t\tbuffer.append('.');\n\t\t\t}\n\t\t\tfinal IMethodBinding declaringMethod= binding.getDeclaringMethod();\n\t\t\tif (declaringMethod != null) {\n\t\t\t\tgetMethodLabel(declaringMethod, 0, buffer);\n\t\t\t\tbuffer.append('.');\n\t\t\t}\n\t\t}\n\n\t\tif (binding.isCapture()) {\n\t\t\tgetTypeLabel(binding.getWildcard(), flags & JavaElementLabels.T_TYPE_PARAMETERS, buffer);\n\t\t} else if (binding.isWildcardType()) {\n\t\t\tbuffer.append('?');\n\t\t\tITypeBinding bound= binding.getBound();\n\t\t\tif (bound != null) {\n\t\t\t\tif (binding.isUpperbound()) {\n\t\t\t\t\tbuffer.append(\" extends \"); //$NON-NLS-1$\n\t\t\t\t} else {\n\t\t\t\t\tbuffer.append(\" super \"); //$NON-NLS-1$\n\t\t\t\t}\n\t\t\t\tgetTypeLabel(bound, flags & JavaElementLabels.T_TYPE_PARAMETERS, buffer);\n\t\t\t}\n\t\t} else if (binding.isArray()) {\n\t\t\tgetTypeLabel(binding.getElementType(), flags & JavaElementLabels.T_TYPE_PARAMETERS, buffer);\n\t\t\tappendDimensions(binding.getDimensions(), buffer);\n\t\t} else { // type variables, primitive, reftype\n\t\t\tString name= binding.getTypeDeclaration().getName();\n\t\t\tif (name.length() == 0) {\n\t\t\t\tif (binding.isEnum()) {\n\t\t\t\t\tbuffer.append('{' + JavaElementLabels.ELLIPSIS_STRING + '}');\n\t\t\t\t} else if (binding.isAnonymous()) {\n\t\t\t\t\tITypeBinding[] superInterfaces= binding.getInterfaces();\n\t\t\t\t\tITypeBinding baseType;\n\t\t\t\t\tif (superInterfaces.length > 0) {\n\t\t\t\t\t\tbaseType= superInterfaces[0];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbaseType= binding.getSuperclass();\n\t\t\t\t\t}\n\t\t\t\t\tif (baseType != null) {\n\t\t\t\t\t\tStringBuffer anonymBaseType= new StringBuffer();\n\t\t\t\t\t\tgetTypeLabel(baseType, flags & JavaElementLabels.T_TYPE_PARAMETERS, anonymBaseType);\n\t\t\t\t\t\tbuffer.append(Messages.format(JavaUIMessages.JavaElementLabels_anonym_type, anonymBaseType.toString()));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuffer.append(JavaUIMessages.JavaElementLabels_anonym);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbuffer.append(\"UNKNOWN\"); //$NON-NLS-1$\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbuffer.append(name);\n\t\t\t}\n\n\t\t\tif ((flags & JavaElementLabels.T_TYPE_PARAMETERS) != 0) {\n\t\t\t\tif (binding.isGenericType()) {\n\t\t\t\t\tgetTypeParametersLabel(binding.getTypeParameters(), buffer);\n\t\t\t\t} else if (binding.isParameterizedType()) {\n\t\t\t\t\tgetTypeArgumentsLabel(binding.getTypeArguments(), flags, buffer);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\tif ((flags & JavaElementLabels.T_POST_QUALIFIED) != 0) {\n\t\t\tfinal IMethodBinding declaringMethod= binding.getDeclaringMethod();\n\t\t\tfinal ITypeBinding declaringType= binding.getDeclaringClass();\n\t\t\tif (declaringMethod != null) {\n\t\t\t\tbuffer.append(JavaElementLabels.CONCAT_STRING);\n\t\t\t\tgetMethodLabel(declaringMethod, JavaElementLabels.T_FULLY_QUALIFIED | (flags & JavaElementLabels.P_COMPRESSED), buffer);\n\t\t\t} else if (declaringType != null) {\n\t\t\t\tbuffer.append(JavaElementLabels.CONCAT_STRING);\n\t\t\t\tgetTypeLabel(declaringType, JavaElementLabels.T_FULLY_QUALIFIED | (flags & JavaElementLabels.P_COMPRESSED), buffer);\n\t\t\t} else {\n\t\t\t\tfinal IPackageBinding pack= binding.getPackage();\n\t\t\t\tif (pack != null && !pack.isUnnamed()) {\n\t\t\t\t\tbuffer.append(JavaElementLabels.CONCAT_STRING);\n\t\t\t\t\tbuffer.append(pack.getName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void testParameterTypes() throws Exception\n    {\n        PreparedStatement pSt = prepareStatement(\n            \"create table t2(si smallint,i int, bi bigint, r real, f float, \"\n            + \"d double precision, n5_2 numeric(5,2), dec10_3 decimal(10,3), \"\n            + \"ch20 char(20),vc varchar(20), lvc long varchar, \"\n            + \"b20 char(23) for bit data, vb varchar(23) for bit data, \"\n            + \"lvb long varchar for bit data,  dt date, tm time, \"\n            + \"ts timestamp not null)\");\n        assertUpdateCount(pSt, 0);\n        pSt.close();\n\n        byte[] ba = new byte[] { 0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xa,\n                                 0xb,0xc,0xd,0xe,0xf,0x10,0x11,0x12,0x13 };\n\n        byte[] bapad = new byte[23];  // For padded byte data\n        System.arraycopy(ba, 0, bapad, 0, ba.length);\n        Arrays.fill(bapad, ba.length, bapad.length, (byte )0x20);\n\n        Object[][] t2_rows = {\n            {new Integer(1), new Integer(2), new Long(3), new Float(4.0),\n             new Double(5.0), new Double(6.0), new BigDecimal(\"77.77\"),\n             new BigDecimal(\"8.100\"), \"column9string       \",\n             \"column10vcstring\", \"column11lvcstring\", bapad, ba, ba,\n             Date.valueOf(\"2002-04-12\"), Time.valueOf(\"11:44:30\"),\n             Timestamp.valueOf(\"2002-04-12 11:44:30.000000000\")},\n            {new Integer(1), new Integer(2), new Long(3), new Float(4.0),\n             new Double(5.0), new Double(6.0), new BigDecimal(\"77.77\"),\n             new BigDecimal(\"8.100\"), \"column11string      \",\n             \"column10vcstring\", \"column11lvcstring\", bapad, ba, ba,\n             Date.valueOf(\"2002-04-12\"), Time.valueOf(\"11:44:30\"),\n             Timestamp.valueOf(\"2002-04-12 11:44:30.000000000\")},\n            {null, null, null, null, null, null, null, null, null, null, null,\n             null, null, null, null, null,\n             Timestamp.valueOf(\"2002-04-12 11:44:31.000000000\")}\n        };\n\n\n        pSt = prepareStatement(\n            \"insert into t2 values (?, ?, ?, ?,  ?, ?, ?, ?, ?, ?, ?, ?, ?, \"\n            + \"?, ? ,? , ?)\");\n        pSt.setShort(1, ((Integer )t2_rows[0][0]).shortValue());\n        pSt.setInt(2, ((Integer )t2_rows[0][1]).intValue());\n        pSt.setLong(3, ((Long )t2_rows[0][2]).longValue());\n        pSt.setFloat(4, ((Float )t2_rows[0][3]).floatValue());\n        pSt.setDouble(5, ((Double )t2_rows[0][4]).doubleValue());\n        pSt.setDouble(6, ((Double )t2_rows[0][5]).doubleValue());\n        pSt.setBigDecimal(7, (BigDecimal )t2_rows[0][6]);\n        pSt.setBigDecimal(8, new BigDecimal(\"8.1\")); // Diff. precision\n        pSt.setString(9, \"column9string\");  // Without padding\n        byte[] c10ba = ((String )t2_rows[0][9]).getBytes(\"UTF-8\");\n        int len = c10ba.length;\n        pSt.setAsciiStream(10, new ByteArrayInputStream(c10ba), len);\n        byte[] c11ba = ((String )t2_rows[0][10]).getBytes(\"UTF-8\");\n        len = c11ba.length;\n        pSt.setCharacterStream(11, new InputStreamReader\n                               (new ByteArrayInputStream(c11ba),\"UTF-8\"),len);\n        pSt.setBytes(12, ba);\n        pSt.setBinaryStream(13, new ByteArrayInputStream(ba), ba.length);\n        pSt.setBytes(14, ba);\n        pSt.setDate(15, ((Date )t2_rows[0][14]));\n        pSt.setTime(16, ((Time )t2_rows[0][15]));\n        pSt.setTimestamp(17, ((Timestamp )t2_rows[0][16]));\n        assertUpdateCount(pSt, 1);\n\n        for (int i=0; i<17; ++i) {\n            pSt.setObject(i+1, t2_rows[1][i]);\n        }\n        assertUpdateCount(pSt, 1);\n\n        pSt.setNull(1, java.sql.Types.SMALLINT);\n        pSt.setNull(2, java.sql.Types.INTEGER);\n        pSt.setNull(3, java.sql.Types.BIGINT);\n        pSt.setNull(4, java.sql.Types.REAL);\n        pSt.setNull(5, java.sql.Types.FLOAT);\n        pSt.setNull(6, java.sql.Types.DOUBLE);\n        pSt.setNull(7, java.sql.Types.NUMERIC);\n        pSt.setNull(8, java.sql.Types.DECIMAL);\n        pSt.setNull(9, java.sql.Types.CHAR);\n        pSt.setNull(10, java.sql.Types.VARCHAR);\n        pSt.setNull(11, java.sql.Types.LONGVARCHAR);\n        pSt.setNull(12, java.sql.Types.BINARY);\n        pSt.setNull(13, java.sql.Types.VARBINARY);\n        pSt.setNull(14, java.sql.Types.LONGVARBINARY);\n        pSt.setNull(15, java.sql.Types.DATE);\n        pSt.setNull(16, java.sql.Types.TIME);\n\n        pSt.setTimestamp(17, ((Timestamp )t2_rows[2][16]));\n        assertFalse(pSt.execute());\n        assertEquals(1, pSt.getUpdateCount());\n        pSt.close();\n\n        pSt = prepareStatement(\"select * from t2\");\n        ResultSet rs = pSt.executeQuery();\n        JDBC.assertFullResultSet(rs, t2_rows, false);\n        rs.close();\n        pSt.close();\n\n        try {\n            pSt = prepareStatement(\"select * from t2 where i = ?\");\n            rs = pSt.executeQuery();\n            fail(\"Exception expected above!\");\n        } catch (SQLException e) {\n            assertSQLState(\"07000\", e);\n        }\n        rs.close();\n        pSt.close();\n\n\n        try {\n            pSt = prepareStatement(\n                \"insert into t2 values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, \"\n                + \"?, ?, ?, ?, ?)\");\n            pSt.executeUpdate();\n            fail(\"Exception expected above!\");\n        } catch (SQLException e) {\n            assertSQLState(\"07000\", e);\n        }\n        pSt.close();\n\n        pSt = prepareStatement(\"create table d2558 (i int)\");\n        assertUpdateCount(pSt, 0);\n        pSt.close();\n        pSt = prepareStatement(\"insert into d2558 values (3), (4)\");\n        assertUpdateCount(pSt, 2);\n        pSt.close();\n        pSt = prepareStatement(\"select * from d2558 where i = ?\");\n        pSt.setObject(1,new Integer(3),java.sql.Types.INTEGER,0);\n        try {\n            pSt.setObject(2,new Integer(4), java.sql.Types.INTEGER,0);\n            rs = pSt.executeQuery();\n            rs.close();\n            fail(\"Exception expected above!\");\n        } catch (SQLException e) {\n            assertSQLState(\"XCL13\", e);\n        }\n        pSt.close();\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic Output (int n, long value, String address, long txIndex, String script, boolean spent) {\n        this.n = n;\n        this.value = value;\n        this.address = address;\n        this.txIndex = txIndex;\n        this.script = script;\n        this.spent = spent;\n        if (address != \"\") {\n            spentToAddress = true;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, final Contract contract, final TradeOrder tradeOrder,\n\t\t\tfinal OrderState orderState) {\n\n\t\ttry {\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(tradeOrder.getOrderKey());\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170, \"Warning Order not found for Order Key: \" + orderId + \" make sure Client ID: \" + 0\n\t\t\t\t\t\t+ \" is not the master in TWS. On openOrder update.\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (BackTestBrokerModel.updateTradeOrder(tradeOrder, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\n\t\t\t\t\t_log.debug(\"Order Key: \" + transientInstance.getOrderKey() + \" filled.\");\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (updatedOrder.hasTradePosition() && !updatedOrder.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(updatedOrder.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Order key: \" + transientInstance.getOrderKey() + \" state changed. Status:\"\n\t\t\t\t\t\t\t+ orderState.m_status);\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(updatedOrder.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(updatedOrder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n    public void testNotEquals() throws UnsupportedEncodingException {\n        SoapSTSInstanceConfig ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/openam\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        SoapSTSInstanceConfig ric2 = createInstanceConfig(\"/bobo\", \"http://localhost:8080/openam\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/openam\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", !WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", !WITH_KEYSTORE_CONFIG,\n                !WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", !WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, !DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, !DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, !WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, !WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, !WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr adjacencyList) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), adjacencyList});\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + order.m_lmtPrice +\n        \" auxPrice=\" + order.m_auxPrice +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + order.m_minQty +\n        \" percentOffset=\" + order.m_percentOffset +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + order.m_nbboPriceCap +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + order.m_startingPrice +\n        \" stockRefPrice=\" + order.m_stockRefPrice +\n        \" delta=\" + order.m_delta +\n        \" stockRangeLower=\" + order.m_stockRangeLower +\n        \" stockRangeUpper=\" + order.m_stockRangeUpper +\n        \" volatility=\" + order.m_volatility +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + order.m_trailStopPrice +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + order.m_basisPoints;\n        \t\tmsg += \" basisPointsType=\" + order.m_basisPointsType;\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void changeSelection(int delta, int keyCode) {\n\t\tboolean sideways = keyCode == KeyEvent.VK_LEFT || keyCode == KeyEvent.VK_RIGHT;\n\n\t\tT item = lc.changeSelection(itemList, selectedItem, delta, sideways);\n\t\tif (item != null) {\n\t\t\tselectItem(item);\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    protected void init() {\n        label = i18n.string(R.string.dt_tests);\n        icon = R.drawable.tab_tests;\n        \n        DesktopItem dt = null;\n        dt = new DesktopItem(new Runnable() {\n            public void run() {\n                Contexts ctx = Contexts.instance(); \n                ctx.getMasterDataProvider().reset();\n            }\n        }, \"Reset Master Dataprovider\", R.drawable.dtitem_test);\n        \n        addItem(dt);\n        \n        dt = new DesktopItem(new Runnable() {\n            public void run() {\n                Contexts ctx = Contexts.instance(); \n                Intent intent = null;\n                intent = new Intent(activity,BookMgntActivity.class);\n                activity.startActivityForResult(intent,0);\n            }\n        }, \"Book Management\", R.drawable.dtitem_test);\n        \n        addItem(dt);\n        \n        \n        dt = new DesktopItem(new Runnable() {\n            public void run() {\n                Contexts ctx = Contexts.instance(); \n                Book book = ctx.getMasterDataProvider().findBook(ctx.getWorkingBookId());\n                \n                Intent intent = null;\n                intent = new Intent(activity,BookEditorActivity.class);\n                intent.putExtra(BookEditorActivity.INTENT_MODE_CREATE,false);\n                intent.putExtra(BookEditorActivity.INTENT_BOOK,book);\n                activity.startActivityForResult(intent,Constants.REQUEST_BOOK_EDITOR_CODE);\n            }\n        }, \"Edit selected book\", R.drawable.dtitem_test);\n        \n        addItem(dt);\n        \n        dt = new DesktopItem(new Runnable() {\n            public void run() {\n                Book book = new Book(\"test\",\"$\",SymbolPosition.AFTER,\"\");\n                Intent intent = null;\n                intent = new Intent(activity,BookEditorActivity.class);\n                intent.putExtra(BookEditorActivity.INTENT_MODE_CREATE,true);\n                intent.putExtra(BookEditorActivity.INTENT_BOOK,book);\n                activity.startActivityForResult(intent,Constants.REQUEST_BOOK_EDITOR_CODE);\n            }\n        }, \"Add book\", R.drawable.dtitem_test);\n        \n        addItem(dt);\n        \n        \n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                Contexts.instance().getDataProvider().reset();\n                GUIs.shortToast(activity,\"reset data provider\");\n            }}, \"rest data provider\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testFirstDayOfWeek();\n            }}, \"first day of week\",R.drawable.dtitem_test){\n        });\n        \n        \n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testCreateTestdata(1);\n            }}, \"test data1\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testCreateTestdata(25);\n            }}, \"test data25\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testCreateTestdata(50);\n            }}, \"test data50\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testCreateTestdata(100);\n            }}, \"test data100\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testCreateTestdata(200);\n            }}, \"test data200\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testJust();\n            }}, \"just test\",R.drawable.dtitem_test));\n        \n        DesktopItem padding = new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                \n            }}, \"padding\",R.drawable.dtitem_test);\n        \n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\tChannel channel = ctx.channel();\n\t\t\tchannels.remove(channel);\n\t\t\tNode client = channel.attr(STATE).get();\n\t\t\tuserLinkList.delUser(client);\n\t\t\tcombobox.removeItem(client.username);\n\t\t\tsuper.channelUnregistered(ctx);\n\t\t\tbroadcasts(new LoginOutMessage(client.username));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprotected final Class[] parseTypes(String arg) throws ClassNotFoundException {\n\t\tString[] parts = arg.split(\";\");\n\t\tClass[] types = new Class[parts.length];\n\t\tfor (int i = 0; i < types.length; i++) {\n\t\t\ttypes[i] = this.parseType(parts[i]);\n\t\t}\n\t\treturn types;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic BlameGenerator push(String description, AnyObjectId id)\n\t\t\tthrows IOException {\n\t\tObjectLoader ldr = reader.open(id);\n\t\tif (ldr.getType() == OBJ_BLOB) {\n\t\t\tif (description == null)\n\t\t\t\tdescription = JGitText.get().blameNotCommittedYet;\n\t\t\tBlobCandidate c = new BlobCandidate(description, resultPath);\n\t\t\tc.sourceBlob = id.toObjectId();\n\t\t\tc.sourceText = new RawText(ldr.getCachedBytes(Integer.MAX_VALUE));\n\t\t\tc.regionList = new Region(0, 0, c.sourceText.size());\n\t\t\tremaining = c.sourceText.size();\n\t\t\tpush(c);\n\t\t\treturn this;\n\t\t}\n\n\t\tRevCommit commit = revPool.parseCommit(id);\n\t\tif (!find(commit, resultPath))\n\t\t\treturn this;\n\n\t\tCandidate c = new Candidate(commit, resultPath);\n\t\tc.sourceBlob = idBuf.toObjectId();\n\t\tc.loadText(reader);\n\t\tc.regionList = new Region(0, 0, c.sourceText.size());\n\t\tremaining = c.sourceText.size();\n\t\tpush(c);\n\t\treturn this;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public int hashCode() {\n      int result = hashCode;\n      if (result == 0) {\n        result = mac != null ? mac.hashCode() : 0;\n        result = result * 37 + (location != null ? location.hashCode() : 0);\n        result = result * 37 + (channel != null ? channel.hashCode() : 0);\n        hashCode = result;\n      }\n      return result;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public Kernel(int width, int height, float data[]) {\n        this.width  = width;\n        this.height = height;\n        this.xOrigin  = (width-1)>>1;\n        this.yOrigin  = (height-1)>>1;\n        int len = width*height;\n        if (data.length < len) {\n            throw new IllegalArgumentException(\"Data array too small \"+\n                                               \"(is \"+data.length+\n                                               \" and should be \"+len);\n        }\n        this.data = new float[len];\n        System.arraycopy(data, 0, this.data, 0, len);\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n  public void testQueryOrdered()\n  throws Exception {\n    final String query = \"SELECT ?s ?p WHERE { ?s ?p ?o . } ORDER BY ?s ?p\";\n\n    PostMethod post = new PostMethod(aseBaseUrl);\n    post.addParameter(Protocol.QUERY_PARAM_NAME, URLEncoder.encode(query, \"UTF-8\"));\n\n    final int code = client.executeMethod(post);\n    if (code == HttpStatus.SC_OK) {\n      final List<Map<String, Object>> expected = new ArrayList<Map<String,Object>>();\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/a\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/firstName\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/a\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/like\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/a\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/type\"))\n      ));\n\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/b\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/firstName\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/b\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/firstName\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/b\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/think_at\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/b\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/type\"))\n      ));\n\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/c\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/firstName\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/c\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/test\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/c\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/type\"))\n      ));\n\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/d\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/fail\"))\n      ));\n\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/e\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/type\"))\n      ));\n\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/f\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/do\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/f\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/type\"))\n      ));\n\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/g\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/test\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/g\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/type\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/g\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/type\"))\n      ));\n      assertResults(post, expected, true);\n    } else {\n      fail(\"code=\" + code);\n    }\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate OnClickListener getClickListener(final CardStack cardStack,\n            final RelativeLayout container, final int index) {\n        return new OnClickListener() {\n\n            @Override\n            public void onClick(View v) {\n\n                View[] views = new View[container.getChildCount()];\n\n                for (int i = 0; i < views.length; i++) {\n                    views[i] = container.getChildAt(i);\n\n                }\n\n                int last = views.length - 1;\n\n                if (index != last) {\n\n                    if (index == 0) {\n                        onClickFirstCard(cardStack, container, index, views);\n                    } else if (index < last) {\n                        onClickOtherCard(cardStack, container, index, views,\n                                last);\n                    }\n\n                }\n\n            }\n\n            public void onClickFirstCard(final CardStack cardStack,\n                    final RelativeLayout frameLayout, final int index, View[] views) {\n                \n            }\n\n            public void onClickOtherCard(final CardStack cardStack,\n                    final RelativeLayout frameLayout, final int index,\n                    View[] views, int last) {\n                \n            }\n        };\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static String getAsciiString(byte[] data, int offset, int length) {\n\t\tif (data == null) {\n\t\t\tthrow new IllegalArgumentException(\"Parameter may not be null\");\n\t\t}\n\t\ttry {\n\t\t\treturn new String(data, offset, length, ASCII_CHARSET);\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t}\n\t\tthrow new RuntimeException(\"LGame requires ASCII support\");\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void printMethods(){\n        MethodData[] methods = cls.getMethods();\n        for(int m = 0; m < methods.length; m++){\n            String[] accflags = methods[m].getAccess();\n            if(checkAccess(accflags)){\n                if(!(env. showLineAndLocal || env.showDisassembled || env.showVerbose\n                     ||  env.showInternalSigs || env.showallAttr)){\n                    out.print(\"    \");\n                }\n                printMethodSignature(methods[m], accflags);\n                printExceptions(methods[m]);\n                out.println(\";\");\n\n                if (env.showInternalSigs){\n                    out.println(\"  Signature: \" + (methods[m].getInternalSig()));\n                }\n\n                if(env.showDisassembled && ! env.showallAttr) {\n                    printcodeSequence(methods[m]);\n                    printExceptionTable(methods[m]);\n                    out.println();\n                }\n\n                if (env.showLineAndLocal) {\n                    printLineNumTable(methods[m]);\n                    printLocVarTable(methods[m]);\n                    out.println();\n                }\n\n                if (env.showallAttr){\n                    printMethodAttributes(methods[m]);\n                }\n            }\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static void addShaped(RecipeDifficulty difficulty, ItemStack result, Object... recipe) {\n        if (difficulty != ALL && RecipeDifficulty.getDifficulty() != difficulty) {\n            return;\n        }\n\n        boolean isOre = false;\n\n        if (!isEnabled(result)) {\n            return;\n        }\n\n        for (int i = 3; i < recipe.length; i++) {\n            if (recipe[i] instanceof String) {\n                isOre = true;\n            }\n\n            if (!isEnabled(recipe[i])) {\n                return;\n            }\n        }\n\n        if (isOre) {\n            ResourceLocation location = getNameForRecipe(result);\n            ShapedOreRecipe shapedOreRecipe = new ShapedOreRecipe(location, result, recipe);\n            shapedOreRecipe.setRegistryName(location);\n            GameData.register_impl(shapedOreRecipe);\n        }\n        else {\n            ResourceLocation location = getNameForRecipe(result);\n            CraftingHelper.ShapedPrimer primer = CraftingHelper.parseShaped(recipe);\n            ShapedRecipes shapedRecipes = new ShapedRecipes(result.getItem().getRegistryName().toString(), primer.width, primer.height, primer.input, result);\n            shapedRecipes.setRegistryName(location);\n            GameData.register_impl(shapedRecipes);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public int hashCode() {\n      int result = hashCode;\n      if (result == 0) {\n        result = mac != null ? mac.hashCode() : 0;\n        result = result * 37 + (location != null ? location.hashCode() : 0);\n        result = result * 37 + (channel != null ? channel.hashCode() : 0);\n        hashCode = result;\n      }\n      return result;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprotected void onReply(long msgId, Buffer headerBuffer, Buffer bodyBuffer) {\n    TcpRequest request = requestMap.remove(msgId);\n    if (request == null) {\n      LOGGER.error(\"Unknown reply msgId {}, waiting count {}\", msgId, requestMap.size());\n      return;\n    }\n\n    request.onReply(headerBuffer, bodyBuffer);\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void runScheduleJobToAction(List<JobPersistenceOld> jobDetails, Date now, SimpleDateFormat dfDate, Map<Long, JobPersistence> actionDetails, String currentDateStr){\n\t\tfor(JobPersistenceOld jobDetail : jobDetails){\n\t\t\tif(jobDetail.getScheduleType() != null && jobDetail.getScheduleType()==0){\n\t\t\t\ttry{\n\t\t\t\t\tString jobCronExpression = jobDetail.getCronExpression();\n\t\t\t\t\tString cronDate= dfDate.format(now);\n\t\t\t\t\tList<String> lTime = new ArrayList<String>();\n\t\t\t\t\tif(jobCronExpression != null && jobCronExpression.trim().length() > 0){\n\t\t\t\t\t\tboolean isCronExp = false;\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\tisCronExp = CronExpParser.Parser(jobCronExpression, cronDate, lTime);\n\t\t\t\t\t\t}catch(Exception ex){\n\t\t\t\t\t\t\tisCronExp = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!isCronExp) {\n\t\t\t\t\t\t\tlog.error(\"\u93c3\u72b3\u7876\u9422\u71b8\u579aCron\u741b\u3128\u63ea\u5bee\u5fe5\u7d30\u93c3\u30e6\u6e61,\" + cronDate + \";\u6d93\u5d87\ue0c1\u935a\u5823\ue749\u9352\u6a86ron\u741b\u3128\u63ea\u5bee\u5fe5\u7d30\" + jobCronExpression);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (int i = 0; i < lTime.size(); i++) {\n\t\t\t\t\t\t\tString actionDateStr = ZeusDateTool.StringToDateStr(lTime.get(i), \"yyyy-MM-dd HH:mm:ss\", \"yyyyMMddHHmm\");\n\t\t\t\t\t\t\tString actionCronExpr = ZeusDateTool.StringToDateStr(lTime.get(i), \"yyyy-MM-dd HH:mm:ss\", \"0 m H d M\") + \" ?\";\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tJobPersistence actionPer = new JobPersistence();\n\t\t\t\t\t\t\tactionPer.setId(Long.parseLong(actionDateStr)*1000000+jobDetail.getId());//update action id\n\t\t\t\t\t\t\tactionPer.setToJobId(jobDetail.getId());\n\t\t\t\t\t\t\tactionPer.setAuto(jobDetail.getAuto());\n\t\t\t\t\t\t\tactionPer.setConfigs(jobDetail.getConfigs());\n\t\t\t\t\t\t\tactionPer.setCronExpression(actionCronExpr);//update action cron expression\n\t\t\t\t\t\t\tactionPer.setCycle(jobDetail.getCycle());\n\t\t\t\t\t\t\tString jobDependencies = jobDetail.getDependencies();\n\t\t\t\t\t\t\tactionPer.setDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setJobDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setDescr(jobDetail.getDescr());\n\t\t\t\t\t\t\tactionPer.setGmtCreate(jobDetail.getGmtCreate());\n\t\t\t\t\t\t\tactionPer.setGmtModified(new Date());\n\t\t\t\t\t\t\tactionPer.setGroupId(jobDetail.getGroupId());\n\t\t\t\t\t\t\tactionPer.setHistoryId(jobDetail.getHistoryId());\n\t\t\t\t\t\t\tactionPer.setHost(jobDetail.getHost());\n\t\t\t\t\t\t\tactionPer.setHostGroupId(jobDetail.getHostGroupId());\n\t\t\t\t\t\t\tactionPer.setLastEndTime(jobDetail.getLastEndTime());\n\t\t\t\t\t\t\tactionPer.setLastResult(jobDetail.getLastResult());\n\t\t\t\t\t\t\tactionPer.setName(jobDetail.getName());\n\t\t\t\t\t\t\tactionPer.setOffset(jobDetail.getOffset());\n\t\t\t\t\t\t\tactionPer.setOwner(jobDetail.getOwner());\n\t\t\t\t\t\t\tactionPer.setPostProcessers(jobDetail.getPostProcessers());\n\t\t\t\t\t\t\tactionPer.setPreProcessers(jobDetail.getPreProcessers());\n\t\t\t\t\t\t\tactionPer.setReadyDependency(jobDetail.getReadyDependency());\n\t\t\t\t\t\t\tactionPer.setResources(jobDetail.getResources());\n\t\t\t\t\t\t\tactionPer.setRunType(jobDetail.getRunType());\n\t\t\t\t\t\t\tactionPer.setScheduleType(jobDetail.getScheduleType());\n\n\t\t\t\t\t\t\tactionPer.setStartTime(jobDetail.getStartTime());\n\t\t\t\t\t\t\tactionPer.setStartTimestamp(jobDetail.getStartTimestamp());\n\t\t\t\t\t\t\tactionPer.setStatisStartTime(jobDetail.getStatisStartTime());\n\t\t\t\t\t\t\tactionPer.setStatisEndTime(jobDetail.getStatisEndTime());\n\t\t\t\t\t\t\tactionPer.setStatus(jobDetail.getStatus());\n\t\t\t\t\t\t\tactionPer.setTimezone(jobDetail.getTimezone());\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tlog.info(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59dfJobId: \" + jobDetail.getId()+\";  ActionId: \" +actionPer.getId());\n\t\t\t\t\t\t\t\t\tcontext.getGroupManager().saveJob(actionPer);\n\t\t\t\t\t\t\t\t\tlog.info(\"success\");\n\t\t\t\t\t\t\t\t\tactionDetails.put(actionPer.getId(),actionPer);\n\t\t\t\t\t\t\t} catch (ZeusException e) {\n\t\t\t\t\t\t\t\tlog.error(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59dfJobId:\" + jobDetail.getId() + \" \u9422\u71b8\u579aAction\" +actionPer.getId() + \"\u6fb6\u8fab\u89e6\", e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}catch(Exception ex){\n\t\t\t\t\tlog.error(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59df\u9422\u71b8\u579aAction\u6fb6\u8fab\u89e6\",ex);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public Value<Integer> run(Integer x, Integer y, Integer z) {\n      DiffJob diffJob = new DiffJob();\n      MultJob multJob = new MultJob();\n      FutureValue<Integer> r = futureCall(diffJob, immediate(x), immediate(y));\n      FutureValue<Integer> s = futureCall(diffJob, immediate(x), immediate(z));\n      FutureValue<Integer> t = futureCall(multJob, r, s);\n      FutureValue<Integer> u = futureCall(diffJob, t, immediate(2));\n      return u;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public void handlePatch(final PatchParam patchParam) throws Throwable {\n        {\n            Class<?> cls = null;\n            try {\n                cls= patchParam.context.getClass().getClassLoader().loadClass(\"com.taobao.dexposed.TestFragment\");\n            } catch (Exception e) {\n                e.printStackTrace();\n                return;\n            }\n\n            \n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic void registerResources(Context context) {\n        if (sInitialized) {\n            return;\n        }\n\n        AwResource.setResources(context.getResources());\n\n\n        AwResource.setErrorPageResources(R.raw.loaderror, R.raw.nodomain);\n        AwResource.setDefaultTextEncoding(R.string.default_encoding);\n\n        sInitialized = true;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static List<Picture> getPictures() {\n        final List<Picture> pictures = new ArrayList<Picture>();\n        pictures.add(new Picture(\"https://i.imgur.com/8LOZwbE.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/EfLvmlO.png\", \"Cheetahs\"));\n        pictures.add(new Picture(\"https://i.imgur.com/VfH1siL.png\", \"Cloud Break\"));\n        pictures.add(new Picture(\"https://i.imgur.com/rmU8E53.png\", \"Lighthouse\"));\n        pictures.add(new Picture(\"https://i.imgur.com/qZCCdFW.png\", \"Uluru\"));\n        pictures.add(new Picture(\"https://i.imgur.com/zkt4IEl.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/xL9BSy3.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/lYQPhnY.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/5tM1vxy.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/lUbn6U6.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/fk4l1QY.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/wk49eIK.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/qwz8VUx.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/XR8Dc2D.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/lGBUYjK.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/8AgQWCh.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/YMwlUy3.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/MyWKsZf.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/gTghrcj.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/ePH4nP4.png\", \"National photo contest\"));\n        pictures.add(new Picture(\"https://i.imgur.com/KVJuX7O.png\", \"National photo contest\"));\n        return pictures;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker, boolean showDirection) {\n        this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_optimize_item_click);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n\n        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);\n        fab.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\n                        .setAction(\"Action\", null).show();\n            }\n        });\n        mRecyclerView = (RecyclerView) findViewById(R.id.list);\n        GridLayoutManager layoutManager = new GridLayoutManager(this,4);\n        mRecyclerView.setLayoutManager(layoutManager);\n        initAdapter();\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate Path computeBootClassPath() {\n        bootClassPathRtJar = null;\n        String optionValue;\n        Path path = new Path();\n\n        path.addFiles(options.get(XBOOTCLASSPATH_PREPEND));\n\n        if ((optionValue = options.get(ENDORSEDDIRS)) != null)\n            path.addDirectories(optionValue);\n        else\n            path.addDirectories(System.getProperty(\"java.endorsed.dirs\"), false);\n\n        if ((optionValue = options.get(BOOTCLASSPATH)) != null) {\n            path.addFiles(optionValue);\n        } else {\n            String files = System.getProperty(\"sun.boot.class.path\");\n            path.addFiles(files, false);\n            File rt_jar = new File(\"rt.jar\");\n            for (File file : getPathEntries(files)) {\n                if (new File(file.getName()).equals(rt_jar))\n                    bootClassPathRtJar = file;\n            }\n        }\n\n        path.addFiles(options.get(XBOOTCLASSPATH_APPEND));\n\n        if ((optionValue = options.get(EXTDIRS)) != null)\n            path.addDirectories(optionValue);\n        else\n            path.addDirectories(System.getProperty(\"java.ext.dirs\"), false);\n\n        return path;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\n    public static Bitmap fastblur(Context context, Bitmap sentBitmap, float radius) {\n\n        if (Build.VERSION.SDK_INT > 16 &&\n                    (!Build.MODEL.contains(\"google_sdk\")\n                             && !Build.MODEL.contains(\"Emulator\")\n                             && !Build.MODEL.contains(\"Android SDK\")\n                             && !Build.FINGERPRINT.contains(\"vbox86p\"))) {\n            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n            final RenderScript rs = RenderScript.create(context);\n            final Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n                                                                 Allocation.USAGE_SCRIPT);\n            final Allocation output = Allocation.createTyped(rs, input.getType());\n            final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n            script.setRadius(radius );\n            script.setInput(input);\n            script.forEach(output);\n            output.copyTo(bitmap);\n            return bitmap;\n        }\n\n        radius *= 0.1;\n        return blurfast(sentBitmap, (int) radius);\n\n\n\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void visitLdcInsn(Object cst) {\n        if (mv != null) {\n            mv.visitLdcInsn(cst);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static <A extends Closeable> A api(Class<A> apitype, final String provider, final String credId, final Properties overrides) {\n        Thread.currentThread().setContextClassLoader(Apis.class.getClassLoader());\n        return CredentialsHelper.setCredentials(ContextBuilder.newBuilder(provider), credId)\n            .overrides(overrides).modules(MODULES).buildApi(typeToken(apitype));\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void visitLdcInsn(Object cst) {\n        if (mv != null) {\n            mv.visitLdcInsn(cst);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public void process(JCas cas) throws AnalysisEngineProcessException {\n      if (this.isTraining()) {\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 1234));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 1000));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 900));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 1500));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 2000));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 1235));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 1001));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 901));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 1501));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 2001));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 1502));\n        this.dataWriter.write(createInstance(\"A\", \"hello\", 2003));\n\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 10));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 8));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 60));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 80));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 4));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 11));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 5));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 61));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 81));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 7));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 82));\n        this.dataWriter.write(createInstance(\"B\", \"hello\", 3));\n\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 1));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 8));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 60));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 81));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 4));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 11));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 7));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 61));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 82));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 2));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 83));\n        this.dataWriter.write(createInstance(\"C\", \"goodbye\", 1));\n      } else {\n        String classification = this.classifier.classify(createInstance(\"\", \"hello\", 1000).getFeatures());\n        assertEquals(\"A\", classification);\n        classification = this.classifier.classify(createInstance(\"\", \"hello\", 1).getFeatures());\n        assertEquals(\"A\", classification);\n        classification = this.classifier.classify(createInstance(\"\", \"goodbye\", 1).getFeatures());\n        assertEquals(\"C\", classification);\n      }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic JavaFileObject getFileObject(RelativeDirectory subdirectory, String file) {\n        RelativeFile fullZipFileName = new RelativeFile(subdirectory, file);\n        ZipFileIndex.Entry entry = zfIndex.getZipIndexEntry(fullZipFileName);\n        JavaFileObject ret = new ZipFileIndexFileObject(fileManager, zfIndex, entry, zfIndex.getZipFile());\n        return ret;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintWriter writer, boolean suppressLogin, char eolMarker, boolean showDirection)\n    {\n        __writer = writer;\n        __nologin = suppressLogin;\n        __eolMarker = eolMarker;\n        __directionMarker = showDirection;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public final boolean isConstant() {\n    if (this.getVariableDecls().length > 0) return false;\n\n    this.levelCheck(1) ;\n      \n    OpDefNode[] opDefs = this.getOpDefs();\n    for (int i = 0; i < opDefs.length; i++) {\n      if (opDefs[i].getKind() != ModuleInstanceKind &&\n          opDefs[i].getBody().getLevel() != ConstantLevel)\n        return false;\n    }\n\n    for (int i = 0; i < theoremVec.size(); i++) {\n      if (((TheoremNode)(theoremVec.elementAt(i))).getLevel() != ConstantLevel) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\tChannel channel = ctx.channel();\n\t\t\tchannels.remove(channel);\n\t\t\tNode client = channel.attr(STATE).get();\n\t\t\tuserLinkList.delUser(client);\n\t\t\tcombobox.removeItem(client.username);\n\t\t\tsuper.channelUnregistered(ctx);\n\t\t\tbroadcasts(new LoginOutMessage(client.username));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic Class<?> toClass() {\n            switch (this) {\n            case Boolean:\n                return boolean.class;\n            case String:\n                return CharSequence.class;\n            case Number:\n                return double.class;\n            case Number_int:\n                return int.class;\n            case Number_uint:\n                return long.class;\n            case Object:\n                return ScriptObject.class;\n            case Reference:\n                return Reference.class;\n            case Null:\n                return Null.class;\n            case Undefined:\n                return Undefined.class;\n            case Any:\n                return Object.class;\n            case Empty:\n            default:\n                throw new AssertionError();\n            }\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic TabbedPane(String title, Displayable[] tabs, Image[] tabIcons, boolean useTabTitle, Style style)\n\t{\n\t\tsuper( title, false, style );\n\t\tthis.isUseTabTitle = useTabTitle;\n\t\tthis.tabDisplayables = new ArrayList();\n\t\tthis.tabIconsContainer = new Container(true);\n\t\tthis.tabIconsContainer.screen = this;\n\t\tif (tabs != null) {\n\t\t\tfor (int i = 0; i < tabs.length; i++)\n\t\t\t{\n\t\t\t\tDisplayable screen = tabs[i];\n\t\t\t\tImage icon = tabIcons[i];\n\t\t\t\taddTab( screen, icon );\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    protected void initEnablementBehaviours( List<EnablementBehaviour> helper ) {\n        helper.add(new WithinLegalLayerBoundsBehaviour());\n        helper.add(new ValidToolDetectionActivator(new Class[]{Geometry.class, LineString.class,\n                MultiLineString.class, Polygon.class, MultiPolygon.class, Point.class,\n                MultiPoint.class}));\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + order.m_lmtPrice +\n        \" auxPrice=\" + order.m_auxPrice +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + order.m_minQty +\n        \" percentOffset=\" + order.m_percentOffset +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + order.m_nbboPriceCap +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + order.m_startingPrice +\n        \" stockRefPrice=\" + order.m_stockRefPrice +\n        \" delta=\" + order.m_delta +\n        \" stockRangeLower=\" + order.m_stockRangeLower +\n        \" stockRangeUpper=\" + order.m_stockRangeUpper +\n        \" volatility=\" + order.m_volatility +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + order.m_trailStopPrice +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + order.m_basisPoints;\n        \t\tmsg += \" basisPointsType=\" + order.m_basisPointsType;\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate Set<Integer> initStatement(Statement stat) {\n\n    HashMap<Integer, Integer> mapCount = new HashMap<>();\n\n    List<VarExprent> condlst;\n\n    if (stat.getExprents() == null) {\n\n      List<Integer> childVars = new ArrayList<>();\n      List<Exprent> currVars = new ArrayList<>();\n\n      for (Object obj : stat.getSequentialObjects()) {\n        if (obj instanceof Statement) {\n          Statement st = (Statement)obj;\n          childVars.addAll(initStatement(st));\n\n          if (st.type == DoStatement.TYPE_DO) {\n            DoStatement dost = (DoStatement)st;\n            if (dost.getLooptype() != DoStatement.LOOP_FOR &&\n                dost.getLooptype() != DoStatement.LOOP_DO) {\n              currVars.add(dost.getConditionExprent());\n            }\n          }\n          else if (st.type == DoStatement.TYPE_CATCHALL) {\n            CatchAllStatement fin = (CatchAllStatement)st;\n            if (fin.isFinally() && fin.getMonitor() != null) {\n              currVars.add(fin.getMonitor());\n            }\n          }\n        }\n        else if (obj instanceof Exprent) {\n          currVars.add((Exprent)obj);\n        }\n      }\n\n      for (Integer index : childVars) {\n        Integer count = mapCount.get(index);\n        if (count == null) {\n          count = 0;\n        }\n        mapCount.put(index, count + 1);\n      }\n\n      condlst = getAllVars(currVars);\n    }\n    else {\n      condlst = getAllVars(stat.getExprents());\n    }\n\n    for (VarExprent var : condlst) {\n      mapCount.put(var.getIndex(), 2);\n    }\n\n\n    HashSet<Integer> set = new HashSet<>(mapCount.keySet());\n\n    for (Entry<Integer, Integer> en : mapCount.entrySet()) {\n      if (en.getValue().intValue() > 1) {\n        mapVarDefStatements.put(en.getKey(), stat);\n      }\n    }\n\n    mapStatementVars.put(stat.id, set);\n\n    return set;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static float convertDpToPixel(float dp, Context context) {\n        Resources resources = context.getResources();\n        DisplayMetrics metrics = resources.getDisplayMetrics();\n        float px = dp * ((float) metrics.densityDpi / DisplayMetrics.DENSITY_DEFAULT);\n        return px;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic WebSocketServer(InetSocketAddress address, int decodercount, List<Draft> drafts, Collection<WebSocket> connectionscontainer) {\n        if (address == null || decodercount < 1 || connectionscontainer == null) {\n            throw new IllegalArgumentException(\"address and connectionscontainer must not be null and you need at least 1 decoder\");\n        }\n\n        if (drafts == null)\n            this.drafts = Collections.emptyList();\n        else\n            this.drafts = drafts;\n\n        this.address = address;\n        this.connections = connectionscontainer;\n\n        iqueue = new LinkedList<WebSocketImpl>();\n\n        decoders = new ArrayList<WebSocketWorker>(decodercount);\n        buffers = new LinkedBlockingQueue<ByteBuffer>();\n        for (int i = 0; i < decodercount; i++) {\n            WebSocketWorker ex = new WebSocketWorker();\n            decoders.add(ex);\n            ex.start();\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void setColumnWidth(int columnIndex, int width) {\n        _sheet.setColumnWidth(columnIndex, width);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprotected void onReply(long msgId, Buffer headerBuffer, Buffer bodyBuffer) {\n    TcpRequest request = requestMap.remove(msgId);\n    if (request == null) {\n      LOGGER.error(\"Unknown reply msgId {}, waiting count {}\", msgId, requestMap.size());\n      return;\n    }\n\n    request.onReply(headerBuffer, bodyBuffer);\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic SmoothStreamingRendererBuilder(Context context, String userAgent, String url,\n      MediaDrmCallback drmCallback) {\n    this.context = context;\n    this.userAgent = userAgent;\n    this.url = Util.toLowerInvariant(url).endsWith(\"/manifest\") ? url : url + \"/Manifest\";\n    this.drmCallback = drmCallback;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Test\n    public void testExamples() {\n        double[][] matrixData = { {1d,2d,3d}, {2d,5d,3d}};\n        RealMatrix m = new Array2DRowRealMatrix(matrixData);\n        double[][] matrixData2 = { {1d,2d}, {2d,5d}, {1d, 7d}};\n        RealMatrix n = new Array2DRowRealMatrix(matrixData2);\n        RealMatrix p = m.multiply(n);\n        Assert.assertEquals(2, p.getRowDimension());\n        Assert.assertEquals(2, p.getColumnDimension());\n        RealMatrix pInverse = new LUDecomposition(p).getSolver().getInverse();\n        Assert.assertEquals(2, pInverse.getRowDimension());\n        Assert.assertEquals(2, pInverse.getColumnDimension());\n\n        double[][] coefficientsData = {{2, 3, -2}, {-1, 7, 6}, {4, -3, -5}};\n        RealMatrix coefficients = new Array2DRowRealMatrix(coefficientsData);\n        RealVector constants = new ArrayRealVector(new double[]{1, -2, 1}, false);\n        RealVector solution = new LUDecomposition(coefficients).getSolver().solve(constants);\n        final double cst0 = constants.getEntry(0);\n        final double cst1 = constants.getEntry(1);\n        final double cst2 = constants.getEntry(2);\n        final double sol0 = solution.getEntry(0);\n        final double sol1 = solution.getEntry(1);\n        final double sol2 = solution.getEntry(2);\n        Assert.assertEquals(2 * sol0 + 3 * sol1 -2 * sol2, cst0, 1E-12);\n        Assert.assertEquals(-1 * sol0 + 7 * sol1 + 6 * sol2, cst1, 1E-12);\n        Assert.assertEquals(4 * sol0 - 3 * sol1 -5 * sol2, cst2, 1E-12);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\n    public static Bitmap fastblur(Context context, Bitmap sentBitmap, float radius) {\n\n        if (Build.VERSION.SDK_INT > 16 &&\n                    (!Build.MODEL.contains(\"google_sdk\")\n                             && !Build.MODEL.contains(\"Emulator\")\n                             && !Build.MODEL.contains(\"Android SDK\")\n                             && !Build.FINGERPRINT.contains(\"vbox86p\"))) {\n            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n            final RenderScript rs = RenderScript.create(context);\n            final Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n                                                                 Allocation.USAGE_SCRIPT);\n            final Allocation output = Allocation.createTyped(rs, input.getType());\n            final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n            script.setRadius(radius );\n            script.setInput(input);\n            script.forEach(output);\n            output.copyTo(bitmap);\n            return bitmap;\n        }\n\n        radius *= 0.1;\n        return blurfast(sentBitmap, (int) radius);\n\n\n\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void quickSendFail( String clazz, Map<String,byte[]> parameters, byte[] tag )\n\t{\n\t\tInteractionClassHandle classHandle = null;\n\t\tParameterHandleValueMap map = null;\n\t\t\n\t\ttry\n\t\t{\n\t\t\tclassHandle = rtiamb.getInteractionClassHandle( clazz );\n\t\t\t\n\t\t\tmap = TypeFactory.newParameterMap();\n\t\t\tif( parameters != null )\n\t\t\t{\n\t\t\t\tfor( String pName : parameters.keySet() )\n\t\t\t\t{\n\t\t\t\t\tmap.put( rtiamb.getParameterHandle(classHandle,pName), parameters.get(pName) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch( Exception e )\n\t\t{\n\t\t\tAssert.fail( \"Unexpected exception setting up quickSendFail: \" + e.getMessage(), e );\n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\trtiamb.sendInteraction( classHandle, map, tag );\n\t\t\tAssert.fail( \"Was expecting the sending of interaction [\" + clazz + \"] to fail\" );\n\t\t}\n\t\tcatch( Exception e )\n\t\t{\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, ClassTransformer transformer, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            MethodPair methodPair = transformer.methods.get(\"()V\" + method);\n            if (methodPair == null)\n            {\n                continue;\n            }\n            lineNumber = InvokerGenerator.printMethod(mv, clazz, method, Modifier.isStatic(methodPair.node.access), lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\tChannel channel = ctx.channel();\n\t\t\tchannels.remove(channel);\n\t\t\tNode client = channel.attr(STATE).get();\n\t\t\tuserLinkList.delUser(client);\n\t\t\tcombobox.removeItem(client.username);\n\t\t\tsuper.channelUnregistered(ctx);\n\t\t\tbroadcasts(new LoginOutMessage(client.username));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void draw(float x,float y,float scale,Color filter) {\n\t\tinit();\n\t\tdraw(x,y,width*scale,height*scale,filter);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@BeforeClass\n    public static void setUp(){\n    \tfinal Properties props = new Properties();\n    \ttry {\n    \tprops.load(new FileInputStream(PATH_TO_TEST_PROPERTIES));\n    \t} catch (Exception e) {\n    \t\tlog.error(\"Error occured while reading mule.test.properties\", e);\n    \t}    \t\n    \tSystem.setProperty(\"sfdc.key\", props.getProperty(\"sfdc.key\"));\n    \tSystem.setProperty(\"sfdc.secret\", props.getProperty(\"sfdc.secret\"));\n    \tUSERNAME = props.getProperty(\"sfdc.user\");\n    \tPASSWORD = props.getProperty(\"sfdc.password\");\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void createInstances() {\n        asadmin(\"create-node-ssh\", NODE_HOST_OPTION, LOCALHOST, FORCE_OPTION,\n                TRUE, LB_NODE1);\n        asadmin(\"create-node-ssh\", NODE_HOST_OPTION, LOCALHOST, FORCE_OPTION,\n                TRUE, LB_NODE2);\n\n        asadmin(\"create-cluster\", CLUSTER);\n\n        asadmin(\"create-instance\", CLUSTER_OPTION, CLUSTER, NODE_OPTION,\n                LB_NODE1, INSTANCE1);\n        asadmin(\"create-instance\", CLUSTER_OPTION, CLUSTER, NODE_OPTION,\n                LB_NODE2, INSTANCE2);\n        asadmin(\"create-instance\", CLUSTER_OPTION, CLUSTER, NODE_OPTION,\n                LB_NODE1, INSTANCE3);\n\n        asadmin(\"create-cluster\", CLUSTER2);\n\n        asadmin(\"create-instance\", CLUSTER_OPTION, CLUSTER2, NODE_OPTION,\n                LB_NODE1, INSTANCE4);\n        asadmin(\"create-instance\", CLUSTER_OPTION, CLUSTER2, NODE_OPTION,\n                LB_NODE2, INSTANCE5);\n\n        asadmin(\"create-instance\", NODE_OPTION, LB_NODE1, STANDALONE_INSTANCE1);\n        asadmin(\"create-instance\", NODE_OPTION, LB_NODE2, STANDALONE_INSTANCE2);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public void removePropertyChangeListener(PropertyChangeListener listener) {\n            if (accessibleAWTComponentHandler != null) {\n                Component.this.removeComponentListener(accessibleAWTComponentHandler);\n                accessibleAWTComponentHandler = null;\n            }\n            if (accessibleAWTFocusHandler != null) {\n                Component.this.removeFocusListener(accessibleAWTFocusHandler);\n                accessibleAWTFocusHandler = null;\n            }\n            super.removePropertyChangeListener(listener);\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public BeanConnector(Class<E> beanClass) {\n        final Method[] methods = beanClass.getMethods();\n        for (int m = 0; m < methods.length; m++) {\n            if(methods[m].getParameterTypes().length != 1) continue;\n            if(methods[m].getParameterTypes()[0] != PropertyChangeListener.class) continue;\n            if(methods[m].getName().startsWith(\"add\")) this.addListenerMethod = methods[m];\n            if(methods[m].getName().startsWith(\"remove\")) this.removeListenerMethod = methods[m];\n        }\n\n        if (this.addListenerMethod == null || this.removeListenerMethod == null)\n            throw new IllegalArgumentException(\"Couldn't find listener methods for \" + beanClass.getName());\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public long testBlock(String filename, int blockSize) throws IOException {\n    LOGGER.info(\"Searching for divider in blocks of {}...\", blockSize);\n    long start = System.currentTimeMillis();\n\n    RandomAccessInputStream in = new RandomAccessInputStream(filename);\n    long offset = in.findString(blockSize, TAG).length();\n    in.close();\n\n    long end = System.currentTimeMillis();\n    LOGGER.info(\"Search result: {} -- in {} ms\", offset, end - start);\n    return offset;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static void timestampValueInsertSelect(Connection conn, TimeUnit databasePrecision, final String nativeType)\n            throws Exception {\n        assertNotNull(conn);\n\n        final Statement statement = conn.createStatement();\n        try {\n            statement.execute(\"DROP TABLE test_table\");\n        } catch (SQLException e) {\n        } finally {\n            FileHelper.safeClose(statement);\n        }\n\n        assertFalse(conn.isReadOnly());\n\n        JdbcDataContext dc = new JdbcDataContext(conn);\n        final Schema schema = dc.getDefaultSchema();\n\n        final Timestamp timestamp1;\n        switch (databasePrecision) {\n        case SECONDS:\n            timestamp1 = Timestamp.valueOf(\"2015-10-16 16:33:33\");\n            break;\n        case MILLISECONDS:\n            timestamp1 = Timestamp.valueOf(\"2015-10-16 16:33:33.456\");\n            break;\n        case MICROSECONDS:\n            timestamp1 = Timestamp.valueOf(\"2015-10-16 16:33:33.456001\");\n            break;\n        case NANOSECONDS:\n            timestamp1 = Timestamp.valueOf(\"2015-10-16 16:33:33.456001234\");\n            break;\n        default:\n            throw new UnsupportedOperationException(\"Unsupported database precision: \" + databasePrecision);\n        }\n\n        final Timestamp timestamp2;\n        switch (databasePrecision) {\n        case SECONDS:\n            timestamp2 = Timestamp.valueOf(\"2015-10-16 16:33:34\");\n            break;\n        case MILLISECONDS:\n            timestamp2 = Timestamp.valueOf(\"2015-10-16 16:33:34.683\");\n            break;\n        case MICROSECONDS:\n            timestamp2 = Timestamp.valueOf(\"2015-10-16 16:33:34.683005\");\n            break;\n        case NANOSECONDS:\n            timestamp2 = Timestamp.valueOf(\"2015-10-16 16:33:34.683005678\");\n            break;\n        default:\n            throw new UnsupportedOperationException(\"Unsupported database precision: \" + databasePrecision);\n        }\n\n        dc.executeUpdate(new UpdateScript() {\n            @Override\n            public void run(UpdateCallback cb) {\n                TableCreationBuilder tableBuilder = cb.createTable(schema, \"test_table\");\n                tableBuilder.withColumn(\"id\").ofType(ColumnType.INTEGER);\n                tableBuilder.withColumn(\"insertiontime\").ofType(ColumnType.TIMESTAMP);\n                if (nativeType == null) {\n                    tableBuilder.withColumn(\"insertiontime\").ofType(ColumnType.TIMESTAMP);\n                } else {\n                    tableBuilder.withColumn(\"insertiontime\").ofType(ColumnType.TIMESTAMP).ofNativeType(nativeType);\n                }\n                Table table = tableBuilder.execute();\n\n                cb.insertInto(table).value(\"id\", 1).value(\"insertiontime\", timestamp1).execute();\n                cb.insertInto(table).value(\"id\", 2).value(\"insertiontime\", timestamp2).execute();\n            }\n        });\n\n        DataSet ds = dc.query().from(\"test_table\").select(\"id\").and(\"insertiontime\").execute();\n        assertTrue(ds.next());\n\n        switch (databasePrecision) {\n        case SECONDS:\n            assertEquals(\"Row[values=[1, 2015-10-16 16:33:33]]\", ds.getRow().toString());\n            break;\n        case MILLISECONDS:\n            assertEquals(\"Row[values=[1, 2015-10-16 16:33:33.456]]\", ds.getRow().toString());\n            break;\n        case MICROSECONDS:\n            assertEquals(\"Row[values=[1, 2015-10-16 16:33:33.456001]]\", ds.getRow().toString());\n            break;\n        case NANOSECONDS:\n            assertEquals(\"Row[values=[1, 2015-10-16 16:33:33.456001234]]\", ds.getRow().toString());\n            break;\n        default:\n            throw new UnsupportedOperationException(\"Unsupported database precision: \" + databasePrecision);\n        }\n        assertTrue(ds.getRow().getValue(0) instanceof Number);\n        assertTrue(ds.next());\n\n        switch (databasePrecision) {\n        case SECONDS:\n            assertEquals(\"Row[values=[2, 2015-10-16 16:33:34]]\", ds.getRow().toString());\n            break;\n        case MILLISECONDS:\n            assertEquals(\"Row[values=[2, 2015-10-16 16:33:34.683]]\", ds.getRow().toString());\n            break;\n        case MICROSECONDS:\n            assertEquals(\"Row[values=[2, 2015-10-16 16:33:34.683005]]\", ds.getRow().toString());\n            break;\n        case NANOSECONDS:\n            assertEquals(\"Row[values=[2, 2015-10-16 16:33:34.683005678]]\", ds.getRow().toString());\n            break;\n        default:\n            throw new UnsupportedOperationException(\"Unsupported database precision: \" + databasePrecision);\n        }\n        assertFalse(ds.next());\n        ds.close();\n\n        if (databasePrecision != TimeUnit.SECONDS) {\n            Query query = dc.query().from(\"test_table\").select(\"id\").where(\"insertiontime\").lessThan(timestamp2)\n                    .toQuery();\n            try {\n                ds = dc.executeQuery(query);\n            } catch (Exception e) {\n                System.out.println(\"Failing query was: \" + dc.getQueryRewriter().rewriteQuery(query));\n                throw e;\n            }\n            assertTrue(ds.next());\n            assertEquals(\"Row[values=[1]]\", ds.getRow().toString());\n            assertFalse(ds.next());\n            ds.close();\n\n            ds = dc.query().from(\"test_table\").select(\"id\").where(\"insertiontime\").greaterThan(timestamp1).execute();\n            assertTrue(ds.next());\n            assertEquals(\"Row[values=[2]]\", ds.getRow().toString());\n            assertFalse(ds.next());\n            ds.close();\n\n            dc.executeUpdate(new UpdateScript() {\n                @Override\n                public void run(UpdateCallback callback) {\n                    callback.deleteFrom(\"test_table\").where(\"insertiontime\").eq(timestamp1).execute();\n                }\n            });\n\n            ds = dc.query().from(\"test_table\").selectCount().execute();\n            assertTrue(ds.next());\n            assertEquals(\"Row[values=[1]]\", ds.getRow().toString());\n            assertFalse(ds.next());\n            ds.close();\n        }\n\n        dc.executeUpdate(new UpdateScript() {\n            @Override\n            public void run(UpdateCallback callback) {\n                callback.dropTable(\"test_table\").execute();\n            }\n        });\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic void addEntries(ZipOutputStream zos, File dir, String dbName, int old) throws Exception {\n\n\t\tString[] list = dir.list();\n\n\t\tfor (int i = 0; i < list.length; i++) {\n\n\t\t\tFile f = new File(dir, list[i]);\n\t\t\tif (f.isDirectory()) {\n\t\t\t\taddEntries(zos, f, dbName, old);\n\t\t\t} else {\n\t\t\t\taddFile(zos, f, dbName, old);\n\t\t\t}\n\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static Mat zeros(Size size, int type)\n    {\n\n        Mat retVal = new Mat(n_zeros(size.width, size.height, type));\n\n        return retVal;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void addShaped(IItemStack output, IIngredient[][] ingredients, IRecipeFunction function, boolean mirrored) {\n\t\tShapedRecipe recipe = new ShapedRecipe(output, ingredients, function, mirrored);\n\t\tIRecipe irecipe = RecipeConverter.convert(recipe);\n\t\tMineTweakerAPI.apply(new ActionAddRecipe(irecipe, recipe));\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public boolean feasible(Optimizable innerTable,\n                            OptimizablePredicateList predList,\n                            Optimizer optimizer,\n                            CostEstimate outerCost,\n                            boolean wasHinted) throws StandardException {\n        int[] hashKeyColumns;\n        ConglomerateDescriptor cd = null;\n        OptimizerTrace tracer=optimizer.tracer();\n\n\t\t\n        \n\n\t\t\n        if (innerTable.isTargetTable()) {\n            return false;\n        }\n\n\t\t\n        \n        if (innerTable.isBaseTable()) {\n\t\t\t\n            cd = innerTable.getCurrentAccessPath().getConglomerateDescriptor();\n        }\n\n\t\t\n        hashKeyColumns = findHashKeyColumns(innerTable,cd,predList);\n\n        if (SanityManager.DEBUG) {\n            if (hashKeyColumns == null) {\n                tracer.trace(OptimizerFlag.HJ_SKIP_NO_JOIN_COLUMNS,0,0,0.0,null);\n            }\n            else {\n                tracer.trace(OptimizerFlag.HJ_HASH_KEY_COLUMNS,0,0,0.0,hashKeyColumns);\n            }\n        }\n\n        return hashKeyColumns!=null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static List<ExtractedResult> extractSorted(String query, Collection<String> choices, Applicable func,\n                                                      int cutoff) {\n\n        Extractor extractor = new Extractor(cutoff);\n\n        return extractor.extractTop(query, choices, func);\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tthis.helper = new PremiumSettingsHelper(this);\n\t\tthis.billing = new BillingManager(this);\n\t\tthis.billing.setObserver(this);\n\t\t\n\t\tif (BillingManager.canPurchasePremium(this)) {\n\t\t\tPreference preference = findPreference(PremiumSettingsHelper.PREFERENCE_PURCHASE_PREMIUM);\n\t\t\thelper.preparePurchasePremium(preference, this.billing);\n\t\t} else {\n\t\t\tthis.removePremium();\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        int length = bytes.size();\n        char[] chars = new char[length]; // This is sized to avoid a realloc.\n        int outAt = 0;\n\n        for (int at = 0; length > 0; ) {\n            int v0 = bytes.getUnsignedByte(at);\n            char out;\n            switch (v0 >> 4) {\n                case 0x00: case 0x01: case 0x02: case 0x03:\n                case 0x04: case 0x05: case 0x06: case 0x07: {\n                    length--;\n                    if (v0 == 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    out = (char) v0;\n                    at++;\n                    break;\n                }\n                case 0x0c: case 0x0d: {\n                    length -= 2;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes.getUnsignedByte(at + 1);\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int value = ((v0 & 0x1f) << 6) | (v1 & 0x3f);\n                    if ((value != 0) && (value < 0x80)) {\n                        \n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    out = (char) value;\n                    at += 2;\n                    break;\n                }\n                case 0x0e: {\n                    length -= 3;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes.getUnsignedByte(at + 1);\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int v2 = bytes.getUnsignedByte(at + 2);\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    int value = ((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) |\n                        (v2 & 0x3f);\n                    if (value < 0x800) {\n                        \n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    out = (char) value;\n                    at += 3;\n                    break;\n                }\n                default: {\n                    return throwBadUtf8(v0, at);\n                }\n            }\n            chars[outAt] = out;\n            outAt++;\n        }\n\n        return new String(chars, 0, outAt);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {\n    EList<EObject> _contents = resource.getContents();\n    EObject _head = IterableExtensions.<EObject>head(_contents);\n    Model model = ((Model) _head);\n    String _packageName = model.getPackageName();\n    PreferencesBlock _preferencesBlock = model.getPreferencesBlock();\n    String _name = _preferencesBlock.getName();\n    String _pascalize = Strings.pascalize(_name);\n    String _concat = _pascalize.concat(\"Preferences\");\n    String _resolveFileName = Strings.resolveFileName(_packageName, _concat);\n    CharSequence _generate = this.mPreferencesGenerator.generate(model);\n    fsa.generateFile(_resolveFileName, _generate);\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate PasswordImpl(int origin,String rawPassword, String salt) {\n\t\tthis.rawPassword=rawPassword;\n\t\tthis.password=hash(rawPassword, salt);\n\t\tthis.salt=salt;\n\t\tthis.type=StringUtil.isEmpty(salt)?HASHED:HASHED_SALTED;\n\t\tthis.origin=origin;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public Collection createRenderableCollectionNS(String opName,\n                                                   ParameterBlock args) {\n        return createRenderableCollectionNS(opName, args, null);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic ImageData getImageData(BufferedImage bufferedImage){\n        DirectColorModel colorModel = (DirectColorModel) bufferedImage.getColorModel();\n        PaletteData palette = new PaletteData(colorModel.getRedMask(), colorModel.getGreenMask(), colorModel\n                .getBlueMask());\n        ImageData data = new ImageData(bufferedImage.getWidth(), bufferedImage.getHeight(), colorModel\n                .getPixelSize(), palette);\n        WritableRaster raster = bufferedImage.getRaster();\n        int[] pixelArray = new int[3];\n        for (int y = 0; y < data.height; y++) {\n            for (int x = 0; x < data.width; x++) {\n                raster.getPixel(x, y, pixelArray);\n                int pixel = palette.getPixel(new RGB(pixelArray[0], pixelArray[1], pixelArray[2]));\n                data.setPixel(x, y, pixel);\n            }\n        }\n        return data;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_optimize_item_click);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n\n        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);\n        fab.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\n                        .setAction(\"Action\", null).show();\n            }\n        });\n        mRecyclerView = (RecyclerView) findViewById(R.id.list);\n        GridLayoutManager layoutManager = new GridLayoutManager(this,4);\n        mRecyclerView.setLayoutManager(layoutManager);\n        initAdapter();\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Parameterized.Parameters\n    public static Collection<Object[]> combinations() {\n        return Arrays.asList(\n                new Object[]{(Function<Bytes, Wire>) bytes -> new BinaryWire(bytes, false, true, false, 128, \"binary\", false)},\n                new Object[]{WireType.TEXT},\n                new Object[]{WireType.BINARY},\n                new Object[]{WireType.BINARY_LIGHT},\n                new Object[]{WireType.FIELDLESS_BINARY},\n                new Object[]{WireType.JSON}\n        );\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate ExternalCarrierBillingInstrumentProto(Builder builder) {\n    this(builder.instrumentKey, builder.subscriberIdentifier, builder.accountType, builder.subscriberCurrency, builder.transactionLimit, builder.subscriberName, builder.address1, builder.address2, builder.city, builder.state, builder.postalCode, builder.country, builder.encryptedSubscriberInfo);\n    setBuilder(builder);\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n            CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n            this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n            BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n            this.updateNaturalParameterPrior(prior);\n\n            return learntBN;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker, boolean showDirection) {\n        this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic final void setText(char[] text, int start, int len) {\n        int oldlen = 0;\n\n        if (start < 0 || len < 0 || start + len > text.length) {\n            throw new IndexOutOfBoundsException(\"\" +start + len);\n        }\n\n        oldlen = mText.length();\n        sendBeforeTextChanged(mText, 0, oldlen, len);\n\n        if (mCharWrapper == null) {\n            mCharWrapper = new CharWrapper(text, start, len);\n        } else {\n            mCharWrapper.set(text, start, len);\n        }\n\n        setText(mCharWrapper, mBufferType, false, oldlen);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public Kernel(int width, int height, double factor, double data[]) {\n        this(width, height, (width - 1) / 2, (height - 1) / 2, factor, data);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static <A extends Closeable> A api(Class<A> apitype, final String provider, final String credId, final Properties overrides) {\n        Thread.currentThread().setContextClassLoader(Apis.class.getClassLoader());\n        return CredentialsHelper.setCredentials(ContextBuilder.newBuilder(provider), credId)\n            .overrides(overrides).modules(MODULES).buildApi(typeToken(apitype));\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(java.io.File file) throws org.apache.xmlbeans.XmlException, java.io.IOException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( file, type, null ); }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void addFooterView(View v, Object data, boolean isSelectable) {\n        FixedViewInfo info = new FixedViewInfo();\n        info.view = v;\n        info.data = data;\n        info.isSelectable = isSelectable;\n        mFooterViewInfos.add(info);\n\n        if (mDataSetObserver != null) {\n            mDataSetObserver.onChanged();\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public Value<Integer> run(Integer x, Integer y, Integer z) {\n      DiffJob diffJob = new DiffJob();\n      MultJob multJob = new MultJob();\n      FutureValue<Integer> r = futureCall(diffJob, immediate(x), immediate(y));\n      FutureValue<Integer> s = futureCall(diffJob, immediate(x), immediate(z));\n      FutureValue<Integer> t = futureCall(multJob, r, s);\n      FutureValue<Integer> u = futureCall(diffJob, t, immediate(2));\n      return u;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public void removePropertyChangeListener(PropertyChangeListener listener) {\n            if (accessibleAWTComponentHandler != null) {\n                Component.this.removeComponentListener(accessibleAWTComponentHandler);\n                accessibleAWTComponentHandler = null;\n            }\n            if (accessibleAWTFocusHandler != null) {\n                Component.this.removeFocusListener(accessibleAWTFocusHandler);\n                accessibleAWTFocusHandler = null;\n            }\n            super.removePropertyChangeListener(listener);\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n        this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n        BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n        this.updateNaturalParameterPrior(prior);\n\n        return learntBN;\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static long countLines(File file) {\n\t\tInputStream is;\n\t\ttry {\n\t\t\tis = new BufferedInputStream(new FileInputStream(file));\n\t\t\ttry {\n\t\t\t\ttry {\n\t\t\t\t\tbyte[] c = new byte[1024];\n\t\t\t\t\tlong count = 0;\n\t\t\t\t\tint readChars = 0;\n\t\t\t\t\tboolean empty = true;\n\t\t\t\t\twhile ((readChars = is.read(c)) != -1) {\n\t\t\t\t\t\tempty = false;\n\t\t\t\t\t\tfor (int i = 0; i < readChars; ++i) {\n\t\t\t\t\t\t\tif (c[i] == '\\n') {\n\t\t\t\t\t\t\t\t++count;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn count == 0 && !empty ? 1 : count;\n\t\t\t\t} finally {\n\t\t\t\t\tis.close();\n\t\t\t\t}\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn 0;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate URI api(String path) {\n        if (!path.toLowerCase().matches(\"https?://.*\")) {\n            path = urlJoin(this.context, path);\n        }\n        if (!path.contains(\"?\")) {\n            if (!path.endsWith(\"/stop\")) {\n                path = urlJoin(path, \"api/json\");\n            }\n        } else {\n            String[] components = path.split(\"\\\\?\", 2);\n            path = urlJoin(components[0], \"api/json\") + \"?\" + components[1];\n        }\n        URI requestUri = uri.resolve(\"/\").resolve(path);\n        return requestUri;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public void onNewFrame(HeadTransform headTransform) {\n    \t\n    \tfloat[] mtx = new float[16];\n        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);\n        surface.updateTexImage();\n        surface.getTransformMatrix(mtx); \n    \t\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic DocumentInfo(DocumentId id, String name, String path,\n            LocaleId sourceLocale, ContainerTranslationStatistics stats,\n            AuditInfo lastModified, Map<String, String> downloadExtensions,\n            AuditInfo lastTranslated) {\n        this.id = id;\n        this.name = name;\n        this.path = path;\n        this.stats = stats;\n        this.sourceLocale = sourceLocale;\n        this.lastModified = lastModified;\n        this.downloadExtensions = downloadExtensions;\n        this.lastTranslated = lastTranslated;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test public void\n    testBlock() throws Exception {\n        CompilationUnit cu = new CompilationUnit(\"AstTests.java\");\n\n        final PackageMemberClassDeclaration clazz = AstTest.createClass(cu);\n\n        List<Java.Statement> body = new ArrayList<Statement>();\n\n        Block sub = new Block(AstTest.getLocation());\n        sub.addStatement(AstTest.createVarDecl(\"x\", \"2.0\"));\n\n        body.add(sub);\n        body.add(\n            new ReturnStatement(\n                AstTest.getLocation(),\n                new Java.BinaryOperation(\n                    AstTest.getLocation(),\n                    AstTest.createVariableRef(\"x\"),\n                    \"*\",\n                    AstTest.createIntegerLiteral(\"3\")\n                )\n            )\n        );\n\n        AstTest.createMethod(clazz, body, AstTest.createDoubleType());\n\n        try {\n            AstTest.compileAndEval(cu);\n            Assert.fail(\"Block must limit the scope of variables in it\");\n        } catch (CompileException ex) {\n            Assert.assertTrue(ex.getMessage().endsWith(\"Expression \\\"x\\\" is not an rvalue\"));\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public boolean isTrue(String key) {\n        String val = get(key);\n        if(val != null) {\n            if(\"true\".equalsIgnoreCase(val)) return true;\n            if(\"1\".equalsIgnoreCase(val)) return true;\n        }\n        return false;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n\n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n\n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n\n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; }\n        return retVal;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public String getReplyString()\n    {\n        StringBuilder buffer = new StringBuilder(256);\n\n        for (String entry : _replyLines)\n        {\n            buffer.append(entry);\n            buffer.append(SocketClient.NETASCII_EOL);\n        }\n\n        return buffer.toString();\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void requestListViewData() {\n        mBllUser = new BusinessUser(this);\n        mListMap = new ArrayList<Map<String, Object>>();\n        mBllUser.userServerOrderList((position + 1) + \"\", pageNum + \"\");\n\n\n        mAdapterSeverNopay = new AdapterFrgServerOrderNopay(getActivity(), this, mListMap);\n        mListView.setAdapter(mAdapterSeverNopay);\n\n        mListView.setMode(PullToRefreshBase.Mode.PULL_FROM_END);\n        mListView.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener2<ListView>() {\n            @Override\n            public void onPullDownToRefresh(PullToRefreshBase<ListView> refreshView) {\n                LogUtils.e(\"onPullDownToRefresh=====================>\");\n            }\n\n            @Override\n            public void onPullUpToRefresh(PullToRefreshBase<ListView> refreshView) {\n                LogUtils.e(\"onPullUpToRefresh=====================>\");\n\n                if (mTotalPage > 0 && mTotalPage > pageNum) {\n                    pageNum++;\n                    mBllUser.userServerOrderList((position + 1) + \"\", pageNum + \"\");\n                } else {\n                    mListView.postDelayed(new Runnable() {\n                        @Override\n                        public void run() {\n                            mListView.onRefreshComplete();\n                        }\n                    }, 1000);\n                }\n            }\n        });\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic boolean transformOne(GlyphLine line) {\n            if (line.idx >= line.end || line.idx < line.start)\n                return false;\n            Glyph g1 = line.get(line.idx);\n            if (!coverageSet.contains(g1.getCode()))\n                return false;\n            int c1 = classDef1.getOtfClass(g1.getCode());\n            PairValueFormat[] pvs = posSubs.get(c1);\n            if (pvs == null)\n                return false;\n            GlyphIndexer gi = new GlyphIndexer();\n            gi.line = line;\n            gi.idx = line.idx;\n            gi.nextGlyph(openReader, lookupFlag);\n            if (gi.glyph == null)\n                return false;\n            Glyph g2 = gi.glyph;\n            int c2 = classDef2.getOtfClass(g2.getCode());\n            if (c2 >= pvs.length)\n                return false;\n            PairValueFormat pv = pvs[c2];\n            line.set(line.idx, new Glyph(g1, 0, 0, pv.first.XAdvance, pv.first.YAdvance, 0));\n            line.set(gi.idx, new Glyph(g2, 0, 0, pv.second.XAdvance, pv.second.YAdvance, 0));\n            line.idx = gi.idx;\n            return true;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tprotected void func_143011_b(NBTTagCompound par1NBTTagCompound) {\n\t\tsuper.func_143011_b(par1NBTTagCompound);\n        this.size = par1NBTTagCompound.getInteger(\"towerSize\");\n        this.height = par1NBTTagCompound.getInteger(\"towerHeight\");\n        \n        this.readOpeningsFromArray(par1NBTTagCompound.getIntArray(\"doorInts\"));\n        \n        this.highestOpening = par1NBTTagCompound.getInteger(\"highestOpening\");\n        this.openingTowards[0] = par1NBTTagCompound.getBoolean(\"openingTowards0\");\n        this.openingTowards[1] = par1NBTTagCompound.getBoolean(\"openingTowards1\");\n        this.openingTowards[2] = par1NBTTagCompound.getBoolean(\"openingTowards2\");\n        this.openingTowards[3] = par1NBTTagCompound.getBoolean(\"openingTowards3\");\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void addFooterView(View v, Object data, boolean isSelectable) {\n        FixedViewInfo info = new FixedViewInfo();\n        info.view = v;\n        info.data = data;\n        info.isSelectable = isSelectable;\n        mFooterViewInfos.add(info);\n\n        if (mDataSetObserver != null) {\n            mDataSetObserver.onChanged();\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void visitLdcInsn(Object cst) {\n        if (mv != null) {\n            mv.visitLdcInsn(cst);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static Endpoint create(String bindingId, Object implementor) {\n        return Provider.provider().createEndpoint(bindingId, implementor);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nIssuerEntry(final int id, final String subject, final String b64Sha1Fp, final String b64Cert) {\n        super();\n        this.id = id;\n        this.subject = subject;\n        this.sha1Fp = Base64.decode(b64Sha1Fp);\n        this.cert = Base64.decode(b64Cert);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker, boolean showDirection) {\n        this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void printMethods() {\n\t\tif (TypeUtil.isClassLike(type)) {\n\t\t\tfor (List<IMethodBinding> e : methods.values()) {\n\t\t\t\tfor (IMethodBinding mb : e) {\n\t\t\t\t\taccess = TransformUtil.declareBridge(ctx, out, type, mb,\n\t\t\t\t\t\t\tdeps, access);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tList<IMethodBinding> superMethods = hiddenMethods(type, ctx, methods);\n\n\t\tfor (IMethodBinding mb : superMethods) {\n\t\t\taccess = printAccess(out, mb.getModifiers(), access);\n\t\t\tprint(i1);\n\t\t\tTransformUtil.printSignature(ctx, out, type,\n\t\t\t\t\tmb.getMethodDeclaration(), deps, false);\n\t\t\tif (Modifier.isAbstract(mb.getModifiers())) {\n\t\t\t\tprint(\" = 0\");\n\t\t\t}\n\n\t\t\tprintln(\";\");\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n        this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n        BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n        this.updateNaturalParameterPrior(prior);\n\n        return learntBN;\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void printMethods(){\n        MethodData[] methods = cls.getMethods();\n        for(int m = 0; m < methods.length; m++){\n            String[] accflags = methods[m].getAccess();\n            if(checkAccess(accflags)){\n                if(!(env. showLineAndLocal || env.showDisassembled || env.showVerbose\n                     ||  env.showInternalSigs || env.showallAttr)){\n                    out.print(\"    \");\n                }\n                printMethodSignature(methods[m], accflags);\n                printExceptions(methods[m]);\n                out.println(\";\");\n\n                if (env.showInternalSigs){\n                    out.println(\"  Signature: \" + (methods[m].getInternalSig()));\n                }\n\n                if(env.showDisassembled && ! env.showallAttr) {\n                    printcodeSequence(methods[m]);\n                    printExceptionTable(methods[m]);\n                    out.println();\n                }\n\n                if (env.showLineAndLocal) {\n                    printLineNumTable(methods[m]);\n                    printLocVarTable(methods[m]);\n                    out.println();\n                }\n\n                if (env.showallAttr){\n                    printMethodAttributes(methods[m]);\n                }\n            }\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate URI api(String path) {\n        if (!path.toLowerCase().matches(\"https?://.*\")) {\n            path = urlJoin(this.context, path);\n        }\n        if (!path.contains(\"?\")) {\n            if (!path.endsWith(\"/stop\")) {\n                path = urlJoin(path, \"api/json\");\n            }\n        } else {\n            String[] components = path.split(\"\\\\?\", 2);\n            path = urlJoin(components[0], \"api/json\") + \"?\" + components[1];\n        }\n        URI requestUri = uri.resolve(\"/\").resolve(path);\n        return requestUri;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate Set<Integer> initStatement(Statement stat) {\n\n    HashMap<Integer, Integer> mapCount = new HashMap<>();\n\n    List<VarExprent> condlst;\n\n    if (stat.getExprents() == null) {\n\n      List<Integer> childVars = new ArrayList<>();\n      List<Exprent> currVars = new ArrayList<>();\n\n      for (Object obj : stat.getSequentialObjects()) {\n        if (obj instanceof Statement) {\n          Statement st = (Statement)obj;\n          childVars.addAll(initStatement(st));\n\n          if (st.type == DoStatement.TYPE_DO) {\n            DoStatement dost = (DoStatement)st;\n            if (dost.getLooptype() != DoStatement.LOOP_FOR &&\n                dost.getLooptype() != DoStatement.LOOP_DO) {\n              currVars.add(dost.getConditionExprent());\n            }\n          }\n          else if (st.type == DoStatement.TYPE_CATCHALL) {\n            CatchAllStatement fin = (CatchAllStatement)st;\n            if (fin.isFinally() && fin.getMonitor() != null) {\n              currVars.add(fin.getMonitor());\n            }\n          }\n        }\n        else if (obj instanceof Exprent) {\n          currVars.add((Exprent)obj);\n        }\n      }\n\n      for (Integer index : childVars) {\n        Integer count = mapCount.get(index);\n        if (count == null) {\n          count = 0;\n        }\n        mapCount.put(index, count + 1);\n      }\n\n      condlst = getAllVars(currVars);\n    }\n    else {\n      condlst = getAllVars(stat.getExprents());\n    }\n\n    for (VarExprent var : condlst) {\n      mapCount.put(var.getIndex(), 2);\n    }\n\n\n    HashSet<Integer> set = new HashSet<>(mapCount.keySet());\n\n    for (Entry<Integer, Integer> en : mapCount.entrySet()) {\n      if (en.getValue().intValue() > 1) {\n        mapVarDefStatements.put(en.getKey(), stat);\n      }\n    }\n\n    mapStatementVars.put(stat.id, set);\n\n    return set;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tpublic void ReadCommonRecord(NBTTagCompound TagCompound) {\n\t\tsuper.ReadCommonRecord(TagCompound);\n\n\t\tSource = TagCompound.getBoolean(\"Source\");\n\n\t\tShiftX = TagCompound.getInteger(\"ShiftX\");\n\t\tShiftY = TagCompound.getInteger(\"ShiftY\");\n\t\tShiftZ = TagCompound.getInteger(\"ShiftZ\");\n\n\t\tMinX = TagCompound.getInteger(\"MinX\");\n\t\tMinY = TagCompound.getInteger(\"MinY\");\n\t\tMinZ = TagCompound.getInteger(\"MinZ\");\n\t\tMaxX = TagCompound.getInteger(\"MaxX\");\n\t\tMaxY = TagCompound.getInteger(\"MaxY\");\n\t\tMaxZ = TagCompound.getInteger(\"MaxZ\");\n\n\t\tTargetDimension = TagCompound.getInteger(\"TargetDimension\");\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n  public void testQueryOrdered()\n  throws Exception {\n    final String query = \"SELECT ?s ?p WHERE { ?s ?p ?o . } ORDER BY ?s ?p\";\n\n    PostMethod post = new PostMethod(aseBaseUrl);\n    post.addParameter(Protocol.QUERY_PARAM_NAME, URLEncoder.encode(query, \"UTF-8\"));\n\n    final int code = client.executeMethod(post);\n    if (code == HttpStatus.SC_OK) {\n      final List<Map<String, Object>> expected = new ArrayList<Map<String,Object>>();\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/a\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/firstName\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/a\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/like\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/a\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/type\"))\n      ));\n\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/b\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/firstName\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/b\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/firstName\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/b\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/think_at\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/b\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/type\"))\n      ));\n\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/c\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/firstName\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/c\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/test\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/c\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/type\"))\n      ));\n\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/d\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/fail\"))\n      ));\n\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/e\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/type\"))\n      ));\n\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/f\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/do\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/f\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/type\"))\n      ));\n\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/g\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/test\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/g\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/type\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/g\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/type\"))\n      ));\n      assertResults(post, expected, true);\n    } else {\n      fail(\"code=\" + code);\n    }\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\n\n\tprivate void adaptToEnablementChange(HighlightingStyle highlighting, PropertyChangeEvent event) {\n\t\tObject value = event.getNewValue();\n\t\tboolean eventValue;\n\t\tif (value instanceof Boolean)\n\t\t\teventValue = ((Boolean) value).booleanValue();\n\t\telse if (IPreferenceStore.TRUE.equals(value))\n\t\t\teventValue = true;\n\t\telse\n\t\t\teventValue = false;\n\t\thighlighting.setEnabled(eventValue);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n\n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n\n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n\n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode parse(org.apache.xmlbeans.xml.stream.XMLInputStream xis, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException, org.apache.xmlbeans.xml.stream.XMLStreamException {\n          return (com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( xis, type, options ); }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private boolean isInContent(float x, float y, Sticker currentSticker) {\n\n\n\n        float[] pointsDst = currentSticker.getMapPointsDst();\n        if (x > pointsDst[0] && x < pointsDst[2] && y > pointsDst[3] && y < pointsDst[5])\n            return true;\n        return false;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private double readDecimalLiteral(int c) {\n        return readDecimalLiteral(c, true);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; }\n        return retVal;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        return CharacterData.of(codePoint).isIdentifierIgnorable(codePoint);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void printMethods() {\n\t\tif (TypeUtil.isClassLike(type)) {\n\t\t\tfor (List<IMethodBinding> e : methods.values()) {\n\t\t\t\tfor (IMethodBinding mb : e) {\n\t\t\t\t\taccess = TransformUtil.declareBridge(ctx, out, type, mb,\n\t\t\t\t\t\t\tdeps, access);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tList<IMethodBinding> superMethods = hiddenMethods(type, ctx, methods);\n\n\t\tfor (IMethodBinding mb : superMethods) {\n\t\t\taccess = printAccess(out, mb.getModifiers(), access);\n\t\t\tprint(i1);\n\t\t\tTransformUtil.printSignature(ctx, out, type,\n\t\t\t\t\tmb.getMethodDeclaration(), deps, false);\n\t\t\tif (Modifier.isAbstract(mb.getModifiers())) {\n\t\t\t\tprint(\" = 0\");\n\t\t\t}\n\n\t\t\tprintln(\";\");\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic LevelGen(int w, int h, int featureSize) {\n\t\tthis.w = w;\n\t\tthis.h = h;\n\n\t\tvalues = new double[w * h];\n\n\t\tfor (int y = 0; y < w; y += featureSize) {\n\t\t\tfor (int x = 0; x < w; x += featureSize) {\n\t\t\t\tsetSample(x, y, random.nextFloat() * 2 - 1);\n\t\t\t}\n\t\t}\n\n\t\tint stepSize = featureSize;\n\t\tdouble scale = 1.0 / w;\n\t\tdouble scaleMod = 1;\n\t\tdo {\n\t\t\tint halfStep = stepSize / 2;\n\t\t\tfor (int y = 0; y < w; y += stepSize) {\n\t\t\t\tfor (int x = 0; x < w; x += stepSize) {\n\t\t\t\t\tdouble a = sample(x, y);\n\t\t\t\t\tdouble b = sample(x + stepSize, y);\n\t\t\t\t\tdouble c = sample(x, y + stepSize);\n\t\t\t\t\tdouble d = sample(x + stepSize, y + stepSize);\n\n\t\t\t\t\tdouble e = (a + b + c + d) / 4.0 + (random.nextFloat() * 2 - 1) * stepSize * scale;\n\t\t\t\t\tsetSample(x + halfStep, y + halfStep, e);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int y = 0; y < w; y += stepSize) {\n\t\t\t\tfor (int x = 0; x < w; x += stepSize) {\n\t\t\t\t\tdouble a = sample(x, y);\n\t\t\t\t\tdouble b = sample(x + stepSize, y);\n\t\t\t\t\tdouble c = sample(x, y + stepSize);\n\t\t\t\t\tdouble d = sample(x + halfStep, y + halfStep);\n\t\t\t\t\tdouble e = sample(x + halfStep, y - halfStep);\n\t\t\t\t\tdouble f = sample(x - halfStep, y + halfStep);\n\n\t\t\t\t\tdouble H = (a + b + d + e) / 4.0 + (random.nextFloat() * 2 - 1) * stepSize * scale * 0.5;\n\t\t\t\t\tdouble g = (a + c + d + f) / 4.0 + (random.nextFloat() * 2 - 1) * stepSize * scale * 0.5;\n\t\t\t\t\tsetSample(x + halfStep, y, H);\n\t\t\t\t\tsetSample(x, y + halfStep, g);\n\t\t\t\t}\n\t\t\t}\n\t\t\tstepSize /= 2;\n\t\t\tscale *= (scaleMod + 0.8);\n\t\t\tscaleMod *= 0.3;\n\t\t} while (stepSize > 1);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PluginLoadOrder getLoad() {\n        return order;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tprotected Method getAccessor(Object obj, Field field, boolean isGetter)\n\t{\n\t\tString name = field.getName();\n\t\tname = name.substring(0, 1).toUpperCase() + name.substring(1);\n\n\t\tif (!isGetter)\n\t\t{\n\t\t\tname = \"set\" + name;\n\t\t}\n\t\telse if (boolean.class.isAssignableFrom(field.getType()))\n\t\t{\n\t\t\tname = \"is\" + name;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tname = \"get\" + name;\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\tif (isGetter)\n\t\t\t{\n\t\t\t\treturn getMethod(obj, name, null);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn getMethod(obj, name, new Class[] { field.getType() });\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e1)\n\t\t{\n\t\t}\n\n\t\treturn null;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tpublic PsiBuilder.Marker parseAndDone(ShaderLabParserBuilder builder, @NotNull PsiBuilder.Marker mark)\n\t{\n\t\tfor(ShaderLabRole role : myRoles)\n\t\t{\n\t\t\tif(role instanceof ShaderLabValueRole && ((ShaderLabValueRole) role).isMyValue(builder))\n\t\t\t{\n\t\t\t\treturn role.parseAndDone(builder, mark);\n\t\t\t}\n\t\t}\n\n\t\tdoneWithErrorSafe(builder, \"Wrong value\");\n\t\tmark.done(ShaderLabElements.SIMPLE_VALUE);\n\n\t\treturn mark;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + order.m_lmtPrice +\n        \" auxPrice=\" + order.m_auxPrice +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + order.m_minQty +\n        \" percentOffset=\" + order.m_percentOffset +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + order.m_nbboPriceCap +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + order.m_startingPrice +\n        \" stockRefPrice=\" + order.m_stockRefPrice +\n        \" delta=\" + order.m_delta +\n        \" stockRangeLower=\" + order.m_stockRangeLower +\n        \" stockRangeUpper=\" + order.m_stockRangeUpper +\n        \" volatility=\" + order.m_volatility +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + order.m_trailStopPrice +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + order.m_basisPoints;\n        \t\tmsg += \" basisPointsType=\" + order.m_basisPointsType;\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate Member lookupDirectly( final Hierarchy hierarchy,\n                                 final Cube cube,\n                                 final String parameter,\n                                 final boolean searchForNames ) {\n    Member memberById = null;\n    Member memberByUniqueId = null;\n    final Query queryDirect =\n      connection.parseQuery( \"SELECT STRTOMEMBER(\" + quote( parameter ) + \") ON 0, {} ON 1 FROM \" // NON-NLS\n        + cube.getQualifiedName() );\n    final Result resultDirect = connection.execute( queryDirect );\n    try {\n      final List<Position> positionList = resultDirect.getAxes()[ 0 ].getPositions();\n      for ( int i = 0; i < positionList.size(); i++ ) {\n        final Position position = positionList.get( i );\n        for ( int j = 0; j < position.size(); j++ ) {\n          final Member member = position.get( j );\n\n\n          if ( parameter.startsWith( \"[\" ) ) {\n            if ( memberByUniqueId == null ) {\n              memberByUniqueId = member;\n            } else {\n              logger.warn( \"Encountered a member with a duplicate key: \" + member.getQualifiedName() ); // NON-NLS\n            }\n          }\n          if ( searchForNames == false ) {\n            continue;\n          }\n          if ( parameter.equals( member.getName() ) ) {\n            if ( memberById == null ) {\n              memberById = member;\n            } else {\n              logger.warn( \"Encountered a member with a duplicate name: \" + member.getQualifiedName() ); // NON-NLS\n            }\n          }\n        }\n      }\n    } finally {\n      resultDirect.close();\n    }\n    if ( memberByUniqueId != null ) {\n      final Hierarchy memberHierarchy = memberByUniqueId.getHierarchy();\n      if ( hierarchy != memberHierarchy ) {\n        if ( ObjectUtilities.equal( hierarchy, memberHierarchy ) == false ) {\n          logger\n            .warn( \"Cannot match hierarchy of member found with the hierarchy specfied in the parameter: \" // NON-NLS\n              + \"Unabe to guarantee that the correct member has been queried, returning null.\" ); // NON-NLS\n          return null;\n        }\n      }\n      return memberByUniqueId;\n    }\n    if ( memberById != null ) {\n      final Hierarchy memberHierarchy = memberById.getHierarchy();\n      if ( hierarchy != memberHierarchy ) {\n        if ( ObjectUtilities.equal( hierarchy, memberHierarchy ) == false ) {\n          logger\n            .warn( \"Cannot match hierarchy of member found with the hierarchy specfied in the parameter: \" // NON-NLS\n              + \"Unabe to guarantee that the correct member has been queried, returning null\" ); // NON-NLS\n          return null;\n        }\n      }\n      return memberById;\n    }\n    return null;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public void handlePatch(final PatchParam patchParam) throws Throwable {\n        {\n            Class<?> cls = null;\n            try {\n                cls= patchParam.context.getClass().getClassLoader().loadClass(\"com.taobao.dexposed.g\");\n            } catch (Exception e) {\n                e.printStackTrace();\n                return;\n            }\n\n            \n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n\tpublic void testBlock () throws ValidationException\n\t{\n\t\tBlk b1 =\n\t\t\t\tBlk.fromWireDump (\"\");\n\t\tassertTrue (b1.getHash ().equals (\"0000000000000449ee5b94ba7a051caffff5c23d6a03335f6e20e3985b5ffa61\"));\n\t\tBlk b2 = Blk.fromWireDump (b1.toWireDump ());\n\t\tb2.computeHash ();\n\t\tassertTrue (b1.getHash ().equals (b2.getHash ()));\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr graph) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), graph});\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic MP3Reader(File file) throws FileNotFoundException {\n\t\tthis.file = file;\n\n\t\t\n\t\tfis = new FileInputStream(file);\n\t\tchannel = fis.getChannel();\n\t\ttry {\n\t\t\tmappedFile = channel.map(FileChannel.MapMode.READ_ONLY, 0, channel\n\t\t\t\t\t.size());\n\t\t} catch (IOException e) {\n\t\t\tlog.error(\"MP3Reader {}\", e);\n\t\t}\n\n\t\tmappedFile.order(ByteOrder.BIG_ENDIAN);\n\t\tin = IoBuffer.wrap(mappedFile);\n\t\tanalyzeKeyFrames();\n\n\t\tfirstTags.addFirst(createFileMeta());\n\n\t\tif (in.remaining() > 4) {\n\t\t\tsearchNextFrame();\n\t\t\tint pos = in.position();\n\t\t\tMP3Header header = readHeader();\n\t\t\tin.position(pos);\n\t\t\tif (header != null) {\n\t\t\t\tcheckValidHeader(header);\n\t\t\t} else {\n\t\t\t\tthrow new RuntimeException(\"No initial header found.\");\n\t\t\t}\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static int readVarInt(ByteBuf from) {\n\t\tint value = 0;\n\t\tint length = 0;\n\t\tbyte part;\n\t\tdo {\n\t\t\tpart = from.readByte();\n\t\t\tvalue |= (part & 0x7F) << (length++ * 7);\n\t\t\tif (length > 5) {\n\t\t\t\tthrow new DecoderException(\"VarInt too big\");\n\t\t\t}\n\t\t} while (part < 0);\n\t\treturn value;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void testParameterTypes() throws Exception\n    {\n        PreparedStatement pSt = prepareStatement(\n            \"create table t2(si smallint,i int, bi bigint, r real, f float, \"\n            + \"d double precision, n5_2 numeric(5,2), dec10_3 decimal(10,3), \"\n            + \"ch20 char(20),vc varchar(20), lvc long varchar, \"\n            + \"b20 char(23) for bit data, vb varchar(23) for bit data, \"\n            + \"lvb long varchar for bit data,  dt date, tm time, \"\n            + \"ts timestamp not null)\");\n        assertUpdateCount(pSt, 0);\n        pSt.close();\n\n        byte[] ba = new byte[] { 0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xa,\n                                 0xb,0xc,0xd,0xe,0xf,0x10,0x11,0x12,0x13 };\n\n        byte[] bapad = new byte[23];  // For padded byte data\n        System.arraycopy(ba, 0, bapad, 0, ba.length);\n        Arrays.fill(bapad, ba.length, bapad.length, (byte )0x20);\n\n        Object[][] t2_rows = {\n            {1, 2, 3L, 4.0F,\n             5.0, 6.0, new BigDecimal(\"77.77\"),\n             new BigDecimal(\"8.100\"), \"column9string       \",\n             \"column10vcstring\", \"column11lvcstring\", bapad, ba, ba,\n             Date.valueOf(\"2002-04-12\"), Time.valueOf(\"11:44:30\"),\n             Timestamp.valueOf(\"2002-04-12 11:44:30.000000000\")},\n            {1, 2, 3L, 4.0F,\n             5.0, 6.0, new BigDecimal(\"77.77\"),\n             new BigDecimal(\"8.100\"), \"column11string      \",\n             \"column10vcstring\", \"column11lvcstring\", bapad, ba, ba,\n             Date.valueOf(\"2002-04-12\"), Time.valueOf(\"11:44:30\"),\n             Timestamp.valueOf(\"2002-04-12 11:44:30.000000000\")},\n            {null, null, null, null, null, null, null, null, null, null, null,\n             null, null, null, null, null,\n             Timestamp.valueOf(\"2002-04-12 11:44:31.000000000\")}\n        };\n\n\n        pSt = prepareStatement(\n            \"insert into t2 values (?, ?, ?, ?,  ?, ?, ?, ?, ?, ?, ?, ?, ?, \"\n            + \"?, ? ,? , ?)\");\n        pSt.setShort(1, ((Integer )t2_rows[0][0]).shortValue());\n        pSt.setInt(2, ((Integer )t2_rows[0][1]).intValue());\n        pSt.setLong(3, ((Long)t2_rows[0][2]).longValue());\n        pSt.setFloat(4, ((Float )t2_rows[0][3]).floatValue());\n        pSt.setDouble(5, ((Double )t2_rows[0][4]).doubleValue());\n        pSt.setDouble(6, ((Double )t2_rows[0][5]).doubleValue());\n        pSt.setBigDecimal(7, (BigDecimal )t2_rows[0][6]);\n        pSt.setBigDecimal(8, new BigDecimal(\"8.1\")); // Diff. precision\n        pSt.setString(9, \"column9string\");  // Without padding\n        byte[] c10ba = ((String )t2_rows[0][9]).getBytes(\"UTF-8\");\n        int len = c10ba.length;\n        pSt.setAsciiStream(10, new ByteArrayInputStream(c10ba), len);\n        byte[] c11ba = ((String )t2_rows[0][10]).getBytes(\"UTF-8\");\n        len = c11ba.length;\n        pSt.setCharacterStream(11, new InputStreamReader\n                               (new ByteArrayInputStream(c11ba),\"UTF-8\"),len);\n        pSt.setBytes(12, ba);\n        pSt.setBinaryStream(13, new ByteArrayInputStream(ba), ba.length);\n        pSt.setBytes(14, ba);\n        pSt.setDate(15, ((Date )t2_rows[0][14]));\n        pSt.setTime(16, ((Time )t2_rows[0][15]));\n        pSt.setTimestamp(17, ((Timestamp )t2_rows[0][16]));\n        assertUpdateCount(pSt, 1);\n\n        for (int i=0; i<17; ++i) {\n            pSt.setObject(i+1, t2_rows[1][i]);\n        }\n        assertUpdateCount(pSt, 1);\n\n        pSt.setNull(1, java.sql.Types.SMALLINT);\n        pSt.setNull(2, java.sql.Types.INTEGER);\n        pSt.setNull(3, java.sql.Types.BIGINT);\n        pSt.setNull(4, java.sql.Types.REAL);\n        pSt.setNull(5, java.sql.Types.FLOAT);\n        pSt.setNull(6, java.sql.Types.DOUBLE);\n        pSt.setNull(7, java.sql.Types.NUMERIC);\n        pSt.setNull(8, java.sql.Types.DECIMAL);\n        pSt.setNull(9, java.sql.Types.CHAR);\n        pSt.setNull(10, java.sql.Types.VARCHAR);\n        pSt.setNull(11, java.sql.Types.LONGVARCHAR);\n        pSt.setNull(12, java.sql.Types.BINARY);\n        pSt.setNull(13, java.sql.Types.VARBINARY);\n        pSt.setNull(14, java.sql.Types.LONGVARBINARY);\n        pSt.setNull(15, java.sql.Types.DATE);\n        pSt.setNull(16, java.sql.Types.TIME);\n\n        pSt.setTimestamp(17, ((Timestamp )t2_rows[2][16]));\n        assertFalse(pSt.execute());\n        assertEquals(1, pSt.getUpdateCount());\n        pSt.close();\n\n        pSt = prepareStatement(\"select * from t2\");\n        ResultSet rs = pSt.executeQuery();\n        JDBC.assertFullResultSet(rs, t2_rows, false);\n        rs.close();\n        pSt.close();\n\n        try {\n            pSt = prepareStatement(\"select * from t2 where i = ?\");\n            rs = pSt.executeQuery();\n            fail(\"Exception expected above!\");\n        } catch (SQLException e) {\n            assertSQLState(\"07000\", e);\n        }\n        rs.close();\n        pSt.close();\n\n\n        try {\n            pSt = prepareStatement(\n                \"insert into t2 values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, \"\n                + \"?, ?, ?, ?, ?)\");\n            pSt.executeUpdate();\n            fail(\"Exception expected above!\");\n        } catch (SQLException e) {\n            assertSQLState(\"07000\", e);\n        }\n        pSt.close();\n\n        pSt = prepareStatement(\"create table d2558 (i int)\");\n        assertUpdateCount(pSt, 0);\n        pSt.close();\n        pSt = prepareStatement(\"insert into d2558 values (3), (4)\");\n        assertUpdateCount(pSt, 2);\n        pSt.close();\n        pSt = prepareStatement(\"select * from d2558 where i = ?\");\n        pSt.setObject(1,3,java.sql.Types.INTEGER,0);\n        try {\n            pSt.setObject(2,4, java.sql.Types.INTEGER,0);\n            rs = pSt.executeQuery();\n            rs.close();\n            fail(\"Exception expected above!\");\n        } catch (SQLException e) {\n            assertSQLState(\"XCL13\", e);\n        }\n        pSt.close();\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void testAs()\n    {\n        check(\n            \"select x y from t\",\n            TestUtil.fold(\n                \"SELECT `X` AS `Y`\\n\"\n                + \"FROM `T`\"));\n\n        check(\n            \"select x AS y from t\",\n            TestUtil.fold(\n                \"SELECT `X` AS `Y`\\n\"\n                + \"FROM `T`\"));\n        check(\n            \"select sum(x) y from t group by z\",\n            TestUtil.fold(\n                \"SELECT SUM(`X`) AS `Y`\\n\"\n                + \"FROM `T`\\n\"\n                + \"GROUP BY `Z`\"));\n\n        check(\n            \"select count(z) over w foo from Bids window w as (order by x)\",\n            TestUtil.fold(\n                \"SELECT (COUNT(`Z`) OVER `W`) AS `FOO`\\n\"\n                + \"FROM `BIDS`\\n\"\n                + \"WINDOW `W` AS (ORDER BY `X`)\"));\n\n        final String expected =\n            TestUtil.fold(\n                \"SELECT `X`\\n\"\n                + \"FROM `T` AS `T1`\");\n        check(\"select x from t as t1\", expected);\n        check(\"select x from t t1\", expected);\n\n        checkFails(\n            \"select sum(x) over w from bids window w ^(order by x)\",\n            \"(?s).*Encountered \\\"\\\\(\\\".*\");\n\n        checkFails(\n            \"select count(*) as foo ^over^ w from Bids window w (order by x)\",\n            \"(?s).*Encountered \\\"over\\\".*\");\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static ITextViewer getViewer(IEditorPart editorPart) {\n        Object viewer = editorPart.getAdapter(ITextOperationTarget.class);\n\n        return (viewer instanceof ITextViewer) ? (ITextViewer) viewer : null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic boolean transformOne(GlyphLine line) {\n            if (line.idx >= line.end || line.idx < line.start)\n                return false;\n            boolean changed = false;\n            Glyph g1 = line.get(line.idx);\n            Map<Integer,PairValueFormat> m = gposMap.get(g1.getCode());\n            if (m != null) {\n                GlyphIndexer gi = new GlyphIndexer();\n                gi.line = line;\n                gi.idx = line.idx;\n                gi.nextGlyph(openReader, lookupFlag);\n                if (gi.glyph != null) {\n                    PairValueFormat pv = m.get(gi.glyph.getCode());\n                    if (pv != null) {\n                        Glyph g2 = gi.glyph;\n                        line.set(line.idx, new Glyph(g1, 0, 0, pv.first.XAdvance, pv.first.YAdvance, 0));\n                        line.set(gi.idx, new Glyph(g2, 0, 0, pv.second.XAdvance, pv.second.YAdvance, 0));\n                        line.idx = gi.idx;\n                        changed = true;\n                    }\n                }\n            }\n            return changed;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void defaultAction(HttpServletRequest req, HttpServletResponse res)\n                   throws ServletException, IOException\n    {\n     bmsample1home home = null;\n     bmsample1 remote = null;\n     res.setContentType(\"text/plain\");\n     PrintWriter out = res.getWriter();\n     Context ctx;\n     Properties p;\n\t       \n     try\n      {\n   \t  Hashtable env = new Hashtable(1);\n      env.put(\"javax.naming.factory.initial\", \"com.netscape.server.jndi.RootContextFactory\");\n \t  ctx = new InitialContext(env);\n      Object objref = ctx.lookup(\"ejb/bmsamplebean1\");\n      home = (bmsample1home)PortableRemoteObject.narrow(objref, bmsample1home.class);\n      remote = home.create();\n      out.println(\"calling M1 ->DB1\");\n      out.println(\" the result of invoking the ejb method is \" + remote.performDBOps());\n       out.println(\"calling M2 ->DB2\");\n      out.println(\"...... result of invoking the ejb method is \" + remote.performDBOps2());\n\t   }\n       catch (Exception e)\n       {\n\t   System.out.println(\" ERROR: \" + e);\n       }\n      try\n        {\n        javax.sql.DataSource ds,ds2;\n        java.sql.Connection conn = null,conn2 = null;\n        java.sql.Statement stmt = null,stmt2 = null;\n        java.sql.ResultSet rs = null,rs2 = null;\n\tctx = new InitialContext();\n\tds = (DataSource)ctx.lookup(\"java:comp/env/jdbc/oraclethird\");\n\tds2 = (DataSource)ctx.lookup(\"java:comp/env/jdbc/oracleds2\");\n        \n        conn = ds.getConnection();\n\tconn2 = ds2.getConnection();\n\tstmt=conn.createStatement();\n\tstmt2=conn2.createStatement();\n\tout.println(\"..........Verifying table contents ....\");\n\trs=stmt.executeQuery(\"select * from status21\");\n\tint count=0;\n         while (rs.next())\n        {count++;\n         out.println(\"record = \"+rs.getString(1));\n        }\n         rs2=stmt2.executeQuery(\"select * from status2\");\n         int count2=0;\n        while (rs2.next())\n         {count2++;\n         out.println(\"record = \"+rs2.getString(1));\n         }\n         out.println(\"Total Records in table1 = \"+count);\n        out.println(\"Total Records in table2 = \"+count2);\n\tif ((count==1)&&(count2==1))\n         out.println(\"Result:FAIL\");\n         else\n         out.println(\"Result:PASS\");\n         stmt.executeUpdate(\"delete from status21\");\n         stmt2.executeUpdate(\"delete from status2\");\n         conn.commit();\n         conn2.commit();  \n         rs.close();\n         out.println(\"deleted in 1\");\n         out.println(\"deleted in 2\");\n\t rs2.close();\n         stmt.close();\n\tstmt2.close();\n\n\t conn.close();\n\t conn2.close();\n        }catch(Exception e){}\t\t\t      \n\t\t\t\t\t\t\t\t      \n\t  \n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n  \n\tprivate void sendCrashLog2PM(String fileName){  \n\t\tif(!new File(fileName).exists()){  \n\t\t\treturn;  \n\t\t}  \n\t\tFileInputStream fis = null;  \n\t\tBufferedReader reader = null;  \n\t\tString s = null;  \n\t\ttry {  \n\t\t\tfis = new FileInputStream(fileName);  \n\t\t\treader = new BufferedReader(new InputStreamReader(fis, \"GBK\"));  \n\t\t\twhile(true){  \n\t\t\t\ts = reader.readLine();  \n\t\t\t\tif(s == null) break;  \n\t\t\t\tLog.i(\"info\", s.toString());  \n\t\t\t}  \n\t\t} catch (FileNotFoundException e) {  \n\t\t\te.printStackTrace();  \n\t\t} catch (IOException e) {  \n\t\t\te.printStackTrace();  \n\t\t}finally{   \n\t\t\ttry {  \n\t\t\t\treader.close();  \n\t\t\t\tfis.close();  \n\t\t\t} catch (IOException e) {  \n\t\t\t\te.printStackTrace();  \n\t\t\t}  \n\t\t}  \n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tpublic void checkPrivileges(MPrincipal principal, List<MPrivilege> privileges) throws SqoopException {\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"==> RangerSqoopAuthorizer.checkPrivileges()\");\n\t\t}\n\n\t\ttry {\n\t\t\tactivatePluginClassLoader();\n\n\t\t\tauthorizationValidator.checkPrivileges(principal, privileges);\n\t\t} finally {\n\t\t\tdeactivatePluginClassLoader();\n\t\t}\n\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"<== RangerSqoopAuthorizer.checkPrivileges()\");\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static int compareWithConversion(Object v1, Object v2, boolean equals) {\n        int result;\n\n        if (v1 == v2) {\n            result = 0;\n        } else {\n            int t1 = getNumericType(v1),\n                    t2 = getNumericType(v2),\n                    type = getNumericType(t1, t2, true);\n\n            switch (type) {\n                case BIGINT:\n                    result = bigIntValue(v1).compareTo(bigIntValue(v2));\n                    break;\n\n                case BIGDEC:\n                    result = bigDecValue(v1).compareTo(bigDecValue(v2));\n                    break;\n\n                case NONNUMERIC:\n                    if ((t1 == NONNUMERIC) && (t2 == NONNUMERIC)) {\n                        if ((v1 == null) || (v2 == null)) {\n                            result = (v1 == v2) ? 0 : 1;\n                        } else {\n                            if (v1.getClass().isAssignableFrom(v2.getClass()) || v2.getClass().isAssignableFrom(v1.getClass())) {\n                                if (v1 instanceof Comparable) {\n                                    result = ((Comparable) v1).compareTo(v2);\n                                    break;\n                                } else {\n                                    if (equals) {\n                                        result = v1.equals(v2) ? 0 : 1;\n                                        break;\n                                    }\n                                }\n                            }\n                            if (equals) {\n                                result = 1;\n                                break;\n                            } else {\n                                throw new IllegalArgumentException(\"invalid comparison: \" + v1.getClass().getName() + \" and \" + v2.getClass().getName());\n                            }\n                        }\n                    }\n                case FLOAT:\n                case DOUBLE:\n                    double dv1 = doubleValue(v1),\n                            dv2 = doubleValue(v2);\n\n                    return (dv1 == dv2) ? 0 : ((dv1 < dv2) ? -1 : 1);\n\n                default:\n                    long lv1 = longValue(v1),\n                            lv2 = longValue(v2);\n\n                    return (lv1 == lv2) ? 0 : ((lv1 < lv2) ? -1 : 1);\n            }\n        }\n        return result;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void visitLdcInsn(Object cst) {\n        if (mv != null) {\n            mv.visitLdcInsn(cst);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static String stringFromStream(InputStream is) throws IOException {\n\t\tStringBuffer sb = new StringBuffer();\n\t    byte[] b = new byte[4096];\n\t    int n;\n\t    while((n = is.read(b)) != -1) {\n\t        sb.append(new String(b, 0, n));\n\t    }\n\t    return sb.toString();\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    void reserveSlot(Type type, int slot) {\n        assert slot >= 0;\n        final int size = type.getSize();\n        assert size == 1 || size == 2;\n        if (slot + size > types.length) {\n            types = grow(types);\n        }\n        assert types[slot] == null && (size == 1 || types[slot + 1] == null);\n        assign(slot, type);\n        activate(slot);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic boolean transformOne(GlyphLine line) {\n            if (line.idx >= line.end || line.idx < line.start)\n                return false;\n            boolean changed = false;\n            Glyph g1 = line.get(line.idx);\n            Map<Integer,PairValueFormat> m = gposMap.get(g1.getCode());\n            if (m != null) {\n                GlyphIndexer gi = new GlyphIndexer();\n                gi.line = line;\n                gi.idx = line.idx;\n                gi.nextGlyph(openReader, lookupFlag);\n                if (gi.glyph != null) {\n                    PairValueFormat pv = m.get(gi.glyph.getCode());\n                    if (pv != null) {\n                        Glyph g2 = gi.glyph;\n                        line.set(line.idx, new Glyph(g1, 0, 0, pv.first.XAdvance, pv.first.YAdvance, 0));\n                        line.set(gi.idx, new Glyph(g2, 0, 0, pv.second.XAdvance, pv.second.YAdvance, 0));\n                        line.idx = gi.idx;\n                        changed = true;\n                    }\n                }\n            }\n            return changed;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintWriter writer, boolean suppressLogin, char eolMarker, boolean showDirection)\n    {\n        __writer = writer;\n        __nologin = suppressLogin;\n        __eolMarker = eolMarker;\n        __directionMarker = showDirection;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static String[] appendSelectionArgs(String[] paramArrayOfString1, String[] paramArrayOfString2)\n  {\n    if ((paramArrayOfString1 == null) || (paramArrayOfString1.length == 0))\n      return paramArrayOfString2;\n    String[] arrayOfString = new String[paramArrayOfString1.length + paramArrayOfString2.length];\n    System.arraycopy(paramArrayOfString1, 0, arrayOfString, 0, paramArrayOfString1.length);\n    System.arraycopy(paramArrayOfString2, 0, arrayOfString, paramArrayOfString1.length, paramArrayOfString2.length);\n    return arrayOfString;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static String escapeCssIdentifier(final String text,\n                                         final CssIdentifierEscapeType type, final CssIdentifierEscapeLevel level) {\n\n        if (type == null) {\n            throw new IllegalArgumentException(\"The 'type' argument cannot be null\");\n        }\n\n        if (level == null) {\n            throw new IllegalArgumentException(\"The 'level' argument cannot be null\");\n        }\n\n        return CssIdentifierEscapeUtil.escape(text, type, level);\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n\tpublic void testBlock () throws ValidationException\n\t{\n\t\tBlk b1 =\n\t\t\t\tBlk.fromWireDump (\"\");\n\t\tassertTrue (b1.getHash ().equals (\"0000000000000449ee5b94ba7a051caffff5c23d6a03335f6e20e3985b5ffa61\"));\n\t\tBlk b2 = Blk.fromWireDump (b1.toWireDump ());\n\t\tb2.computeHash ();\n\t\tassertTrue (b1.getHash ().equals (b2.getHash ()));\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic WebSocketServer(InetSocketAddress address, int decodercount,\n\t\t\tList<Draft> drafts) {\n\t\tthis(address, decodercount, drafts, new HashSet<WebSocket>());\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static String loadJSONFromAsset(Context context, String filename) {\n\t\tString json;\n\t\ttry {\n\n\t\t\tInputStream is = context.getAssets().open(\"json/\" +filename+\".json\");\n\n\t\t\tint size = is.available();\n\n\t\t\tbyte[] buffer = new byte[size];\n\n\t\t\tis.read(buffer);\n\t\t\t\n\t\t\tis.close();\n\n\t\t\tjson = new String(buffer, \"UTF-8\");\n\t\t\tLog.v(\"AppUtils\", \"JSONArray=>\"+json);\n\t\t} catch (IOException ex) {\n\t\t\tex.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\t\treturn json;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, ClassTransformer transformer, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            MethodPair methodPair = transformer.methods.get(\"()V\" + method);\n            if (methodPair == null)\n            {\n                continue;\n            }\n            lineNumber = InvokerGenerator.printMethod(mv, clazz, method, Modifier.isStatic(methodPair.node.access), lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n            CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n            this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n            BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n            this.updateNaturalParameterPrior(prior);\n\n            return learntBN;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public CompletableFuture<Void> raise(RemoteEvent event,\n                                         Option...   options)\n    {\n        if (isOpen())\n        {\n            List<CompletableFuture<?>> futures = remoteChannels.values().stream().map((channel) -> {\n                                                         try\n                                                         {\n                                                             return channel.raise(event, options);\n                                                         }\n                                                         catch (Throwable e)\n                                                         {\n                                                             return CompletableFuture.completedFuture(null);\n                                                         }\n                                                     }).collect(Collectors.toList());\n\n            return CompletableFuture.allOf(futures.toArray(new CompletableFuture[futures.size()]));\n        }\n\n        return CompletableFuture.completedFuture(null);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public BeanConnector(Class<E> beanClass) {\n        final Method[] methods = beanClass.getMethods();\n        for (int m = 0; m < methods.length; m++) {\n            if(methods[m].getParameterTypes().length != 1) continue;\n            if(methods[m].getParameterTypes()[0] != PropertyChangeListener.class) continue;\n            if(methods[m].getName().startsWith(\"add\")) this.addListenerMethod = methods[m];\n            if(methods[m].getName().startsWith(\"remove\")) this.removeListenerMethod = methods[m];\n        }\n\n        if (this.addListenerMethod == null || this.removeListenerMethod == null)\n            throw new IllegalArgumentException(\"Couldn't find listener methods for \" + beanClass.getName());\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static <T extends Object> List<T> arrayToList(T[] objs) {\n        final ArrayList<T> list = new ArrayList<T>();\n        for (final T o : objs) {\n            list.add(o);\n        }\n        return list;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void actionPerformed(ActionEvent e) {\n            int i = 0;\n            for (i = 0; i < runners.size(); i++) {\n                if (runners.get(i).isAlive())\n                    break;\n            }\n\n            if (i == runners.size()) {\n                Display.getDefault().asyncExec(new Runnable() {\n                    public void run() {\n                        stop(true);\n                        setButton(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);\n                    }\n                });\n\n\n            }\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public ConeSound(MediaContainer soundData,\n                     float initialGain,\n                     int loopCount,\n                     boolean release,\n                     boolean continuous,\n                     boolean enable,\n                     Bounds  region,\n                     float   priority,\n                     float posX, float posY, float posZ,\n                     float[] distance,\n                     float[] distanceGain,\n                     float dirX, float dirY, float dirZ,\n                     float[] angle,\n                     float[] angularGain,\n                     float[] frequencyCutoff) {\n        super(soundData, initialGain, loopCount, release, continuous, enable,\n                     region, priority, posX, posY, posZ,\n                     distance, distanceGain );\n\n        setDefaultReadCapabilities(readCapabilities);\n\n        ((ConeSoundRetained)this.retained).setDirection(dirX, dirY, dirZ);\n        ((ConeSoundRetained)this.retained).setAngularAttenuation(angle,\n                     angularGain, frequencyCutoff);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate CompositeDataSupport(\n            SortedMap<String, Object> items, CompositeType compositeType)\n            throws OpenDataException {\n\n        if (compositeType == null) {\n            throw new IllegalArgumentException(\"Argument compositeType cannot be null.\");\n        }\n\n        Set<String> namesFromType = compositeType.keySet();\n        Set<String> namesFromItems = items.keySet();\n\n        if (!namesFromType.equals(namesFromItems)) {\n            Set<String> extraFromType = new TreeSet<String>(namesFromType);\n            extraFromType.removeAll(namesFromItems);\n            Set<String> extraFromItems = new TreeSet<String>(namesFromItems);\n            extraFromItems.removeAll(namesFromType);\n            if (!extraFromType.isEmpty() || !extraFromItems.isEmpty()) {\n                throw new OpenDataException(\n                        \"Item names do not match CompositeType: \" +\n                        \"names in items but not in CompositeType: \" + extraFromItems +\n                        \"; names in CompositeType but not in items: \" + extraFromType);\n            }\n        }\n\n        for (String name : namesFromType) {\n            Object value = items.get(name);\n            if (value != null) {\n                OpenType<?> itemType = compositeType.getType(name);\n                if (!itemType.isValue(value)) {\n                    throw new OpenDataException(\n                            \"Argument value of wrong type for item \" + name +\n                            \": value \" + value + \", type \" + itemType);\n                }\n            }\n        }\n\n        this.compositeType = compositeType;\n        this.contents = items;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private boolean isInContent(float x, float y, Sticker currentSticker) {\n\n\n\n        float[] pointsDst = currentSticker.getMapPointsDst();\n        if (x > pointsDst[0] && x < pointsDst[2] && y > pointsDst[3] && y < pointsDst[5])\n            return true;\n        return false;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr graph) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), graph});\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static List<Variation> getApplicable(ObjectType type) {\n            List<Variation> applicable = new ArrayList<Variation>();\n\n            for (Variation variation : ALL.get().get()) {\n                Set<ObjectType> types = variation.getContentTypes();\n                if (types.isEmpty() || types.contains(type)) {\n                    applicable.add(variation);\n                }\n            }\n\n            return applicable;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprotected Getter addGetter(List<Getter> getterChain, Getter prevGetter, String nextPart) {\n        Class nextClass = prevGetter != null ? prevGetter.getReturnType() : parent.getBaseClass();\n        Getter nextGetter = parent.getPropertyGetter(nextClass, nextPart);\n        getterChain.add(nextGetter);\n        return nextGetter;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n\n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n\n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n\n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic BlameGenerator push(String description, AnyObjectId id)\n\t\t\tthrows IOException {\n\t\tObjectLoader ldr = reader.open(id);\n\t\tif (ldr.getType() == OBJ_BLOB) {\n\t\t\tif (description == null)\n\t\t\t\tdescription = JGitText.get().blameNotCommittedYet;\n\t\t\tBlobCandidate c = new BlobCandidate(description, resultPath);\n\t\t\tc.sourceBlob = id.toObjectId();\n\t\t\tc.sourceText = new RawText(ldr.getCachedBytes(Integer.MAX_VALUE));\n\t\t\tc.regionList = new Region(0, 0, c.sourceText.size());\n\t\t\tremaining = c.sourceText.size();\n\t\t\tpush(c);\n\t\t\treturn this;\n\t\t}\n\n\t\tRevCommit commit = revPool.parseCommit(id);\n\t\tif (!find(commit, resultPath))\n\t\t\treturn this;\n\n\t\tCandidate c = new Candidate(commit, resultPath);\n\t\tc.sourceBlob = idBuf.toObjectId();\n\t\tc.loadText(reader);\n\t\tc.regionList = new Region(0, 0, c.sourceText.size());\n\t\tremaining = c.sourceText.size();\n\t\tpush(c);\n\t\treturn this;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\n    public static Bitmap fastblur(Context context, Bitmap sentBitmap, float radius) {\n\n        if (Build.VERSION.SDK_INT > 16 &&\n                    (!Build.MODEL.contains(\"google_sdk\")\n                             && !Build.MODEL.contains(\"Emulator\")\n                             && !Build.MODEL.contains(\"Android SDK\")\n                             && !Build.FINGERPRINT.contains(\"vbox86p\"))) {\n            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n            final RenderScript rs = RenderScript.create(context);\n            final Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n                                                                 Allocation.USAGE_SCRIPT);\n            final Allocation output = Allocation.createTyped(rs, input.getType());\n            final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n            script.setRadius(radius );\n            script.setInput(input);\n            script.forEach(output);\n            output.copyTo(bitmap);\n            return bitmap;\n        }\n\n        radius *= 0.1;\n        return blurfast(sentBitmap, (int) radius);\n\n\n\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public Entry(final String id, final String description, final PriorityLevel priority, final E value) {\n            super();\n            this.id = id;\n            this.description = description;\n            this.priority = priority;\n            this.value = value;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; }\n        return retVal;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + order.m_lmtPrice +\n        \" auxPrice=\" + order.m_auxPrice +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + order.m_minQty +\n        \" percentOffset=\" + order.m_percentOffset +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + order.m_nbboPriceCap +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + order.m_startingPrice +\n        \" stockRefPrice=\" + order.m_stockRefPrice +\n        \" delta=\" + order.m_delta +\n        \" stockRangeLower=\" + order.m_stockRangeLower +\n        \" stockRangeUpper=\" + order.m_stockRangeUpper +\n        \" volatility=\" + order.m_volatility +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + order.m_trailStopPrice +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + order.m_basisPoints;\n        \t\tmsg += \" basisPointsType=\" + order.m_basisPointsType;\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate URI api(String path) {\n        if (!path.toLowerCase().matches(\"https?://.*\")) {\n            path = urlJoin(this.context, path);\n        }\n        if (!path.contains(\"?\")) {\n            if (!path.endsWith(\"/stop\")) {\n                path = urlJoin(path, \"api/json\");\n            }\n        } else {\n            String[] components = path.split(\"\\\\?\", 2);\n            path = urlJoin(components[0], \"api/json\") + \"?\" + components[1];\n        }\n        URI requestUri = uri.resolve(\"/\").resolve(path);\n        return requestUri;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode parse(org.apache.xmlbeans.xml.stream.XMLInputStream xis, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException, org.apache.xmlbeans.xml.stream.XMLStreamException {\n          return (com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( xis, type, options ); }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public Kernel(int width, int height, int xOrigin, int yOrigin, double factor, double data[]) {\n        this.width = width;\n        this.height = height;\n        this.xOrigin = xOrigin;\n        this.yOrigin = yOrigin;\n        int len = width * height;\n        if (data.length < len) {\n            throw new IllegalArgumentException(\"Data array too small \" +\n                                                       \"(is \" + data.length +\n                                                       \" and should be \" + len);\n        }\n        this.factor = factor;\n        this.data = new double[len];\n        System.arraycopy(data, 0, this.data, 0, len);\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public CallNode(\n        ParseRegion region,\n        String name,\n        Syntax syntax,\n        List<ParseTreeNode> args)\n    {\n        this.region = region;\n        assert name != null;\n        assert syntax != null;\n        assert args != null;\n        this.name = name;\n        this.syntax = syntax;\n        this.argList = args;\n\n        switch (syntax) {\n        case Braces:\n            assert name.equals(\"{}\");\n            break;\n        case Parentheses:\n            assert name.equals(\"()\");\n            break;\n        case Internal:\n            assert name.startsWith(\"$\");\n            break;\n        case Empty:\n            assert name.equals(\"\");\n            break;\n        default:\n            assert !name.startsWith(\"$\")\n                && !name.equals(\"{}\")\n                && !name.equals(\"()\");\n            break;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate URI api(String path) {\n        if (!path.toLowerCase().matches(\"https?://.*\")) {\n            path = urlJoin(this.context, path);\n        }\n        if (!path.contains(\"?\")) {\n            if (!path.endsWith(\"/stop\")) {\n                path = urlJoin(path, \"api/json\");\n            }\n        } else {\n            String[] components = path.split(\"\\\\?\", 2);\n            path = urlJoin(components[0], \"api/json\") + \"?\" + components[1];\n        }\n        URI requestUri = uri.resolve(\"/\").resolve(path);\n        return requestUri;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static Mat zeros(int rows, int cols, int type)\n    {\n\n        Mat retVal = new Mat(n_zeros(rows, cols, type));\n\n        return retVal;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void addFooterView(View v, Object data, boolean isSelectable) {\n\n\n        FixedViewInfo info = new FixedViewInfo();\n        info.view = v;\n        info.data = data;\n        info.isSelectable = isSelectable;\n        mFooterViewInfos.add(info);\n\n        if (mAdapter != null && mObserver != null) {\n            mObserver.onChanged();\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tprotected void initEnablementBehaviours(List<EnablementBehaviour> enablementBehaviours) {\n\t\tenablementBehaviours.add(new WithinLegalLayerBoundsBehaviour());\n\t\tenablementBehaviours.add(new ValidToolDetectionActivator(new Class[] {\n\t\t\t\tGeometry.class,\n\t\t\t\tPolygon.class,\n\t\t\t\tMultiPolygon.class,\n\t\t\t\tLineString.class,\n\t\t\t\tMultiLineString.class }));\n\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void doRedirect()\n  {\n    try\n    {\n      if (this._playSource != 0)\n        PlayerAgent.getInstance().addPlaySource(this._playSource);\n      switch (this.redirectType)\n      {\n      case 0:\n        if ((this._channelid != null) && (!this._channelid.equalsIgnoreCase(\"\")))\n        {\n          ChannelNode localChannelNode = ChannelHelper.getInstance().getChannel(Integer.valueOf(this._channelid).intValue(), this._channeltype);\n          if ((localChannelNode == null) && (this._catid != null) && (!this._catid.equalsIgnoreCase(\"\")))\n            localChannelNode = ChannelHelper.getInstance().getFakeVirtualChannel(Integer.valueOf(this._channelid).intValue(), Integer.valueOf(this._catid).intValue(), \"\u6d93\u64b9\u7deb\");\n          if (localChannelNode != null)\n            ControllerManager.getInstance().openChannelDetailController(localChannelNode, false);\n          if ((this._programid != null) && (!this._programid.equalsIgnoreCase(\"\")) && (this._catid != null) && (!this._catid.equalsIgnoreCase(\"\")) && (this._channelid != null) && (!this._channelid.equalsIgnoreCase(\"\")))\n          {\n            PlayerAgent.getInstance().playAndLoadData(Integer.valueOf(this._catid).intValue(), Integer.valueOf(this._channelid).intValue(), Integer.valueOf(this._programid).intValue(), this._channeltype, \"\u6d93\u64b9\u7deb\");\n            return;\n          }\n        }\n        break;\n      case 1:\n        doRedirectPage();\n        return;\n      case 2:\n        doRedirectVirtualCateogry();\n        return;\n      case 3:\n        doRedirectLiveCategory();\n        return;\n      case 4:\n        doRedirectPodcaster();\n        return;\n      case 5:\n        doRedirectDownload();\n        return;\n      case 6:\n        doRedirectRecommendCategory();\n        return;\n      case 7:\n        doRedirectNovelAllContentController();\n        return;\n      case 8:\n        doRedirectChannelListByAttr();\n        return;\n      case 9:\n        doRedirectIMChat();\n        return;\n      case 10:\n        doRedirectSpecialTopic();\n        return;\n      case 11:\n        doRedirectResetFilter();\n      }\n      return;\n    }\n    catch (Exception localException)\n    {\n    }\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n\n\n        Debug.i();\n        Debug.v();\n        Debug.d();\n        Debug.e();\n        Debug.d();\n        Debug.w();\n\n        Debug.i(\"savedInstanceState: %s\", savedInstanceState);\n        Debug.v(\"savedInstanceState: %s\", savedInstanceState);\n        Debug.d(\"savedInstanceState: %s\", savedInstanceState);\n        Debug.e(\"savedInstanceState: %s\", savedInstanceState);\n        Debug.d(\"savedInstanceState: %s\", savedInstanceState);\n        Debug.w(\"savedInstanceState: %s\", savedInstanceState);\n\n        Debug.i(\"onCreate here!\");\n        Debug.i(1, 2, 3, 4, 5);\n        Debug.i(\"0\", \"1\", \"2\", \"3\"); // will just enumerate strings\n        Debug.i(\"%s %s %s\", null, null, null); // will call String.format\n        Debug.i(1, 2, 3, 4);\n\n        for (int i = 0; i < 10; i++, Debug.i(\"hello from a for loop\")) {\n            Debug.i(\"body of a for loop\");\n        }\n\n        if (savedInstanceState == null) {\n            getSupportFragmentManager()\n                    .beginTransaction()\n                    .add(R.id.content, new MainFragment())\n                    .commit();\n        }\n\n        Debug.trace(100);\n\n        someMethod(1, 5, \"Hello!\");\n\n        someMethodWithException();\n\n        tracking: simpleMethod();\n\n        Debug.e(\"ok\");\n\n        throwException();\n\n        objectPrint();\n\n        labels();\n\n        Debug.e(new UnknownHostException());\n\n        final UnknownHostException exception = new UnknownHostException();\n        exception.initCause(new Throwable(new RuntimeException(new IllegalStateException())));\n        Debug.e(exception, \"Hello this is a message for exception\");\n\n        final String bigOne;\n        {\n            final int length = 8001;\n            final char[] chars = new char[length];\n            Arrays.fill(chars, 'c');\n            bigOne = new String(chars);\n            Debug.i(bigOne);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\n\n\tprivate void adaptToEnablementChange(HighlightingStyle highlighting, PropertyChangeEvent event) {\n\t\tObject value = event.getNewValue();\n\t\tboolean eventValue;\n\t\tif (value instanceof Boolean)\n\t\t\teventValue = ((Boolean) value).booleanValue();\n\t\telse if (IPreferenceStore.TRUE.equals(value))\n\t\t\teventValue = true;\n\t\telse\n\t\t\teventValue = false;\n\t\thighlighting.setEnabled(eventValue);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic MP3Reader(File file) throws FileNotFoundException {\n\t\tthis.file = file;\n\n\t\t\n\t\tfis = new FileInputStream(file);\n\t\tchannel = fis.getChannel();\n\t\ttry {\n\t\t\tmappedFile = channel.map(FileChannel.MapMode.READ_ONLY, 0, channel\n\t\t\t\t\t.size());\n\t\t} catch (IOException e) {\n\t\t\tlog.error(\"MP3Reader {}\", e);\n\t\t}\n\n\t\tmappedFile.order(ByteOrder.BIG_ENDIAN);\n\t\tin = IoBuffer.wrap(mappedFile);\n\t\tanalyzeKeyFrames();\n\n\t\tfirstTags.addFirst(createFileMeta());\n\n\t\tif (in.remaining() > 4) {\n\t\t\tsearchNextFrame();\n\t\t\tint pos = in.position();\n\t\t\tMP3Header header = readHeader();\n\t\t\tin.position(pos);\n\t\t\tif (header != null) {\n\t\t\t\tcheckValidHeader(header);\n\t\t\t} else {\n\t\t\t\tthrow new RuntimeException(\"No initial header found.\");\n\t\t\t}\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n\n\n\n        Debug.i(\"onCreate here!\");\n        Debug.i(1, 2, 3, 4, 5);\n        Debug.i(\"0\", \"1\", \"2\", \"3\"); // will just enumerate strings\n        Debug.i(\"%s %s %s\", null, null, null); // will call String.format\n        Debug.i(1, 2, 3, 4);\n\n        for (int i = 0; i < 10; i++, Debug.i(\"hello from a for loop\")) {\n            Debug.i(\"body of a for loop\");\n        }\n\n        if (savedInstanceState == null) {\n            getSupportFragmentManager()\n                    .beginTransaction()\n                    .add(R.id.content, new MainFragment())\n                    .commit();\n        }\n\n        Debug.trace(100);\n\n        someMethod(1, 5, \"Hello!\");\n\n        someMethodWithException();\n\n        tracking: simpleMethod();\n\n        Debug.e(\"ok\");\n\n        throwException();\n\n        objectPrint();\n\n        labels();\n\n        Debug.e(new UnknownHostException());\n\n        final UnknownHostException exception = new UnknownHostException();\n        exception.initCause(new Throwable(new RuntimeException(new IllegalStateException())));\n        Debug.e(exception, \"Hello this is a message for exception\");\n\n        final String bigOne;\n        {\n            final int length = 8001;\n            final char[] chars = new char[length];\n            Arrays.fill(chars, 'c');\n            bigOne = new String(chars);\n            Debug.i(bigOne);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(char ch) {\n        return isIdentifierIgnorable((int)ch);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic List<ValidationIssue> checkExtensions(final Certificate cert,\n            final X509IssuerInfo issuerInfo, final Extensions requestedExtensions,\n            final X500Name requestedSubject) {\n        ParamUtil.requireNonNull(\"cert\", cert);\n        ParamUtil.requireNonNull(\"issuerInfo\", issuerInfo);\n\n        X509Certificate jceCert;\n        try {\n            jceCert = X509Util.toX509Cert(cert);\n        } catch (CertificateException ex) {\n            throw new IllegalArgumentException(\"invalid cert: \" + ex.getMessage());\n        }\n\n        List<ValidationIssue> result = new LinkedList<>();\n\n        Set<ASN1ObjectIdentifier> presentExtenionTypes =\n                getExensionTypes(cert, issuerInfo, requestedExtensions);\n\n        Extensions extensions = cert.getTBSCertificate().getExtensions();\n        ASN1ObjectIdentifier[] oids = extensions.getExtensionOIDs();\n\n        if (oids == null) {\n            ValidationIssue issue = new ValidationIssue(\"X509.EXT.GEN\", \"extension general\");\n            result.add(issue);\n            issue.setFailureMessage(\"no extension is present\");\n            return result;\n        }\n\n        List<ASN1ObjectIdentifier> certExtTypes = Arrays.asList(oids);\n\n        for (ASN1ObjectIdentifier extType : presentExtenionTypes) {\n            if (!certExtTypes.contains(extType)) {\n                ValidationIssue issue = createExtensionIssue(extType);\n                result.add(issue);\n                issue.setFailureMessage(\"extension is absent but is required\");\n            }\n        }\n\n        Map<ASN1ObjectIdentifier, ExtensionControl> extensionControls =\n                certProfile.extensionControls();\n        for (ASN1ObjectIdentifier oid : certExtTypes) {\n            ValidationIssue issue = createExtensionIssue(oid);\n            result.add(issue);\n            if (!presentExtenionTypes.contains(oid)) {\n                issue.setFailureMessage(\"extension is present but is not permitted\");\n                continue;\n            }\n\n            Extension ext = extensions.getExtension(oid);\n            StringBuilder failureMsg = new StringBuilder();\n            ExtensionControl extControl = extensionControls.get(oid);\n\n            if (extControl.isCritical() != ext.isCritical()) {\n                addViolation(failureMsg, \"critical\", ext.isCritical(), extControl.isCritical());\n            }\n\n            byte[] extensionValue = ext.getExtnValue().getOctets();\n            try {\n                if (Extension.authorityKeyIdentifier.equals(oid)) {\n                    checkExtensionIssuerKeyIdentifier(failureMsg, extensionValue, issuerInfo);\n                } else if (Extension.subjectKeyIdentifier.equals(oid)) {\n                    checkExtensionSubjectKeyIdentifier(failureMsg, extensionValue,\n                            cert.getSubjectPublicKeyInfo());\n                } else if (Extension.keyUsage.equals(oid)) {\n                    checkExtensionKeyUsage(failureMsg, extensionValue, jceCert.getKeyUsage(),\n                            requestedExtensions, extControl);\n                } else if (Extension.certificatePolicies.equals(oid)) {\n                    checkExtensionCertificatePolicies(failureMsg, extensionValue,\n                            requestedExtensions, extControl);\n                } else if (Extension.policyMappings.equals(oid)) {\n                    checkExtensionPolicyMappings(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.subjectAlternativeName.equals(oid)) {\n                    checkExtensionSubjectAltName(failureMsg, extensionValue, requestedExtensions,\n                            extControl, requestedSubject);\n                } else if (Extension.subjectDirectoryAttributes.equals(oid)) {\n                    checkExtensionSubjectDirAttrs(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.issuerAlternativeName.equals(oid)) {\n                    checkExtensionIssuerAltNames(failureMsg, extensionValue, issuerInfo);\n                } else if (Extension.basicConstraints.equals(oid)) {\n                    checkExtensionBasicConstraints(failureMsg, extensionValue);\n                } else if (Extension.nameConstraints.equals(oid)) {\n                    checkExtensionNameConstraints(failureMsg, extensionValue, extensions,\n                            extControl);\n                } else if (Extension.policyConstraints.equals(oid)) {\n                    checkExtensionPolicyConstraints(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.extendedKeyUsage.equals(oid)) {\n                    checkExtensionExtendedKeyUsage(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.cRLDistributionPoints.equals(oid)) {\n                    checkExtensionCrlDistributionPoints(failureMsg, extensionValue, issuerInfo);\n                } else if (Extension.inhibitAnyPolicy.equals(oid)) {\n                    checkExtensionInhibitAnyPolicy(failureMsg, extensionValue, extensions,\n                            extControl);\n                } else if (Extension.freshestCRL.equals(oid)) {\n                    checkExtensionDeltaCrlDistributionPoints(failureMsg, extensionValue,\n                            issuerInfo);\n                } else if (Extension.authorityInfoAccess.equals(oid)) {\n                    checkExtensionAuthorityInfoAccess(failureMsg, extensionValue, issuerInfo);\n                } else if (Extension.subjectInfoAccess.equals(oid)) {\n                    checkExtensionSubjectInfoAccess(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (ObjectIdentifiers.id_extension_admission.equals(oid)) {\n                    checkExtensionAdmission(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (ObjectIdentifiers.id_extension_pkix_ocsp_nocheck.equals(oid)) {\n                    checkExtensionOcspNocheck(failureMsg, extensionValue);\n                } else if (ObjectIdentifiers.id_extension_restriction.equals(oid)) {\n                    checkExtensionRestriction(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (ObjectIdentifiers.id_extension_additionalInformation.equals(oid)) {\n                    checkExtensionAdditionalInformation(failureMsg, extensionValue,\n                            requestedExtensions, extControl);\n                } else if (ObjectIdentifiers.id_extension_validityModel.equals(oid)) {\n                    checkExtensionValidityModel(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.privateKeyUsagePeriod.equals(oid)) {\n                    checkExtensionPrivateKeyUsagePeriod(failureMsg, extensionValue,\n                            jceCert.getNotBefore(), jceCert.getNotAfter());\n                } else if (Extension.qCStatements.equals(oid)) {\n                    checkExtensionQcStatements(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.biometricInfo.equals(oid)) {\n                    checkExtensionBiometricInfo(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (ObjectIdentifiers.id_pe_tlsfeature.equals(oid)) {\n                    checkExtensionTlsFeature(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (ObjectIdentifiers.id_xipki_ext_authorizationTemplate.equals(oid)) {\n                    checkExtensionAuthorizationTemplate(failureMsg, extensionValue,\n                            requestedExtensions, extControl);\n                } else {\n                    byte[] expected;\n                    if (ObjectIdentifiers.id_smimeCapabilities.equals(oid)) {\n                        expected = smimeCapabilities.value();\n                    } else {\n                        expected = getExpectedExtValue(oid, requestedExtensions, extControl);\n                    }\n\n                    if (!Arrays.equals(expected, extensionValue)) {\n                        addViolation(failureMsg, \"extension valus\", hex(extensionValue),\n                                (expected == null) ? \"not present\" : hex(expected));\n                    }\n                }\n\n                if (failureMsg.length() > 0) {\n                    issue.setFailureMessage(failureMsg.toString());\n                }\n\n            } catch (IllegalArgumentException | ClassCastException\n                    | ArrayIndexOutOfBoundsException ex) {\n                LOG.debug(\"extension value does not have correct syntax\", ex);\n                issue.setFailureMessage(\"extension value does not have correct syntax\");\n            }\n        }\n\n        return result;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, ClassTransformer transformer, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            MethodPair methodPair = transformer.methods.get(\"()V\" + method);\n            if (methodPair == null)\n            {\n                continue;\n            }\n            lineNumber = InvokerGenerator.printMethod(mv, clazz, method, Modifier.isStatic(methodPair.node.access), lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static String escapeCssIdentifier(final String text) {\n        return escapeCssIdentifier(text,\n                CssIdentifierEscapeType.BACKSLASH_ESCAPES_DEFAULT_TO_COMPACT_HEXA,\n                CssIdentifierEscapeLevel.LEVEL_2_ALL_NON_ASCII_PLUS_BASIC_ESCAPE_SET);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static void getTypeLabel(ITypeBinding binding, long flags, StringBuffer buffer) {\n\t\tif ((flags & JavaElementLabels.T_FULLY_QUALIFIED) != 0) {\n\t\t\tfinal IPackageBinding pack= binding.getPackage();\n\t\t\tif (pack != null && !pack.isUnnamed()) {\n\t\t\t\tbuffer.append(pack.getName());\n\t\t\t\tbuffer.append('.');\n\t\t\t}\n\t\t}\n\t\tif ((flags & (JavaElementLabels.T_FULLY_QUALIFIED | JavaElementLabels.T_CONTAINER_QUALIFIED)) != 0) {\n\t\t\tfinal ITypeBinding declaring= binding.getDeclaringClass();\n\t\t\tif (declaring != null) {\n\t\t\t\tgetTypeLabel(declaring, JavaElementLabels.T_CONTAINER_QUALIFIED | (flags & JavaElementLabels.P_COMPRESSED), buffer);\n\t\t\t\tbuffer.append('.');\n\t\t\t}\n\t\t\tfinal IMethodBinding declaringMethod= binding.getDeclaringMethod();\n\t\t\tif (declaringMethod != null) {\n\t\t\t\tgetMethodLabel(declaringMethod, 0, buffer);\n\t\t\t\tbuffer.append('.');\n\t\t\t}\n\t\t}\n\n\t\tif (binding.isCapture()) {\n\t\t\tgetTypeLabel(binding.getWildcard(), flags & JavaElementLabels.T_TYPE_PARAMETERS, buffer);\n\t\t} else if (binding.isWildcardType()) {\n\t\t\tbuffer.append('?');\n\t\t\tITypeBinding bound= binding.getBound();\n\t\t\tif (bound != null) {\n\t\t\t\tif (binding.isUpperbound()) {\n\t\t\t\t\tbuffer.append(\" extends \"); //$NON-NLS-1$\n\t\t\t\t} else {\n\t\t\t\t\tbuffer.append(\" super \"); //$NON-NLS-1$\n\t\t\t\t}\n\t\t\t\tgetTypeLabel(bound, flags & JavaElementLabels.T_TYPE_PARAMETERS, buffer);\n\t\t\t}\n\t\t} else if (binding.isArray()) {\n\t\t\tgetTypeLabel(binding.getElementType(), flags & JavaElementLabels.T_TYPE_PARAMETERS, buffer);\n\t\t\tappendDimensions(binding.getDimensions(), buffer);\n\t\t} else { // type variables, primitive, reftype\n\t\t\tString name= binding.getTypeDeclaration().getName();\n\t\t\tif (name.length() == 0) {\n\t\t\t\tif (binding.isEnum()) {\n\t\t\t\t\tbuffer.append('{' + JavaElementLabels.ELLIPSIS_STRING + '}');\n\t\t\t\t} else if (binding.isAnonymous()) {\n\t\t\t\t\tITypeBinding[] superInterfaces= binding.getInterfaces();\n\t\t\t\t\tITypeBinding baseType;\n\t\t\t\t\tif (superInterfaces.length > 0) {\n\t\t\t\t\t\tbaseType= superInterfaces[0];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbaseType= binding.getSuperclass();\n\t\t\t\t\t}\n\t\t\t\t\tif (baseType != null) {\n\t\t\t\t\t\tStringBuffer anonymBaseType= new StringBuffer();\n\t\t\t\t\t\tgetTypeLabel(baseType, flags & JavaElementLabels.T_TYPE_PARAMETERS, anonymBaseType);\n\t\t\t\t\t\tbuffer.append(Messages.format(JavaUIMessages.JavaElementLabels_anonym_type, anonymBaseType.toString()));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuffer.append(JavaUIMessages.JavaElementLabels_anonym);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbuffer.append(\"UNKNOWN\"); //$NON-NLS-1$\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbuffer.append(name);\n\t\t\t}\n\n\t\t\tif ((flags & JavaElementLabels.T_TYPE_PARAMETERS) != 0) {\n\t\t\t\tif (binding.isGenericType()) {\n\t\t\t\t\tgetTypeParametersLabel(binding.getTypeParameters(), buffer);\n\t\t\t\t} else if (binding.isParameterizedType()) {\n\t\t\t\t\tgetTypeArgumentsLabel(binding.getTypeArguments(), flags, buffer);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\tif ((flags & JavaElementLabels.T_POST_QUALIFIED) != 0) {\n\t\t\tfinal IMethodBinding declaringMethod= binding.getDeclaringMethod();\n\t\t\tfinal ITypeBinding declaringType= binding.getDeclaringClass();\n\t\t\tif (declaringMethod != null) {\n\t\t\t\tbuffer.append(JavaElementLabels.CONCAT_STRING);\n\t\t\t\tgetMethodLabel(declaringMethod, JavaElementLabels.T_FULLY_QUALIFIED | (flags & JavaElementLabels.P_COMPRESSED), buffer);\n\t\t\t} else if (declaringType != null) {\n\t\t\t\tbuffer.append(JavaElementLabels.CONCAT_STRING);\n\t\t\t\tgetTypeLabel(declaringType, JavaElementLabels.T_FULLY_QUALIFIED | (flags & JavaElementLabels.P_COMPRESSED), buffer);\n\t\t\t} else {\n\t\t\t\tfinal IPackageBinding pack= binding.getPackage();\n\t\t\t\tif (pack != null && !pack.isUnnamed()) {\n\t\t\t\t\tbuffer.append(JavaElementLabels.CONCAT_STRING);\n\t\t\t\t\tbuffer.append(pack.getName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static void solve(int n) {\n\t\tHashSet<String> all = new HashSet<String>();\n\t\tint[] factors;\n\t\tArrayList<int[]> comb;\n\t\tfor (int i = 0; i <= n * n; ++i) {\n\t\t\tfactors = getFactors(i, n);\n\t\t\tcomb = twoPair(factors, i);\n\t\t\tfor (int[] left : comb) {\n\t\t\t\tfor (int[] right : comb) {\n\t\t\t\t\taddFour(left[0], left[1], right[0], right[1], all);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (String str : all) {\n\t\t\tSystem.out.println(str);\t\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n        public List<BeanPropertyWriter> changeProperties(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyWriter> props)\n        {\n            for (int i = 0, len = props.size(); i < len; ++i) {\n                BeanPropertyWriter w = props.get(i);\n                if (Integer.class.isAssignableFrom(w.getType().getRawClass())) {\n                    props.set(i, new Only2BeanPropertyWriter(w));\n                }\n            }\n            return props;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static boolean isIdentifierIgnorable(int codePoint) {\n        return CharacterData.of(codePoint).isIdentifierIgnorable(codePoint);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, final Contract contract, final TradeOrder tradeOrder,\n\t\t\tfinal OrderState orderState) {\n\n\t\ttry {\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(tradeOrder.getOrderKey());\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170, \"Warning Order not found for Order Key: \" + orderId + \" make sure Client ID: \" + 0\n\t\t\t\t\t\t+ \" is not the master in TWS. On openOrder update.\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (BackTestBrokerModel.updateTradeOrder(tradeOrder, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\n\t\t\t\t\t_log.debug(\"Order Key: \" + transientInstance.getOrderKey() + \" filled.\");\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (updatedOrder.hasTradePosition() && !updatedOrder.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(updatedOrder.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Order key: \" + transientInstance.getOrderKey() + \" state changed. Status:\"\n\t\t\t\t\t\t\t+ orderState.m_status);\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(updatedOrder.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(updatedOrder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tpublic synchronized void onDownloadError(int index, String message) {\n\t\tTrace.e(\"onDownloadError:\" + message);\n\t\tdownloadStatus[index] = DownloadStatus.error;\n\t\tfor(int i = 0; i < downloadStatus.length; i++){\n\t\t\tif(downloadStatus[i] != DownloadStatus.done \n\t\t\t\t\t&& downloadStatus[i] != DownloadStatus.error){\n\t\t\t\tdownloadThreads[i].cancelByError();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\tentry.status = DownloadStatus.error;\n    \tnotifyUpdate(entry, DownloadService.NOTIFY_ERROR);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static Button createRadioButton(Composite parent, String message, int span) {\n        final Button button= new Button(parent, SWT.RADIO);\n        button.setText(message);\n        button.setLayoutData(createHFillGridData(span));\n        return button;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate ExternalCarrierBillingInstrumentProto(Builder builder) {\n    this(builder.instrumentKey, builder.subscriberIdentifier, builder.accountType, builder.subscriberCurrency, builder.transactionLimit, builder.subscriberName, builder.address1, builder.address2, builder.city, builder.state, builder.postalCode, builder.country, builder.encryptedSubscriberInfo);\n    setBuilder(builder);\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic long getblock(byte[] key, int i) {\n      return\n           (((long) key[i + 0] & 0x00000000000000FFL) << 0)\n         | (((long) key[i + 1] & 0x00000000000000FFL) << 8)\n         | (((long) key[i + 2] & 0x00000000000000FFL) << 16)\n         | (((long) key[i + 3] & 0x00000000000000FFL) << 24)\n         | (((long) key[i + 4] & 0x00000000000000FFL) << 32)\n         | (((long) key[i + 5] & 0x00000000000000FFL) << 40)\n         | (((long) key[i + 6] & 0x00000000000000FFL) << 48)\n         | (((long) key[i + 7] & 0x00000000000000FFL) << 56);\n   }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n    public void shouldCreateKeyIfCASIsAttemptedForKeyThatDoesNotExist() throws Exception {\n        final long originalIndex = 65;\n        localStore.setLastAppliedIndexForUnitTestsOnly(originalIndex);\n\n        final long newIndex = originalIndex + 1;\n        KeyValue keyValue = localStore.compareAndSet(newIndex, KEY, null, NEW_VALUE);\n        keyValue = checkNotNull(keyValue);\n\n        assertThat(keyValue.getKey(), equalTo(KEY));\n        assertThat(keyValue.getValue(), equalTo(NEW_VALUE));\n\n        assertThatLocalStoreHasKeyValue(KEY, NEW_VALUE);\n        assertThatLastAppliedIndexHasValue(newIndex);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + order.m_lmtPrice +\n        \" auxPrice=\" + order.m_auxPrice +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + order.m_minQty +\n        \" percentOffset=\" + order.m_percentOffset +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + order.m_nbboPriceCap +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + order.m_startingPrice +\n        \" stockRefPrice=\" + order.m_stockRefPrice +\n        \" delta=\" + order.m_delta +\n        \" stockRangeLower=\" + order.m_stockRangeLower +\n        \" stockRangeUpper=\" + order.m_stockRangeUpper +\n        \" volatility=\" + order.m_volatility +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + order.m_trailStopPrice +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + order.m_basisPoints;\n        \t\tmsg += \" basisPointsType=\" + order.m_basisPointsType;\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void insert(int itemNum, javax.microedition.lcdui.Item item)\n\t{\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public <T> List<T> toBeanList(ResultSet rs, Class<? extends T> type) throws SQLException {\n        List<T> results = new ArrayList<T>();\n\n        if (!rs.next()) {\n            return results;\n        }\n\n        PropertyDescriptor[] props = this.propertyDescriptors(type);\n        ResultSetMetaData rsmd = rs.getMetaData();\n        int[] columnToProperty = this.mapColumnsToProperties(rsmd, props);\n\n        do {\n            results.add(this.createBean(rs, type, props, columnToProperty));\n        } while (rs.next());\n\n        return results;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tprivate void completeAddAppWidget(final int appWidgetId, long container,\n\t\t\tint screen, AppWidgetHostView hostView,\n\t\t\tAppWidgetProviderInfo appWidgetInfo) {\n\t\tif (appWidgetInfo == null) {\n\t\t\tappWidgetInfo = mAppWidgetManager.getAppWidgetInfo(appWidgetId);\n\t\t}\n\n\t\tCellLayout layout = getCellLayout(container, screen);\n\n\t\tint[] minSpanXY = getMinSpanForWidget(this, appWidgetInfo);\n\t\tint[] spanXY = getSpanForWidget(this, appWidgetInfo);\n\n\t\tint[] cellXY = mTmpAddItemCellCoordinates;\n\t\tint[] touchXY = mPendingAddInfo.dropPos;\n\t\tint[] finalSpan = new int[2];\n\t\tboolean foundCellSpan = false;\n\t\tif (mPendingAddInfo.cellX >= 0 && mPendingAddInfo.cellY >= 0) {\n\t\t\tcellXY[0] = mPendingAddInfo.cellX;\n\t\t\tcellXY[1] = mPendingAddInfo.cellY;\n\t\t\tspanXY[0] = mPendingAddInfo.spanX;\n\t\t\tspanXY[1] = mPendingAddInfo.spanY;\n\t\t\tfoundCellSpan = true;\n\t\t} else if (touchXY != null) {\n\t\t\tint[] result = layout.findNearestVacantArea(touchXY[0], touchXY[1],\n\t\t\t\t\tminSpanXY[0], minSpanXY[1], spanXY[0], spanXY[1], cellXY,\n\t\t\t\t\tfinalSpan);\n\t\t\tspanXY[0] = finalSpan[0];\n\t\t\tspanXY[1] = finalSpan[1];\n\t\t\tfoundCellSpan = (result != null);\n\t\t} else {\n\t\t\tfoundCellSpan = layout.findCellForSpan(cellXY, minSpanXY[0],\n\t\t\t\t\tminSpanXY[1]);\n\t\t}\n\n\t\tif (!foundCellSpan) {\n\t\t\tif (appWidgetId != -1) {\n\t\t\t\tnew Thread(\"deleteAppWidgetId\") {\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tmAppWidgetHost.deleteAppWidgetId(appWidgetId);\n\t\t\t\t\t}\n\t\t\t\t}.start();\n\t\t\t}\n\t\t\tshowOutOfSpaceMessage(isHotseatLayout(layout));\n\t\t\treturn;\n\t\t}\n\n\t\tLauncherAppWidgetInfo launcherInfo = new LauncherAppWidgetInfo(\n\t\t\t\tappWidgetId, appWidgetInfo.provider);\n\t\tlauncherInfo.spanX = spanXY[0];\n\t\tlauncherInfo.spanY = spanXY[1];\n\t\tlauncherInfo.minSpanX = mPendingAddInfo.minSpanX;\n\t\tlauncherInfo.minSpanY = mPendingAddInfo.minSpanY;\n\n\t\tLauncherModel.addItemToDatabase(this, launcherInfo, container, screen,\n\t\t\t\tcellXY[0], cellXY[1], false);\n\n\t\tif (!mRestoring) {\n\t\t\tif (hostView == null) {\n\t\t\t\tlauncherInfo.hostView = mAppWidgetHost.createView(this,\n\t\t\t\t\t\tappWidgetId, appWidgetInfo);\n\t\t\t\tlauncherInfo.hostView.setAppWidget(appWidgetId, appWidgetInfo);\n\t\t\t} else {\n\t\t\t\tlauncherInfo.hostView = hostView;\n\t\t\t}\n\n\t\t\tlauncherInfo.hostView.setTag(launcherInfo);\n\t\t\tlauncherInfo.hostView.setVisibility(View.VISIBLE);\n\t\t\tlauncherInfo.notifyWidgetSizeChanged(this);\n\n\t\t\tmWorkspace.addInScreen(launcherInfo.hostView, container, screen,\n\t\t\t\t\tcellXY[0], cellXY[1], launcherInfo.spanX,\n\t\t\t\t\tlauncherInfo.spanY, isWorkspaceLocked());\n\n\t\t\taddWidgetToAutoAdvanceIfNeeded(launcherInfo.hostView, appWidgetInfo);\n\t\t}\n\t\tresetAddInfo();\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker, boolean showDirection) {\n        this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, ClassTransformer transformer, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            MethodPair methodPair = transformer.methods.get(\"()V\" + method);\n            if (methodPair == null)\n            {\n                continue;\n            }\n            lineNumber = InvokerGenerator.printMethod(mv, clazz, method, Modifier.isStatic(methodPair.node.access), lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public Value<Integer> run(Integer intermediate, String userEmail) {\n      String prompt =\n          \"The intermediate result is \" + intermediate + \".\"\n               + \" Please give one more int\";\n      PromisedValue<Integer> oneMoreInt = newPromise();\n      ExternalAgentJob.getIntFromUser(prompt, userEmail, oneMoreInt.getHandle());\n      return oneMoreInt;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void insert(int itemNum, javax.microedition.lcdui.Item item)\n\t{\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; }\n        return retVal;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n    public void shouldCreateKeyIfCASIsAttemptedForKeyThatDoesNotExist() throws Exception {\n        final long newCommandIndex = 66;\n        KeyValue keyValue = localStore.compareAndSet(newCommandIndex, KEY, null, NEW_VALUE);\n        keyValue = checkNotNull(keyValue);\n\n        assertThat(keyValue.getKey(), equalTo(KEY));\n        assertThat(keyValue.getValue(), equalTo(NEW_VALUE));\n\n        assertThatLocalStoreHasKeyValue(KEY, NEW_VALUE);\n        assertThatLastAppliedCommandIndexHasValue(newCommandIndex);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n\tpublic void testBlock() throws IOException {\n\t\tBlock b = new Block(BlockCompressionMethod.GZIP.ordinal(),\n\t\t\t\tBlockContentType.CORE, 0, \"123457890\".getBytes(), null);\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tb.write(baos);\n\n\t\tByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n\t\tBlock b2 = new Block(bais, true, true);\n\n\t\tassertArrayEquals(b.getRawContent(), b2.getRawContent());\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    protected void init() {\n        label = i18n.string(R.string.dt_tests);\n        icon = R.drawable.tab_tests;\n        \n        DesktopItem dt = null;\n        dt = new DesktopItem(new Runnable() {\n            public void run() {\n                Contexts ctx = Contexts.instance(); \n                ctx.getMasterDataProvider().reset();\n            }\n        }, \"Reset Master Dataprovider\", R.drawable.dtitem_test);\n        \n        addItem(dt);\n        \n        dt = new DesktopItem(new Runnable() {\n            public void run() {\n                Contexts ctx = Contexts.instance(); \n                Intent intent = null;\n                intent = new Intent(activity,BookMgntActivity.class);\n                activity.startActivityForResult(intent,0);\n            }\n        }, \"Book Management\", R.drawable.dtitem_test);\n        \n        addItem(dt);\n        \n        \n        dt = new DesktopItem(new Runnable() {\n            public void run() {\n                Contexts ctx = Contexts.instance(); \n                Book book = ctx.getMasterDataProvider().findBook(ctx.getWorkingBookId());\n                \n                Intent intent = null;\n                intent = new Intent(activity,BookEditorActivity.class);\n                intent.putExtra(BookEditorActivity.INTENT_MODE_CREATE,false);\n                intent.putExtra(BookEditorActivity.INTENT_BOOK,book);\n                activity.startActivityForResult(intent,Constants.REQUEST_BOOK_EDITOR_CODE);\n            }\n        }, \"Edit selected book\", R.drawable.dtitem_test);\n        \n        addItem(dt);\n        \n        dt = new DesktopItem(new Runnable() {\n            public void run() {\n                Book book = new Book(\"test\",\"$\",SymbolPosition.AFTER,\"\");\n                Intent intent = null;\n                intent = new Intent(activity,BookEditorActivity.class);\n                intent.putExtra(BookEditorActivity.INTENT_MODE_CREATE,true);\n                intent.putExtra(BookEditorActivity.INTENT_BOOK,book);\n                activity.startActivityForResult(intent,Constants.REQUEST_BOOK_EDITOR_CODE);\n            }\n        }, \"Add book\", R.drawable.dtitem_test);\n        \n        addItem(dt);\n        \n        \n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                Contexts.instance().getDataProvider().reset();\n                GUIs.shortToast(activity,\"reset data provider\");\n            }}, \"rest data provider\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testFirstDayOfWeek();\n            }}, \"first day of week\",R.drawable.dtitem_test){\n        });\n        \n        \n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testCreateTestdata(1);\n            }}, \"test data1\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testCreateTestdata(25);\n            }}, \"test data25\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testCreateTestdata(50);\n            }}, \"test data50\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testCreateTestdata(100);\n            }}, \"test data100\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testCreateTestdata(200);\n            }}, \"test data200\",R.drawable.dtitem_test));\n        addItem(new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                testJust();\n            }}, \"just test\",R.drawable.dtitem_test));\n        \n        DesktopItem padding = new DesktopItem(new Runnable(){\n            @Override\n            public void run() {\n                \n            }}, \"padding\",R.drawable.dtitem_test);\n        \n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n        addItem(padding);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, final Contract contract, final TradeOrder tradeOrder,\n\t\t\tfinal OrderState orderState) {\n\n\t\ttry {\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(tradeOrder.getOrderKey());\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170, \"Warning Order not found for Order Key: \" + orderId + \" make sure Client ID: \" + 0\n\t\t\t\t\t\t+ \" is not the master in TWS. On openOrder update.\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (BackTestBrokerModel.updateTradeOrder(tradeOrder, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\n\t\t\t\t\t_log.debug(\"Order Key: \" + transientInstance.getOrderKey() + \" filled.\");\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (updatedOrder.hasTradePosition() && !updatedOrder.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(updatedOrder.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Order key: \" + transientInstance.getOrderKey() + \" state changed. Status:\"\n\t\t\t\t\t\t\t+ orderState.m_status);\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(updatedOrder.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(updatedOrder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + order.m_lmtPrice +\n        \" auxPrice=\" + order.m_auxPrice +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + order.m_minQty +\n        \" percentOffset=\" + order.m_percentOffset +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + order.m_nbboPriceCap +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + order.m_startingPrice +\n        \" stockRefPrice=\" + order.m_stockRefPrice +\n        \" delta=\" + order.m_delta +\n        \" stockRangeLower=\" + order.m_stockRangeLower +\n        \" stockRangeUpper=\" + order.m_stockRangeUpper +\n        \" volatility=\" + order.m_volatility +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + order.m_trailStopPrice +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + order.m_basisPoints;\n        \t\tmsg += \" basisPointsType=\" + order.m_basisPointsType;\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tpublic void checkPrivileges(MPrincipal principal, List<MPrivilege> privileges) throws SqoopException {\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"==> RangerSqoopAuthorizer.checkPrivileges()\");\n\t\t}\n\n\t\ttry {\n\t\t\tactivatePluginClassLoader();\n\n\t\t\tauthorizationValidator.checkPrivileges(principal, privileges);\n\t\t} finally {\n\t\t\tdeactivatePluginClassLoader();\n\t\t}\n\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"<== RangerSqoopAuthorizer.checkPrivileges()\");\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Deprecated\n    public static boolean isJavaLetterOrDigit(char ch) {\n        return isJavaIdentifierPart(ch);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void print() {\n\n        if (DEBUG_PRINT_REF_COUNTS) {\n            System.out.print(\"num\\t\");\n            System.out.print(\"type\\t\");\n            System.out.print(\"name\\t\");\n            System.out.print(\"val\\t\");\n            System.out.print(\"par\\t\");\n            System.out.print(\"lch\\t\");\n            System.out.print(\"psib\");\n            System.out.println();\n            for (int i = 0; i < fNodeType.length; i++) {\n                if (fNodeType[i] != null) {\n                    System.out.print(\"--------\");\n                    System.out.print(\"--------\");\n                    System.out.print(\"--------\");\n                    System.out.print(\"--------\");\n                    System.out.print(\"--------\");\n                    System.out.print(\"--------\");\n                    System.out.print(\"--------\");\n                    System.out.println();\n\n                    System.out.print(i);\n                    System.out.print('\\t');\n                    switch (fNodeType[i][CHUNK_SIZE]) {\n                        case DocumentImpl.ELEMENT_DEFINITION_NODE: { System.out.print(\"EDef\"); break; }\n                        case Node.DOCUMENT_NODE: { System.out.print(\"Doc\"); break; }\n                        case Node.DOCUMENT_TYPE_NODE: { System.out.print(\"DType\"); break; }\n                        case Node.COMMENT_NODE: { System.out.print(\"Com\"); break; }\n                        case Node.PROCESSING_INSTRUCTION_NODE: { System.out.print(\"PI\"); break; }\n                        case Node.ELEMENT_NODE: { System.out.print(\"Elem\"); break; }\n                        case Node.ENTITY_NODE: { System.out.print(\"Ent\"); break; }\n                        case Node.ENTITY_REFERENCE_NODE: { System.out.print(\"ERef\"); break; }\n                        case Node.TEXT_NODE: { System.out.print(\"Text\"); break; }\n                        case Node.ATTRIBUTE_NODE: { System.out.print(\"Attr\"); break; }\n                        case DeferredNode.TYPE_NODE: { System.out.print(\"TypeInfo\"); break; }\n                        default: { System.out.print(\"?\"+fNodeType[i][CHUNK_SIZE]); }\n                    }\n                    System.out.print('\\t');\n                    System.out.print(fNodeName[i][CHUNK_SIZE]);\n                    System.out.print('\\t');\n                    System.out.print(fNodeValue[i][CHUNK_SIZE]);\n                    System.out.print('\\t');\n                    System.out.print(fNodeURI[i][CHUNK_SIZE]);\n                    System.out.print('\\t');\n                    System.out.print(fNodeParent[i][CHUNK_SIZE]);\n                    System.out.print('\\t');\n                    System.out.print(fNodeLastChild[i][CHUNK_SIZE]);\n                    System.out.print('\\t');\n                    System.out.print(fNodePrevSib[i][CHUNK_SIZE]);\n                    System.out.print('\\t');\n                    System.out.print(fNodeExtra[i][CHUNK_SIZE]);\n                    System.out.println();\n                }\n            }\n        }\n\n        if (DEBUG_PRINT_TABLES) {\n            System.out.println(\"# start table\");\n            for (int i = 0; i < fNodeCount; i++) {\n                int chunk = i >> CHUNK_SHIFT;\n                int index = i & CHUNK_MASK;\n                if (i % 10 == 0) {\n                    System.out.print(\"num\\t\");\n                    System.out.print(\"type\\t\");\n                    System.out.print(\"name\\t\");\n                    System.out.print(\"val\\t\");\n                    System.out.print(\"uri\\t\");\n                    System.out.print(\"par\\t\");\n                    System.out.print(\"lch\\t\");\n                    System.out.print(\"psib\\t\");\n                    System.out.print(\"xtra\");\n                    System.out.println();\n                }\n                System.out.print(i);\n                System.out.print('\\t');\n                switch (getChunkIndex(fNodeType, chunk, index)) {\n                    case DocumentImpl.ELEMENT_DEFINITION_NODE: { System.out.print(\"EDef\"); break; }\n                    case Node.DOCUMENT_NODE: { System.out.print(\"Doc\"); break; }\n                    case Node.DOCUMENT_TYPE_NODE: { System.out.print(\"DType\"); break; }\n                    case Node.COMMENT_NODE: { System.out.print(\"Com\"); break; }\n                    case Node.PROCESSING_INSTRUCTION_NODE: { System.out.print(\"PI\"); break; }\n                    case Node.ELEMENT_NODE: { System.out.print(\"Elem\"); break; }\n                    case Node.ENTITY_NODE: { System.out.print(\"Ent\"); break; }\n                    case Node.ENTITY_REFERENCE_NODE: { System.out.print(\"ERef\"); break; }\n                    case Node.TEXT_NODE: { System.out.print(\"Text\"); break; }\n                    case Node.ATTRIBUTE_NODE: { System.out.print(\"Attr\"); break; }\n                    case DeferredNode.TYPE_NODE: { System.out.print(\"TypeInfo\"); break; }\n                    default: { System.out.print(\"?\"+getChunkIndex(fNodeType, chunk, index)); }\n                }\n                System.out.print('\\t');\n                System.out.print(getChunkValue(fNodeName, chunk, index));\n                System.out.print('\\t');\n                System.out.print(getNodeValue(chunk, index));\n                System.out.print('\\t');\n                System.out.print(getChunkValue(fNodeURI, chunk, index));\n                System.out.print('\\t');\n                System.out.print(getChunkIndex(fNodeParent, chunk, index));\n                System.out.print('\\t');\n                System.out.print(getChunkIndex(fNodeLastChild, chunk, index));\n                System.out.print('\\t');\n                System.out.print(getChunkIndex(fNodePrevSib, chunk, index));\n                System.out.print('\\t');\n                System.out.print(getChunkIndex(fNodeExtra, chunk, index));\n                System.out.println();\n            }\n            System.out.println(\"# end table\");\n        }\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    protected void initEnablementBehaviours( List<EnablementBehaviour> helper ) {\n        helper.add(new ValidToolDetectionActivator(new Class[]{Geometry.class, LineString.class, MultiLineString.class,\n                Polygon.class, MultiPolygon.class, Point.class, MultiPoint.class}));\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tpublic void checkPrivileges(MPrincipal principal, List<MPrivilege> privileges) throws SqoopException {\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"==> RangerSqoopAuthorizer.checkPrivileges()\");\n\t\t}\n\n\t\ttry {\n\t\t\tactivatePluginClassLoader();\n\n\t\t\tauthorizationValidator.checkPrivileges(principal, privileges);\n\t\t} finally {\n\t\t\tdeactivatePluginClassLoader();\n\t\t}\n\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"<== RangerSqoopAuthorizer.checkPrivileges()\");\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tprotected void initEnablementBehaviours(List<EnablementBehaviour> enablementBehaviours) {\n\t\tenablementBehaviours.add(new WithinLegalLayerBoundsBehaviour());\n\t\tenablementBehaviours.add(new ValidToolDetectionActivator(new Class[] {\n\t\t\t\tGeometry.class,\n\t\t\t\tPolygon.class,\n\t\t\t\tMultiPolygon.class,\n\t\t\t\tLineString.class,\n\t\t\t\tMultiLineString.class }));\n\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n    void sampleValueAboveMaximumExpectedValue() {\n        statsConfig.setMaximumExpectedValue(2);\n\n        TimeWindowLatencyHistogram histogram = new TimeWindowLatencyHistogram(Clock.SYSTEM, statsConfig);\n        histogram.record(3);\n        assertThat(histogram.histogramCountAtValue(3)).isEqualTo(1);\n        assertThat(histogram.histogramCountAtValue(Long.MAX_VALUE)).isEqualTo(1);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate Class primitiveType(char c) {\n        switch(c) {\n        case 66: \n            return Byte.TYPE;\n\n        case 67: \n            return Character.TYPE;\n\n        case 68: \n            return Double.TYPE;\n\n        case 70: \n            return Float.TYPE;\n\n        case 73: \n            return Integer.TYPE;\n\n        case 74: \n            return Long.TYPE;\n\n        case 83: \n            return Short.TYPE;\n\n        case 90: \n            return Boolean.TYPE;\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static void main(String[] args) {\n        try {\n            Method method = android.os.Process.class.getDeclaredMethod(\"setArgV0\", String.class);\n            method.setAccessible(true);\n            method.invoke(null, PROCESS);\n            LogUtil.i(\"Set process name success\");\n        } catch (Exception e) {\n            LogUtil.e(\"Set process name failed:\" + e.toString());\n        }\n        ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n        Class<?> clz;\n        try {\n            clz = classLoader.loadClass(\"android.ddm.DdmHandleAppName\");\n        } catch (ClassNotFoundException e) {\n            LogUtil.w(\"Set DDM name failed:\" + e.toString());\n            clz = null;\n        }\n        if (clz != null) {\n            try {\n                Method method = clz.getDeclaredMethod(\"setAppName\", String.class);\n                method.invoke(clz, PROCESS);\n                LogUtil.i(\"Set process name success with M1\");\n            } catch (Exception e) {\n                try {\n                    Method method = clz.getDeclaredMethod(\"setAppName\", String.class, int.class);\n                    method.invoke(clz, PROCESS, 0);\n                    LogUtil.i(\"Set process name success with M2\");\n                } catch (Exception ex) {\n                    LogUtil.w(\"Set DDM name failed:\" + ex.toString());\n                }\n            }\n        }\n        Looper.prepare();\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (sPower) {\n                    String cmd = String.format(\"am startservice%s-n com.stkj.newslocker/\" +\n                                    \"com.stkj.newslocker.services.LockService\",\n                            SysUtil.isAfter17() ? \" --user 0 \" : \" \");\n                    LogUtil.i(\"CMD exec \" + cmd);\n                    try {\n                        Runtime.getRuntime().exec(cmd);\n                    } catch (IOException e) {\n                        LogUtil.w(\"CMD exec failed:\" + e.toString());\n                        Intent intent = new Intent();\n                        ComponentName component = new ComponentName(\"com.stkj.newslocker\",\n                                LockService.class.getName());\n                        intent.setComponent(component);\n                        IActivityManager am = ActivityManagerNative.getDefault();\n                        Method method;\n                        try {\n                            method = am.getClass().getMethod(\"startService\",\n                                    IApplicationThread.class, Intent.class, String.class,\n                                    int.class);\n                            Object cn = method.invoke(am, null, intent, intent.getType(), 0);\n                            LogUtil.i(\"start service return: \" + cn);\n                        } catch (NoSuchMethodException ex) {\n                            try {\n                                method = am.getClass().getMethod(\"startService\",\n                                        IApplicationThread.class, Intent.class, String.class);\n                                Object cn = method.invoke(am, null, intent, intent.getType());\n                                LogUtil.i(\"start service return: \" + cn);\n                            } catch (NoSuchMethodException exc) {\n                                LogUtil.i(\"start service method not found: \" + exc);\n                            } catch (Exception exc) {\n                                LogUtil.e(\"Start service failed:\" + exc.toString());\n                            }\n                        } catch (Exception ex) {\n                            LogUtil.e(\"Start service failed:\" + ex.toString());\n                        }\n                    }\n                    try {\n                        Thread.sleep(180000);\n                    } catch (InterruptedException e) {\n                        LogUtil.w(\"Thread sleep failed:\" + e.toString());\n                    }\n                }\n            }\n        }).start();\n        Looper.loop();\n        LogUtil.i(\"====================Daemon exit with error====================\");\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic void writeLength(OutputStream out, int len) throws IOException\n  {\n    if (len < 128)\n      out.write(len);\n    else if (len < 256)\n      {\n        out.write(0x81);\n        out.write(len);\n      }\n    else if (len < 65536)\n      {\n        out.write(0x82);\n        out.write(len >> 8);\n        out.write(len);\n      }\n    else if (len < 16777216)\n      {\n        out.write(0x83);\n        out.write(len >> 16);\n        out.write(len >>  8);\n        out.write(len);\n      }\n    else\n      {\n        out.write(0x84);\n        out.write(len >> 24);\n        out.write(len >> 16);\n        out.write(len >>  8);\n        out.write(len);\n      }\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public CallNode(\n        ParseRegion region,\n        String name,\n        Syntax syntax,\n        List<ParseTreeNode> args)\n    {\n        this.region = region;\n        assert name != null;\n        assert syntax != null;\n        assert args != null;\n        this.name = name;\n        this.syntax = syntax;\n        this.argList = args;\n\n        switch (syntax) {\n        case Braces:\n            assert name.equals(\"{}\");\n            break;\n        case Parentheses:\n            assert name.equals(\"()\");\n            break;\n        case Internal:\n            assert name.startsWith(\"$\");\n            break;\n        case Empty:\n            assert name.equals(\"\");\n            break;\n        default:\n            assert !name.startsWith(\"$\")\n                && !name.equals(\"{}\")\n                && !name.equals(\"()\");\n            break;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; }\n        return retVal;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(java.io.File file) throws org.apache.xmlbeans.XmlException, java.io.IOException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( file, type, null ); }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public Value<Integer> run(Integer intermediate, String userEmail) {\n      String prompt =\n          \"The intermediate result is \" + intermediate + \".\"\n               + \" Please give one more int\";\n      PromisedValue<Integer> oneMoreInt = newPromise();\n      ExternalAgentJob.getIntFromUser(prompt, userEmail, oneMoreInt.getHandle());\n      return oneMoreInt;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void registerReceiver() {\n\t\tIntentFilter updateIntent = new IntentFilter();\n\t\tupdateIntent.addAction(ACTION_UPDATE_WEATHER);\n\t\tupdateIntent.addAction(ACTION_SWITH_CITY);\n\t\tupdateIntent.addAction(ACTION_NEXT_CITY);\n\t\tupdateIntent.addAction(ACTION_TIME_SET);\n\t\tupdateIntent.addAction(Intent.ACTION_TIME_TICK);\n\t\tupdateIntent.addAction(Intent.ACTION_DATE_CHANGED);\n\t\tupdateIntent.addAction(Intent.ACTION_TIMEZONE_CHANGED);\n\t\tregisterReceiver(mTimePickerBroadcast, updateIntent);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n\tpublic void testBlock () throws ValidationException\n\t{\n\t\tBlk b1 =\n\t\t\t\tBlk.fromWireDump (\"\");\n\t\tassertTrue (b1.getHash ().equals (\"0000000000000449ee5b94ba7a051caffff5c23d6a03335f6e20e3985b5ffa61\"));\n\t\tBlk b2 = Blk.fromWireDump (b1.toWireDump ());\n\t\tb2.computeHash ();\n\t\tassertTrue (b1.getHash ().equals (b2.getHash ()));\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate BytesRef addTail(int state, BytesRefBuilder term, int idx, int leadLabel) {\n    int maxIndex = -1;\n    int numTransitions = automaton.initTransition(state, transition);\n    for(int i=0;i<numTransitions;i++) {\n      automaton.getNextTransition(transition);\n      if (transition.min < leadLabel) {\n        maxIndex = i;\n      } else {\n        break;\n      }\n    }\n\n\n    assert maxIndex != -1;\n    automaton.getTransition(state, maxIndex, transition);\n\n    final int floorLabel;\n    if (transition.max > leadLabel-1) {\n      floorLabel = leadLabel-1;\n    } else {\n      floorLabel = transition.max;\n    }\n    term.grow(1+idx);\n    term.setByteAt(idx, (byte) floorLabel);\n\n    state = transition.dest;\n    idx++;\n\n    while (true) {\n      numTransitions = automaton.getNumTransitions(state);\n      if (numTransitions == 0) {\n        assert runAutomaton.isAccept(state);\n        term.setLength(idx);\n        return term.get();\n      } else {\n        automaton.getTransition(state, numTransitions-1, transition);\n        term.grow(1+idx);\n        term.setByteAt(idx, (byte) transition.max);\n        state = transition.dest;\n        idx++;\n      }\n    }\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n\n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n\n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n\n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode parse(java.net.URL u, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException, java.io.IOException {\n          return (com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( u, type, options ); }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void registerReceiver() {\n\t\tIntentFilter updateIntent = new IntentFilter();\n\t\tupdateIntent.addAction(ACTION_UPDATE_WEATHER);\n\t\tupdateIntent.addAction(ACTION_SWITH_CITY);\n\t\tupdateIntent.addAction(ACTION_NEXT_CITY);\n\t\tupdateIntent.addAction(ACTION_TIME_SET);\n\t\tupdateIntent.addAction(Intent.ACTION_TIME_TICK);\n\t\tupdateIntent.addAction(Intent.ACTION_DATE_CHANGED);\n\t\tupdateIntent.addAction(Intent.ACTION_TIMEZONE_CHANGED);\n\t\tregisterReceiver(mTimePickerBroadcast, updateIntent);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; }\n        return retVal;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void Bld_all(Xoa_lang_mgr lang_mgr, Xoa_fsys_mgr fsys_mgr, Xol_lang_transform lang_transform) {\n\t\tIo_url lang_root = fsys_mgr.Cfg_lang_core_dir().OwnerDir();\n\t\tParse_mediawiki(lang_mgr, lang_root.GenSubDir(\"mediawiki\"), lang_transform);\n\t\tSave_langs(lang_mgr, lang_root.GenSubDir(Xol_mw_lang_parser.Dir_name_core), Ordered_hash_.New_bry(), Ordered_hash_.New_bry());\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic static <P extends IProperty<T>, T extends Comparable<T>> T getStatePropertySafely(@Nullable TileEntity te, Class<? extends Block> block, P property, T defaultVal) {\n\t\treturn getStatePropertySafely(te, block, property, defaultVal, false, false);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tprivate void buildElements()\n\t{\n\t\ttitleLabel = new Label(Box2DBumpers.APPLICATION_NAME, skin, URL_LABEL_FONT, Color.YELLOW);\n\n\t\tstartButton = new TextButton(\"Start\", skin);\n\t\taboutButton = new TextButton(\"About\", skin);\n\n\t\ttable = new Table();\n\n\t\ttable.setSize(getWidth(), getHeight());\n\n\t\ttable.row();\n\t\ttable.add(titleLabel).expandY().expandX();\n\t\ttable.row();\n\t\ttable.add(startButton).expandY().expandX();\n\t\ttable.row();\n\t\ttable.add(aboutButton).expandY().expandX();\n\n\t\ttable.setFillParent(true);\n\n\t\ttable.pack();\n\t\t\n\t\tstartButton.addListener(new ClickListener()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic void clicked(InputEvent event, float x, float y)\n\t\t\t{\n\t\t\t\tdirector.sendEvent(AppEvents.EVENT_TRANSITION_TO_MAIN_SCENE, event.getRelatedActor());\n\t\t\t}\n\n\t\t});\n\n\t\taboutButton.addListener(new ClickListener()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic void clicked(InputEvent event, float x, float y)\n\t\t\t{\n\t\t\t\tdirector.sendEvent(AppEvents.EVENT_TRANSITION_TO_ABOUT_SCENE, event.getRelatedActor());\n\t\t\t}\n\n\t\t});\n\n\t\ttable.pack();\n\n\t\taddActor(table);\n\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static void main(String[] args) {\n        try {\n            Method method = android.os.Process.class.getDeclaredMethod(\"setArgV0\", String.class);\n            method.setAccessible(true);\n            method.invoke(null, PROCESS);\n            LogUtil.i(\"Set process name success\");\n        } catch (Exception e) {\n            LogUtil.e(\"Set process name failed:\" + e.toString());\n        }\n        ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n        Class<?> clz;\n        try {\n            clz = classLoader.loadClass(\"android.ddm.DdmHandleAppName\");\n        } catch (ClassNotFoundException e) {\n            LogUtil.w(\"Set DDM name failed:\" + e.toString());\n            clz = null;\n        }\n        if (clz != null) {\n            try {\n                Method method = clz.getDeclaredMethod(\"setAppName\", String.class);\n                method.invoke(clz, PROCESS);\n                LogUtil.i(\"Set process name success with M1\");\n            } catch (Exception e) {\n                try {\n                    Method method = clz.getDeclaredMethod(\"setAppName\", String.class, int.class);\n                    method.invoke(clz, PROCESS, 0);\n                    LogUtil.i(\"Set process name success with M2\");\n                } catch (Exception ex) {\n                    LogUtil.w(\"Set DDM name failed:\" + ex.toString());\n                }\n            }\n        }\n        Looper.prepare();\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (sPower) {\n                    String cmd = String.format(\"am startservice%s-n com.stkj.newslocker/\" +\n                                    \"com.stkj.newslocker.services.LockService\",\n                            SysUtil.isAfter17() ? \" --user 0 \" : \" \");\n                    LogUtil.i(\"CMD exec \" + cmd);\n                    try {\n                        Runtime.getRuntime().exec(cmd);\n                    } catch (IOException e) {\n                        LogUtil.w(\"CMD exec failed:\" + e.toString());\n                        Intent intent = new Intent();\n                        ComponentName component = new ComponentName(\"com.stkj.newslocker\",\n                                LockService.class.getName());\n                        intent.setComponent(component);\n                        IActivityManager am = ActivityManagerNative.getDefault();\n                        Method method;\n                        try {\n                            method = am.getClass().getMethod(\"startService\",\n                                    IApplicationThread.class, Intent.class, String.class,\n                                    int.class);\n                            Object cn = method.invoke(am, null, intent, intent.getType(), 0);\n                            LogUtil.i(\"start service return: \" + cn);\n                        } catch (NoSuchMethodException ex) {\n                            try {\n                                method = am.getClass().getMethod(\"startService\",\n                                        IApplicationThread.class, Intent.class, String.class);\n                                Object cn = method.invoke(am, null, intent, intent.getType());\n                                LogUtil.i(\"start service return: \" + cn);\n                            } catch (NoSuchMethodException exc) {\n                                LogUtil.i(\"start service method not found: \" + exc);\n                            } catch (Exception exc) {\n                                LogUtil.e(\"Start service failed:\" + exc.toString());\n                            }\n                        } catch (Exception ex) {\n                            LogUtil.e(\"Start service failed:\" + ex.toString());\n                        }\n                    }\n                    try {\n                        Thread.sleep(180000);\n                    } catch (InterruptedException e) {\n                        LogUtil.w(\"Thread sleep failed:\" + e.toString());\n                    }\n                }\n            }\n        }).start();\n        Looper.loop();\n        LogUtil.i(\"====================Daemon exit with error====================\");\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void doGenerate(final Resource resource, final IFileSystemAccess fsa) {\n    EList<EObject> _contents = resource.getContents();\n    EObject _head = IterableExtensions.<EObject>head(_contents);\n    final Model model = ((Model) _head);\n    EList<Declaration> _declarations = model.getDeclarations();\n    final Procedure1<Declaration> _function = new Procedure1<Declaration>() {\n      public void apply(final Declaration it) {\n        NetModelGenerator.this.generate(it, model, fsa);\n      }\n    };\n    IterableExtensions.<Declaration>forEach(_declarations, _function);\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void setGlobalProperties(Map<String, Object> globalProperties) {\n        this.globalProperties = globalProperties;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void doRedirect()\n  {\n    try\n    {\n      if (this._playSource != 0)\n        PlayerAgent.getInstance().addPlaySource(this._playSource);\n      switch (this.redirectType)\n      {\n      case 0:\n        if ((this._channelid != null) && (!this._channelid.equalsIgnoreCase(\"\")))\n        {\n          ChannelNode localChannelNode = ChannelHelper.getInstance().getChannel(Integer.valueOf(this._channelid).intValue(), this._channeltype);\n          if ((localChannelNode == null) && (this._catid != null) && (!this._catid.equalsIgnoreCase(\"\")))\n            localChannelNode = ChannelHelper.getInstance().getFakeVirtualChannel(Integer.valueOf(this._channelid).intValue(), Integer.valueOf(this._catid).intValue(), \"\u6d93\u64b9\u7deb\");\n          if (localChannelNode != null)\n            ControllerManager.getInstance().openChannelDetailController(localChannelNode, false);\n          if ((this._programid != null) && (!this._programid.equalsIgnoreCase(\"\")) && (this._catid != null) && (!this._catid.equalsIgnoreCase(\"\")) && (this._channelid != null) && (!this._channelid.equalsIgnoreCase(\"\")))\n          {\n            PlayerAgent.getInstance().playAndLoadData(Integer.valueOf(this._catid).intValue(), Integer.valueOf(this._channelid).intValue(), Integer.valueOf(this._programid).intValue(), this._channeltype, \"\u6d93\u64b9\u7deb\");\n            return;\n          }\n        }\n        break;\n      case 1:\n        doRedirectPage();\n        return;\n      case 2:\n        doRedirectVirtualCateogry();\n        return;\n      case 3:\n        doRedirectLiveCategory();\n        return;\n      case 4:\n        doRedirectPodcaster();\n        return;\n      case 5:\n        doRedirectDownload();\n        return;\n      case 6:\n        doRedirectRecommendCategory();\n        return;\n      case 7:\n        doRedirectNovelAllContentController();\n        return;\n      case 8:\n        doRedirectChannelListByAttr();\n        return;\n      case 9:\n        doRedirectIMChat();\n        return;\n      case 10:\n        doRedirectSpecialTopic();\n        return;\n      case 11:\n        doRedirectResetFilter();\n      }\n      return;\n    }\n    catch (Exception localException)\n    {\n    }\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public void onPlayerStateChange(PlayerState oldState, PlayerState newState, Bundle extra) {\n\n        mPrevState = mCurrentState;\n        mCurrentState = newState;\n        Log.d(TAG, \"State change event! Oldstate= \" + oldState + \" NewState= \" + newState);\n        if (mPrevState == mCurrentState) {\n            Log.w(TAG, \"Duplicate state change message!!! \");\n        }\n        if (mPrevState == PlayerState.BUFFERING && mCurrentState != PlayerState.BUFFERING) {\n            AnalyticsHelper.trackPlaybackControlAction(AnalyticsTags.ACTION_PLAYBACK_BUFFER_END,\n                                                       mSelectedContent, getCurrentPosition());\n        }\n        switch (newState) {\n            case IDLE:\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mIsContentChangeRequested) {\n                    openSelectedContent();\n                }\n                break;\n            case OPENING:\n                break;\n            case OPENED:\n                if (mPlayer != null && mIsActivityResumed) {\n                    mPlayer.prepare();\n                }\n                else {\n                    mIsContentChangeRequested = false;\n                }\n                break;\n            case PREPARING:\n                if (mPlaybackOverlayFragment != null && mPlaybackOverlayFragment.getView() !=\n                        null) {\n                    mPlaybackOverlayFragment.getView().setVisibility(View.VISIBLE);\n                }\n                break;\n            case READY:\n                mPlaybackState = LeanbackPlaybackState.PAUSED;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(false);\n                }\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mPrevState == PlayerState.PREPARING) {\n                    if (mPlaybackOverlayFragment != null) {\n                        modifyClosedCaptionState(mIsCloseCaptionEnabled);\n\n                        mPlaybackOverlayFragment.updatePlayback();\n                        mPlaybackOverlayFragment.startProgressAutomation();\n                    }\n                    if (mCurrentPlaybackPosition > 0) {\n                        mPlayer.seekTo(mCurrentPlaybackPosition);\n                    }\n                    if (mAutoPlay || mIsContentChangeRequested) {\n                        play();\n                        mAutoPlay = false;\n                        if (mIsContentChangeRequested) {\n                            mIsContentChangeRequested = false;\n                        }\n                    }\n                }\n                else if (mAudioFocusState == AudioFocusState.NoFocusNoDuck) {\n                    play();\n                }\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PAUSED);\n                }\n                break;\n            case PLAYING:\n                mPlaybackState = LeanbackPlaybackState.PLAYING;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(true);\n                }\n                hideProgress();\n                mWindow.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PLAYING);\n                }\n                if (mCurrentPlaybackPosition < getCurrentPosition()) {\n                    mCurrentPlaybackPosition = getCurrentPosition();\n                }\n                AnalyticsHelper.trackPlaybackStarted(mSelectedContent, getDuration(),\n                                                     mCurrentPlaybackPosition);\n                break;\n            case BUFFERING:\n                showProgress();\n                AnalyticsHelper.trackPlaybackControlAction(AnalyticsTags\n                                                                   .ACTION_PLAYBACK_BUFFER_START,\n                                                           mSelectedContent, getCurrentPosition());\n                break;\n            case SEEKING:\n                showProgress();\n                break;\n            case ENDED:\n                hideProgress();\n                if (mAdsImplementation != null && mAdsImplementation.isPostRollAvailable()) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.COMPLETED);\n                }\n                else {\n                    playbackFinished();\n                }\n\n                break;\n            case CLOSING:\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.stopProgressAutomation();\n                }\n                break;\n            case ERROR:\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                Log.e(TAG, \"Player encountered an error!\");\n                break;\n            default:\n                Log.e(TAG, \"Unknown state!!!!!\");\n                break;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1];\n            int col = 1;\n            if (val.length > 2)\n                col = Math.max(1, (int)val[2]);\n\n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            Object o = table.data.get(row-1)[col-1];\n            if (o instanceof Float)\n                return (Float)o;\n            return 0f;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Deprecated\n    public static boolean isJavaLetterOrDigit(char ch) {\n        return isJavaIdentifierPart(ch);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic LevelGen(int w, int h, int featureSize) {\n\t\tthis.w = w;\n\t\tthis.h = h;\n\n\t\tvalues = new double[w * h];\n\n\t\tfor (int y = 0; y < w; y += featureSize) {\n\t\t\tfor (int x = 0; x < w; x += featureSize) {\n\t\t\t\tsetSample(x, y, random.nextFloat() * 2 - 1);\n\t\t\t}\n\t\t}\n\n\t\tint stepSize = featureSize;\n\t\tdouble scale = 1.0 / w;\n\t\tdouble scaleMod = 1;\n\t\tdo {\n\t\t\tint halfStep = stepSize / 2;\n\t\t\tfor (int y = 0; y < w; y += stepSize) {\n\t\t\t\tfor (int x = 0; x < w; x += stepSize) {\n\t\t\t\t\tdouble a = sample(x, y);\n\t\t\t\t\tdouble b = sample(x + stepSize, y);\n\t\t\t\t\tdouble c = sample(x, y + stepSize);\n\t\t\t\t\tdouble d = sample(x + stepSize, y + stepSize);\n\n\t\t\t\t\tdouble e = (a + b + c + d) / 4.0 + (random.nextFloat() * 2 - 1) * stepSize * scale;\n\t\t\t\t\tsetSample(x + halfStep, y + halfStep, e);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int y = 0; y < w; y += stepSize) {\n\t\t\t\tfor (int x = 0; x < w; x += stepSize) {\n\t\t\t\t\tdouble a = sample(x, y);\n\t\t\t\t\tdouble b = sample(x + stepSize, y);\n\t\t\t\t\tdouble c = sample(x, y + stepSize);\n\t\t\t\t\tdouble d = sample(x + halfStep, y + halfStep);\n\t\t\t\t\tdouble e = sample(x + halfStep, y - halfStep);\n\t\t\t\t\tdouble f = sample(x - halfStep, y + halfStep);\n\n\t\t\t\t\tdouble H = (a + b + d + e) / 4.0 + (random.nextFloat() * 2 - 1) * stepSize * scale * 0.5;\n\t\t\t\t\tdouble g = (a + c + d + f) / 4.0 + (random.nextFloat() * 2 - 1) * stepSize * scale * 0.5;\n\t\t\t\t\tsetSample(x + halfStep, y, H);\n\t\t\t\t\tsetSample(x, y + halfStep, g);\n\t\t\t\t}\n\t\t\t}\n\t\t\tstepSize /= 2;\n\t\t\tscale *= (scaleMod + 0.8);\n\t\t\tscaleMod *= 0.3;\n\t\t} while (stepSize > 1);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    void reserveSlot(Type type, int slot) {\n        assert slot >= 0;\n        final int size = type.getSize();\n        assert size == 1 || size == 2;\n        if (slot + size > types.length) {\n            types = grow(types);\n        }\n        assert types[slot] == null && (size == 1 || types[slot + 1] == null);\n        assign(slot, type);\n        activate(slot);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\tChannel channel = ctx.channel();\n\t\t\tchannels.remove(channel);\n\t\t\tNode client = channel.attr(STATE).get();\n\t\t\tuserLinkList.delUser(client);\n\t\t\tcombobox.removeItem(client.username);\n\t\t\tsuper.channelUnregistered(ctx);\n\t\t\tbroadcasts(new LoginOutMessage(client.username));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public void onDownloadError(int index, String message) {\n    for (int i = 0; i < mDownloadStatus.length; i++) {\n        if (mDownloadStatus[i] != DownFile.DownloadStatus.FINISH && mDownloadStatus[i] != DownFile.DownloadStatus.ERROR) {\n            mDownloadThreads[i].cancel();\n        }\n    }\n    notifyError(message);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic List<ValidationIssue> checkExtensions(final Certificate cert,\n            final X509IssuerInfo issuerInfo, final Extensions requestedExtensions,\n            final X500Name requestedSubject) {\n        ParamUtil.requireNonNull(\"cert\", cert);\n        ParamUtil.requireNonNull(\"issuerInfo\", issuerInfo);\n\n        X509Certificate jceCert;\n        try {\n            jceCert = X509Util.toX509Cert(cert);\n        } catch (CertificateException ex) {\n            throw new IllegalArgumentException(\"invalid cert: \" + ex.getMessage());\n        }\n\n        List<ValidationIssue> result = new LinkedList<>();\n\n        Set<ASN1ObjectIdentifier> presentExtenionTypes =\n                getExensionTypes(cert, issuerInfo, requestedExtensions);\n\n        Extensions extensions = cert.getTBSCertificate().getExtensions();\n        ASN1ObjectIdentifier[] oids = extensions.getExtensionOIDs();\n\n        if (oids == null) {\n            ValidationIssue issue = new ValidationIssue(\"X509.EXT.GEN\", \"extension general\");\n            result.add(issue);\n            issue.setFailureMessage(\"no extension is present\");\n            return result;\n        }\n\n        List<ASN1ObjectIdentifier> certExtTypes = Arrays.asList(oids);\n\n        for (ASN1ObjectIdentifier extType : presentExtenionTypes) {\n            if (!certExtTypes.contains(extType)) {\n                ValidationIssue issue = createExtensionIssue(extType);\n                result.add(issue);\n                issue.setFailureMessage(\"extension is absent but is required\");\n            }\n        }\n\n        Map<ASN1ObjectIdentifier, ExtensionControl> extensionControls =\n                certProfile.extensionControls();\n        for (ASN1ObjectIdentifier oid : certExtTypes) {\n            ValidationIssue issue = createExtensionIssue(oid);\n            result.add(issue);\n            if (!presentExtenionTypes.contains(oid)) {\n                issue.setFailureMessage(\"extension is present but is not permitted\");\n                continue;\n            }\n\n            Extension ext = extensions.getExtension(oid);\n            StringBuilder failureMsg = new StringBuilder();\n            ExtensionControl extControl = extensionControls.get(oid);\n\n            if (extControl.isCritical() != ext.isCritical()) {\n                addViolation(failureMsg, \"critical\", ext.isCritical(), extControl.isCritical());\n            }\n\n            byte[] extensionValue = ext.getExtnValue().getOctets();\n            try {\n                if (Extension.authorityKeyIdentifier.equals(oid)) {\n                    checkExtensionIssuerKeyIdentifier(failureMsg, extensionValue, issuerInfo);\n                } else if (Extension.subjectKeyIdentifier.equals(oid)) {\n                    checkExtensionSubjectKeyIdentifier(failureMsg, extensionValue,\n                            cert.getSubjectPublicKeyInfo());\n                } else if (Extension.keyUsage.equals(oid)) {\n                    checkExtensionKeyUsage(failureMsg, extensionValue, jceCert.getKeyUsage(),\n                            requestedExtensions, extControl);\n                } else if (Extension.certificatePolicies.equals(oid)) {\n                    checkExtensionCertificatePolicies(failureMsg, extensionValue,\n                            requestedExtensions, extControl);\n                } else if (Extension.policyMappings.equals(oid)) {\n                    checkExtensionPolicyMappings(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.subjectAlternativeName.equals(oid)) {\n                    checkExtensionSubjectAltName(failureMsg, extensionValue, requestedExtensions,\n                            extControl, requestedSubject);\n                } else if (Extension.subjectDirectoryAttributes.equals(oid)) {\n                    checkExtensionSubjectDirAttrs(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.issuerAlternativeName.equals(oid)) {\n                    checkExtensionIssuerAltNames(failureMsg, extensionValue, issuerInfo);\n                } else if (Extension.basicConstraints.equals(oid)) {\n                    checkExtensionBasicConstraints(failureMsg, extensionValue);\n                } else if (Extension.nameConstraints.equals(oid)) {\n                    checkExtensionNameConstraints(failureMsg, extensionValue, extensions,\n                            extControl);\n                } else if (Extension.policyConstraints.equals(oid)) {\n                    checkExtensionPolicyConstraints(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.extendedKeyUsage.equals(oid)) {\n                    checkExtensionExtendedKeyUsage(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.cRLDistributionPoints.equals(oid)) {\n                    checkExtensionCrlDistributionPoints(failureMsg, extensionValue, issuerInfo);\n                } else if (Extension.inhibitAnyPolicy.equals(oid)) {\n                    checkExtensionInhibitAnyPolicy(failureMsg, extensionValue, extensions,\n                            extControl);\n                } else if (Extension.freshestCRL.equals(oid)) {\n                    checkExtensionDeltaCrlDistributionPoints(failureMsg, extensionValue,\n                            issuerInfo);\n                } else if (Extension.authorityInfoAccess.equals(oid)) {\n                    checkExtensionAuthorityInfoAccess(failureMsg, extensionValue, issuerInfo);\n                } else if (Extension.subjectInfoAccess.equals(oid)) {\n                    checkExtensionSubjectInfoAccess(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (ObjectIdentifiers.id_extension_admission.equals(oid)) {\n                    checkExtensionAdmission(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (ObjectIdentifiers.id_extension_pkix_ocsp_nocheck.equals(oid)) {\n                    checkExtensionOcspNocheck(failureMsg, extensionValue);\n                } else if (ObjectIdentifiers.id_extension_restriction.equals(oid)) {\n                    checkExtensionRestriction(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (ObjectIdentifiers.id_extension_additionalInformation.equals(oid)) {\n                    checkExtensionAdditionalInformation(failureMsg, extensionValue,\n                            requestedExtensions, extControl);\n                } else if (ObjectIdentifiers.id_extension_validityModel.equals(oid)) {\n                    checkExtensionValidityModel(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.privateKeyUsagePeriod.equals(oid)) {\n                    checkExtensionPrivateKeyUsagePeriod(failureMsg, extensionValue,\n                            jceCert.getNotBefore(), jceCert.getNotAfter());\n                } else if (Extension.qCStatements.equals(oid)) {\n                    checkExtensionQcStatements(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (Extension.biometricInfo.equals(oid)) {\n                    checkExtensionBiometricInfo(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (ObjectIdentifiers.id_pe_tlsfeature.equals(oid)) {\n                    checkExtensionTlsFeature(failureMsg, extensionValue, requestedExtensions,\n                            extControl);\n                } else if (ObjectIdentifiers.id_xipki_ext_authorizationTemplate.equals(oid)) {\n                    checkExtensionAuthorizationTemplate(failureMsg, extensionValue,\n                            requestedExtensions, extControl);\n                } else {\n                    byte[] expected;\n                    if (ObjectIdentifiers.id_smimeCapabilities.equals(oid)) {\n                        expected = smimeCapabilities.value();\n                    } else {\n                        expected = getExpectedExtValue(oid, requestedExtensions, extControl);\n                    }\n\n                    if (!Arrays.equals(expected, extensionValue)) {\n                        addViolation(failureMsg, \"extension valus\", hex(extensionValue),\n                                (expected == null) ? \"not present\" : hex(expected));\n                    }\n                }\n\n                if (failureMsg.length() > 0) {\n                    issue.setFailureMessage(failureMsg.toString());\n                }\n\n            } catch (IllegalArgumentException | ClassCastException\n                    | ArrayIndexOutOfBoundsException ex) {\n                LOG.debug(\"extension value does not have correct syntax\", ex);\n                issue.setFailureMessage(\"extension value does not have correct syntax\");\n            }\n        }\n\n        return result;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static void timestampValueInsertSelect(Connection conn, TimeUnit databasePrecision, final String nativeType)\n            throws Exception {\n        assertNotNull(conn);\n\n        final Statement statement = conn.createStatement();\n        try {\n            statement.execute(\"DROP TABLE test_table\");\n        } catch (SQLException e) {\n        } finally {\n            FileHelper.safeClose(statement);\n        }\n\n        assertFalse(conn.isReadOnly());\n\n        JdbcDataContext dc = new JdbcDataContext(conn);\n        final Schema schema = dc.getDefaultSchema();\n\n        final Timestamp timestamp1;\n        switch (databasePrecision) {\n        case SECONDS:\n            timestamp1 = Timestamp.valueOf(\"2015-10-16 16:33:33\");\n            break;\n        case MILLISECONDS:\n            timestamp1 = Timestamp.valueOf(\"2015-10-16 16:33:33.456\");\n            break;\n        case MICROSECONDS:\n            timestamp1 = Timestamp.valueOf(\"2015-10-16 16:33:33.456001\");\n            break;\n        case NANOSECONDS:\n            timestamp1 = Timestamp.valueOf(\"2015-10-16 16:33:33.456001234\");\n            break;\n        default:\n            throw new UnsupportedOperationException(\"Unsupported database precision: \" + databasePrecision);\n        }\n\n        final Timestamp timestamp2;\n        switch (databasePrecision) {\n        case SECONDS:\n            timestamp2 = Timestamp.valueOf(\"2015-10-16 16:33:34\");\n            break;\n        case MILLISECONDS:\n            timestamp2 = Timestamp.valueOf(\"2015-10-16 16:33:34.683\");\n            break;\n        case MICROSECONDS:\n            timestamp2 = Timestamp.valueOf(\"2015-10-16 16:33:34.683005\");\n            break;\n        case NANOSECONDS:\n            timestamp2 = Timestamp.valueOf(\"2015-10-16 16:33:34.683005678\");\n            break;\n        default:\n            throw new UnsupportedOperationException(\"Unsupported database precision: \" + databasePrecision);\n        }\n\n        dc.executeUpdate(new UpdateScript() {\n            @Override\n            public void run(UpdateCallback cb) {\n                TableCreationBuilder tableBuilder = cb.createTable(schema, \"test_table\");\n                tableBuilder.withColumn(\"id\").ofType(ColumnType.INTEGER);\n                tableBuilder.withColumn(\"insertiontime\").ofType(ColumnType.TIMESTAMP);\n                if (nativeType == null) {\n                    tableBuilder.withColumn(\"insertiontime\").ofType(ColumnType.TIMESTAMP);\n                } else {\n                    tableBuilder.withColumn(\"insertiontime\").ofType(ColumnType.TIMESTAMP).ofNativeType(nativeType);\n                }\n                Table table = tableBuilder.execute();\n\n                cb.insertInto(table).value(\"id\", 1).value(\"insertiontime\", timestamp1).execute();\n                cb.insertInto(table).value(\"id\", 2).value(\"insertiontime\", timestamp2).execute();\n            }\n        });\n\n        DataSet ds = dc.query().from(\"test_table\").select(\"id\").and(\"insertiontime\").execute();\n        assertTrue(ds.next());\n\n        switch (databasePrecision) {\n        case SECONDS:\n            assertEquals(\"Row[values=[1, 2015-10-16 16:33:33]]\", ds.getRow().toString());\n            break;\n        case MILLISECONDS:\n            assertEquals(\"Row[values=[1, 2015-10-16 16:33:33.456]]\", ds.getRow().toString());\n            break;\n        case MICROSECONDS:\n            assertEquals(\"Row[values=[1, 2015-10-16 16:33:33.456001]]\", ds.getRow().toString());\n            break;\n        case NANOSECONDS:\n            assertEquals(\"Row[values=[1, 2015-10-16 16:33:33.456001234]]\", ds.getRow().toString());\n            break;\n        default:\n            throw new UnsupportedOperationException(\"Unsupported database precision: \" + databasePrecision);\n        }\n        assertTrue(ds.getRow().getValue(0) instanceof Number);\n        assertTrue(ds.next());\n\n        switch (databasePrecision) {\n        case SECONDS:\n            assertEquals(\"Row[values=[2, 2015-10-16 16:33:34]]\", ds.getRow().toString());\n            break;\n        case MILLISECONDS:\n            assertEquals(\"Row[values=[2, 2015-10-16 16:33:34.683]]\", ds.getRow().toString());\n            break;\n        case MICROSECONDS:\n            assertEquals(\"Row[values=[2, 2015-10-16 16:33:34.683005]]\", ds.getRow().toString());\n            break;\n        case NANOSECONDS:\n            assertEquals(\"Row[values=[2, 2015-10-16 16:33:34.683005678]]\", ds.getRow().toString());\n            break;\n        default:\n            throw new UnsupportedOperationException(\"Unsupported database precision: \" + databasePrecision);\n        }\n        assertFalse(ds.next());\n        ds.close();\n\n        if (databasePrecision != TimeUnit.SECONDS) {\n            Query query = dc.query().from(\"test_table\").select(\"id\").where(\"insertiontime\").lessThan(timestamp2)\n                    .toQuery();\n            try {\n                ds = dc.executeQuery(query);\n            } catch (Exception e) {\n                System.out.println(\"Failing query was: \" + dc.getQueryRewriter().rewriteQuery(query));\n                throw e;\n            }\n            assertTrue(ds.next());\n            assertEquals(\"Row[values=[1]]\", ds.getRow().toString());\n            assertFalse(ds.next());\n            ds.close();\n\n            ds = dc.query().from(\"test_table\").select(\"id\").where(\"insertiontime\").greaterThan(timestamp1).execute();\n            assertTrue(ds.next());\n            assertEquals(\"Row[values=[2]]\", ds.getRow().toString());\n            assertFalse(ds.next());\n            ds.close();\n\n            dc.executeUpdate(new UpdateScript() {\n                @Override\n                public void run(UpdateCallback callback) {\n                    callback.deleteFrom(\"test_table\").where(\"insertiontime\").eq(timestamp1).execute();\n                }\n            });\n\n            ds = dc.query().from(\"test_table\").selectCount().execute();\n            assertTrue(ds.next());\n            assertEquals(\"Row[values=[1]]\", ds.getRow().toString());\n            assertFalse(ds.next());\n            ds.close();\n        }\n\n        dc.executeUpdate(new UpdateScript() {\n            @Override\n            public void run(UpdateCallback callback) {\n                callback.dropTable(\"test_table\").execute();\n            }\n        });\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public long testBlock(String filename, int blockSize) throws IOException {\n    LOGGER.info(\"Searching for divider in blocks of {}...\", blockSize);\n    long start = System.currentTimeMillis();\n\n    RandomAccessInputStream in = new RandomAccessInputStream(filename);\n    long offset = in.findString(blockSize, TAG).length();\n    in.close();\n\n    long end = System.currentTimeMillis();\n    LOGGER.info(\"Search result: {} -- in {} ms\", offset, end - start);\n    return offset;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr graph) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), graph});\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic void writeLength(OutputStream out, int len) throws IOException\n  {\n    if (len < 128)\n      out.write(len);\n    else if (len < 256)\n      {\n        out.write(0x81);\n        out.write(len);\n      }\n    else if (len < 65536)\n      {\n        out.write(0x82);\n        out.write(len >> 8);\n        out.write(len);\n      }\n    else if (len < 16777216)\n      {\n        out.write(0x83);\n        out.write(len >> 16);\n        out.write(len >>  8);\n        out.write(len);\n      }\n    else\n      {\n        out.write(0x84);\n        out.write(len >> 24);\n        out.write(len >> 16);\n        out.write(len >>  8);\n        out.write(len);\n      }\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public List<String> getGuid() {\n        if (guid == null) {\n            guid = new ArrayList<String>();\n        }\n        return this.guid;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Nonnull\n    public static <K, V, T> ProcessorMetaSupplier streamRemoteMapP(\n            @Nonnull String mapName,\n            @Nonnull ClientConfig clientConfig,\n            @Nullable DistributedPredicate<EventJournalMapEvent<K, V>> predicate,\n            @Nullable DistributedFunction<EventJournalMapEvent<K, V>, T> projection,\n            boolean startFromLatestSequence\n    ) {\n        return StreamEventJournalP.streamMapP(mapName, clientConfig, predicate, projection, startFromLatestSequence);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    protected void initEnablementBehaviours( List<EnablementBehaviour> helper ) {\n        helper.add(new WithinLegalLayerBoundsBehaviour());\n        helper.add(new ValidToolDetectionActivator(new Class[]{Geometry.class, Polygon.class, MultiPolygon.class, LineString.class, MultiLineString.class}));\n   }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void initStatement(int type, int concurrency, int holdability,\n                               int autoGeneratedKeys, String[] columnNames,\n                               int[] columnIndexes) throws SqlException {\n        switch (type) {\n        case ResultSet.TYPE_FORWARD_ONLY:\n        case ResultSet.TYPE_SCROLL_INSENSITIVE:\n        case ResultSet.TYPE_SCROLL_SENSITIVE:\n            resultSetType_ = type;\n            break;\n        default:\n            throw new SqlException(agent_.logWriter_, \n                new ClientMessageId(SQLState.INVALID_API_PARAMETER),\n                type, \"type\", \"createStatement()\");\n        }\n\n        switch (concurrency) {\n        case ResultSet.CONCUR_READ_ONLY:\n        case ResultSet.CONCUR_UPDATABLE:\n            resultSetConcurrency_ = concurrency;\n            break;\n        default:\n            throw new SqlException(agent_.logWriter_, \n                new ClientMessageId(SQLState.INVALID_API_PARAMETER),\n                concurrency, \"concurrency\", \"createStatement()\");\n        }\n\n        switch (holdability) {\n        case ResultSet.CLOSE_CURSORS_AT_COMMIT:\n        case ResultSet.HOLD_CURSORS_OVER_COMMIT:\n            resultSetHoldability_ = holdability;\n            break;\n        default:\n            throw new SqlException(agent_.logWriter_,\n                new ClientMessageId(SQLState.INVALID_API_PARAMETER),\n                holdability, \"holdability\", \"createStatement()\");\n        }\n\n        switch (autoGeneratedKeys) {\n        case Statement.NO_GENERATED_KEYS:\n        case Statement.RETURN_GENERATED_KEYS:\n            autoGeneratedKeys_ = autoGeneratedKeys;\n            break;\n        default:\n            throw new SqlException(agent_.logWriter_, \n                new ClientMessageId(SQLState.INVALID_API_PARAMETER),\n                autoGeneratedKeys, \"autoGeneratedKeys\", \"createStatement\");\n        }\n\n        generatedKeysColumnNames_ = columnNames;\n        generatedKeysColumnIndexes_ = columnIndexes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate Expression readTerm() {\n        Expression r;\n        switch (currentTokenType) {\n            case AT:\n                read();\n                r = new Variable(session, readAliasIdentifier());\n                if (readIf(\":=\")) {\n                    Expression value = readExpression();\n                    Function function = Function.getFunction(database, \"SET\");\n                    function.setParameter(0, r);\n                    function.setParameter(1, value);\n                    r = function;\n                }\n                break;\n            case PARAMETER:\n                boolean indexed = Character.isDigit(sqlCommandChars[parseIndex]);\n                read();\n                Parameter p;\n                if (indexed && currentTokenType == VALUE &&\n                        currentValue.getType() == Value.INT) {\n                    if (indexedParameterList == null) {\n                        if (parameters == null) {\n                            throw getSyntaxError();\n                        } else if (parameters.size() > 0) {\n                            throw DbException\n                                    .get(ErrorCode.CANNOT_MIX_INDEXED_AND_UNINDEXED_PARAMS);\n                        }\n                        indexedParameterList = New.arrayList();\n                    }\n                    int index = currentValue.getInt() - 1;\n                    if (index < 0 || index >= Constants.MAX_PARAMETER_INDEX) {\n                        throw DbException.getInvalidValueException(\n                                \"parameter index\", index);\n                    }\n                    if (indexedParameterList.size() <= index) {\n                        indexedParameterList.ensureCapacity(index + 1);\n                        while (indexedParameterList.size() <= index) {\n                            indexedParameterList.add(null);\n                        }\n                    }\n                    p = indexedParameterList.get(index);\n                    if (p == null) {\n                        p = new Parameter(index);\n                        indexedParameterList.set(index, p);\n                    }\n                    read();\n                } else {\n                    if (indexedParameterList != null) {\n                        throw DbException\n                                .get(ErrorCode.CANNOT_MIX_INDEXED_AND_UNINDEXED_PARAMS);\n                    }\n                    p = new Parameter(parameters.size());\n                }\n                parameters.add(p);\n                r = p;\n                break;\n            case KEYWORD:\n                if (isToken(\"SELECT\") || isToken(\"FROM\")) {\n                    Query query = parseSelect();\n                    r = new Subquery(query);\n                } else {\n                    throw getSyntaxError();\n                }\n                break;\n            case IDENTIFIER:\n                String name = currentToken;\n                if (currentTokenQuoted) {\n                    read();\n                    if (readIf(\"(\")) {\n                        r = readFunction(null, name);\n                    } else if (readIf(\".\")) {\n                        r = readTermObjectDot(name);\n                    } else {\n                        r = new ExpressionColumn(database, null, null, name);\n                    }\n                } else {\n                    read();\n                    if (readIf(\".\")) {\n                        r = readTermObjectDot(name);\n                    } else if (equalsToken(\"CASE\", name)) {\n                        r = readCase();\n                    } else if (readIf(\"(\")) {\n                        r = readFunction(null, name);\n                    } else if (equalsToken(\"CURRENT_USER\", name)) {\n                        r = readFunctionWithoutParameters(\"USER\");\n                    } else if (equalsToken(\"CURRENT\", name)) {\n                        if (readIf(\"TIMESTAMP\")) {\n                            r = readFunctionWithoutParameters(\"CURRENT_TIMESTAMP\");\n                        } else if (readIf(\"TIME\")) {\n                            r = readFunctionWithoutParameters(\"CURRENT_TIME\");\n                        } else if (readIf(\"DATE\")) {\n                            r = readFunctionWithoutParameters(\"CURRENT_DATE\");\n                        } else {\n                            r = new ExpressionColumn(database, null, null, name);\n                        }\n                    } else if (equalsToken(\"NEXT\", name) && readIf(\"VALUE\")) {\n                        read(\"FOR\");\n                        Sequence sequence = readSequence();\n                        r = new SequenceValue(sequence);\n                    } else if (currentTokenType == VALUE &&\n                            currentValue.getType() == Value.STRING) {\n                        if (equalsToken(\"DATE\", name) ||\n                                equalsToken(\"D\", name)) {\n                            String date = currentValue.getString();\n                            read();\n                            r = ValueExpression.get(ValueDate.parse(date));\n                        } else if (equalsToken(\"TIME\", name) ||\n                                equalsToken(\"T\", name)) {\n                            String time = currentValue.getString();\n                            read();\n                            r = ValueExpression.get(ValueTime.parse(time));\n                        } else if (equalsToken(\"TIMESTAMP\", name) ||\n                                equalsToken(\"TS\", name)) {\n                            String timestamp = currentValue.getString();\n                            read();\n                            r = ValueExpression\n                                    .get(ValueTimestamp.parse(timestamp));\n                        } else if (equalsToken(\"X\", name)) {\n                            read();\n                            byte[] buffer = StringUtils\n                                    .convertHexToBytes(currentValue.getString());\n                            r = ValueExpression.get(ValueBytes.getNoCopy(buffer));\n                        } else if (equalsToken(\"E\", name)) {\n                            String text = currentValue.getString();\n                            text = StringUtils.replaceAll(text, \"\\\\\\\\\", \"\\\\\");\n                            read();\n                            r = ValueExpression.get(ValueString.get(text));\n                        } else if (equalsToken(\"N\", name)) {\n                            String text = currentValue.getString();\n                            read();\n                            r = ValueExpression.get(ValueString.get(text));\n                        } else {\n                            r = new ExpressionColumn(database, null, null, name);\n                        }\n                    } else {\n                        r = new ExpressionColumn(database, null, null, name);\n                    }\n                }\n                break;\n            case MINUS:\n                read();\n                if (currentTokenType == VALUE) {\n                    r = ValueExpression.get(currentValue.negate());\n                    if (r.getType() == Value.LONG &&\n                            r.getValue(session).getLong() == Integer.MIN_VALUE) {\n                        r = ValueExpression.get(ValueInt.get(Integer.MIN_VALUE));\n                    } else if (r.getType() == Value.DECIMAL &&\n                            r.getValue(session).getBigDecimal()\n                                    .compareTo(ValueLong.MIN_BD) == 0) {\n                        r = ValueExpression.get(ValueLong.get(Long.MIN_VALUE));\n                    }\n                    read();\n                } else {\n                    r = new Operation(Operation.NEGATE, readTerm(), null);\n                }\n                break;\n            case PLUS:\n                read();\n                r = readTerm();\n                break;\n            case OPEN:\n                read();\n                if (readIf(\")\")) {\n                    r = new ExpressionList(new Expression[0]);\n                } else {\n                    r = readExpression();\n                    if (readIf(\",\")) {\n                        ArrayList<Expression> list = New.arrayList();\n                        list.add(r);\n                        while (!readIf(\")\")) {\n                            r = readExpression();\n                            list.add(r);\n                            if (!readIf(\",\")) {\n                                read(\")\");\n                                break;\n                            }\n                        }\n                        Expression[] array = new Expression[list.size()];\n                        list.toArray(array);\n                        r = new ExpressionList(array);\n                    } else {\n                        read(\")\");\n                    }\n                }\n                break;\n            case TRUE:\n                read();\n                r = ValueExpression.get(ValueBoolean.get(true));\n                break;\n            case FALSE:\n                read();\n                r = ValueExpression.get(ValueBoolean.get(false));\n                break;\n            case CURRENT_TIME:\n                read();\n                r = readFunctionWithoutParameters(\"CURRENT_TIME\");\n                break;\n            case CURRENT_DATE:\n                read();\n                r = readFunctionWithoutParameters(\"CURRENT_DATE\");\n                break;\n            case CURRENT_TIMESTAMP: {\n                Function function = Function.getFunction(database,\n                        \"CURRENT_TIMESTAMP\");\n                read();\n                if (readIf(\"(\")) {\n                    if (!readIf(\")\")) {\n                        function.setParameter(0, readExpression());\n                        read(\")\");\n                    }\n                }\n                function.doneWithParameters();\n                r = function;\n                break;\n            }\n            case ROWNUM:\n                read();\n                if (readIf(\"(\")) {\n                    read(\")\");\n                }\n                r = new Rownum(currentSelect == null ? currentPrepared\n                        : currentSelect);\n                break;\n            case NULL:\n                read();\n                r = ValueExpression.getNull();\n                break;\n            case VALUE:\n                r = ValueExpression.get(currentValue);\n                read();\n                break;\n            default:\n                throw getSyntaxError();\n        }\n        if (readIf(\"[\")) {\n            Function function = Function.getFunction(database, \"ARRAY_GET\");\n            function.setParameter(0, r);\n            r = readExpression();\n            r = new Operation(Operation.PLUS, r, ValueExpression.get(ValueInt\n                    .get(1)));\n            function.setParameter(1, r);\n            r = function;\n            read(\"]\");\n        }\n        if (readIf(\"::\")) {\n            if (isToken(\"PG_CATALOG\")) {\n                read(\"PG_CATALOG\");\n                read(\".\");\n            }\n            if (readIf(\"REGCLASS\")) {\n                throw getSyntaxError();\n            } else {\n                Column col = parseColumnWithType(null);\n                Function function = Function.getFunction(database, \"CAST\");\n                function.setDataType(col);\n                function.setParameter(0, r);\n                r = function;\n            }\n        }\n        return r;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t\tpublic static final SourceModel.Expr topologicalSort(SourceModel.Expr graph) {\n\t\t\treturn \n\t\t\t\tSourceModel.Expr.Application.make(\n\t\t\t\t\tnew SourceModel.Expr[] {SourceModel.Expr.Var.make(Functions.topologicalSort), graph});\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tpublic UUID getGuid(String fieldName)\n\t\t\tthrows DecodingException\n\t{\n\t\ttry {\n\t\t\tbyte[] enc = new byte[16];\n\n\t\t\tenc[3] = in.get();\n\t\t\tenc[2] = in.get();\n\t\t\tenc[1] = in.get();\n\t\t\tenc[0] = in.get();\n\t\t\tenc[5] = in.get();\n\t\t\tenc[4] = in.get();\n\t\t\tenc[7] = in.get();\n\t\t\tenc[6] = in.get();\n\t\t\tfor (int i = 8; i < 16; i++)\n\t\t\t\tenc[i] = in.get();;\n\n\t\t\t\tlong hiBits = 0;\n\t\t\t\tlong loBits = 0;\n\t\t\t\tfor (int i = 0; i < 8; i++)\n\t\t\t\t\thiBits = (hiBits << 8) | (enc[i] & 0xff);\n\t\t\t\tfor (int i = 8; i < 16; i++)\n\t\t\t\t\tloBits = (loBits << 8) | (enc[i] & 0xff);\n\n\t\t\t\treturn new UUID(hiBits, loBits);\n\t\t} catch (IOException e) {\n\t\t\tthrow toDecodingException(e);\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; }\n        return retVal;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nList<SerialWithId> getSerialNumbers(final NameId ca, final Date notExpiredAt,\n            final long startId, final int numEntries, final boolean onlyRevoked,\n            final boolean onlyCaCerts, final boolean onlyUserCerts)\n            throws DataAccessException, OperationException {\n        ParamUtil.requireNonNull(\"ca\", ca);\n        ParamUtil.requireMin(\"numEntries\", numEntries, 1);\n\n        if (onlyCaCerts && onlyUserCerts) {\n            throw new IllegalArgumentException(\n                    \"onlyCaCerts and onlyUserCerts cannot be both of true\");\n        }\n        boolean withEe = onlyCaCerts || onlyUserCerts;\n        final String sql = sqls.getSqlSerials(numEntries, notExpiredAt, onlyRevoked, withEe);\n\n        ResultSet rs = null;\n        PreparedStatement ps = borrowPreparedStatement(sql);\n\n        try {\n            int idx = 1;\n            ps.setLong(idx++, startId - 1);\n            ps.setInt(idx++, ca.id());\n            if (notExpiredAt != null) {\n                ps.setLong(idx++, notExpiredAt.getTime() / 1000 + 1);\n            }\n            if (withEe) {\n                setBoolean(ps, idx++, onlyUserCerts);\n            }\n            rs = ps.executeQuery();\n            List<SerialWithId> ret = new ArrayList<>();\n            while (rs.next() && ret.size() < numEntries) {\n                long id = rs.getLong(\"ID\");\n                String serial = rs.getString(\"SN\");\n                ret.add(new SerialWithId(id, new BigInteger(serial, 16)));\n            }\n            return ret;\n        } catch (SQLException ex) {\n            throw datasource.translate(sql, ex);\n        } finally {\n            releaseDbResources(ps, rs);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public Kernel(int width, int height, float data[]) {\n        this.width  = width;\n        this.height = height;\n        this.xOrigin  = (width-1)>>1;\n        this.yOrigin  = (height-1)>>1;\n        int len = width*height;\n        if (data.length < len) {\n            throw new IllegalArgumentException(\"Data array too small \"+\n                                               \"(is \"+data.length+\n                                               \" and should be \"+len);\n        }\n        this.data = new float[len];\n        System.arraycopy(data, 0, this.data, 0, len);\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public static List<String> getList(File file) throws ParserException {\n    return getList(openFile(file));\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static float convertDpToPixel(float dp, Context context) {\n        Resources resources = context.getResources();\n        DisplayMetrics metrics = resources.getDisplayMetrics();\n        float px = dp * ((float) metrics.densityDpi / DisplayMetrics.DENSITY_DEFAULT);\n        return px;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n\tpublic void testBlock () throws ValidationException\n\t{\n\t\tBlk b1 =\n\t\t\t\tBlk.fromWireDump (\"01000000030a829633bc7bf1a7da1f62a5e07249dccb23d2a49f546ba100000000000000bc136fbaa332f13c46a89ae811aa622f3093608cf7d015276c3e64f9cf060c53801aab4e4b6d0b1a734bf22a1b01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff3807456c696769757302861b2c4d4d3d3d3da55adedb4c5856f7307e68d96f06f9f3849315ad0af015c15cf5f71d00d2340100000000000000ffffffff3501000000000000004341045976c2b7974f5b7b0dfa5a0b5f4b0828f78f88d4d6518dc0645253d6707355596364430b9647fbd15b9e264ad4c0939107fb8501ea89f91bd0857628dc16ce4bacc1585804000000001976a914cbf559b9d1f02508a448e28891395d8a143f26fb88acb2a75504000000001976a914996e7360841075378817a79a782d72c809484f5a88ac8e1c0204000000001976a9146df4d16e43f3f727f1968c3c09f1bfbba46fc5d288ac75b11e04000000001976a9148597d5d833a11186977e29001f651bbd4d63d0ee88ac0c7fd017000000001976a914b2606ae3ce0782268e916dc9e08eb13ba285e3b188ac89e50c04000000001976a914af47a490cd47b3fb1ae1800cc7fd1f2f1860903f88acf0e6a604000000001976a9148d5567ede2794f8b5e85c89ccca6cc2e3ae72a8888ac9da38d05000000001976a914a975dcbdef5c9360d831963bb3923411a495c0d788acf9452304000000001976a91439eb449e3cdf858e054533de91c543fff76d2ae088ac6c302f04000000001976a914af652c623045da48c22e117616d8305d05982b0088ac95caca05000000001976a914c5bc8e52b65d8031b8e3a77920fcd76cc0ebd69288acf09fc804000000001976a9149e10b49ac12dbb2ec969b78442c61e9043746adc88ac2dd7a104000000001976a914c2f21f1ef1bbb2c97080244895ba8a32546cf01d88ac031ec906000000001976a914776c25e07fa49e549944d24acef7a3a3d94818ca88ac6bd11504000000001976a9146f67318de52ca1d2082b9bf094d08b06492c435f88acfd37e804000000001976a914c4423f143d23b6c1a26b8f5aaeac3ccb197689e588ac4d813004000000001976a914cd5813b9e4b38eae5c99eeabd76d09d346bd9c2688ac67390805000000001976a91487d659973a1c75b11e338477d44c4501b66570a788ac3dfac304000000001976a914418e4d605cce8e34289830a21614d66145b4a1da88ac5a325f04000000001976a914180cbd0a36c0991a1d400be72d31d6f6e656957388acae4e0e04000000001976a9147de940f91c3b526d77d8f7589f11172ef47286a488ac9adfeb04000000001976a91404fc38108f998d1559bc80551d84c6630318698488ac8c546704000000001976a914dada56f3d1eacb8ef36d00d4eb5bd06449759ac988ac45aea004000000001976a9142a8c470a2382d80fb56cdf60782590ff4787becd88ac8770d004000000001976a9147be05c03fe69f8da79ef8c3bab21fd4c3819523988acbb450304000000001976a914d744e9daaf32b7f76f4d44c94fa4d6ff428fe89c88ac767e3904000000001976a91461acdc99dc928d31099f1adc76db005f6d9a5d7788ac9146fb10000000001976a914341d91c5a7615b335afbf7d43e9aae2cb12a2a1088ac7318dd04000000001976a9141305cfca4cff38ed9e061c25290c75caffa272a588ac4b016204000000001976a914dd4c51b0788e0bc6be6ea9fe23ab117d87d76c9a88acf3ea6404000000001976a914908ebe2f857c5ceab1050ff96e52f0da5232980088ac94f12c05000000001976a914e6e55e2991742ece883b5dc084efc46552e9378588ac0d225404000000001976a914dad596aa198f76150caf3c43ae0c922bf76e011788acebae7504000000001976a914c8e9eac50f100e2782ed0ca2315c061acd229e1888acc6e8b804000000001976a914ad9d837dd996b6f09408c48fb021f47113893e1288acbcc31e04000000001976a91400f7f42c37f55dc4f75e5145afae80665c62e6a588ace4901f04000000001976a9142dbd943fa4480987fba00463944234550a6d94d188ac0fac8405000000001976a91444e9b068c16db122aed770108345e4a60924298d88ac3bba900b000000001976a9140d37f0f7edeae22e7ab7524db57b3885c0a1844f88ac90187604000000001976a914acd9ff6e5bb5ad0e31ba93a691332fcd5aea183a88ac9ccd1904000000001976a914b5a55074e8618f9d4f9e9c86083eff096f5011cf88ac23e94f04000000001976a914e02e3b7e136d12b23bd07a0954897a8c686edae588ac3a962704000000001976a9144b8dd99194ae1887826edce17d0998875c89c81b88ac3642af04000000001976a914e2daa0e1e810d90afdc4f67feb22b42b6911fcc988ac84209b04000000001976a9141d71a68b2bfc1af6842744794a460a532e9112ed88ac66050b04000000001976a9141f055a6a3c9dbf8857c366a6cd43a34c1f46ab7e88acf9dd2704000000001976a914d5f6ed687203993d4ac05401add7fdece18b8d8488ace74c2c1a000000001976a9142aa969bf3fdbe587bf6c14e606c4d2b14665c93d88ac24db4b04000000001976a91449e45c4f2ff522d6e026a6d8337de6cb87cd960888ac66ee1804000000001976a9145318d3a7bd7d5be0650a8e7d16db458a6b0fd1ae88ac96e10405000000001976a914647484ab81427b30333eeaae714ba08a0980a83288aca2b2ad05000000001976a9143213e4e884d1dfad34a563271894ed76667abcea88ac0000000001000000031091bb34c19754b689685bd5f84078b437653d08377d2d03d256b34f80eb219e010000008a4730440220476c26cdcecccf46fdd96fb87814661cb1044e103d1bcd5be339b9cbaceca47902201b2caafe5b36913ef475d4d33b9d62aa3316ece6f1ac3371a506906e61afd4510141048c632401521a105db6b62db0a2c393181b5538f2c56d461057611252baebc9c7794378c252c45b7393fc93ea3b8bc6d6db1c9b5506744d51d1ddd7a9acd27d81ffffffffcc72f7a8acf77c1b1313d4ba229bff7db4f40e0a1b525a9b8a4dbc8ecc80b070000000008b483045022100997b74ef85d3be61a96a4d8ecebfeb588979364276f54fa77571ff8fb7906e4202204390f9935695194362fbc221b00436b4811d01f645715105f9d081ad65977e2b014104fd579aa4983cece29365038ddbaf479af86bdf25afdcae67bbe8b30c268aecdac6cd8f923ef3f23ab694783f9243522f67886a46a43499e3fb3ed49623869d6fffffffff8ecdae566b8e8d709a32054175ce61fc2a9323e60023f62b23c342a7186beeea000000008b48304502200f95d4cd51bb5b867563700979ea23bf69921b1a0262ff5de3d7330bb992a713022100de58fa5822e7e62c8e6e4edbdece7913cb21f5a7b5a39d85fa9291874ce81a710141045f7f6eed56863bf527b8fd30cbe78038db311370da6c7054beced527d60f47a65d6f1ce62278ba496f5da4a3d738eac0e2cb0f4ac38b113cbeabef59b685b16cffffffff0280c51b11010000000576a90088ac4cbdd397a90000001976a914d1121a58483d135c953e0f4e2cc6d126b5c6b06388ac00000000010000000379c1e9a1351b8c48fca27acff391512cb175978c8168adb40bfcf53c05dcb294000000008b483045022006a45b800a55ed2049c5d4ab7a56c2ff5855b665e9ae317d630fcc7e6fc8fe290221008952ed27b36591f55fcf42f486d1f9c958946c30721c1c0cb74972e681bd044e0141041f2f2a1e0b07aea8121b0af50fda58aa5893c5484c3d7389b2be08d02e986b07673c1207bb44e4c8f53ed51068ddec008105f1aa1c93c182875174561c08bd28ffffffff95a53b939c4bb466d77eec9bdb5a2ceed11682150e57b70a523d6f0c875998ff010000008a473044022005ea3540a376e1e912a86ffaff77fca577b790bf9e6c01f1ddca0ee1f592f03b02202ac4b54ab374df394c339c9a56e3730511b2c9a8c43213cfa66e46540e1d06ab0141045a46b12291ce91177728fe72e2b5fcf889ec9af92e5b6c5e2d018fec3be33b9cfefa818ec5f054086d88529dd6d70545b0aaa2a189b2657ae95e7f14397529bfffffffff001372c7988ea3117066373bf6fe4e065eeddab23113017852deee196e83d990000000008b4830450221008107b6c0d39012ed287546e170bac03ca5b523f768a6caddcdd42a05b762f4e802206156dcae129cf29306644dc06a7cfb361ec4261b27c3b0dd05e11be8b1ce643a0141047c0e1c51568226267607fbecddaf8418ab9c5945f59c15101c513338e481f838e4d3aea166fd0c2577b6324e623524562f0b7f00861e25cc4eba4012f3b7dd08ffffffff0200e40b54020000000576a90088ac2af12b94010000001976a914c494dc55663b229dfff5cfa4494422da1cfb733f88ac000000000100000002cebb018b42ff01857999f937a0a9f806c5140c99ebf4350b3f063de54f242d67000000008c493046022100bd4495bc8894b6dc69b61e4490ce6fb037d901180ceb77c52a1cade1e39b6b4b022100db71fb5e4ac1b0ce41d640017a86f25b5a0c55373076851b249e1742afc6d8850141049ff3c0a24258c2ea592bd7470ec90808e5b2276c87e42d2dc634a50b92af6deaa759df2a69e887549f1e29f3ee13767e000e9631fc50935b091fbfede3155770ffffffff2e807ac0a79be9f4fa4424413b489361a2b3854915f74fcb9891489455df8e7a000000008c493046022100b35ada65dbcfad525f2ef72b8d184920d259a820e52ab42107d85e452830f6da02210098a6cf88216650ea1ca782b3be407cd7a41d9cce31b62b4d25b413cee75675820141040c3e3629999aa48634ed51d1b67567b0275579eb70cb308de99d7a4842903fd4240c269835c0a7cd6ed6d4d0fa563536727360a5b1b58884f8123221bd747e04ffffffff0200222048020000000576a90088ac95b46b8e140000001976a914ad42ec3fb939e7fb32e4181c627b31f4ca51935088ac000000000100000003f9b0aefb747977759cb38eaf49070941bb50725c58131a51dd2ea382856bd493010000008a47304402201bb7594d0dbcd3c3d0dda3b62056000ca8d4bfc888e3b2ccfed63267ee313e8c0220728e003c152e743525ee46421cb84ed03734536c6ddfb6edf22605ba937f2a1b0141049437dc89b2f312d6bf45c4a8f724a03f38f005ef797ab109c590ae8f2b741bfaf335198813e3ac20f41aa61a44aaa41c2d6d1351166192a93e9a2517e300cd11ffffffff907e6fb71e188950c217ecc1354e60978485466616e4f2fc0b54066dd6f74a7f010000008b483045022100f2bd60edde0336efb4469648a929483f189324838d12e03302974c0f9f3a38550220236ac00c39c3a5d3953374880fc761bc5e5887d092e6a57cb4c52cfcbf531eca014104984a410b276249519104c78fbf3c254a5d2ef54e4d5f50ee4e97e8bd921864632b6bb0aba8b15e574e9bef31452fc5d2ef86754f02e9f652e70411707cd89e39fffffffff6c7455d978b99e8545ef6cd9e2810cb254c8b044da43839e44f1af25c0abd89000000008b483045022011800e7110565b4ef1ad74b681c290197fda98d64f92d5dde87a806e3a9b9089022100e1d97e5b2a7849197c5d6b88e57b58a619965cdd66f2a9945775b445b474c17601410434eb3054af434d2b516f3bf7a29a765ee4a22911c4708f829d766ee635e62c6f4d77150c83d3f0251cfbe6a4b8c2b507c3b0a3dcaef1daea571728b1a3bd0c8dffffffff02a07be810000000001976a9144640c0f3b01655377f10a4ec6c71bc4f9acb037388ac00c817a8040000000576a90088ac0000000001000000029c2939ce49092ebe03663784ff1159ea60a51cd00e140cfb30a6ba10d48b10e1000000008b483045022100b0a0013746586915dbfcd81160433c50abb23ea5f14843ded879de314268de480220363d30a18ddf66fe4922384c3b03c591d26585ef6b886c530ce5d6caa0b2a40701410469cd4c69f639e978dcc3798fecfaff76a00ef713d4855646b2b358bdb5a6cdd1292e684917fa1c3deba06d35c3d64723b656ec4df914121e7a3e3b89b7c720c7ffffffff0b524c36b7a69737820ab2b8baeb26a98920d8e0a5fcabb3db9a61eacfb6efb0000000008a473044022049b3a8e3daa04e634605bcdd4a5e159ca06250e33872455b902e319a2fbdedf4022011c7be9f3673b72fd5181dba3e7808b48051d2ff0fc46c70344d55631aa21454014104dc93841231106c4a749644408d55b0c7e0f886da3a854308dfd4ad626847785175fb19b31d9c220b2541767e792bb7f7e3d0608b0660649452636ff25d9e9584ffffffff025b5d004b060000001976a91416f50e5bd3609b11b4b29c945d02d68b307fd2c288ac00e40b54020000000576a90088ac00000000010000000219efe8e1194227624d2bb6f318c6ec8de8b7bbba0c81ae80c17edcdfc267471f000000008b483045022100ef15d2067b6a1a649afe62b966c7b0b52eccd25bff6092c6f6855653fbfc8d6f0220329b7e39b7081318ef7d6b1a48735a3d00f69ddbaa6b220158138da139eb74e501410490cb3e0cf1e82fd74da06588c2b8a227ce6cf3ffb586cb223a15466ce993ec9a831c05d428768859f7fed3f07ea99f57bcc6b7273e353d34062a61f44ed749c1ffffffff95d6e74b2c05ecefd10db5a9ae889cc7cfbc614d1fdc27dd2a5bcd8a6447c25b000000008b483045022100958f9940845b4c149fbf00942634eef1767f2cf6d786ab71394c6e563db5e64502206f4cfffb10513b59b02ee77f62f6e1481b70d78ccfd5ffe95ee97fa5ba93b2bd0141047826de0d9803045401b9eacdec3dd12ccc24db786d613997ab33c3e0cad2952c736b7360684cd8c5ca3698531108f9c1d121be690567b369d49a1c3400d96614ffffffff026043a97e0d0000001976a9143c6eddbc7b4dfba3870364c5f72b5adfec96a1d688ac00d159920b0000000576a90088ac000000000100000004b97076000b63b0af66b597376ba2f647ba15a03be001c5f84b60d804b9675416000000008a47304402207d2ab9d5febcac0c6863e57a97b363a51c21c836a5ade2efcbd88884da697784022075838f05471489b9b83d6349a91f259c8de85168412d267b5ab37484fe4b689c0141044428c31cb917b10df68b9228eec86d9236a700b30bd6db34d7c3a227bb403f0cdd02418a99936da84c6e111c054ca8f556ba149d2f3c78a539a8bdeb04214e62ffffffffd3162e2acc1e161e6bea079d45f38e71e91c0cf87858c4dc3d4001133733ebc4010000008a47304402205ced90985ef2db226e9e6cc10806334fe50dc6b9f3f759e6079600900968d7c302201ea8635b24cc7e7226ae3891d3968792753d346bbe29e68632b99b9acdf7382e014104db1c689aaee39d3294eeace8ecb58a1af09401b2e5732beb8c0e52cdcd82f38e22d404a521dd1f7bd238350aa2e2f7365619eae49d8f8411e323720f1db9984fffffffff50d2d9c5c95bf7aed197884e60d33847ce9d34c69f1fa4a28fe3fd5356cdbf14000000008b483045022100b68835fa1177de4aa514e55232c34a88ad9081acdaf30797565fbbf49f722dba02206ed2ed427afcea05c37fcc6e1f11e676a820215fa65fce16a5481316fbbcf577014104df16cb9d9c33e0783b2f6256727edb62451279f6067cc4f7d7d6017f23982152fab4bdc9efd830e995df472e05fc45f3bab3568c2bd8f5165d46be2d372eb313ffffffffe379d34887eba5e646ba43709ee78f480ed714a3b2a1fd072aaba6b1756858a7000000008c493046022100b430fe5fadcbd57a16ca8068a94f888a8fa4ac5bd8fcc30e3708dc15dab703f4022100b3ed2ef9bc04e068d8404b7fd8ff3284e88082da8436b543acec9404a75786a001410498cd5baf356c719a385b5437a569d17cb5f9705d1972d9657208f174b07eb7dd34bde6917d00a73e9e21b2667862cd2e0f6c3efe7bbb7cb1535aa702c2c56335ffffffff027a404c79020000001976a91400929f558848fdc75f28c8d54a60168f1f58e95288ac00e40b54020000000576a90088ac0000000001000000045286ba6b751fd73b489ff568c4703a218c1b84cb4f050c6868647281c8a0bb5a010000008b483045022100d9c62fa2400947bbef0cf3a12fb624cf7077cc7012c8779d60caab5e729c592a02203549b760feb804ff75b7debee0f488877267b1898f328e5ed0f41b359c8e4bfb014104406db037ac5abf7706be70bfcb8bfc96a06f4d2e9ff32d558626326c4292bd7fe009ab11b78fb77e954ff1f1d9e75e0b813b9294c935ec346f878ebf63f6e648ffffffffd979bac67c4770b7d426fa9e86e7f28e9b2fb122c54aa3dc1c1a5efbcebbe71c000000008b483045022100df404dee5c82f8a5f427f265b2a8bf8281287bb0a903ef7c9a420ad19b6240d702204ef82b8b1fb6d96af1b77eef45cfb41f30f8b972874e476b5babb1ee849aedd3014104dbdb7215d1d188a1d4b0cc753893ead675ff357d12a651bff4f5a085bc25ca3841f6685621be85fc5bffbb96d0ac7b22d7faa3b0a2e0dac791228fc21168986affffffffaf0f08cf052709bfc240a5c9797316cd992e029fbffafe8d12583ba7b5031f15000000008a47304402205e2b963834ab670a0ed1ef54dbe97bd059968a9a7000dd74c80e32da05c273560220498567c78d4257adb126b1c86c6f296f0ffbaeb45f9234c5fe0611570001b2d00141048b354f8985192f0cbc2240807f74696da5e1b26e3d4175a9c5ce29f476462337db3cd259926d106a77d89f806342ee14bee8dbda497992e0584cf71dacef881affffffff5033093d8fe628a954d4a349ba553d8aa423de6de279327a5d9d5cb43c3758ca000000008a47304402206c428dbf810e0fb77747f7ff9d60bf6657e7e3edb290b9a8de8c12982ecb08ce02207ad61ae4d2470b3d8759d99bb4bd116a90e771ab76fbfdc791be0f7a5cf5f328014104552b2eb41559e7ce64c513f8a606fcbd8e39b0f8320ea93b92d2d483c86d8e5f860bf652bee62e744b10671dbcc89acfe8df3f7b368162cf8c77a42e25f8b7a1ffffffff0200e40b54020000000576a90088ac27edda06030000001976a9140ad47afb47219ba4efadb4d33db6e49a71f724af88ac000000000100000002640bc279dc41264c678e24416062291991d247cb593c21193da12ac7e9ab0e00010000008a47304402204c00e5109dbe1644413d92ac8408e0c02d888850e97c1bd74aa80f88c609bdb6022047d3f208244a3111c612e6af13052efd4b543c4d112429d2f838d35ce859dcc2014104c99034ab76c908b87a22f89b8e260447a066349c754a4eaa4e2b4d663e4a92f6a1e6540a82c49fcdc03aff1f9937ffa6d4aaa97802276438bd9703f3eb732ce1fffffffffd269441066b1683fe398de40356c4958d3474d817d036581302dcd0412c4174000000008a47304402201f7a187130a083a4d941561e0c39d61287fe1580d874874d7a62aaa62a85f98202203a14a99b2ba48c870073234c56a3b055506116ca5b8d0af9a1dd7997b55bce010141048548bb73eb0ea484f7f55236522f4a681cbf75b91848eab975aad8af35791629bdd706fa26e57296c5accd02c91b1b051acc850bc1e7c037268b128a52bc4b5fffffffff0280f243d5000000000576a90088ac0488242d020000001976a9144914281232f335f5ca684da9145aff9fed2b1bd388ac000000000100000004a70a2acec4564cbf68ba54de025943cd34db518ef7ccaa1adb9f079166d1d838010000008b483045022100a2b5c5f76c8565f2dd24e13af4c56578dc1755b74bcc2fad27a61d5e9a76e9c102203c7e279e07d10b3c3b0c9c87d29faa0304bedf3e9444b23e58ce445f15a052db014104660cce1ed3c99e1e6c2af088be0fb107c5dabcecd4eedf45f076dbe7ab5c0aa01506fdee2c2a6520f193d40a7c53d680f36ed17629bdd408bbc0be793a9026b8ffffffff50fabcb9f2a42335ceae67d9a97e852f1ffe19356b086fb1a1ee9873edd50eac000000008c493046022100d1dfe92b9f122cb5163b35f4a80895b106751d3600e330d3612c5b78ffa84a39022100939d0af24b057f08958030a13d46e2d56842b8e147dc7ffa7c0cc19e3d3527c601410465b84f162d2be2a7fcaf467c610594e7209f96bb3e2fac8e57bdd9f02f8c4b5f3434e656f8cd0d7876cf671690e939e31bf3d5b4ce70590862dedd35eb0db903ffffffffca944f07a8fbbdf81b4c575129e97485a3d3c160f271d07a426728f3c4da08e6010000008a47304402206c0022db38159e32f48bbfef5c781077cd147d9885d7f20a1af73297309a22b60220417b89f11ddbedf407e4c2ec745f0ee99bdac213c752fe77099b37ac5651e675014104016719c960c4312afd82d81818599a79c8e52c96bd631ae12ed7fd474f656696e4365bf60f5433691944f2456f49750e9fc42b067a4fa31c109f2171072af728ffffffff4adeb8301ef9093c4325e15c6c822bd34288ab8b8909754673af9d4b67bdc234000000008a47304402200515281ee114adcb28c3c5e6dc0d15d6ce0a69dcbb1457308f69ca109cf64e9c02200d48b04f2a44202ce0843e6b80a4e3c78eaa2a7f300259a1116c86d0550c887a014104cfa10d3f5636b42042d44d10193e9c56ad5b37adb4af47844f8b361e42748f33cc8540ac015696ecf4d687f86ae17260a393d40a5c4ed2f343d6af87a9c71b08ffffffff0200e40b54020000000576a90088aca04ad999000000001976a91415c2f66d85282d3136f044874899df12c6af401688ac00000000010000000548bbc19f5dc889b303a5097032b6235d0f293c3517437a22ab868fc5b030ccbc000000008c49304602210083cfebea9add1b691c17bbaec289ca4ee4b0e5052b95b85321350d8eaf17e7ff022100daa02af66c312540cde6f0d78d7156fbec17cdd0b1fc9f737319eded387197aa014104a9efbbc65f1fc99a89b899a2ca0f6ea7a709dfe1386aa1ee22ddef0fcff32cfd776d79fc67f937604cfcf39505de4b79ba753205f5d17537bae4b54e26248d0fffffffff0b050a9a612d4007e369d02370faf7dd9c99f4025136f9ba3e3c05f3026b6155010000008b483045022100df6607bb6285833a13aa20e96c05693b3078b7371956b8239aed1ce15af1ba8502204c2384dcda08bb68e5dcf0d65fea4aa2933fc1b7fb827541648cc03e4886248d014104debd5fe6e6bc796ac51e8d8e6853f6bce567f2d56e4c6086e14f7d7cedcd7999302980e775b5334deb21f29a2794e54979db14dc239f9237b217619297c1152bffffffffcd34d66eabddd3067fb4a2aefbd097e6c2a636d50fecf59f2676e58ecbb5f092000000008b4830450220784a6af74465584014dd815c3075918137b96f30edfa84d05accab644b61238a0221008f3bd6860303a3ade81cf66823c933083e18d38573da4f28a11f9bec2e3f6c560141044ccbe1d2a628b313340ff0418e8568f904cdc4eb6d4893ad8da70c4165dcb838122061aa47e2ab852cd782fbb42d21bcb8ba243e78ff4344f8bd4faee092054affffffff42d957671ff25e06200376ecf7e764b75305405a397235d85663bcb187390fc7000000008a47304402205363f75cb7c1a01bfe10e70467c7438a266793ec10d1347aa5a54fd60e82966102206b7fbb1b974dc3d99c74b7496627746562e609cefda4b646c654eb4dd34eef4c014104eaf728ca0222ed95104b3bb7497011e275b83b76a01c3dbb20dd6fcc12b3ead2722c3a19a02bb3f113433477c4cc6756fc126c8382e85666d8574af34e0275abffffffff6c3fad717b65f66f35f7b6f37f37d1b5e5487594a5c26ec2c15a4958aa266920000000008b4830450221009abbc460d10aeefc526c5f1b2a03e9d30522918bb870b5aa2d52614109b7ef910220439a27b134bd6dd967ea8e6afca46f8f7b7344120b66fc20c7fbb6ddbf561530014104b187b9770f4be1aa8e7ffede833b4e9cd3955ec8ec435ed53ab5c0b047df419913c6d7ece8586222ba4fd4f3c19a582214c3412dd3f31b1479d806548242e285ffffffff0267ed0290080000000576a90088acd8ec1115000000001976a9145c6c7f33ff387aa5e76a909ee1eae77a982f8fce88ac0000000001000000020d7dc1fbab67fdc7ad07a32dc264a6a89e1b4f90bd2a68e250d50f6f56422a4a010000008b4830450220109fa1e9015ca11ffb48c1c3396c16aabdcfa45f5161c45dd01be0d00296989102210087e4591ec96b49ce0aab06e59034b066e7dcfcdfddef978860ef55a6fd305465014104e22055ed36a6825cb9ef98896e21c697b9a1d0c233220ce5ff1e79a5dc8231e84fa8e3e18ad0a999fc30121a3effa6576ca5bf8f542f2dbe8d6b1271e103050dffffffff1e9bd8d6617a678a73e3e1ef1649f75bebf09cc1a25855ddeaf7b7e332e5245b000000008b4830450221009017d6a5c2e3d07d84e1c30b36cc5288cde374a7ebf5ff00851120e591e7dbd1022058c673a7ccecb1b93f837ccdac83246d949ad65cb7774b32372923b49a66b5be014104c0838f5fa82a5eddd38ba77f3025f0c5b1d7fe044254052ef2fb2d5ddb590d0e706d336b3c4c7564747412023f146dc1084583e7f0d20f09ce2f0522705b6976ffffffff02c507156a000000001976a914b4ddb8b532ac4bf8eb049f17e3b0439f0bb6cda688ac80ba0a58030000000576a90088ac000000000100000002023f9e8ec6ba2557aa132a321fb59a7431446be1f1ac47459f9cf5f3c0ec839f000000008a47304402207af3e5fa4af66df9d65c1d9990e1840ed7d93aeeb52aec715bc96834ce59413902207ef98c22214ccb4672959c5388764520bf79d64b70efd86a52c313dddb3017c60141042501bf738c99668d59e2eac327c5fa1d2df878b70c632e07b4870c56675db8f70474476069d6c0870ec6656507ced71ecbc4cdfb0c54e14d645de2cb20fb967cffffffff328d45c8c2db1e93b80f72583b64d1afa2cba961f3fe0e681ae3a1d1ea817842000000008a47304402207ef22192d74963e4b18a14fecfde3dcae0bdb98405711f92a3f07a4e71bf3d0902202ffa231600f2de0370d89dd12a00d864362efdbb7d662b5a6df3caf053fccf8b014104aec30ec70029b07ac2c520e5aca16bbe177cafa876bfa59f4a28dcb5741e6207add42b73d528c53c599ad54827106077e018d52a70e38432cc29d0425edbfccaffffffff022124df22010000001976a914c36eb340bede7392d20a1ead0e22223c3614e51288ac00e40b54020000000576a90088ac000000000100000002b3433bd439ad4de84486497ae0f8792d2af6c93a6beaf3498c449c34d30b06a5010000008b48304502207ef51939f938e73ea87281f8e2ca4d9dee529750e187602eb585fcd7f7e804b30221009ad3b8519fe91b45bbe509c9a45a709fb90bd61c0d4fff1a49d1be8459bbe32001410465000d8f80f2a2de2e670e1a895ba12d64508504e2fe0fcb3c81c107a376810e8296353fa345d5f923fe03ed27b493c853fff931e878adec54d861f8fe211673ffffffffb78ba1f379ce69c3425514260cbac8d58abc324af57190da0151552f3e0e06a9000000008a47304402201bf73c5f8cca86bb008adebd69ca0c3954682f7fccf4a42a5bb74a88ae11e3910220312301f26a99f25f42896fb7e69c8e05ce0095bdc3d9cfa5ecfd5b3c7e9bfcc6014104476cf62f4d084e142dd386dbf58c5cf7ede50381fe9dc204082efb91e139f38502838a6d7816e83d9f1b9f42e940fbd6d10a0f64d53a143e54a610b080de7d89ffffffff0205b61ea1000000001976a914db9d4a800a4ffd2da65b38eca5d86c6d7d08127f88ac00e40b54020000000576a90088ac000000000100000002b6c4ed0ad8af3df9657a86620091f77168ad971dc9cb5b450f4f9ea674111a5b010000008c493046022100852a86d2f99db69939c1c9ce1508ae815eddedb72d8b718e51e31700021da8b6022100dfa8089991e932c7f4e50b3f4ba758f5fca45fb0e325a13441b5479d578f37ae0141044288c93686409888ab458da8a13bcc3ac42fbc7d705037330737481ad4e1138d2282d72bdd005cfc73e0e4dfcf9e34f9bfe015fecd47eeef438341c91a3ad7e1ffffffff0395cca9da44033256732afefff0baf8b18e4773b9d9175e49a7f5ce046f60b8000000008b4830450220577bf83dd84dfe9367586050f6b8e58410e0184d1d5e0978ab84bbb5cc1e669e022100a4d57e20a0523b8841bcda6d80f239469e1ead73ddd0075e500ecbbf10a9c4b1014104ea85268a10b2e98808318e492fb8c8dd8ce71bc76bdbf224673116d17cd272b0cd1f501e9f6cfafecce6d577156bac4ff2ed1b61e060162f1df2574f83044fd9ffffffff02511ff15c010000001976a91481dcf5d6b068f73a950abcedd85ef3f6a08f644e88ac000d4ad5000000000576a90088ac000000000100000002365db58511ead0a21395a5ace6b6807879aced9d4af329a635c4539ff5c0a59a010000008b483045022100f9dbed75fe4383887f705ff21f2e4c1387f05146390866310de1a93dd5fe29bc02204fe61799e2c45758645498f35853f19e09370af67301ff5013390ea4ff5062bc014104b757f915135e703fb46090f0b43b561a9ad03e58709d740854fcf57a0926a9d8a88fe650ff62333ba22a6ddb6c47ded04576f0bc95240693ea14eb2336bb23fcffffffff71637c58482f5d9752a1e6d4fb641e29406d27e0603c1d90a5b233d4a423adf0000000008c493046022100b5a80c6c27fcc0ff871d8afb7ef69b0b9a12b2af1933e26860adeac18a15c4f1022100f76f91213af3f81824e7272f8e13c2d2af80e8ab6e3627cc8e61e7c94eae13cb014104ccd734cb966202957feb2d99665fde8dc10058c846eee9600c472f04de62f8c43e29675b49cab939964893b5561d4ce3a7b843724f824eaef371f8106b971648ffffffff02227dd4bf000000001976a914941cd547e06648a37b65113b2c964f7614013d7c88ac00752b7d000000000576a90088ac000000000100000002820f995cc5610abc2bb46cde44e09d3999c040e7c55c018d51d6101d97e3c7fc000000008b483045022100ed90c5758af1016b55c7edf5c6d5ed51ee58240bec20b37426484ce6861b25a502204243b29c1844b2d7d7be7e86baf66b6190ad82157dd6e255a158e3306f694b4d0141040dfdd0d4f52b0d06d8456382fafc5e9cfecc9d8b22ccba8f81ac547b07bcf9b0b325354403ec29676958179ee88238c69148e604ecfc1a3a1db988034bed9d8cffffffff5c72c48dc9a96256b89bba1faeccfba2299c84541ddc9993d8629170186473a5000000008b483045022100906a575cb19b671a37ceb99bab48ab9ad16f41e6acd457bc815d87009aeefcc302207119d2eb966c182ca89b2e2f7758eceee643cfecc7957ae66b99abc22b9fb4a5014104b36bf897bc8e3ddaf994d35fb9318b96ea39c83d79fa321e734d9e0ccf098acfe084a85da72b21acc06fbd3fd8c0d1135200de59435a9513e7a070d4e437c4aaffffffff0288d71375000000001976a914956ec1b15bf7bbf51579322acfa2de0181a92b4888ac00e40b54020000000576a90088ac000000000100000002e3dcb3745b2268694e09dfef8322e760148bc20a572b4ba05114154937db3e7a000000008a47304402200732e1793ef171cfa80e6e1e31162667544bead7b41c5f07a1efeb202e7d6d4a022064077c7255c3d7e6f486b98cf73385d1be479a7249cbe7a9064c0a5765f02d9b014104eb6b057a58e583a1102674fbd261c6e5d12e38c0614ef09d075ced6758250cecfb650be3f72cc372db7fa3b1687ed3d2cd3031a3d9b5eaa277237aa399084d7effffffff77bc71b71f63a44f4a6237f4465ba1c5047fc6eea03d6dfd2ca99839c97b1904000000008b483045022006dd69e583d3e6375328acc7008ca8cb524a627b642f167893f38e84ae778d670221009e042c8c7c5a87a99b1d9666bbc9bcb533bf2dab193fff812cd30daeb3bc091d014104af4ff96561c45324bb0e5acbc9969bae759c06805df2b4f158198c80f550799bf82e00469a597d85cad4bda76f96aa75db681153e70968270df4f6530845963affffffff0200216e83010000000576a90088acf605e870010000001976a9149fa92478eb2a698b1c43b93d1cac579e5867f33488ac0000000001000000026d2b9285ee9e842b9bd7679c968fba4f50d4f4e4f3fc3ab09b67c9a33181b356000000008b48304502201fcfefc85852e5d62d84d7b291e06d610f6e7a8cee2cccf45fcb6ac45da7bed50221009522abef511ff6e55bef3fe4d42a0392fb1158e4ee11d199e96df7fb092e5b0f01410439c7e7dfa93f1f2df27c6477da515959d20e5adeb97bbad791c319b798f8471a51e3ba6e9ecd655d052600f74acd2dd4e4c550e112f3390cff7ac5f9b9e7d28bffffffffd715f45860232b410559a3637666e15b8e0a5d638b8e3bce62e2a85867a1c80b000000008b483045022100e4f93784ed21edcf992b10800562e889c232b9c91b6be7477a0f5d8096a24f7002207f73f01e85f2dfefe42e7eec5b367d8f1e3f6770c473e6ec4aecf419b969ef4d01410432b78bcf0094b1d85ef4e0432615cda857e2db16f36b6d36bebb3b4af694eafeaadf44cf5f366c2e280e3976121867fbbde9bd52433db6ad90e1badda28d7ca9ffffffff02403d49ed000000000576a90088ac49a00b05020000001976a91419addef47d03493eec8498478a12816bf60b0b3388ac00000000010000000272ab6897ceb3ed03b6a2b1ef780132eefd30b868a2675645f9e000190cc97847000000008a473044022005c02efb73f739e86129b4f83c1d1328dfd699d004a3d751d9ae4727649e008402205d6895bdec555fe2e873b141c2231a03a005a4e77acb54f53508ff64349308d80141045104b3ab84e7ef4fbe927a80fce88238d959b55fdb24060d186b7d8236d4622d91c3f1637fb72180997a66490b2b3619cbe66a1ac8b29d4b424bd428c5027d19ffffffff7eda41fd44dad3cf3b348a77551d1def84453c7d9ed6b5891a8478e4df4d95e5000000008b4830450220699bb2298c200c827a427a0b93367db0b709a1b0015661911f84d4f6a4c8fe40022100b8c145a4bef4e6e634e9e812bfbbac0dd6ff40f68feaf2459908d44fc7852c1201410445a0247f0ebf30cc032863169a20c1769be5059c5b2c1f396b0e20885700f06b9d4f57da5560531506b78e687f48185cab7481e0347762a4934929b1fe294734ffffffff02d864fd4a020000000576a90088acb762a15d000000001976a91467cd6ae9649e5d80c4e3892d31e1bf3cc241e88d88ac0000000001000000029e2d25174c440290f96c5c85f75a286926b28d724dadcc09389b520ae229d0d5000000008b483045022008fd31a7c955a1aa1d39849ff0ea7c2d286f6557184bb1b6d1bb91a4e0f742e4022100942e632ad357efbc63b24e761c3ee14dce98cb21c4acf5fdcbbb7dc95919053a0141049cced48977ff3e8886e9de9f148871f0338d3393eecfa003bc383a3eda1bf0bcc284205bfb9aeac58426370e4f2027d3bb7284d09b79539b1e2242cdca33ee1effffffff2c92c1722d2ed167e523943d601d1bbaf946da44cd4bdfdcdf9f3ff71a216a29000000008c493046022100a68ea7160f424662aa0e2e10d664250b890bd77d3425220df0677ed354e7bd7c022100814abf85fe352b6962f65046c43458a58060ce823bec18bd73ffeae9b859300b014104338e8d5b7c053dfbec2d081ce4149100b625a11eada6875973bcbb9a0e4a6cbd8b3b3aa2483cbd5fb1c0106c223f391f0872b1a9e87ef514e60cab51b0e3f112ffffffff02008589dc000000000576a90088acef220c91000000001976a914a37e0e3bdf5b14dd31656a4d10dc03ed7ac2387a88ac0000000001000000053ed213109224b1dd1670c7c0ab58d4e9624bc35e3e5387c6cfbdc865727f6ed5010000008b483045022100fc69d035bee079389ac6fdb384d9a849fc219ae7ac9af27a0aab505e9c52780c022050801b3971a363716e10182e43f56d9a8cc796b41764e2d78c5cd291cb84783e014104bc602e6f995fa1665aecc6a47a37a4cc709db7b2a74ef5dc77af12fc2e630265741f3ea1900b1263978eeeddc77f07c849b617715a39d28295b00bab728eb0acffffffffa07db90df20868c32368fe93c94f8728dd4c067336e4ed1cb17ae25d909715f1010000008a473044022038edeaec1ef24a2221656e80b4b91437f9e15fc1a33c1d53c7c08843a486761a022075571c3fbc99321f7427d3e38adc2e6a6eb9693edbcbbe8d3722ca876d271543014104cc25f901c5393e5e1bc31e65867dce8530da7f7447b291a15856fd00bb97e7425303c9d6141fdea77bd3e714c4e14fc4881f8f929d9d1f3b69ef2589580c7048ffffffff6a3c51fc1627448a20147eecca0cdc3eacab2d9553bceec440c589ce7559a560010000008c4930460221009e25da2150990195aa4c82f4be3975e4dfb1807fb61b3ce38b985bc0aa962cc00221008072b935899ba5221e8953a4f6f5d000bc073fa39a5268a37ceb74b57c41632e014104889e87dc69456de7341b3f4b7be13cfd0f12a25293dd5bc5f277898b4302247df8a3d6d62b4eda4dd85006d05c1e4333632bdb9885156ff5cbb0950be1d7efd3ffffffff118296ff18757293b834b527d9079c7cc910758b95179e17dd1072520b9903db000000008c493046022100880937c0eb29bb02001180bb9acd4a63a09df77a8cfaa202d9fe4ed8e45ddc21022100aadfe80a5268be7e151a3aa8215fb2cfe6e2cce903a014909dbd1141cbe05d9b0141049cced48977ff3e8886e9de9f148871f0338d3393eecfa003bc383a3eda1bf0bcc284205bfb9aeac58426370e4f2027d3bb7284d09b79539b1e2242cdca33ee1effffffff8ef7419e33621c8dac43f74ec5dec2463c8893cf449afc740ebb19bdba0deb75000000008b483045022055f534b8ecb4dbf832aeb566aa4e95dd0371c76a2eeed2edde441bcec5862402022100b243282a2003028f988267c75228306fd6dcb68ad1db4c0e7bd04acb3891743c014104dd2f0f609d31439fdcfe64f20c133e95156527aaee35ad7e2ec7d148256e41ab00eabe612e40419fa7552601e68cae3d7b6f8d519bd7444175fcac8cbb6d807fffffffff02935c2815010000001976a914f2e63314c350094550c703fcdcd4850ad37d831088ac00e40b54020000000576a90088ac0000000001000000028f1c4c3b555ad15599cbdfc217ca83b25ebc63a7a47583eecc9e849cdb292b74000000008c49304602210098a473ff7b98d7acc3ce3acda19f4e45f330e04ca4d31a02b51ae69adc7b2b000221009c46c53ed0fc1b8a257328f9b6d8f6e02ed6c44a94b2a0a4c4728027558d6c8301410440008f0ad075c74dec817f2e4bebeacf89f0666b3c5c35bba197a7cce335da684ee2a9087d66b0501934cc3a92dc5f68660af35367dac4e5aac1aaa1f840eabdffffffffc4c286341e5608e2ded8cabe7f29b02a8ccc427c87e51f2288dfa291783be2cb000000008b4830450221009139501c766c7d74d0d8a1f34efedca971f53358bd79263204a2eee841578a8502201a105f464759a52ae65e2ac3bccb563bb3cbc093ae13e328b1411e87edb63596014104b19a8b0dbe177f7e019e0cb95f12ad3ea6923805a8daba88ec5f28d777ab2eb7376d7e00a726d3b5056dbe301a5c3e01748a83210a458421daaeb77c9975c5a4ffffffff0221dc0124000000001976a914f74c13d007a14fbd5b9ec91dfd1cfb963d0881f088acc01de690000000000576a90088ac0000000001000000014d0da1a301f0497839db0288f1c5a6fb7e4f00ee030775840d3d8dccd752eaab010000008b4830450221009eaf4aed229e80d11a1f3a82ea27657639493c980e591fa770b8af36829bac910220777ab5514c6645d885a74fdfd5daaeddb674c5f2f807474fdd552d8fc556e717014104d60963c00623ebfded78e022bb40b870c4a9d2382d69881c1db327fc2d39baa56fe0c6ce07a18da6ce9b8d6ad4f0e48ef07582fcc7c7cbd0816804e6d9fd1155ffffffff02e0930400000000001976a914fbe5e214b23fc7a0bc3e764b043dca89c20b1f3c88ac60c20523000000001976a9141537e5e949dd0f552bd7e9f4ee3cf7b223851d6d88ac00000000010000000166c7d23b44e7833216150ebac52063af59a9edd978336a6119f71ad8e404ab10000000008b4830450221008c284af16d3ee85470b726c1e0632b12a3bd9b0af51cbbdcae6ae52b34a8aa3f022030dc762c7b2c68e41d5facf79b059259eb257b5d2b01ff7c0c66e125c9ef6e980141048e114fd19de8b537b82712930b1bd64c796d0abcba48c92053481a824361570b4b2fa5039adaed27aee785f6f68699803a4d1b04a63372d415a91c63303e2388ffffffff02fffe2b06000000001976a9147fc4dab271d443d3aa399a5f96707b54ea0aabbf88ac18170000000000001976a914c4c69a79f4e56bf6e17308f6e5e7ff4dc046ac0f88ac0000000001000000014c380ce44c37cb3d99d65e9cdcf0519a32f3e693c7e7b22ad97cf2dbec6aaed1000000008b483045022063a331ff7aeebbd06912e5ec4cdec6e89bb376b1a55523a9eb73eff9ff8bd91f022100a3a6c92593832057772d8b890fb7e6c0f3f21851ba8c3cdf2b8b30e1ebda97f3014104dad007c26b13ffa69e44ea32e7dce7781f95552e636cdd04024a55e5d0a9fed07f6b2fc2b9f8e689afb2d0aed790944bc390d38560bfb7178c16a73ff396f2adffffffff029d18a500000000001976a914b75a4b00d4df1e8358cc79f3d8d000d4806f46ee88ac9fc70600000000001976a914a31cc35833040aa1f8b09d69dcf0ae7359d6f4b788ac00000000\");\n\t\tassertTrue (b1.getHash ().equals (\"0000000000000449ee5b94ba7a051caffff5c23d6a03335f6e20e3985b5ffa61\"));\n\t\tBlk b2 = Blk.fromWireDump (b1.toWireDump ());\n\t\tb2.computeHash ();\n\t\tassertTrue (b1.getHash ().equals (b2.getHash ()));\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(java.io.File file) throws org.apache.xmlbeans.XmlException, java.io.IOException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( file, type, null ); }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static int printMethods(MethodNode mv, String clazz, Iterable<String> methods, ClassTransformer transformer, int lineNumber)\n    {\n        for (String method : methods)\n        {\n            MethodPair methodPair = transformer.methods.get(\"()V\" + method);\n            if (methodPair == null)\n            {\n                continue;\n            }\n            lineNumber = InvokerGenerator.printMethod(mv, clazz, method, Modifier.isStatic(methodPair.node.access), lineNumber);\n        }\n        return lineNumber;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static String[] appendSelectionArgs(String[] paramArrayOfString1, String[] paramArrayOfString2)\n  {\n    if ((paramArrayOfString1 == null) || (paramArrayOfString1.length == 0))\n      return paramArrayOfString2;\n    String[] arrayOfString = new String[paramArrayOfString1.length + paramArrayOfString2.length];\n    System.arraycopy(paramArrayOfString1, 0, arrayOfString, 0, paramArrayOfString1.length);\n    System.arraycopy(paramArrayOfString2, 0, arrayOfString, paramArrayOfString1.length, paramArrayOfString2.length);\n    return arrayOfString;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n  public void testQueryOrdered()\n  throws Exception {\n    final String query = \"SELECT ?s ?p WHERE { ?s ?p ?o . } ORDER BY ?s ?p\";\n\n    PostMethod post = new PostMethod(aseBaseUrl);\n    post.addParameter(Protocol.QUERY_PARAM_NAME, URLEncoder.encode(query, \"UTF-8\"));\n\n    final int code = client.executeMethod(post);\n    if (code == HttpStatus.SC_OK) {\n      final List<Map<String, Object>> expected = new ArrayList<Map<String,Object>>();\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/a\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/firstName\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/a\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/like\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/a\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/type\"))\n      ));\n\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/b\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/firstName\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/b\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/firstName\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/b\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/think_at\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/b\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/type\"))\n      ));\n\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/c\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/firstName\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/c\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/test\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/c\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/type\"))\n      ));\n\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/d\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/fail\"))\n      ));\n\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/e\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/type\"))\n      ));\n\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/f\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/do\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/f\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/type\"))\n      ));\n\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/g\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/test\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/g\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/type\"))\n      ));\n      expected.add(bindings(\n        binding(\"s\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/g\")),\n        binding(\"p\", add(\"type\", \"uri\"), add(\"value\", \"http://opengraphprotocol.org/schema/type\"))\n      ));\n      assertResults(post, expected, true);\n    } else {\n      fail(\"code=\" + code);\n    }\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void drawKeyBackground(int drawableId, Canvas canvas, Key key) {\n        Drawable npd = mContext.getResources().getDrawable(\n                drawableId);\n        int[] drawableState = key.getCurrentDrawableState();\n        if (key.codes[0] != 0) {\n            npd.setState(drawableState);\n        }\n        npd.setBounds(key.x, key.y, key.x + key.width, key.y\n                + key.height);\n        npd.draw(canvas);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static List<Variation> getApplicable(ObjectType type) {\n            List<Variation> applicable = new ArrayList<Variation>();\n\n            for (Variation variation : ALL.get().get()) {\n                Set<ObjectType> types = variation.getContentTypes();\n                if (types.isEmpty() || types.contains(type)) {\n                    applicable.add(variation);\n                }\n            }\n\n            return applicable;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tpublic SortedMap<String, Integer> GetInOutList(Netlist TheNetlist,\n\t\t\tAttributeSet attrs) {\n\t\tSortedMap<String, Integer> InOut = new TreeMap<String, Integer>();\n\t\tfor (int NrOfInOut = 0; NrOfInOut < MyIOComponents\n\t\t\t\t.GetNrOfToplevelInOutPins(); NrOfInOut++) {\n\t\t\tInOut.put(\n\t\t\t\t\tHDLGeneratorFactory.FPGAInOutPinName + \"_\"\n\t\t\t\t\t\t\t+ Integer.toString(NrOfInOut), 1);\n\t\t}\n\t\treturn InOut;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n\n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n\n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n\n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nList<SerialWithId> getSerialNumbers(final NameId ca, final Date notExpiredAt,\n            final long startId, final int numEntries, final boolean onlyRevoked,\n            final boolean onlyCaCerts, final boolean onlyUserCerts)\n            throws DataAccessException, OperationException {\n        ParamUtil.requireNonNull(\"ca\", ca);\n        ParamUtil.requireMin(\"numEntries\", numEntries, 1);\n\n        if (onlyCaCerts && onlyUserCerts) {\n            throw new IllegalArgumentException(\n                    \"onlyCaCerts and onlyUserCerts cannot be both of true\");\n        }\n        boolean withEe = onlyCaCerts || onlyUserCerts;\n        final String sql = sqls.getSqlSerials(numEntries, notExpiredAt, onlyRevoked, withEe);\n\n        ResultSet rs = null;\n        PreparedStatement ps = borrowPreparedStatement(sql);\n\n        try {\n            int idx = 1;\n            ps.setLong(idx++, startId - 1);\n            ps.setInt(idx++, ca.id());\n            if (notExpiredAt != null) {\n                ps.setLong(idx++, notExpiredAt.getTime() / 1000 + 1);\n            }\n            if (withEe) {\n                setBoolean(ps, idx++, onlyUserCerts);\n            }\n            rs = ps.executeQuery();\n            List<SerialWithId> ret = new ArrayList<>();\n            while (rs.next() && ret.size() < numEntries) {\n                long id = rs.getLong(\"ID\");\n                String serial = rs.getString(\"SN\");\n                ret.add(new SerialWithId(id, new BigInteger(serial, 16)));\n            }\n            return ret;\n        } catch (SQLException ex) {\n            throw datasource.translate(sql, ex);\n        } finally {\n            releaseDbResources(ps, rs);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private boolean isInContent(float x, float y, Sticker currentSticker) {\n\n\n\n        float[] pointsDst = currentSticker.getMapPointsDst();\n        if (x > pointsDst[0] && x < pointsDst[2] && y > pointsDst[3] && y < pointsDst[5])\n            return true;\n        return false;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, com.ib.client.Contract contractIB, com.ib.client.Order order,\n\t\t\tOrderState orderState) {\n\t\ttry {\n\n\t\t\tTWSBrokerModel.logOrderState(orderState);\n\t\t\tTWSBrokerModel.logTradeOrder(order);\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(new Integer(order.m_orderId));\n\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170,\n\t\t\t\t\t\t\"Warning Order not found for Order Key: \" + order.m_orderId + \" make sure Client ID: \"\n\t\t\t\t\t\t\t\t+ this.m_clientId + \" is not the master in TWS. On openOrder update.\");\n\t\t\t\ttransientInstance = new TradeOrder();\n\t\t\t\ttransientInstance.setOrderKey(order.m_orderId);\n\t\t\t\ttransientInstance.setCreateDate(TradingCalendar.getDateTimeNowMarketTimeZone());\n\t\t\t\tTWSBrokerModel.updateTradeOrder(order, orderState, transientInstance);\n\t\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (TWSBrokerModel.updateTradeOrder(order, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t_log.debug(\"Open order filled Order Key:\" + transientInstance.getOrderKey());\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (transientInstance.hasTradePosition() && !transientInstance.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(transientInstance.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Open order state changed. Status:\" + orderState.m_status);\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(transientInstance);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.fireTradeOrderStatusChanged(transientInstance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate PasswordImpl(int origin,String rawPassword, String salt) {\n\t\tthis.rawPassword=rawPassword;\n\t\tthis.password=hash(rawPassword, salt);\n\t\tthis.salt=salt;\n\t\tthis.type=StringUtil.isEmpty(salt)?HASHED:HASHED_SALTED;\n\t\tthis.origin=origin;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nCurve createCurve() {\n        switch (type) {\n            case Polygon:\n                return new PolygonCurve();\n            case QuadraticBezier:\n                return null;\n            case CubicBezier:\n                return new CubicBezierCurve();\n            case QuadraticBasis:\n                return new QuadraticBasisSpline();\n            case CubicBasis:\n                return new CubicBasisSpline();\n            case QuadraticRational:\n                return new QuadraticRationalSpline();\n            case CubicRational:\n                return new CubicRationalSpline();\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\tChannel channel = ctx.channel();\n\t\t\tchannels.remove(channel);\n\t\t\tNode client = channel.attr(STATE).get();\n\t\t\tuserLinkList.delUser(client);\n\t\t\tcombobox.removeItem(client.username);\n\t\t\tsuper.channelUnregistered(ctx);\n\t\t\tbroadcasts(new LoginOutMessage(client.username));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void runScheduleJobToAction(List<JobPersistenceOld> jobDetails, Date now, SimpleDateFormat dfDate, Map<Long, JobPersistence> actionDetails, String currentDateStr){\n\t\tfor(JobPersistenceOld jobDetail : jobDetails){\n\t\t\tif(jobDetail.getScheduleType() != null && jobDetail.getScheduleType()==0){\n\t\t\t\ttry{\n\t\t\t\t\tString jobCronExpression = jobDetail.getCronExpression();\n\t\t\t\t\tString cronDate= dfDate.format(now);\n\t\t\t\t\tList<String> lTime = new ArrayList<String>();\n\t\t\t\t\tif(jobCronExpression != null && jobCronExpression.trim().length() > 0){\n\t\t\t\t\t\tboolean isCronExp = false;\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\tisCronExp = CronExpParser.Parser(jobCronExpression, cronDate, lTime);\n\t\t\t\t\t\t}catch(Exception ex){\n\t\t\t\t\t\t\tisCronExp = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!isCronExp) {\n\t\t\t\t\t\t\tlog.error(\"\u93c3\u72b3\u7876\u9422\u71b8\u579aCron\u741b\u3128\u63ea\u5bee\u5fe5\u7d30\u93c3\u30e6\u6e61,\" + cronDate + \";\u6d93\u5d87\ue0c1\u935a\u5823\ue749\u9352\u6a86ron\u741b\u3128\u63ea\u5bee\u5fe5\u7d30\" + jobCronExpression);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (int i = 0; i < lTime.size(); i++) {\n\t\t\t\t\t\t\tString actionDateStr = ZeusDateTool.StringToDateStr(lTime.get(i), \"yyyy-MM-dd HH:mm:ss\", \"yyyyMMddHHmm\");\n\t\t\t\t\t\t\tString actionCronExpr = ZeusDateTool.StringToDateStr(lTime.get(i), \"yyyy-MM-dd HH:mm:ss\", \"0 m H d M\") + \" ?\";\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tJobPersistence actionPer = new JobPersistence();\n\t\t\t\t\t\t\tactionPer.setId(Long.parseLong(actionDateStr)*1000000+jobDetail.getId());//update action id\n\t\t\t\t\t\t\tactionPer.setToJobId(jobDetail.getId());\n\t\t\t\t\t\t\tactionPer.setAuto(jobDetail.getAuto());\n\t\t\t\t\t\t\tactionPer.setConfigs(jobDetail.getConfigs());\n\t\t\t\t\t\t\tactionPer.setCronExpression(actionCronExpr);//update action cron expression\n\t\t\t\t\t\t\tactionPer.setCycle(jobDetail.getCycle());\n\t\t\t\t\t\t\tString jobDependencies = jobDetail.getDependencies();\n\t\t\t\t\t\t\tactionPer.setDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setJobDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setDescr(jobDetail.getDescr());\n\t\t\t\t\t\t\tactionPer.setGmtCreate(jobDetail.getGmtCreate());\n\t\t\t\t\t\t\tactionPer.setGmtModified(new Date());\n\t\t\t\t\t\t\tactionPer.setGroupId(jobDetail.getGroupId());\n\t\t\t\t\t\t\tactionPer.setHistoryId(jobDetail.getHistoryId());\n\t\t\t\t\t\t\tactionPer.setHost(jobDetail.getHost());\n\t\t\t\t\t\t\tactionPer.setHostGroupId(jobDetail.getHostGroupId());\n\t\t\t\t\t\t\tactionPer.setLastEndTime(jobDetail.getLastEndTime());\n\t\t\t\t\t\t\tactionPer.setLastResult(jobDetail.getLastResult());\n\t\t\t\t\t\t\tactionPer.setName(jobDetail.getName());\n\t\t\t\t\t\t\tactionPer.setOffset(jobDetail.getOffset());\n\t\t\t\t\t\t\tactionPer.setOwner(jobDetail.getOwner());\n\t\t\t\t\t\t\tactionPer.setPostProcessers(jobDetail.getPostProcessers());\n\t\t\t\t\t\t\tactionPer.setPreProcessers(jobDetail.getPreProcessers());\n\t\t\t\t\t\t\tactionPer.setReadyDependency(jobDetail.getReadyDependency());\n\t\t\t\t\t\t\tactionPer.setResources(jobDetail.getResources());\n\t\t\t\t\t\t\tactionPer.setRunType(jobDetail.getRunType());\n\t\t\t\t\t\t\tactionPer.setScheduleType(jobDetail.getScheduleType());\n\n\t\t\t\t\t\t\tactionPer.setStartTime(jobDetail.getStartTime());\n\t\t\t\t\t\t\tactionPer.setStartTimestamp(jobDetail.getStartTimestamp());\n\t\t\t\t\t\t\tactionPer.setStatisStartTime(jobDetail.getStatisStartTime());\n\t\t\t\t\t\t\tactionPer.setStatisEndTime(jobDetail.getStatisEndTime());\n\t\t\t\t\t\t\tactionPer.setStatus(jobDetail.getStatus());\n\t\t\t\t\t\t\tactionPer.setTimezone(jobDetail.getTimezone());\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tlog.info(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59dfJobId: \" + jobDetail.getId()+\";  ActionId: \" +actionPer.getId());\n\t\t\t\t\t\t\t\t\tcontext.getGroupManager().saveJob(actionPer);\n\t\t\t\t\t\t\t\t\tlog.info(\"success\");\n\t\t\t\t\t\t\t\t\tactionDetails.put(actionPer.getId(),actionPer);\n\t\t\t\t\t\t\t} catch (ZeusException e) {\n\t\t\t\t\t\t\t\tlog.error(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59dfJobId:\" + jobDetail.getId() + \" \u9422\u71b8\u579aAction\" +actionPer.getId() + \"\u6fb6\u8fab\u89e6\", e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}catch(Exception ex){\n\t\t\t\t\tlog.error(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59df\u9422\u71b8\u579aAction\u6fb6\u8fab\u89e6\",ex);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic Class<?> toClass() {\n            switch (this) {\n            case Boolean:\n                return boolean.class;\n            case String:\n                return CharSequence.class;\n            case Number:\n                return double.class;\n            case Number_int:\n                return int.class;\n            case Number_uint:\n                return long.class;\n            case Object:\n                return ScriptObject.class;\n            case Reference:\n                return Reference.class;\n            case Null:\n                return Null.class;\n            case Undefined:\n                return Undefined.class;\n            case Any:\n                return Object.class;\n            case Empty:\n            default:\n                throw new AssertionError();\n            }\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void quadrantRotate(int numquadrants,\n                               double anchorx, double anchory)\n    {\n        switch (numquadrants & 3) {\n        case 0:\n            return;\n        case 1:\n            m02 += anchorx * (m00 - m01) + anchory * (m01 + m00);\n            m12 += anchorx * (m10 - m11) + anchory * (m11 + m10);\n            rotate90();\n            break;\n        case 2:\n            m02 += anchorx * (m00 + m00) + anchory * (m01 + m01);\n            m12 += anchorx * (m10 + m10) + anchory * (m11 + m11);\n            rotate180();\n            break;\n        case 3:\n            m02 += anchorx * (m00 + m01) + anchory * (m01 - m00);\n            m12 += anchorx * (m10 + m11) + anchory * (m11 - m10);\n            rotate270();\n            break;\n        }\n        if (m02 == 0.0 && m12 == 0.0) {\n            state &= ~APPLY_TRANSLATE;\n        } else {\n            state |= APPLY_TRANSLATE;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n\n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n\n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n\n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public CompletableFuture<Void> raise(RemoteEvent event,\n                                         Option...   options)\n    {\n        if (isOpen())\n        {\n            List<CompletableFuture<?>> futures = remoteChannels.values().stream().map((channel) -> {\n                                                         try\n                                                         {\n                                                             return channel.raise(event, options);\n                                                         }\n                                                         catch (Throwable e)\n                                                         {\n                                                             return CompletableFuture.completedFuture(null);\n                                                         }\n                                                     }).collect(Collectors.toList());\n\n            return CompletableFuture.allOf(futures.toArray(new CompletableFuture[futures.size()]));\n        }\n\n        return CompletableFuture.completedFuture(null);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    protected void hookDialogIsOpen() {\n        if (!(initialLabel != null\n            || (initialServerPath != null && initialRecursionType != null && initialVersionSpec != null))) {\n            getButton(IDialogConstants.OK_ID).setEnabled(nameText.getText().length() > 0);\n            return;\n        }\n\n        getButton(BUTTON_ADD_ID).setEnabled(false);\n        getButton(BUTTON_REMOVE_ID).setEnabled(false);\n        nameText.setEnabled(false);\n        commentText.setEnabled(false);\n        labelItemsTable.setEnabled(false);\n        getButton(IDialogConstants.OK_ID).setEnabled(false);\n\n        Runnable runnable;\n\n        if (initialLabel != null) {\n            runnable = new Runnable() {\n                @Override\n                public void run() {\n                    addFromLabel(initialLabel);\n                }\n            };\n        } else if (initialServerPath != null && initialRecursionType != null && initialVersionSpec != null) {\n            labelModified = true;\n\n            runnable = new Runnable() {\n                @Override\n                public void run() {\n                    addFromQuery(initialServerPath, initialRecursionType, initialVersionSpec, new Runnable() {\n                        @Override\n                        public void run() {\n                            if (initialLabel == null && nameText.getText().length() == 0) {\n                                nameText.setFocus();\n                            }\n                        }\n                    });\n                }\n            };\n        } else {\n            return;\n        }\n\n        new Thread(runnable).start();\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static void solve(int n) {\n\t\tHashSet<String> all = new HashSet<String>();\n\t\tint[] factors;\n\t\tArrayList<int[]> comb;\n\t\tfor (int i = 0; i <= n * n; ++i) {\n\t\t\tfactors = getFactors(i, n);\n\t\t\tcomb = twoPair(factors, i);\n\t\t\tfor (int[] left : comb) {\n\t\t\t\tfor (int[] right : comb) {\n\t\t\t\t\taddFour(left[0], left[1], right[0], right[1], all);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (String str : all) {\n\t\t\tSystem.out.println(str);\t\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, com.ib.client.Contract contractIB, com.ib.client.Order order,\n\t\t\tOrderState orderState) {\n\t\ttry {\n\n\t\t\tTWSBrokerModel.logOrderState(orderState);\n\t\t\tTWSBrokerModel.logTradeOrder(order);\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(new Integer(order.m_orderId));\n\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170,\n\t\t\t\t\t\t\"Warning Order not found for Order Key: \" + order.m_orderId + \" make sure Client ID: \"\n\t\t\t\t\t\t\t\t+ this.m_clientId + \" is not the master in TWS. On openOrder update.\");\n\t\t\t\ttransientInstance = new TradeOrder();\n\t\t\t\ttransientInstance.setOrderKey(order.m_orderId);\n\t\t\t\ttransientInstance.setCreateDate(TradingCalendar.getDateTimeNowMarketTimeZone());\n\t\t\t\tTWSBrokerModel.updateTradeOrder(order, orderState, transientInstance);\n\t\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (TWSBrokerModel.updateTradeOrder(order, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t_log.debug(\"Open order filled Order Key:\" + transientInstance.getOrderKey());\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (transientInstance.hasTradePosition() && !transientInstance.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(transientInstance.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Open order state changed. Status:\" + orderState.m_status);\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(transientInstance);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.fireTradeOrderStatusChanged(transientInstance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void addFooterView(View v, Object data, boolean isSelectable) {\n        FixedViewInfo info = new FixedViewInfo();\n        info.view = v;\n        info.data = data;\n        info.isSelectable = isSelectable;\n        mFooterViewInfos.add(info);\n\n        if (mDataSetObserver != null) {\n            mDataSetObserver.onChanged();\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public List<String> getGuid() {\n        if (guid == null) {\n            guid = new ArrayList<String>();\n        }\n        return this.guid;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic final boolean platformRequest(String urlString) throws ConnectionNotFoundException{\n\t\tif(urlString == null) {\n\t\t\tthrow new IllegalArgumentException(\"Parameter 'url' must not be null.\");\n\t\t}\n\t\tif(\"\".equals(urlString)) {\n\t\t\treturn false;\n\t\t}\n\t\tif(urlString.startsWith(\"tel:\")) {\n\t\t\tString number = urlString.substring(4);\n\t\t\tboolean matches = java.util.regex.Pattern.compile(\"\\\\+?\\\\d+\").matcher(number).matches();\n\t\t\tif(!matches) {\n\t\t\t\tthrow new ConnectionNotFoundException(\"The telephone number '\"+number+\"' is malformed. It must be described by the regular expression '\\\\+?\\\\d+'\");\n\t\t\t}\n\t\t\tIntent i = new Intent();\n\t\t\ti.setAction(Intent.ACTION_DIAL);\n\t\t\tUri numberUri = Uri.parse(\"tel:\"+number);\n\t\t\tSystem.out.println(\"Uri for phone number:\"+numberUri);\n\t\t\ti.setData(numberUri);\n\t\t\tstartActivity(i);\n\t\t\treturn false;\n\t\t}\n\t\tif(urlString.startsWith(\"http:\") || urlString.startsWith(\"https:\")) {\n\t\t\tUri uri = Uri.parse(urlString);\n\t\t\tIntent intent = new Intent(Intent.ACTION_VIEW,uri);\n\t\t\tstartActivity(intent);\n\t\t\treturn false;\n\t\t}\n\t\tif(urlString.startsWith(\"device://show/settings/gps\")) {\n\t\t\tIntent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);\n\t\t\tstartActivity(intent);\n\t\t\treturn false;\n\t\t}\n\t\tthrow new ConnectionNotFoundException(\"The url '\"+urlString+\"' can not behandled. The url scheme is not supported\");\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void actionPerformed(ActionEvent e) {\n            int i = 0;\n            for (i = 0; i < runners.size(); i++) {\n                if (runners.get(i).isAlive())\n                    break;\n            }\n\n            if (i == runners.size()) {\n                Display.getDefault().asyncExec(new Runnable() {\n                    public void run() {\n                        stop(true);\n                        setButton(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);\n                    }\n                });\n\n\n            }\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tprotected void initEnablementBehaviours(List<EnablementBehaviour> enablementBehaviours) {\n\t\tenablementBehaviours.add(new WithinLegalLayerBoundsBehaviour());\n\t\tenablementBehaviours.add(new ValidToolDetectionActivator(new Class[] {\n\t\t\t\tGeometry.class,\n\t\t\t\tPolygon.class,\n\t\t\t\tMultiPolygon.class,\n\t\t\t\tLineString.class,\n\t\t\t\tMultiLineString.class }));\n\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@SuppressWarnings(\"unchecked\")\n        public HttpContext.StringArrayList getNames() {\n            HttpSession session = mRequest.getSession();\n            if (mRequest == null || session == null)\n                return null;\n            if (mNames != null) {\n                mNames = new HttpContext.StringArrayList();\n                Enumeration<String> e = session.getAttributeNames();\n                while (e.hasMoreElements()) {\n                    mNames.add(e.nextElement());\n                }\n            }\n            return mNames;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void addShaped(IItemStack output, IIngredient[][] ingredients, IRecipeFunction function, boolean mirrored) {\n\t\tShapedRecipe recipe = new ShapedRecipe(output, ingredients, function, mirrored);\n\t\tIRecipe irecipe = RecipeConverter.convert(recipe);\n\t\tMineTweakerAPI.apply(new ActionAddRecipe(irecipe, recipe));\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PluginLoadOrder getLoad() {\n        return order;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, final Contract contract, final TradeOrder tradeOrder,\n\t\t\tfinal OrderState orderState) {\n\n\t\ttry {\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(tradeOrder.getOrderKey());\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170, \"Warning Order not found for Order Key: \" + orderId + \" make sure Client ID: \" + 0\n\t\t\t\t\t\t+ \" is not the master in TWS. On openOrder update.\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (BackTestBrokerModel.updateTradeOrder(tradeOrder, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\n\t\t\t\t\t_log.debug(\"Order Key: \" + transientInstance.getOrderKey() + \" filled.\");\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (updatedOrder.hasTradePosition() && !updatedOrder.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(updatedOrder.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Order key: \" + transientInstance.getOrderKey() + \" state changed. Status:\"\n\t\t\t\t\t\t\t+ orderState.m_status);\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(updatedOrder.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(updatedOrder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker, boolean showDirection) {\n        this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  private static Instruction makePhiInstruction(HeapVariable<Object> H, BasicBlock bb) {\n    int n = bb.getNumberOfIn();\n    Enumeration<BasicBlock> in = bb.getIn();\n    HeapOperand<Object> lhs = new HeapOperand<Object>(H);\n    Instruction s = Phi.create(PHI, lhs, n);\n    lhs.setInstruction(s);\n    for (int i = 0; i < n; i++) {\n      HeapOperand<Object> op = new HeapOperand<Object>(H);\n      op.setInstruction(s);\n      Phi.setValue(s, i, op);\n      BasicBlock pred = in.nextElement();\n      Phi.setPred(s, i, new BasicBlockOperand(pred));\n    }\n    return s;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\n    public static Bitmap fastblur(Context context, Bitmap sentBitmap, float radius) {\n\n        if (Build.VERSION.SDK_INT > 16 &&\n                    (!Build.MODEL.contains(\"google_sdk\")\n                             && !Build.MODEL.contains(\"Emulator\")\n                             && !Build.MODEL.contains(\"Android SDK\")\n                             && !Build.FINGERPRINT.contains(\"vbox86p\"))) {\n            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n            final RenderScript rs = RenderScript.create(context);\n            final Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n                                                                 Allocation.USAGE_SCRIPT);\n            final Allocation output = Allocation.createTyped(rs, input.getType());\n            final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n            script.setRadius(radius );\n            script.setInput(input);\n            script.forEach(output);\n            output.copyTo(bitmap);\n            return bitmap;\n        }\n\n        radius *= 0.1;\n        return blurfast(sentBitmap, (int) radius);\n\n\n\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void requestListViewData() {\n        mBllUser = new BusinessUser(this);\n        mListMap = new ArrayList<Map<String, Object>>();\n        mBllUser.userServerOrderList((position + 1) + \"\", pageNum + \"\");\n\n\n        mAdapterSeverNopay = new AdapterFrgServerOrderNopay(getActivity(), this, mListMap);\n        mListView.setAdapter(mAdapterSeverNopay);\n\n        mListView.setMode(PullToRefreshBase.Mode.PULL_FROM_END);\n        mListView.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener2<ListView>() {\n            @Override\n            public void onPullDownToRefresh(PullToRefreshBase<ListView> refreshView) {\n                LogUtils.e(\"onPullDownToRefresh=====================>\");\n            }\n\n            @Override\n            public void onPullUpToRefresh(PullToRefreshBase<ListView> refreshView) {\n                LogUtils.e(\"onPullUpToRefresh=====================>\");\n\n                if (mTotalPage > 0 && mTotalPage > pageNum) {\n                    pageNum++;\n                    mBllUser.userServerOrderList((position + 1) + \"\", pageNum + \"\");\n                } else {\n                    mListView.postDelayed(new Runnable() {\n                        @Override\n                        public void run() {\n                            mListView.onRefreshComplete();\n                        }\n                    }, 1000);\n                }\n            }\n        });\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic static <P extends IUnlistedProperty<T>, T> T getStatePropertySafely(@Nullable TileEntity te, Class<? extends Block> block, P property, T defaultVal, boolean actual, boolean extended) {\n\t\tif(te == null || te.getWorld() == null) {\n\t\t\treturn defaultVal;\n\t\t}\n\t\tIBlockState state = te.getWorld().getBlockState(te.getPos());\n\t\tif(block.isInstance(state.getBlock())) {\n\t\t\tif(actual) {\n\t\t\t\tstate = state.getActualState(te.getWorld(), te.getPos());\n\t\t\t}\n\t\t\tif(extended) {\n\t\t\t\tstate = state.getBlock().getExtendedState(state, te.getWorld(), te.getPos());\n\t\t\t}\n\t\t\tif(state instanceof IExtendedBlockState) {\n\t\t\t\treturn ((IExtendedBlockState)state).getValue(property);\n\t\t\t}\n\t\t}\n\t\treturn defaultVal;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(byte[] bytes, int start, int length) {\n        char[] chars = localBuffer.get();\n        if (chars == null || chars.length < length) {\n            chars = new char[length];\n            localBuffer.set(chars);\n        }\n        int outAt = 0;\n\n        for (int at = start; length > 0; ) {\n            int v0 = bytes[at] & 0xFF;\n            char out;\n            switch (v0 >> 4) {\n                case 0x00: case 0x01: case 0x02: case 0x03:\n                case 0x04: case 0x05: case 0x06: case 0x07: {\n                    length--;\n                    if (v0 == 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    out = (char) v0;\n                    at++;\n                    break;\n                }\n                case 0x0c: case 0x0d: {\n                    length -= 2;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int value = ((v0 & 0x1f) << 6) | (v1 & 0x3f);\n                    if ((value != 0) && (value < 0x80)) {\n                        \n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    out = (char) value;\n                    at += 2;\n                    break;\n                }\n                case 0x0e: {\n                    length -= 3;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int v2 = bytes[at + 2] & 0xFF;\n                    if ((v2 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    int value = ((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) |\n                            (v2 & 0x3f);\n                    if (value < 0x800) {\n                        \n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    out = (char) value;\n                    at += 3;\n                    break;\n                }\n                default: {\n                    return throwBadUtf8(v0, at);\n                }\n            }\n            chars[outAt] = out;\n            outAt++;\n        }\n\n        return new String(chars, 0, outAt);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic BlameGenerator push(String description, AnyObjectId id)\n\t\t\tthrows IOException {\n\t\tObjectLoader ldr = reader.open(id);\n\t\tif (ldr.getType() == OBJ_BLOB) {\n\t\t\tif (description == null)\n\t\t\t\tdescription = JGitText.get().blameNotCommittedYet;\n\t\t\tBlobCandidate c = new BlobCandidate(description, resultPath);\n\t\t\tc.sourceBlob = id.toObjectId();\n\t\t\tc.sourceText = new RawText(ldr.getCachedBytes(Integer.MAX_VALUE));\n\t\t\tc.regionList = new Region(0, 0, c.sourceText.size());\n\t\t\tremaining = c.sourceText.size();\n\t\t\tpush(c);\n\t\t\treturn this;\n\t\t}\n\n\t\tRevCommit commit = revPool.parseCommit(id);\n\t\tif (!find(commit, resultPath))\n\t\t\treturn this;\n\n\t\tCandidate c = new Candidate(commit, resultPath);\n\t\tc.sourceBlob = idBuf.toObjectId();\n\t\tc.loadText(reader);\n\t\tc.regionList = new Region(0, 0, c.sourceText.size());\n\t\tremaining = c.sourceText.size();\n\t\tpush(c);\n\t\treturn this;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(byte[] bytes, int start, int length) {\n        char[] chars = localBuffer.get();\n        if (chars == null || chars.length < length) {\n            chars = new char[length];\n            localBuffer.set(chars);\n        }\n        int outAt = 0;\n\n        for (int at = start; length > 0; ) {\n            int v0 = bytes[at] & 0xFF;\n            char out;\n            switch (v0 >> 4) {\n                case 0x00: case 0x01: case 0x02: case 0x03:\n                case 0x04: case 0x05: case 0x06: case 0x07: {\n                    length--;\n                    if (v0 == 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    out = (char) v0;\n                    at++;\n                    break;\n                }\n                case 0x0c: case 0x0d: {\n                    length -= 2;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int value = ((v0 & 0x1f) << 6) | (v1 & 0x3f);\n                    if ((value != 0) && (value < 0x80)) {\n                        \n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    out = (char) value;\n                    at += 2;\n                    break;\n                }\n                case 0x0e: {\n                    length -= 3;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int v2 = bytes[at + 2] & 0xFF;\n                    if ((v2 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    int value = ((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) |\n                            (v2 & 0x3f);\n                    if (value < 0x800) {\n                        \n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    out = (char) value;\n                    at += 3;\n                    break;\n                }\n                default: {\n                    return throwBadUtf8(v0, at);\n                }\n            }\n            chars[outAt] = out;\n            outAt++;\n        }\n\n        return new String(chars, 0, outAt);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, com.ib.client.Contract contractIB, com.ib.client.Order order,\n\t\t\tOrderState orderState) {\n\t\ttry {\n\n\t\t\tTWSBrokerModel.logOrderState(orderState);\n\t\t\tTWSBrokerModel.logTradeOrder(order);\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(new Integer(order.m_orderId));\n\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170,\n\t\t\t\t\t\t\"Warning Order not found for Order Key: \" + order.m_orderId + \" make sure Client ID: \"\n\t\t\t\t\t\t\t\t+ this.m_clientId + \" is not the master in TWS. On openOrder update.\");\n\t\t\t\ttransientInstance = new TradeOrder();\n\t\t\t\ttransientInstance.setOrderKey(order.m_orderId);\n\t\t\t\ttransientInstance.setCreateDate(TradingCalendar.getDateTimeNowMarketTimeZone());\n\t\t\t\tTWSBrokerModel.updateTradeOrder(order, orderState, transientInstance);\n\t\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (TWSBrokerModel.updateTradeOrder(order, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t_log.debug(\"Open order filled Order Key:\" + transientInstance.getOrderKey());\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (transientInstance.hasTradePosition() && !transientInstance.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(transientInstance.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Open order state changed. Status:\" + orderState.m_status);\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(transientInstance);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.fireTradeOrderStatusChanged(transientInstance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic WebSocketServer(InetSocketAddress address, int decodercount,\n\t\t\tList<Draft> drafts) {\n\t\tthis(address, decodercount, drafts, new HashSet<WebSocket>());\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void setJoinType(int type) throws SQLException {\n\n       if (type >= JoinRowSet.CROSS_JOIN && type <= JoinRowSet.FULL_JOIN) {\n           if (type != JoinRowSet.INNER_JOIN) {\n               throw new SQLException(resBundle.handleGetObject(\"joinrowsetimpl.notsupported\").toString());\n           } else {\n              Integer Intgr = Integer.valueOf(JoinRowSet.INNER_JOIN);\n              vecJoinType.add(Intgr);\n           }\n       } else {\n          throw new SQLException(resBundle.handleGetObject(\"joinrowsetimpl.notdefined\").toString());\n       }  //end if\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static void main(String[] args){\n\t\ttry {\n\t\t\t@SuppressWarnings(\"deprecation\")\n\t\t\t\n\t\t\tCommonsHttpSolrServer solbaseServer = new CommonsHttpSolrServer(\"http://den2sch21:8080/solbase/pbimages~4\");\n\n\t\t\t\n\t\t\t\n\t\t\tList<String> ids = new ArrayList<String>();\n\t\t\tids.add(127995479 + \"\"); // term vector didn't get deleted doc id\n\t\t\tids.add(134876977 + \"\"); // term vector did get deleted doc id\n\t\t\tsolbaseServer.deleteById(ids, true);\n\t\t} catch (MalformedURLException e) {\n\n\t\t} catch (SolrServerException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static <A extends Closeable> A api(Class<A> apitype, final String provider, final String credId, final Properties overrides) {\n        Thread.currentThread().setContextClassLoader(Apis.class.getClassLoader());\n        return CredentialsHelper.setCredentials(ContextBuilder.newBuilder(provider), credId)\n            .overrides(overrides).modules(MODULES).buildApi(typeToken(apitype));\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void setJoinType(int type) throws SQLException {\n\n       if (type >= JoinRowSet.CROSS_JOIN && type <= JoinRowSet.FULL_JOIN) {\n           if (type != JoinRowSet.INNER_JOIN) {\n               throw new SQLException(resBundle.handleGetObject(\"joinrowsetimpl.notsupported\").toString());\n           } else {\n              Integer Intgr = Integer.valueOf(JoinRowSet.INNER_JOIN);\n              vecJoinType.add(Intgr);\n           }\n       } else {\n          throw new SQLException(resBundle.handleGetObject(\"joinrowsetimpl.notdefined\").toString());\n       }  //end if\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public Kernel(int width, int height, float data[]) {\n        this.width  = width;\n        this.height = height;\n        this.xOrigin  = (width-1)>>1;\n        this.yOrigin  = (height-1)>>1;\n        int len = width*height;\n        if (data.length < len) {\n            throw new IllegalArgumentException(\"Data array too small \"+\n                                               \"(is \"+data.length+\n                                               \" and should be \"+len);\n        }\n        this.data = new float[len];\n        System.arraycopy(data, 0, this.data, 0, len);\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(java.io.File file) throws org.apache.xmlbeans.XmlException, java.io.IOException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( file, type, null ); }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tpublic ItemStack removeStackFromSlot(int slot) {\n\n\t\tif (!masterInv.getStackInSlot(invOffset + slot).isEmpty()) {\n\t\t\tItemStack stack = masterInv.getStackInSlot(invOffset + slot);\n\t\t\tmasterInv.setInventorySlotContents(invOffset + slot, ItemStack.EMPTY);\n\t\t\treturn stack;\n\t\t}\n\t\treturn ItemStack.EMPTY;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public long testBlock(String filename, int blockSize) throws IOException {\n    LOGGER.info(\"Searching for divider in blocks of {}...\", blockSize);\n    long start = System.currentTimeMillis();\n\n    RandomAccessInputStream in = new RandomAccessInputStream(filename);\n    long offset = in.findString(blockSize, TAG).length();\n    in.close();\n\n    long end = System.currentTimeMillis();\n    LOGGER.info(\"Search result: {} -- in {} ms\", offset, end - start);\n    return offset;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void paintIcon(Component c, Graphics g, int x, int y) {\n            AbstractButton b = (AbstractButton) c;\n            ButtonModel model = b.getModel();\n\n            boolean flat = false;\n\n            if(b instanceof JCheckBox) {\n                flat = ((JCheckBox)b).isBorderPaintedFlat();\n            }\n\n            boolean isPressed = model.isPressed();\n            boolean isArmed = model.isArmed();\n            boolean isEnabled = model.isEnabled();\n            boolean isSelected = model.isSelected();\n\n            boolean checkToggleIn = ((isPressed &&\n                                      !isArmed   &&\n                                      isSelected) ||\n                                     (isPressed &&\n                                      isArmed   &&\n                                      !isSelected));\n            boolean uncheckToggleOut = ((isPressed &&\n                                         !isArmed &&\n                                         !isSelected) ||\n                                        (isPressed &&\n                                         isArmed &&\n                                         isSelected));\n\n            boolean checkIn = (!isPressed  &&\n                               isArmed    &&\n                               isSelected  ||\n                               (!isPressed &&\n                                !isArmed  &&\n                                isSelected));\n\n\n            if(flat) {\n                g.setColor(shadow);\n                g.drawRect(x+2,y,csize-1,csize-1);\n                if(uncheckToggleOut || checkToggleIn) {\n                    g.setColor(control);\n                    g.fillRect(x+3,y+1,csize-2,csize-2);\n                }\n            }\n\n            if (checkToggleIn) {\n                drawCheckBezel(g,x,y,csize,true,false,false,flat);\n            } else if (uncheckToggleOut) {\n                drawCheckBezel(g,x,y,csize,true,true,false,flat);\n            } else if (checkIn) {\n                drawCheckBezel(g,x,y,csize,false,false,true,flat);\n            } else if(!flat) {\n                drawCheckBezelOut(g,x,y,csize);\n            }\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public void onPlayerStateChange(PlayerState oldState, PlayerState newState, Bundle extra) {\n\n        mPrevState = mCurrentState;\n        mCurrentState = newState;\n        Log.d(TAG, \"State change event! Oldstate= \" + oldState + \" NewState= \" + newState);\n        if (mPrevState == mCurrentState) {\n            Log.w(TAG, \"Duplicate state change message!!! \");\n        }\n        if (mPrevState == PlayerState.BUFFERING && mCurrentState != PlayerState.BUFFERING) {\n            AnalyticsHelper.trackContentAction(AnalyticsTags.ACTION_PLAYBACK_BUFFER_END,\n                                               mSelectedContent, getCurrentPosition());\n        }\n        switch (newState) {\n            case IDLE:\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mIsContentChangeRequested) {\n                    openSelectedContent();\n                }\n                break;\n            case OPENING:\n                break;\n            case OPENED:\n                if (mPlayer != null && mIsActivityResumed) {\n                    mPlayer.prepare();\n                }\n                else {\n                    mIsContentChangeRequested = false;\n                }\n                if (mIsContentSupportCC && mIsCloseCaptionEnabled) {\n                    if (mPlaybackOverlayFragment != null) {\n                        mPlaybackOverlayFragment.updateCCButtonState(true, true);\n                    }\n                    if (mPlayer != null) {\n                        mPlayer.enableTextTrack(TrackType.SUBTITLE, true);\n                    }\n                }\n                break;\n            case PREPARING:\n                if (mPlaybackOverlayFragment != null && mPlaybackOverlayFragment.getView() !=\n                        null) {\n                    mPlaybackOverlayFragment.getView().setVisibility(View.VISIBLE);\n                }\n                break;\n            case READY:\n                mPlaybackState = LeanbackPlaybackState.PAUSED;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(false);\n                }\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mPrevState == PlayerState.PREPARING) {\n                    if (mPlaybackOverlayFragment != null) {\n                        mPlaybackOverlayFragment.updatePlayback();\n                        mPlaybackOverlayFragment.startProgressAutomation();\n                    }\n                    if (mCurrentPlaybackPosition > 0) {\n                        mPlayer.seekTo(mCurrentPlaybackPosition);\n                    }\n                    if (mAutoPlay || mIsContentChangeRequested) {\n                        play();\n                        mAutoPlay = false;\n                        if (mIsContentChangeRequested) {\n                            mIsContentChangeRequested = false;\n                        }\n                    }\n                }\n                else if (mAudioFocusState == AudioFocusState.NoFocusNoDuck) {\n                    play();\n                }\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PAUSED);\n                }\n                break;\n            case PLAYING:\n                mPlaybackState = LeanbackPlaybackState.PLAYING;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(true);\n                }\n                hideProgress();\n                mWindow.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PLAYING);\n                }\n                break;\n            case BUFFERING:\n                showProgress();\n                AnalyticsHelper.trackContentAction(AnalyticsTags.ACTION_PLAYBACK_BUFFER_START,\n                                                   mSelectedContent, getCurrentPosition());\n                break;\n            case SEEKING:\n                showProgress();\n                break;\n            case ENDED:\n                hideProgress();\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.playbackFinished();\n                }\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.COMPLETED);\n                }\n                break;\n            case CLOSING:\n\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.stopProgressAutomation();\n                }\n                if (!isContentLive(mSelectedContent)) {\n                    AnalyticsHelper.trackContentFinished(mSelectedContent, getCurrentPosition());\n                }\n                break;\n            case ERROR:\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                Log.e(TAG, \"Player encountered an error!\");\n                break;\n            default:\n                Log.e(TAG, \"Unknown state!!!!!\");\n                break;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, com.ib.client.Contract contractIB, com.ib.client.Order order,\n\t\t\tOrderState orderState) {\n\t\ttry {\n\n\t\t\tTWSBrokerModel.logOrderState(orderState);\n\t\t\tTWSBrokerModel.logTradeOrder(order);\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(new Integer(order.m_orderId));\n\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170,\n\t\t\t\t\t\t\"Warning Order not found for Order Key: \" + order.m_orderId + \" make sure Client ID: \"\n\t\t\t\t\t\t\t\t+ this.m_clientId + \" is not the master in TWS. On openOrder update.\");\n\t\t\t\ttransientInstance = new TradeOrder();\n\t\t\t\ttransientInstance.setOrderKey(order.m_orderId);\n\t\t\t\ttransientInstance.setCreateDate(TradingCalendar.getDateTimeNowMarketTimeZone());\n\t\t\t\tTWSBrokerModel.updateTradeOrder(order, orderState, transientInstance);\n\t\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (TWSBrokerModel.updateTradeOrder(order, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t_log.debug(\"Open order filled Order Key:\" + transientInstance.getOrderKey());\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (transientInstance.hasTradePosition() && !transientInstance.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(transientInstance.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Open order state changed. Status:\" + orderState.m_status);\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(transientInstance);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.fireTradeOrderStatusChanged(transientInstance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void insert(int itemNum, javax.microedition.lcdui.Item item)\n\t{\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic static String getActionName(ActionListener listener)\n\t{\n\t\tEnumeration enumerator = getActions();\n\t\twhile(enumerator.hasMoreElements())\n\t\t{\n\t\t\tString name = (String)enumerator.nextElement();\n\t\t\tActionListener _listener = getAction(name);\n\t\t\tif(_listener == listener)\n\t\t\t\treturn name;\n\t\t}\n\t\treturn null;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + order.m_lmtPrice +\n        \" auxPrice=\" + order.m_auxPrice +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + order.m_minQty +\n        \" percentOffset=\" + order.m_percentOffset +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + order.m_nbboPriceCap +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + order.m_startingPrice +\n        \" stockRefPrice=\" + order.m_stockRefPrice +\n        \" delta=\" + order.m_delta +\n        \" stockRangeLower=\" + order.m_stockRangeLower +\n        \" stockRangeUpper=\" + order.m_stockRangeUpper +\n        \" volatility=\" + order.m_volatility +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + order.m_trailStopPrice +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + order.m_basisPoints;\n        \t\tmsg += \" basisPointsType=\" + order.m_basisPointsType;\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n    public void testNotEquals() throws UnsupportedEncodingException {\n        SoapSTSInstanceConfig ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/openam\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        SoapSTSInstanceConfig ric2 = createInstanceConfig(\"/bobo\", \"http://localhost:8080/openam\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/openam\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", !WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", !WITH_KEYSTORE_CONFIG,\n                !WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", !WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, !DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, !DELEGATION_VALIDATORS_SPECIFIED, !CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, !WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, !WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n\n        ric1 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, WITH_CTS_TOKEN_PERSISTENCE);\n        ric2 = createInstanceConfig(\"/bob\", \"http://localhost:8080/\", WITH_KEYSTORE_CONFIG,\n                WITH_VALIDATE_CONFIG, DELEGATION_VALIDATORS_SPECIFIED, CUSTOM_DELEGATION_HANDLER, WITH_SAML2_CONFIG, WITH_OIDC_CONFIG, !WITH_CTS_TOKEN_PERSISTENCE);\n        assertNotEquals(ric1, ric2);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic synchronized String[] getFieldNames() {\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {\n            MODELMBEAN_LOGGER.logp(Level.FINEST,\n                    DescriptorSupport.class.getName(),\n                    \"getFieldNames()\", \"Entry\");\n        }\n        int numberOfEntries = descriptorMap.size();\n\n        String[] responseFields = new String[numberOfEntries];\n        Set<Map.Entry<String, Object>> returnedSet = descriptorMap.entrySet();\n\n        int i = 0;\n\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {\n            MODELMBEAN_LOGGER.logp(Level.FINEST,\n                    DescriptorSupport.class.getName(),\n                    \"getFieldNames()\",\n                    \"Returning \" + numberOfEntries + \" fields\");\n        }\n\n        for (Iterator<Map.Entry<String, Object>> iter = returnedSet.iterator();\n             iter.hasNext(); i++) {\n            Map.Entry<String, Object> currElement = iter.next();\n\n            if (( currElement == null ) || (currElement.getKey() == null)) {\n                if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {\n                    MODELMBEAN_LOGGER.logp(Level.FINEST,\n                            DescriptorSupport.class.getName(),\n                            \"getFieldNames()\", \"Field is null\");\n                }\n            } else {\n                responseFields[i] = currElement.getKey().toString();\n            }\n        }\n\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {\n            MODELMBEAN_LOGGER.logp(Level.FINEST,\n                    DescriptorSupport.class.getName(),\n                    \"getFieldNames()\", \"Exit\");\n        }\n\n        return responseFields;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\n    private Class primitiveType(char type) {\n        switch (type) {\n            case 'B':\n                return byte.class;\n            case 'C':\n                return char.class;\n            case 'D':\n                return double.class;\n            case 'F':\n                return float.class;\n            case 'I':\n                return int.class;\n            case 'J':\n                return long.class;\n            case 'S':\n                return short.class;\n            case 'Z':\n                return boolean.class;\n            default:\n                return null;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, final Contract contract, final TradeOrder tradeOrder,\n\t\t\tfinal OrderState orderState) {\n\n\t\ttry {\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(tradeOrder.getOrderKey());\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170, \"Warning Order not found for Order Key: \" + orderId + \" make sure Client ID: \" + 0\n\t\t\t\t\t\t+ \" is not the master in TWS. On openOrder update.\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (BackTestBrokerModel.updateTradeOrder(tradeOrder, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\n\t\t\t\t\t_log.debug(\"Order Key: \" + transientInstance.getOrderKey() + \" filled.\");\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (updatedOrder.hasTradePosition() && !updatedOrder.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(updatedOrder.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Order key: \" + transientInstance.getOrderKey() + \" state changed. Status:\"\n\t\t\t\t\t\t\t+ orderState.m_status);\n\t\t\t\t\tBackTestBrokerModel.logOrderState(orderState);\n\t\t\t\t\tBackTestBrokerModel.logTradeOrder(tradeOrder);\n\t\t\t\t\tTradeOrder updatedOrder = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(updatedOrder.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(updatedOrder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": "just for space"}
