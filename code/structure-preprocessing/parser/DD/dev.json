{"code": "class EmptyClass {\n\nprivate Path computeBootClassPath() {\n        bootClassPathRtJar = null;\n        String optionValue;\n        Path path = new Path();\n\n        path.addFiles(options.get(XBOOTCLASSPATH_PREPEND));\n\n        if ((optionValue = options.get(ENDORSEDDIRS)) != null)\n            path.addDirectories(optionValue);\n        else\n            path.addDirectories(System.getProperty(\"java.endorsed.dirs\"), false);\n\n        if ((optionValue = options.get(BOOTCLASSPATH)) != null) {\n            path.addFiles(optionValue);\n        } else {\n            String files = System.getProperty(\"sun.boot.class.path\");\n            path.addFiles(files, false);\n            File rt_jar = new File(\"rt.jar\");\n            for (File file : getPathEntries(files)) {\n                if (new File(file.getName()).equals(rt_jar))\n                    bootClassPathRtJar = file;\n            }\n        }\n\n        path.addFiles(options.get(XBOOTCLASSPATH_APPEND));\n\n        if ((optionValue = options.get(EXTDIRS)) != null)\n            path.addDirectories(optionValue);\n        else\n            path.addDirectories(System.getProperty(\"java.ext.dirs\"), false);\n\n        return path;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate long getLongFromString(String stringVal) throws SQLException {\n\t\tif (stringVal == null || stringVal.trim().length() == 0) {\n\t\t\tthis.lastWasNull = true;\n\t\t\treturn 0L;\n\t\t}\n\t\ttry {\n\t\t\tint decimalIndex = stringVal.indexOf(\".\");\n\n\t\t\tif (decimalIndex != -1) {\n\t\t\t\tdouble valueAsDouble = Double.parseDouble(stringVal);\n\t\t\t\treturn (long) valueAsDouble;\n\t\t\t}\n\n\t\t\treturn Long.parseLong(stringVal);\n\t\t} catch (NumberFormatException e) {\n\t\t\tthrow new SQLException(\"Parse integer error:\" + stringVal);\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void clearContexts(Resource... contexts)\n\t\tthrows IOException\n\t{\n\t\tlogger.debug(\"clearing contexts...\");\n\t\tluceneIndex.begin();\n\t\ttry {\n\t\t\tluceneIndex.clearContexts(contexts);\n\t\t\tluceneIndex.commit();\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tlogger.error(\"Rolling back\", e);\n\t\t\tluceneIndex.rollback();\n\t\t\tthrow e;\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic WebSocketServer(InetSocketAddress address, int decodercount,\n\t\t\tList<Draft> drafts) {\n\t\tthis(address, decodercount, drafts, new HashSet<WebSocket>());\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void populateAxisService() throws org.apache.axis2.AxisFault {\n        _service = new org.apache.axis2.description.AxisService(\n                \"DiscoveryService\" + getUniqueSuffix());\n        addAnonymousOperations();\n\n        org.apache.axis2.description.AxisOperation __operation;\n\n        _operations = new org.apache.axis2.description.AxisOperation[1];\n\n        __operation = new org.apache.axis2.description.OutInAxisOperation();\n\n        __operation.setName(new javax.xml.namespace.QName(\n                \"http://schemas.microsoft.com/xrm/2011/Contracts/Discovery\",\n                \"execute\"));\n        _service.addOperation(__operation);\n\n        (__operation).getMessage(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_OUT_VALUE)\n         .getPolicySubject()\n         .attachPolicy(getPolicy(\n                \"<wsp:Policy wsu:Id=\\\"CustomBinding_IDiscoveryService_policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2004/09/policy\\\" xmlns:wsu=\\\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\\\"><wsp:ExactlyOne><wsp:All><ms-xrm:FailoverPolicy xmlns:ms-xrm=\\\"http://schemas.microsoft.com/xrm/2012/Contracts/Services\\\">\\n          <ms-xrm:FailoverAvailable>false</ms-xrm:FailoverAvailable>\\n          <ms-xrm:EndpointEnabled>true</ms-xrm:EndpointEnabled>\\n        </ms-xrm:FailoverPolicy><ms-xrm:AuthenticationPolicy xmlns:ms-xrm=\\\"http://schemas.microsoft.com/xrm/2011/Contracts/Services\\\">\\n          <ms-xrm:Authentication>LiveId</ms-xrm:Authentication>\\n          <ms-xrm:SecureTokenService>\\n            <ms-xrm:Identifier>urn:federation:MicrosoftOnline</ms-xrm:Identifier>\\n            <ms-xrm:LiveTrust>\\n              <ms-xrm:AppliesTo>urn:crmna:dynamics.com</ms-xrm:AppliesTo>\\n              <ms-xrm:TrustVersion>WSTrustFeb2005</ms-xrm:TrustVersion>\\n              <ms-xrm:SecurityMode>TransportWithMessageCredential</ms-xrm:SecurityMode>\\n              <ms-xrm:LivePolicy>MBI_FED_SSL</ms-xrm:LivePolicy>\\n              <ms-xrm:LiveIdAppliesTo>http://Passport.NET/tb</ms-xrm:LiveIdAppliesTo>\\n            </ms-xrm:LiveTrust>\\n          </ms-xrm:SecureTokenService>\\n        </ms-xrm:AuthenticationPolicy><ms-xrm:FailoverPolicy xmlns:ms-xrm=\\\"http://schemas.microsoft.com/xrm/2012/Contracts/Services\\\">\\n          <ms-xrm:FailoverAvailable>false</ms-xrm:FailoverAvailable>\\n          <ms-xrm:EndpointEnabled>true</ms-xrm:EndpointEnabled>\\n        </ms-xrm:FailoverPolicy><ms-xrm:AuthenticationPolicy xmlns:ms-xrm=\\\"http://schemas.microsoft.com/xrm/2012/Contracts/Services\\\">\\n          <ms-xrm:Authentication>OnlineFederation</ms-xrm:Authentication>\\n          <ms-xrm:SecureTokenService>\\n            <ms-xrm:Identifier>https://dynamicscrmna.accesscontrol.windows.net/</ms-xrm:Identifier>\\n            <ms-xrm:OrgTrust>\\n              <ms-xrm:AppliesTo>urn:crmna:dynamics.com</ms-xrm:AppliesTo>\\n              <ms-xrm:TrustVersion>WSTrustFeb2005</ms-xrm:TrustVersion>\\n              <ms-xrm:SecurityMode>TransportWithMessageCredential</ms-xrm:SecurityMode>\\n              <ms-xrm:LivePolicy>MBI_FED_SSL</ms-xrm:LivePolicy>\\n              <ms-xrm:LiveIdAppliesTo>http://Passport.NET/tb</ms-xrm:LiveIdAppliesTo>\\n              <ms-xrm:LiveEndpoint>https://login.microsoftonline.com/RST2.srf</ms-xrm:LiveEndpoint>\\n              <ms-xrm:Identifier>urn:federation:MicrosoftOnline</ms-xrm:Identifier>\\n            </ms-xrm:OrgTrust>\\n          </ms-xrm:SecureTokenService>\\n        </ms-xrm:AuthenticationPolicy><ms-xrm:FailoverPolicy xmlns:ms-xrm=\\\"http://schemas.microsoft.com/xrm/2012/Contracts/Services\\\">\\n          <ms-xrm:FailoverAvailable>false</ms-xrm:FailoverAvailable>\\n          <ms-xrm:EndpointEnabled>true</ms-xrm:EndpointEnabled>\\n        </ms-xrm:FailoverPolicy><sp:TransportBinding xmlns:sp=\\\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\\\"><wsp:Policy xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2004/09/policy\\\"><sp:TransportToken><wsp:Policy xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2004/09/policy\\\"><sp:HttpsToken/></wsp:Policy></sp:TransportToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2004/09/policy\\\"><sp:TripleDes/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2004/09/policy\\\"><sp:Strict/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SignedSupportingTokens xmlns:sp=\\\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\\\"><wsp:Policy xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2004/09/policy\\\"><sp:IssuedToken sp:IncludeToken=\\\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient\\\">\\n              <Issuer xmlns=\\\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\\\">\\n                <Address xmlns=\\\"http://www.w3.org/2005/08/addressing\\\">https://login.microsoftonline.com/RST2.srf</Address>\\n                \\n                <Metadata xmlns=\\\"http://www.w3.org/2005/08/addressing\\\">\\n                  <Metadata xmlns=\\\"http://schemas.xmlsoap.org/ws/2004/09/mex\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\n                    <wsx:MetadataSection xmlns=\\\"\\\" xmlns:wsx=\\\"http://schemas.xmlsoap.org/ws/2004/09/mex\\\">\\n                      <wsx:MetadataReference>\\n                        <Address xmlns=\\\"http://www.w3.org/2005/08/addressing\\\">https://dynamicscrmna.accesscontrol.windows.net/v2/wstrust/mex</Address>\\n                      </wsx:MetadataReference>\\n                    </wsx:MetadataSection>\\n                  </Metadata>\\n                </Metadata>\\n              </Issuer>\\n              <sp:RequestSecurityTokenTemplate>\\n                <trust:KeyType xmlns:trust=\\\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\\\">http://docs.oasis-open.org/ws-sx/ws-trust/200512/SymmetricKey</trust:KeyType>\\n                <trust:KeySize xmlns:trust=\\\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\\\">192</trust:KeySize>\\n                <trust:Claims xmlns:trust=\\\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\\\" Dialect=\\\"http://schemas.xmlsoap.org/ws/2005/05/identity\\\">\\n                  <wsid:ClaimType xmlns:wsid=\\\"http://schemas.xmlsoap.org/ws/2005/05/identity\\\" Uri=\\\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\\\"/>\\n                </trust:Claims>\\n                <trust:KeyWrapAlgorithm xmlns:trust=\\\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\\\">http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p</trust:KeyWrapAlgorithm>\\n                <trust:EncryptWith xmlns:trust=\\\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\\\">http://www.w3.org/2001/04/xmlenc#tripledes-cbc</trust:EncryptWith>\\n                <trust:SignWith xmlns:trust=\\\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\\\">http://www.w3.org/2000/09/xmldsig#hmac-sha1</trust:SignWith>\\n                <trust:CanonicalizationAlgorithm xmlns:trust=\\\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\\\">http://www.w3.org/2001/10/xml-exc-c14n#</trust:CanonicalizationAlgorithm>\\n                <trust:EncryptionAlgorithm xmlns:trust=\\\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\\\">http://www.w3.org/2001/04/xmlenc#tripledes-cbc</trust:EncryptionAlgorithm>\\n              </sp:RequestSecurityTokenTemplate>\\n              <wsp:Policy>\\n                <sp:RequireInternalReference/>\\n              </wsp:Policy>\\n            </sp:IssuedToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\\\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\\\"><wsp:Policy xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2004/09/policy\\\"/></sp:Wss11><sp:Trust13 xmlns:sp=\\\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\\\"><wsp:Policy xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2004/09/policy\\\"><sp:MustSupportIssuedTokens/><sp:RequireClientEntropy/><sp:RequireServerEntropy/></wsp:Policy></sp:Trust13><wsaw:UsingAddressing xmlns:wsaw=\\\"http://www.w3.org/2006/05/addressing/wsdl\\\"></wsaw:UsingAddressing></wsp:All></wsp:ExactlyOne></wsp:Policy>\"));\n\n        (__operation).getMessage(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE)\n         .getPolicySubject()\n         .attachPolicy(getPolicy(\n                \"<wsp:Policy wsu:Id=\\\"CustomBinding_IDiscoveryService_policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2004/09/policy\\\" xmlns:wsu=\\\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\\\"><wsp:ExactlyOne><wsp:All><ms-xrm:FailoverPolicy xmlns:ms-xrm=\\\"http://schemas.microsoft.com/xrm/2012/Contracts/Services\\\">\\n          <ms-xrm:FailoverAvailable>false</ms-xrm:FailoverAvailable>\\n          <ms-xrm:EndpointEnabled>true</ms-xrm:EndpointEnabled>\\n        </ms-xrm:FailoverPolicy><ms-xrm:AuthenticationPolicy xmlns:ms-xrm=\\\"http://schemas.microsoft.com/xrm/2011/Contracts/Services\\\">\\n          <ms-xrm:Authentication>LiveId</ms-xrm:Authentication>\\n          <ms-xrm:SecureTokenService>\\n            <ms-xrm:Identifier>urn:federation:MicrosoftOnline</ms-xrm:Identifier>\\n            <ms-xrm:LiveTrust>\\n              <ms-xrm:AppliesTo>urn:crmna:dynamics.com</ms-xrm:AppliesTo>\\n              <ms-xrm:TrustVersion>WSTrustFeb2005</ms-xrm:TrustVersion>\\n              <ms-xrm:SecurityMode>TransportWithMessageCredential</ms-xrm:SecurityMode>\\n              <ms-xrm:LivePolicy>MBI_FED_SSL</ms-xrm:LivePolicy>\\n              <ms-xrm:LiveIdAppliesTo>http://Passport.NET/tb</ms-xrm:LiveIdAppliesTo>\\n            </ms-xrm:LiveTrust>\\n          </ms-xrm:SecureTokenService>\\n        </ms-xrm:AuthenticationPolicy><ms-xrm:FailoverPolicy xmlns:ms-xrm=\\\"http://schemas.microsoft.com/xrm/2012/Contracts/Services\\\">\\n          <ms-xrm:FailoverAvailable>false</ms-xrm:FailoverAvailable>\\n          <ms-xrm:EndpointEnabled>true</ms-xrm:EndpointEnabled>\\n        </ms-xrm:FailoverPolicy><ms-xrm:AuthenticationPolicy xmlns:ms-xrm=\\\"http://schemas.microsoft.com/xrm/2012/Contracts/Services\\\">\\n          <ms-xrm:Authentication>OnlineFederation</ms-xrm:Authentication>\\n          <ms-xrm:SecureTokenService>\\n            <ms-xrm:Identifier>https://dynamicscrmna.accesscontrol.windows.net/</ms-xrm:Identifier>\\n            <ms-xrm:OrgTrust>\\n              <ms-xrm:AppliesTo>urn:crmna:dynamics.com</ms-xrm:AppliesTo>\\n              <ms-xrm:TrustVersion>WSTrustFeb2005</ms-xrm:TrustVersion>\\n              <ms-xrm:SecurityMode>TransportWithMessageCredential</ms-xrm:SecurityMode>\\n              <ms-xrm:LivePolicy>MBI_FED_SSL</ms-xrm:LivePolicy>\\n              <ms-xrm:LiveIdAppliesTo>http://Passport.NET/tb</ms-xrm:LiveIdAppliesTo>\\n              <ms-xrm:LiveEndpoint>https://login.microsoftonline.com/RST2.srf</ms-xrm:LiveEndpoint>\\n              <ms-xrm:Identifier>urn:federation:MicrosoftOnline</ms-xrm:Identifier>\\n            </ms-xrm:OrgTrust>\\n          </ms-xrm:SecureTokenService>\\n        </ms-xrm:AuthenticationPolicy><ms-xrm:FailoverPolicy xmlns:ms-xrm=\\\"http://schemas.microsoft.com/xrm/2012/Contracts/Services\\\">\\n          <ms-xrm:FailoverAvailable>false</ms-xrm:FailoverAvailable>\\n          <ms-xrm:EndpointEnabled>true</ms-xrm:EndpointEnabled>\\n        </ms-xrm:FailoverPolicy><sp:TransportBinding xmlns:sp=\\\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\\\"><wsp:Policy xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2004/09/policy\\\"><sp:TransportToken><wsp:Policy xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2004/09/policy\\\"><sp:HttpsToken/></wsp:Policy></sp:TransportToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2004/09/policy\\\"><sp:TripleDes/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2004/09/policy\\\"><sp:Strict/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SignedSupportingTokens xmlns:sp=\\\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\\\"><wsp:Policy xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2004/09/policy\\\"><sp:IssuedToken sp:IncludeToken=\\\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient\\\">\\n              <Issuer xmlns=\\\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\\\">\\n                <Address xmlns=\\\"http://www.w3.org/2005/08/addressing\\\">https://login.microsoftonline.com/RST2.srf</Address>\\n                \\n                <Metadata xmlns=\\\"http://www.w3.org/2005/08/addressing\\\">\\n                  <Metadata xmlns=\\\"http://schemas.xmlsoap.org/ws/2004/09/mex\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\n                    <wsx:MetadataSection xmlns=\\\"\\\" xmlns:wsx=\\\"http://schemas.xmlsoap.org/ws/2004/09/mex\\\">\\n                      <wsx:MetadataReference>\\n                        <Address xmlns=\\\"http://www.w3.org/2005/08/addressing\\\">https://dynamicscrmna.accesscontrol.windows.net/v2/wstrust/mex</Address>\\n                      </wsx:MetadataReference>\\n                    </wsx:MetadataSection>\\n                  </Metadata>\\n                </Metadata>\\n              </Issuer>\\n              <sp:RequestSecurityTokenTemplate>\\n                <trust:KeyType xmlns:trust=\\\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\\\">http://docs.oasis-open.org/ws-sx/ws-trust/200512/SymmetricKey</trust:KeyType>\\n                <trust:KeySize xmlns:trust=\\\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\\\">192</trust:KeySize>\\n                <trust:Claims xmlns:trust=\\\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\\\" Dialect=\\\"http://schemas.xmlsoap.org/ws/2005/05/identity\\\">\\n                  <wsid:ClaimType xmlns:wsid=\\\"http://schemas.xmlsoap.org/ws/2005/05/identity\\\" Uri=\\\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\\\"/>\\n                </trust:Claims>\\n                <trust:KeyWrapAlgorithm xmlns:trust=\\\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\\\">http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p</trust:KeyWrapAlgorithm>\\n                <trust:EncryptWith xmlns:trust=\\\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\\\">http://www.w3.org/2001/04/xmlenc#tripledes-cbc</trust:EncryptWith>\\n                <trust:SignWith xmlns:trust=\\\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\\\">http://www.w3.org/2000/09/xmldsig#hmac-sha1</trust:SignWith>\\n                <trust:CanonicalizationAlgorithm xmlns:trust=\\\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\\\">http://www.w3.org/2001/10/xml-exc-c14n#</trust:CanonicalizationAlgorithm>\\n                <trust:EncryptionAlgorithm xmlns:trust=\\\"http://docs.oasis-open.org/ws-sx/ws-trust/200512\\\">http://www.w3.org/2001/04/xmlenc#tripledes-cbc</trust:EncryptionAlgorithm>\\n              </sp:RequestSecurityTokenTemplate>\\n              <wsp:Policy>\\n                <sp:RequireInternalReference/>\\n              </wsp:Policy>\\n            </sp:IssuedToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\\\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\\\"><wsp:Policy xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2004/09/policy\\\"/></sp:Wss11><sp:Trust13 xmlns:sp=\\\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\\\"><wsp:Policy xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2004/09/policy\\\"><sp:MustSupportIssuedTokens/><sp:RequireClientEntropy/><sp:RequireServerEntropy/></wsp:Policy></sp:Trust13><wsaw:UsingAddressing xmlns:wsaw=\\\"http://www.w3.org/2006/05/addressing/wsdl\\\"></wsaw:UsingAddressing></wsp:All></wsp:ExactlyOne></wsp:Policy>\"));\n\n        _operations[0] = __operation;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic byte[] getRawOffsetIndices() {\n        byte[] indices = null;\n\n        SoftReference<byte[]> cache = rawOffsetIndices;\n        if (cache != null) {\n            indices = cache.get();\n            if (indices != null) {\n                return indices;\n            }\n        }\n\n        byte[] buf = getZoneInfoMappings();\n        int index = JAVAZM_LABEL_LENGTH + 1;\n        int filesize = buf.length;\n\n        try {\n        loop:\n            while (index < filesize) {\n                byte tag = buf[index++];\n                int     len = ((buf[index++] & 0xFF) << 8) + (buf[index++] & 0xFF);\n\n                switch (tag) {\n                case TAG_RawOffsetIndices:\n                    {\n                        indices = new byte[len];\n                        for (int i = 0; i < len; i++) {\n                            indices[i] = buf[index++];\n                        }\n                    }\n                    break loop;\n\n                default:\n                    index += len;\n                    break;\n                }\n            }\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.err.println(\"ZoneInfo: corrupted \" + JAVAZM_FILE_NAME);\n        }\n\n        rawOffsetIndices = new SoftReference<byte[]>(indices);\n        return indices;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public double interpolateZ(Coordinate p)\n  {\n    if (p == null)\n      throw new IllegalArgumentException(\"Supplied point is null.\");\n    return interpolateZ(p, this.p0, this.p1, this.p2);\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\tChannel channel = ctx.channel();\n\t\t\tchannels.remove(channel);\n\t\t\tNode client = channel.attr(STATE).get();\n\t\t\tuserLinkList.delUser(client);\n\t\t\tcombobox.removeItem(client.username);\n\t\t\tsuper.channelUnregistered(ctx);\n\t\t\tbroadcasts(new LoginOutMessage(client.username));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic void registerResources(Context context) {\n        if (sInitialized) {\n            return;\n        }\n\n        AwResource.setResources(context.getResources());\n\n\n        AwResource.setErrorPageResources(R.raw.loaderror, R.raw.nodomain);\n        AwResource.setDefaultTextEncoding(R.string.default_encoding);\n\n        sInitialized = true;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static List<Variation> getApplicable(ObjectType type) {\n            List<Variation> applicable = new ArrayList<Variation>();\n\n            for (Variation variation : ALL.get().get()) {\n                Set<ObjectType> types = variation.getContentTypes();\n                if (types.isEmpty() || types.contains(type)) {\n                    applicable.add(variation);\n                }\n            }\n\n            return applicable;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static String getActionName(ActionListener listener)\n        {\n                Enumeration en = getActions();\n                while(en.hasMoreElements())\n                {\n                        String name = (String)en.nextElement();\n                        ActionListener _listener = getAction(name);\n                        if(_listener == listener) {\n                                return name;\n                        }\n                }\n                return null;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static String getActionName(ActionListener listener)\n        {\n                Enumeration en = getActions();\n                while(en.hasMoreElements())\n                {\n                        String name = (String)en.nextElement();\n                        ActionListener _listener = getAction(name);\n                        if(_listener == listener) {\n                                return name;\n                        }\n                }\n                return null;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprotected final Class[] parseTypes(String arg) throws ClassNotFoundException {\n\t\tString[] parts = arg.split(\";\");\n\t\tClass[] types = new Class[parts.length];\n\t\tfor (int i = 0; i < types.length; i++) {\n\t\t\ttypes[i] = this.parseType(parts[i]);\n\t\t}\n\t\treturn types;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void quadrantRotate(int numquadrants,\n                               double anchorx, double anchory)\n    {\n        switch (numquadrants & 3) {\n        case 0:\n            return;\n        case 1:\n            m02 += anchorx * (m00 - m01) + anchory * (m01 + m00);\n            m12 += anchorx * (m10 - m11) + anchory * (m11 + m10);\n            rotate90();\n            break;\n        case 2:\n            m02 += anchorx * (m00 + m00) + anchory * (m01 + m01);\n            m12 += anchorx * (m10 + m10) + anchory * (m11 + m11);\n            rotate180();\n            break;\n        case 3:\n            m02 += anchorx * (m00 + m01) + anchory * (m01 - m00);\n            m12 += anchorx * (m10 + m11) + anchory * (m11 - m10);\n            rotate270();\n            break;\n        }\n        if (m02 == 0.0 && m12 == 0.0) {\n            state &= ~APPLY_TRANSLATE;\n        } else {\n            state |= APPLY_TRANSLATE;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static String getActionName(ActionListener listener)\n        {\n                Enumeration en = getActions();\n                while(en.hasMoreElements())\n                {\n                        String name = (String)en.nextElement();\n                        ActionListener _listener = getAction(name);\n                        if(_listener == listener) {\n                                return name;\n                        }\n                }\n                return null;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void doGenerate(final Resource resource, final IFileSystemAccess fsa) {\n    EList<EObject> _contents = resource.getContents();\n    EObject _head = IterableExtensions.<EObject>head(_contents);\n    final Model model = ((Model) _head);\n    EList<Declaration> _declarations = model.getDeclarations();\n    final Procedure1<Declaration> _function = new Procedure1<Declaration>() {\n      public void apply(final Declaration it) {\n        NetModelGenerator.this.generate(it, model, fsa);\n      }\n    };\n    IterableExtensions.<Declaration>forEach(_declarations, _function);\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprotected void init() {\n        pullProcessorConfigTask = new AsyncTaskManager<>(mwPrivate, \"Reading data processor config timed out\");\n        taskTimeout = new Runnable() {\n            @Override\n            public void run() {\n                pendingDataProcessors= null;\n                for(byte it: successfulProcessors) {\n                    removeProcessor(true, it);\n                }\n                createProcessorsTask.setError(new TimeoutException(\"Creating data processor timed out\"));\n            }\n        };\n\n        this.mwPrivate.addResponseHandler(new Pair<>(DATA_PROCESSOR.id, Util.setRead(ADD)), new RegisterResponseHandler() {\n            @Override\n            public void onResponseReceived(byte[] response) {\n                pullProcessorConfigTask.cancelTimeout();\n\n                ProcessorEntry entry = new ProcessorEntry();\n                entry.id = readId;\n                entry.offset = (byte) (response[5] & 0x1f);\n                entry.length = (byte) (((response[5] >> 5) & 0x7) + 1);\n\n                entry.source = new byte[3];\n                System.arraycopy(response, 2, entry.source, 0, entry.source.length);\n\n                entry.config = new byte[response.length - 6];\n                System.arraycopy(response, 6, entry.config, 0, entry.config.length);\n\n                pullChainResult.push(entry);\n\n                if (response[2] == DATA_PROCESSOR.id && response[3] == NOTIFY) {\n                    readId = response[4];\n                    mwPrivate.sendCommand(new byte[] {DATA_PROCESSOR.id, Util.setRead(ADD), response[4]});\n                    pullProcessorConfigTask.restartTimeout(Constant.RESPONSE_TIMEOUT);\n                } else {\n                    pullProcessorConfigTask.setResult(pullChainResult);\n                }\n            }\n        });\n        this.mwPrivate.addResponseHandler(new Pair<>(DATA_PROCESSOR.id, ADD), new RegisterResponseHandler() {\n            @Override\n            public void onResponseReceived(byte[] response) {\n                timeoutFuture.cancel(false);\n\n                Processor current = pendingDataProcessors.poll();\n                current.editor.source.eventConfig[2]= response[2];\n                if (current.state != null) {\n                    current.state.eventConfig[2] = response[2];\n                }\n                activeProcessors.put(response[2], current);\n                successfulProcessors.add(response[2]);\n\n                createProcessor();\n            }\n        });\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public void handlePatch(final PatchParam patchParam) throws Throwable {\n        {\n            Class<?> cls = null;\n            try {\n                cls= patchParam.context.getClass().getClassLoader().loadClass(\"com.taobao.dexposed.g\");\n            } catch (Exception e) {\n                e.printStackTrace();\n                return;\n            }\n\n            \n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\n\n\tprivate void adaptToEnablementChange(HighlightingStyle highlighting, PropertyChangeEvent event) {\n\t\tObject value = event.getNewValue();\n\t\tboolean eventValue;\n\t\tif (value instanceof Boolean)\n\t\t\teventValue = ((Boolean) value).booleanValue();\n\t\telse if (IPreferenceStore.TRUE.equals(value))\n\t\t\teventValue = true;\n\t\telse\n\t\t\teventValue = false;\n\t\thighlighting.setEnabled(eventValue);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic WebSocketServer(InetSocketAddress address, int decodercount, List<Draft> drafts, Collection<WebSocket> connectionscontainer) {\n        if (address == null || decodercount < 1 || connectionscontainer == null) {\n            throw new IllegalArgumentException(\"address and connectionscontainer must not be null and you need at least 1 decoder\");\n        }\n\n        if (drafts == null)\n            this.drafts = Collections.emptyList();\n        else\n            this.drafts = drafts;\n\n        this.address = address;\n        this.connections = connectionscontainer;\n\n        iqueue = new LinkedList<WebSocketImpl>();\n\n        decoders = new ArrayList<WebSocketWorker>(decodercount);\n        buffers = new LinkedBlockingQueue<ByteBuffer>();\n        for (int i = 0; i < decodercount; i++) {\n            WebSocketWorker ex = new WebSocketWorker();\n            decoders.add(ex);\n            ex.start();\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static List<Node> topologicalSort(List<Node> graph, boolean hasRemaining) {\n        List<Node> sortedNodes = new ArrayList<Node>();\n\n        if (graph.size() == 0) {\n            return sortedNodes;\n        }\n\n        Stack<Node> roots = new Stack<Node>();\n        Stack<Node> rootsBefore = new Stack<Node>();\n        Stack<Node> rootsAfter = new Stack<Node>(); // including others if any\n        for (Node node: graph) {\n            if (node.getInEdges().size() == 0) {\n                if (node.isBeforeOthers()) {\n                    rootsBefore.add(node);\n                } else if (node.isAfterOthers() || node.isOthers()) {\n                    rootsAfter.add(node);\n                } else {\n                    roots.add(node);\n                }\n            }\n        }\n        \n        if (roots.empty() && rootsBefore.empty() && rootsAfter.empty()) {\n            if (isCircleWithOthersAndNoRemaining(graph, hasRemaining, sortedNodes)) {\n                return sortedNodes;\n            } else {\n                throw new IllegalStateException(localStrings.getLocalString(\n                        \"web.deployment.exceptioninvalidwebfragmentordering\",\n                        \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n            }\n        }\n\n        while (!(roots.empty() && rootsBefore.empty() && rootsAfter.empty())) {\n            Node node = null;\n            if (!rootsBefore.empty()) {\n                node = rootsBefore.pop();\n            } else if (!roots.empty()) {\n                node = roots.pop();\n            } else { // !rootsAfter.empty()\n                node = rootsAfter.pop();\n            } \n\n            sortedNodes.add(node);\n            Iterator<Edge> outEdgesIter = node.getOutEdges().iterator();\n            while (outEdgesIter.hasNext()) {\n                Edge outEdge = outEdgesIter.next();\n                Node outNode = outEdge.getToNode();\n                outEdgesIter.remove();\n                outNode.getInEdges().remove(outEdge);\n\n                if (outNode.getInEdges().size() == 0) {\n                    if (node.isBeforeOthers()) {\n                        rootsBefore.add(outNode);\n                    } else if (node.isAfterOthers() || node.isOthers()) {\n                        rootsAfter.add(outNode);\n                    } else {\n                        roots.add(outNode);\n                    }\n                }\n            }\n        }\n\n        boolean hasEdges = false;\n        for (Node node: graph) {\n            if (node.getInEdges().size() > 0 || node.getOutEdges().size() > 0) {\n                hasEdges = true;\n                break;\n            }\n        }\n        if (hasEdges) {\n            throw new IllegalStateException(localStrings.getLocalString(\n                    \"web.deployment.exceptioninvalidwebfragmentordering\",\n                    \"The web fragment ordering is not valid and possibly has cycling conflicts.\"));\n        }\n        return sortedNodes;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(java.io.File file) throws org.apache.xmlbeans.XmlException, java.io.IOException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( file, type, null ); }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic Class<?> toClass() {\n            switch (this) {\n            case Boolean:\n                return boolean.class;\n            case String:\n                return CharSequence.class;\n            case Number:\n                return double.class;\n            case Number_int:\n                return int.class;\n            case Number_uint:\n                return long.class;\n            case Object:\n                return ScriptObject.class;\n            case Reference:\n                return Reference.class;\n            case Null:\n                return Null.class;\n            case Undefined:\n                return Undefined.class;\n            case Any:\n                return Object.class;\n            case Empty:\n            default:\n                throw new AssertionError();\n            }\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(byte[] bytes, int start, int length) {\n        char[] chars = localBuffer.get();\n        if (chars == null || chars.length < length) {\n            chars = new char[length];\n            localBuffer.set(chars);\n        }\n        int outAt = 0;\n\n        for (int at = start; length > 0; ) {\n            int v0 = bytes[at] & 0xFF;\n            char out;\n            switch (v0 >> 4) {\n                case 0x00: case 0x01: case 0x02: case 0x03:\n                case 0x04: case 0x05: case 0x06: case 0x07: {\n                    length--;\n                    if (v0 == 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    out = (char) v0;\n                    at++;\n                    break;\n                }\n                case 0x0c: case 0x0d: {\n                    length -= 2;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int value = ((v0 & 0x1f) << 6) | (v1 & 0x3f);\n                    if ((value != 0) && (value < 0x80)) {\n                        \n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    out = (char) value;\n                    at += 2;\n                    break;\n                }\n                case 0x0e: {\n                    length -= 3;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes[at + 1] & 0xFF;\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int v2 = bytes[at + 2] & 0xFF;\n                    if ((v2 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    int value = ((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) |\n                            (v2 & 0x3f);\n                    if (value < 0x800) {\n                        \n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    out = (char) value;\n                    at += 3;\n                    break;\n                }\n                default: {\n                    return throwBadUtf8(v0, at);\n                }\n            }\n            chars[outAt] = out;\n            outAt++;\n        }\n\n        return new String(chars, 0, outAt);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nboolean execute2(final CommandSender sender, final String commandLabel, final String rest) {\n\t\tfinal ScriptCommandEvent event = new ScriptCommandEvent(ScriptCommand.this, sender);\n\t\t\n\t\tfinal ParseLogHandler log = SkriptLogger.startParseLogHandler();\n\t\ttry {\n\t\t\tfinal boolean ok = SkriptParser.parseArguments(rest, ScriptCommand.this, event);\n\t\t\tif (!ok) {\n\t\t\t\tfinal LogEntry e = log.getError();\n\t\t\t\tif (e != null)\n\t\t\t\t\tsender.sendMessage(ChatColor.DARK_RED + e.getMessage());\n\t\t\t\tsender.sendMessage(Commands.m_correct_usage + \" \" + usage);\n\t\t\t\tlog.clear();\n\t\t\t\tlog.printLog();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlog.clear();\n\t\t\tlog.printLog();\n\t\t} finally {\n\t\t\tlog.stop();\n\t\t}\n\t\t\n\t\tif (Skript.log(Verbosity.VERY_HIGH))\n\t\t\tSkript.info(\"# /\" + name + \" \" + rest);\n\t\tfinal long startTrigger = System.nanoTime();\n\t\t\n\t\tif (!trigger.execute(event))\n\t\t\tsender.sendMessage(Commands.m_internal_error.toString());\n\t\t\n\t\tif (Skript.log(Verbosity.VERY_HIGH))\n\t\t\tSkript.info(\"# \" + name + \" took \" + 1. * (System.nanoTime() - startTrigger) / 1000000. + \" milliseconds\");\n\t\treturn true;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate Path computeBootClassPath() {\n        bootClassPathRtJar = null;\n        String optionValue;\n        Path path = new Path();\n\n        path.addFiles(options.get(XBOOTCLASSPATH_PREPEND));\n\n        if ((optionValue = options.get(ENDORSEDDIRS)) != null)\n            path.addDirectories(optionValue);\n        else\n            path.addDirectories(System.getProperty(\"java.endorsed.dirs\"), false);\n\n        if ((optionValue = options.get(BOOTCLASSPATH)) != null) {\n            path.addFiles(optionValue);\n        } else {\n            String files = System.getProperty(\"sun.boot.class.path\");\n            path.addFiles(files, false);\n            File rt_jar = new File(\"rt.jar\");\n            for (File file : getPathEntries(files)) {\n                if (new File(file.getName()).equals(rt_jar))\n                    bootClassPathRtJar = file;\n            }\n        }\n\n        path.addFiles(options.get(XBOOTCLASSPATH_APPEND));\n\n        if ((optionValue = options.get(EXTDIRS)) != null)\n            path.addDirectories(optionValue);\n        else\n            path.addDirectories(System.getProperty(\"java.ext.dirs\"), false);\n\n        return path;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; }\n        return retVal;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate String nextSignature() {\n        char key = signature.charAt(currentIndex++);\n\n        switch(key) {\n            case (JDWP.Tag.ARRAY):\n                return  key + nextSignature();\n\n            case (JDWP.Tag.OBJECT):\n                int endClass = signature.indexOf(SIGNATURE_ENDCLASS,\n                                                 currentIndex);\n                String retVal = signature.substring(currentIndex - 1,\n                                                    endClass + 1);\n                currentIndex = endClass + 1;\n                return retVal;\n\n            case (JDWP.Tag.VOID):\n            case (JDWP.Tag.BOOLEAN):\n            case (JDWP.Tag.BYTE):\n            case (JDWP.Tag.CHAR):\n            case (JDWP.Tag.SHORT):\n            case (JDWP.Tag.INT):\n            case (JDWP.Tag.LONG):\n            case (JDWP.Tag.FLOAT):\n            case (JDWP.Tag.DOUBLE):\n                return String.valueOf(key);\n\n            case SIGNATURE_ENDFUNC:\n            case SIGNATURE_FUNC:\n                return nextSignature();\n\n            default:\n                throw new IllegalArgumentException(\n                    \"Invalid JNI signature character '\" + key + \"'\");\n\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic static <E> List<E> toBeanList(Class<E> cla, List<Map<String, Object>> mapList) {\n\t\tList<E> list = new ArrayList<E>(mapList.size());\n\t\tfor (Map<String, Object> map : mapList) {\n\t\t\tE obj = toBean(cla, map);\n\t\t\tlist.add(obj);\n\t\t}\n\t\treturn list;\n\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tpublic void ReadCommonRecord(NBTTagCompound TagCompound) {\n\t\tsuper.ReadCommonRecord(TagCompound);\n\n\t\tSource = TagCompound.getBoolean(\"Source\");\n\n\t\tShiftX = TagCompound.getInteger(\"ShiftX\");\n\t\tShiftY = TagCompound.getInteger(\"ShiftY\");\n\t\tShiftZ = TagCompound.getInteger(\"ShiftZ\");\n\n\t\tMinX = TagCompound.getInteger(\"MinX\");\n\t\tMinY = TagCompound.getInteger(\"MinY\");\n\t\tMinZ = TagCompound.getInteger(\"MinZ\");\n\t\tMaxX = TagCompound.getInteger(\"MaxX\");\n\t\tMaxY = TagCompound.getInteger(\"MaxY\");\n\t\tMaxZ = TagCompound.getInteger(\"MaxZ\");\n\n\t\tTargetDimension = TagCompound.getInteger(\"TargetDimension\");\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, com.ib.client.Contract contractIB, com.ib.client.Order order,\n\t\t\tOrderState orderState) {\n\t\ttry {\n\n\t\t\tTWSBrokerModel.logOrderState(orderState);\n\t\t\tTWSBrokerModel.logTradeOrder(order);\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(new Integer(order.m_orderId));\n\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170,\n\t\t\t\t\t\t\"Warning Order not found for Order Key: \" + order.m_orderId + \" make sure Client ID: \"\n\t\t\t\t\t\t\t\t+ this.m_clientId + \" is not the master in TWS. On openOrder update.\");\n\t\t\t\ttransientInstance = new TradeOrder();\n\t\t\t\ttransientInstance.setOrderKey(order.m_orderId);\n\t\t\t\ttransientInstance.setCreateDate(TradingCalendar.getDateTimeNowMarketTimeZone());\n\t\t\t\tTWSBrokerModel.updateTradeOrder(order, orderState, transientInstance);\n\t\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (TWSBrokerModel.updateTradeOrder(order, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t_log.debug(\"Open order filled Order Key:\" + transientInstance.getOrderKey());\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (transientInstance.hasTradePosition() && !transientInstance.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(transientInstance.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Open order state changed. Status:\" + orderState.m_status);\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(transientInstance);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.fireTradeOrderStatusChanged(transientInstance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void addFooterView(View v, Object data, boolean isSelectable) {\n\n\n        FixedViewInfo info = new FixedViewInfo();\n        info.view = v;\n        info.data = data;\n        info.isSelectable = isSelectable;\n        mFooterViewInfos.add(info);\n\n        if (mAdapter != null && mObserver != null) {\n            mObserver.onChanged();\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static String getActionName(ActionListener listener)\n        {\n                Enumeration en = getActions();\n                while(en.hasMoreElements())\n                {\n                        String name = (String)en.nextElement();\n                        ActionListener _listener = getAction(name);\n                        if(_listener == listener) {\n                                return name;\n                        }\n                }\n                return null;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nvoid moveView(float _deltaX, float _deltaY){\n\t\t\n\t\t\n\t\tthis.CAM_OFFSET_X +=  _deltaX;\n\t\tthis.CAM_OFFSET_Y +=  _deltaY;\n\t\n\t\t \n\t\t float leftEdge = (float) (this.CAM_OFFSET_X - ((GLOBAL.applet.width/2)/this.ZOOM));\n\t\t\t\n\t\t\t\n\t\t\t float rightEdge = (float) (this.CAM_OFFSET_X + ((GLOBAL.applet.width/2)/this.ZOOM));\n\t\t\t\n\t\t\tdouble topEdge = (double) this.CAM_OFFSET_Y + ((GLOBAL.applet.height/2)/this.ZOOM);\n\t\t\t\n\t\t\tfloat bottomEdge = (float) (GLOBAL.CAM_OFFSET_Y - ((GLOBAL.applet.height/2)/this.ZOOM));\n\t\t\t\n\t\t \n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {\n    EList<EObject> _contents = resource.getContents();\n    EObject _head = IterableExtensions.<EObject>head(_contents);\n    Model model = ((Model) _head);\n    String _packageName = model.getPackageName();\n    PreferencesBlock _preferencesBlock = model.getPreferencesBlock();\n    String _name = _preferencesBlock.getName();\n    String _pascalize = Strings.pascalize(_name);\n    String _concat = _pascalize.concat(\"Preferences\");\n    String _resolveFileName = Strings.resolveFileName(_packageName, _concat);\n    CharSequence _generate = this.mPreferencesGenerator.generate(model);\n    fsa.generateFile(_resolveFileName, _generate);\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic static String getActionName(ActionListener listener)\n\t{\n\t\tEnumeration enumerator = getActions();\n\t\twhile(enumerator.hasMoreElements())\n\t\t{\n\t\t\tString name = (String)enumerator.nextElement();\n\t\t\tActionListener _listener = getAction(name);\n\t\t\tif(_listener == listener)\n\t\t\t\treturn name;\n\t\t}\n\t\treturn null;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PluginLoadOrder getLoad() {\n        return order;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic void addEntries(ZipOutputStream zos, File dir, String dbName, int old) throws Exception {\n\n\t\tString[] list = dir.list();\n\n\t\tfor (int i = 0; i < list.length; i++) {\n\n\t\t\tFile f = new File(dir, list[i]);\n\t\t\tif (f.isDirectory()) {\n\t\t\t\taddEntries(zos, f, dbName, old);\n\t\t\t} else {\n\t\t\t\taddFile(zos, f, dbName, old);\n\t\t\t}\n\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic static boolean putMapNotEmptyKeyAndValue(Map<String, String> map,\n\t\t\tString key, String value, String defaultValue) {\n\t\tif (map == null || StringUtil.isEmpty(key)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tmap.put(key, StringUtil.isEmpty(value) ? defaultValue : value);\n\t\treturn true;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\tChannel channel = ctx.channel();\n\t\t\tchannels.remove(channel);\n\t\t\tNode client = channel.attr(STATE).get();\n\t\t\tuserLinkList.delUser(client);\n\t\t\tcombobox.removeItem(client.username);\n\t\t\tsuper.channelUnregistered(ctx);\n\t\t\tbroadcasts(new LoginOutMessage(client.username));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, com.ib.client.Contract contractIB, com.ib.client.Order order,\n\t\t\tOrderState orderState) {\n\t\ttry {\n\n\t\t\tTWSBrokerModel.logOrderState(orderState);\n\t\t\tTWSBrokerModel.logTradeOrder(order);\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(new Integer(order.m_orderId));\n\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170,\n\t\t\t\t\t\t\"Warning Order not found for Order Key: \" + order.m_orderId + \" make sure Client ID: \"\n\t\t\t\t\t\t\t\t+ this.m_clientId + \" is not the master in TWS. On openOrder update.\");\n\t\t\t\ttransientInstance = new TradeOrder();\n\t\t\t\ttransientInstance.setOrderKey(order.m_orderId);\n\t\t\t\ttransientInstance.setCreateDate(TradingCalendar.getDateTimeNowMarketTimeZone());\n\t\t\t\tTWSBrokerModel.updateTradeOrder(order, orderState, transientInstance);\n\t\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (TWSBrokerModel.updateTradeOrder(order, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t_log.debug(\"Open order filled Order Key:\" + transientInstance.getOrderKey());\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (transientInstance.hasTradePosition() && !transientInstance.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(transientInstance.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Open order state changed. Status:\" + orderState.m_status);\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(transientInstance);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.fireTradeOrderStatusChanged(transientInstance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private static String getMsgWithLineNumber(String msg) {\n        try {\n            for (StackTraceElement st : (new Throwable()).getStackTrace()) {\n                if (classname.equals(st.getClassName()) || methods.contains(st.getMethodName())) {\n                    continue;\n                } else {\n                    int b = st.getClassName().lastIndexOf(\".\") + 1;\n                    String tag = st.getClassName().substring(b);\n                    String message = tag + \"->\" + st.getMethodName() + \"():\" + st.getLineNumber() + \"->\" + msg;\n                    return message;\n                }\n\n            }\n        } catch (Exception e) {\n            LogUtil.e(e);\n        }\n        return msg;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static EntityParser getParser(final EntityType entityType) {\n\n        switch (entityType) {\n        case PROCESS:\n            return new ProcessEntityParser();\n        case FEED:\n            return new FeedEntityParser();\n        case CLUSTER:\n            return new ClusterEntityParser();\n        case DATASOURCE:\n            return new DatasourceEntityParser();\n        default:\n            throw new IllegalArgumentException(\"Unhandled entity type: \" + entityType);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic private void unpack2(int[] out, int[] in)\n  {\n  int i, w;\n  int outOffset = 0;\n  final int mask = 3;\n  for(i=0, w=1; i<4; ++i, w+=2){\n    int curInputValue0 = in[w];\n    int curInputValue1 = in[w+1];\n    out[0+outOffset] = curInputValue0 & mask;\n    out[1+outOffset] = (curInputValue0 >>> 2) & mask;\n    out[2+outOffset] = (curInputValue0 >>> 4) & mask;\n    out[3+outOffset] = (curInputValue0 >>> 6) & mask;\n    out[4+outOffset] = (curInputValue0 >>> 8) & mask;\n    out[5+outOffset] = (curInputValue0 >>> 10) & mask;\n    out[6+outOffset] = (curInputValue0 >>> 12) & mask;\n    out[7+outOffset] = (curInputValue0 >>> 14) & mask;\n    out[8+outOffset] = (curInputValue0 >>> 16) & mask;\n    out[9+outOffset] = (curInputValue0 >>> 18) & mask;\n    out[10+outOffset] = (curInputValue0 >>> 20) & mask;\n    out[11+outOffset] = (curInputValue0 >>> 22) & mask;\n    out[12+outOffset] = (curInputValue0 >>> 24) & mask;\n    out[13+outOffset] = (curInputValue0 >>> 26) & mask;\n    out[14+outOffset] = (curInputValue0 >>> 28) & mask;\n    out[15+outOffset] = curInputValue0 >>> 30;\n    out[16+outOffset] = curInputValue1 & mask;\n    out[17+outOffset] = (curInputValue1 >>> 2) & mask;\n    out[18+outOffset] = (curInputValue1 >>> 4) & mask;\n    out[19+outOffset] = (curInputValue1 >>> 6) & mask;\n    out[20+outOffset] = (curInputValue1 >>> 8) & mask;\n    out[21+outOffset] = (curInputValue1 >>> 10) & mask;\n    out[22+outOffset] = (curInputValue1 >>> 12) & mask;\n    out[23+outOffset] = (curInputValue1 >>> 14) & mask;\n    out[24+outOffset] = (curInputValue1 >>> 16) & mask;\n    out[25+outOffset] = (curInputValue1 >>> 18) & mask;\n    out[26+outOffset] = (curInputValue1 >>> 20) & mask;\n    out[27+outOffset] = (curInputValue1 >>> 22) & mask;\n    out[28+outOffset] = (curInputValue1 >>> 24) & mask;\n    out[29+outOffset] = (curInputValue1 >>> 26) & mask;\n    out[30+outOffset] = (curInputValue1 >>> 28) & mask;\n    out[31+outOffset] = curInputValue1 >>> 30;\n    outOffset += 32;\n  }\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n      private com.google.protobuf.SingleFieldBuilderV3<\n          com.capitalone.commander.grpc.CommanderProtos.UUID, com.capitalone.commander.grpc.CommanderProtos.UUID.Builder, com.capitalone.commander.grpc.CommanderProtos.UUIDOrBuilder> \n          getIdFieldBuilder() {\n        if (idBuilder_ == null) {\n          idBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<\n              com.capitalone.commander.grpc.CommanderProtos.UUID, com.capitalone.commander.grpc.CommanderProtos.UUID.Builder, com.capitalone.commander.grpc.CommanderProtos.UUIDOrBuilder>(\n                  getId(),\n                  getParentForChildren(),\n                  isClean());\n          id_ = null;\n        }\n        return idBuilder_;\n      }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n\n\n\n        Debug.i(\"onCreate here!\");\n        Debug.i(1, 2, 3, 4, 5);\n        Debug.i(\"0\", \"1\", \"2\", \"3\"); // will just enumerate strings\n        Debug.i(\"%s %s %s\", null, null, null); // will call String.format\n        Debug.i(1, 2, 3, 4);\n\n        for (int i = 0; i < 10; i++, Debug.i(\"hello from a for loop\")) {\n            Debug.i(\"body of a for loop\");\n        }\n\n        if (savedInstanceState == null) {\n            getSupportFragmentManager()\n                    .beginTransaction()\n                    .add(R.id.content, new MainFragment())\n                    .commit();\n        }\n\n        Debug.trace(100);\n\n        someMethod(1, 5, \"Hello!\");\n\n        someMethodWithException();\n\n        tracking: simpleMethod();\n\n        Debug.e(\"ok\");\n\n        throwException();\n\n        objectPrint();\n\n        labels();\n\n        Debug.e(new UnknownHostException());\n\n        final UnknownHostException exception = new UnknownHostException();\n        exception.initCause(new Throwable(new RuntimeException(new IllegalStateException())));\n        Debug.e(exception, \"Hello this is a message for exception\");\n\n        final String bigOne;\n        {\n            final int length = 8001;\n            final char[] chars = new char[length];\n            Arrays.fill(chars, 'c');\n            bigOne = new String(chars);\n            Debug.i(bigOne);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nIssuerEntry(final int id, final String subject, final String b64Sha1Fp, final String b64Cert) {\n        super();\n        this.id = id;\n        this.subject = subject;\n        this.sha1Fp = Base64.decode(b64Sha1Fp);\n        this.cert = Base64.decode(b64Cert);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nvoid moveView(float _deltaX, float _deltaY){\n\t\t\n\t\t\n\t\tthis.CAM_OFFSET_X +=  _deltaX;\n\t\tthis.CAM_OFFSET_Y +=  _deltaY;\n\t\n\t\t \n\t\t float leftEdge = (float) (this.CAM_OFFSET_X - ((GLOBAL.applet.width/2)/this.ZOOM));\n\t\t\t\n\t\t\t\n\t\t\t float rightEdge = (float) (this.CAM_OFFSET_X + ((GLOBAL.applet.width/2)/this.ZOOM));\n\t\t\t\n\t\t\tdouble topEdge = (double) this.CAM_OFFSET_Y + ((GLOBAL.applet.height/2)/this.ZOOM);\n\t\t\t\n\t\t\tfloat bottomEdge = (float) (GLOBAL.CAM_OFFSET_Y - ((GLOBAL.applet.height/2)/this.ZOOM));\n\t\t\t\n\t\t \n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tprivate void buildElements()\n\t{\n\t\ttitleLabel = new Label(Box2DBumpers.APPLICATION_NAME, skin, URL_LABEL_FONT, Color.YELLOW);\n\n\t\tstartButton = new TextButton(\"Start\", skin);\n\t\taboutButton = new TextButton(\"About\", skin);\n\n\t\ttable = new Table();\n\n\t\ttable.setSize(getWidth(), getHeight());\n\n\t\ttable.row();\n\t\ttable.add(titleLabel).expandY().expandX();\n\t\ttable.row();\n\t\ttable.add(startButton).expandY().expandX();\n\t\ttable.row();\n\t\ttable.add(aboutButton).expandY().expandX();\n\n\t\ttable.setFillParent(true);\n\n\t\ttable.pack();\n\t\t\n\t\tstartButton.addListener(new ClickListener()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic void clicked(InputEvent event, float x, float y)\n\t\t\t{\n\t\t\t\tdirector.sendEvent(AppEvents.EVENT_TRANSITION_TO_MAIN_SCENE, event.getRelatedActor());\n\t\t\t}\n\n\t\t});\n\n\t\taboutButton.addListener(new ClickListener()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic void clicked(InputEvent event, float x, float y)\n\t\t\t{\n\t\t\t\tdirector.sendEvent(AppEvents.EVENT_TRANSITION_TO_ABOUT_SCENE, event.getRelatedActor());\n\t\t\t}\n\n\t\t});\n\n\t\ttable.pack();\n\n\t\taddActor(table);\n\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void changeSelection(int delta, int keyCode) {\n\t\tboolean sideways = keyCode == KeyEvent.VK_LEFT || keyCode == KeyEvent.VK_RIGHT;\n\n\t\tT item = lc.changeSelection(itemList, selectedItem, delta, sideways);\n\t\tif (item != null) {\n\t\t\tselectItem(item);\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1];\n            int col = 1;\n            if (val.length > 2)\n                col = Math.max(1, (int)val[2]);\n\n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            Object o = table.data.get(row-1)[col-1];\n            if (o instanceof Float)\n                return (Float)o;\n            return 0f;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic ShortcutView(final Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t\tpm = context.getPackageManager();\n\t\t\n\t\tgetResources().getInteger(R.integer.shortcut_capacity);\n\t\t\n\t\tsec = PreferenceManager.getDefaultSharedPreferences(getContext());\n\n\t\tpkg = sec.getString(\"pkg\", \"\");\n\t\tpin = sec.getString(\"pin\", \"\");\t\t\n\t\t\n\t\t\n\t\tfor (int i = 0; i < CAPACITY; i++) {\n\t\t\tfinal int b = i;\n\t\t\tApplicationInfo ai = null;\n\t\t\tString sv = null;\n\t\t\tString s = Settings.System.getString(context.getContentResolver(), \"PiSC\" + i);\n\n\t\t\tif (s == null | s == \"\") {\n\n\t\t\t\tSettings.System.putString(context.getContentResolver(), \"PiSC\"+b, \"com.pilockerstable\");\n\t\t\t}\n\t\t\tsv = s;\n\n\t\t\ttry {\n\t\t\t\tai = pm.getApplicationInfo(sv, 0);\n\t\t\t} catch (NameNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tShortCut sc = new ShortCut(context, attrs);\n\t\t\tString App_Name = (String) pm.getApplicationLabel(ai);\n\t\t\tDrawable Icon = pm.getApplicationIcon(ai);\n\t\t\tShortcutter st = new Shortcutter(App_Name, Icon);\n\t\t\tsc.setName(st.getName());\n\t\t\tsc.setImage(st.getIcon());\n\n\t\t\taddView(sc);\n\t\t\tsc.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t\n\t\t\t\tString sv = Settings.System.getString( context.getContentResolver(), \"PiSC\" + b);\n\n\t\t\t\t@Override \n\t\t\t\tpublic void onClick(View arg0) {\n\n\t\t\t\t\tif( pin.equals(\"\") || pin.equals(null) || pin.isEmpty()) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t((Activity) context).finish();\n\t\t\t\t\t\tIntent i = new Intent();\n\t\t\t\t\t\ti.setClass(getContext(), LockerService.class);\n\t\t\t\t\t\tcontext.startService(i);\n\t\t\t\t\t\tIntent LaunchIntent = context.getPackageManager().getLaunchIntentForPackage(sv);\n\t\t\t\t\t\tcontext.startActivity(LaunchIntent);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t} else{\n\t\t\t\t\t\n\t\t\t\t\tsave(\"pkg\", \"true\");\n\t\t\t\t\tIntent x = new Intent(getContext(), PinActivity.class);\n\t\t\t\t\tx.putExtra(\"sv\", sv);\n\t\t\t\t\tcontext.startActivity(x);\n\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprotected void onReply(long msgId, Buffer headerBuffer, Buffer bodyBuffer) {\n    TcpRequest request = requestMap.remove(msgId);\n    if (request == null) {\n      LOGGER.error(\"Unknown reply msgId {}, waiting count {}\", msgId, requestMap.size());\n      return;\n    }\n\n    request.onReply(headerBuffer, bodyBuffer);\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public boolean feed_publishTemplatizedAction(CharSequence titleTemplate,\n                                               Map<String, CharSequence> titleData,\n                                               CharSequence bodyTemplate,\n                                               Map<String, CharSequence> bodyData,\n                                               CharSequence bodyGeneral,\n                                               Collection<Integer> targetIds,\n                                               Collection<IFeedImage> images,\n                                               Long pageActorId)\n    throws FacebookException, IOException {\n    assert null != titleTemplate && !\"\".equals(titleTemplate);\n\n    FacebookMethod method = FacebookMethod.FEED_PUBLISH_TEMPLATIZED_ACTION;\n    ArrayList<Pair<String, CharSequence>> params =\n      new ArrayList<Pair<String, CharSequence>>(method.numParams());\n\n    params.add(new Pair<String, CharSequence>(\"title_template\", titleTemplate));\n    if (null != titleData && !titleData.isEmpty()) {\n      JSONObject titleDataJson = new JSONObject();\n      titleDataJson.putAll(titleData);\n      params.add(new Pair<String, CharSequence>(\"title_data\", titleDataJson.toString()));\n    }\n\n    if (null != bodyTemplate && !\"\".equals(bodyTemplate)) {\n      params.add(new Pair<String, CharSequence>(\"body_template\", bodyTemplate));\n      if (null != bodyData && !bodyData.isEmpty()) {\n        JSONObject bodyDataJson = new JSONObject();\n        bodyDataJson.putAll(bodyData);\n        params.add(new Pair<String, CharSequence>(\"body_data\", bodyDataJson.toString()));\n      }\n    }\n\n    if (null != bodyGeneral && !\"\".equals(bodyGeneral)) {\n      params.add(new Pair<String, CharSequence>(\"body_general\", bodyGeneral));\n    }\n\n    if (null != targetIds && !targetIds.isEmpty()) {\n      params.add(new Pair<String, CharSequence>(\"target_ids\", delimit(targetIds)));\n    }\n\n    if (null != pageActorId) {\n      params.add(new Pair<String, CharSequence>(\"page_actor_id\", pageActorId.toString()));\n    }\n\n    handleFeedImages(params, images);\n    return extractBoolean(this.callMethod(method, params));\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public Matcher appendReplacement(StringBuffer sb, String replacement) {\n\n        if (first < 0)\n            throw new IllegalStateException(\"No match available\");\n\n        int cursor = 0;\n        StringBuilder result = new StringBuilder();\n\n        while (cursor < replacement.length()) {\n            char nextChar = replacement.charAt(cursor);\n            if (nextChar == '\\\\') {\n                cursor++;\n                nextChar = replacement.charAt(cursor);\n                result.append(nextChar);\n                cursor++;\n            } else if (nextChar == '$') {\n                cursor++;\n                int refNum = (int)replacement.charAt(cursor) - '0';\n                if ((refNum < 0)||(refNum > 9))\n                    throw new IllegalArgumentException(\n                        \"Illegal group reference\");\n                cursor++;\n\n                boolean done = false;\n                while (!done) {\n                    if (cursor >= replacement.length()) {\n                        break;\n                    }\n                    int nextDigit = replacement.charAt(cursor) - '0';\n                    if ((nextDigit < 0)||(nextDigit > 9)) { // not a number\n                        break;\n                    }\n                    int newRefNum = (refNum * 10) + nextDigit;\n                    if (groupCount() < newRefNum) {\n                        done = true;\n                    } else {\n                        refNum = newRefNum;\n                        cursor++;\n                    }\n                }\n                if (start(refNum) != -1 && end(refNum) != -1)\n                    result.append(text, start(refNum), end(refNum));\n            } else {\n                result.append(nextChar);\n                cursor++;\n            }\n        }\n        sb.append(text, lastAppendPosition, first);\n        sb.append(result);\n\n        lastAppendPosition = last;\n        return this;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic List<IConstructorInfo> getDeclaredConstructors() {\n    maybeInit();\n    if ( _xsdType.getName() != null && _xsdType.getName().startsWith( XmlSchemaIndex.REDEFINE_PREFIX ) ) {\n      return Collections.emptyList();\n    }\n    IConstructorHandler constructorHandler;\n    final IJavaClassInfo _clazz = getSchemaIndex().getGeneratedClass( getType().getName() );\n    IType simpleType = null;\n    if ( _schemaInfo.hasSimpleContent() ) {\n      simpleType = _schemaInfo.getSimpleValueFactory().getGosuValueType();\n    }\n    if ( _clazz == null ) {\n      constructorHandler = new IConstructorHandler() {\n        @Override\n        public Object newInstance(Object... args) {\n          return XmlTypeInstanceInternals.instance().create( getType(), _schemaInfo, args );\n        }\n      };\n    }\n    else {\n      final IJavaClassConstructor noParamCtor;\n      final IJavaClassConstructor oneParamCtor;\n      IJavaType clazz = (IJavaType) TypeSystem.get(_clazz);\n      noParamCtor = getConstructor(clazz.getBackingClassInfo());\n      if ( simpleType != null ) {\n        IJavaClassInfo simpleTypeBackingClass;\n        if ( simpleType instanceof IXmlType ) {\n          IType type = TypeSystem.getByFullName(\"gw.internal.schema.\" + simpleType.getName());\n          simpleTypeBackingClass = ((IJavaType)type).getBackingClassInfo();\n        }\n        else {\n          simpleTypeBackingClass = ( (IJavaType) simpleType ).getBackingClassInfo();\n        }\n        oneParamCtor = getConstructor( clazz.getBackingClassInfo(), simpleTypeBackingClass );\n      }\n      else {\n        oneParamCtor = null;\n      }\n      constructorHandler = new IConstructorHandler() {\n        @Override\n        public Object newInstance( Object... args ) {\n          try {\n            if ( args.length > 0 ) {\n              return oneParamCtor.newInstance( args[0] );\n            }\n            else {\n              return noParamCtor.newInstance();\n            }\n          }\n          catch ( Throwable t ) {\n            while ( t instanceof InvocationTargetException && t.getCause() != null ) {\n              t = t.getCause();\n            }\n            throw GosuExceptionUtil.forceThrow( t );\n          }\n        }\n      };\n    }\n    List<IConstructorInfo> ctors = new ArrayList<IConstructorInfo>();\n    ctors.add( new ConstructorInfoBuilder().withConstructorHandler( constructorHandler ).build( this ) );\n    if ( simpleType != null ) {\n      ctors.add( new ConstructorInfoBuilder().withConstructorHandler( constructorHandler ).withParameters(\n              new ParameterInfoBuilder().withName( \"value\" ).withType( simpleType )\n      ).build( this ) );\n    }\n    return ctors;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static List<Integer> topologicalSort(HashMap<Integer, List<Integer>> table, HashSet<Integer> visited, List<Integer> order, int index) {\n    if (visited.contains(index)) return order;\n\n    visited.add(index);\n\n    List<Integer> neighbors = table.get(index);\n    for (int i = 0; i < neighbors.size(); i ++) {\n      int neighbor = neighbors.get(i);\n      if (visited.contains(neighbor)) {\n        if (!order.contains(neighbor)) return null;\n        continue;\n      }\n\n      order = topologicalSort(table, visited, order, neighbor);\n      if (order == null) return null;\n    }\n\n    order.add(index);\n    return order;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic Class<?> toClass() {\n            switch (this) {\n            case Boolean:\n                return boolean.class;\n            case String:\n                return CharSequence.class;\n            case Number:\n                return double.class;\n            case Number_int:\n                return int.class;\n            case Number_uint:\n                return long.class;\n            case Object:\n                return ScriptObject.class;\n            case Reference:\n                return Reference.class;\n            case Null:\n                return Null.class;\n            case Undefined:\n                return Undefined.class;\n            case Any:\n                return Object.class;\n            case Empty:\n            default:\n                throw new AssertionError();\n            }\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void defaultAction(HttpServletRequest req, HttpServletResponse res)\n                   throws ServletException, IOException\n    {\n     bmsample1home home = null;\n     bmsample1 remote = null;\n     res.setContentType(\"text/plain\");\n     PrintWriter out = res.getWriter();\n     Context ctx;\n     Properties p;\n\t       \n     try\n      {\n   \t  Hashtable env = new Hashtable(1);\n      env.put(\"javax.naming.factory.initial\", \"com.netscape.server.jndi.RootContextFactory\");\n \t  ctx = new InitialContext(env);\n      Object objref = ctx.lookup(\"ejb/bmsamplebean1\");\n      home = (bmsample1home)PortableRemoteObject.narrow(objref, bmsample1home.class);\n      remote = home.create();\n      out.println(\"calling M1 ->DB1\");\n      out.println(\" the result of invoking the ejb method is \" + remote.performDBOps());\n       out.println(\"calling M2 ->DB2\");\n      out.println(\"...... result of invoking the ejb method is \" + remote.performDBOps2());\n\t   }\n       catch (Exception e)\n       {\n\t   System.out.println(\" ERROR: \" + e);\n       }\n      try\n        {\n        javax.sql.DataSource ds,ds2;\n        java.sql.Connection conn = null,conn2 = null;\n        java.sql.Statement stmt = null,stmt2 = null;\n        java.sql.ResultSet rs = null,rs2 = null;\n\tctx = new InitialContext();\n\tds = (DataSource)ctx.lookup(\"java:comp/env/jdbc/oraclethird\");\n\tds2 = (DataSource)ctx.lookup(\"java:comp/env/jdbc/oracleds2\");\n        \n        conn = ds.getConnection();\n\tconn2 = ds2.getConnection();\n\tstmt=conn.createStatement();\n\tstmt2=conn2.createStatement();\n\tout.println(\"..........Verifying table contents ....\");\n\trs=stmt.executeQuery(\"select * from status21\");\n\tint count=0;\n         while (rs.next())\n        {count++;\n         out.println(\"record = \"+rs.getString(1));\n        }\n         rs2=stmt2.executeQuery(\"select * from status2\");\n         int count2=0;\n        while (rs2.next())\n         {count2++;\n         out.println(\"record = \"+rs2.getString(1));\n         }\n         out.println(\"Total Records in table1 = \"+count);\n        out.println(\"Total Records in table2 = \"+count2);\n\tif ((count==1)&&(count2==1))\n         out.println(\"Result:FAIL\");\n         else\n         out.println(\"Result:PASS\");\n         stmt.executeUpdate(\"delete from status21\");\n         stmt2.executeUpdate(\"delete from status2\");\n         conn.commit();\n         conn2.commit();  \n         rs.close();\n         out.println(\"deleted in 1\");\n         out.println(\"deleted in 2\");\n\t rs2.close();\n         stmt.close();\n\tstmt2.close();\n\n\t conn.close();\n\t conn2.close();\n        }catch(Exception e){}\t\t\t      \n\t\t\t\t\t\t\t\t      \n\t  \n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static String loadJSONFromAsset(Context context, String filename) {\n\t\tString json;\n\t\ttry {\n\n\t\t\tInputStream is = context.getAssets().open(\"json/\" +filename+\".json\");\n\n\t\t\tint size = is.available();\n\n\t\t\tbyte[] buffer = new byte[size];\n\n\t\t\tis.read(buffer);\n\t\t\t\n\t\t\tis.close();\n\n\t\t\tjson = new String(buffer, \"UTF-8\");\n\t\t\tLog.v(\"AppUtils\", \"JSONArray=>\"+json);\n\t\t} catch (IOException ex) {\n\t\t\tex.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\t\treturn json;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic void registerResources(Context context) {\n        if (sInitialized) {\n            return;\n        }\n\n        AwResource.setResources(context.getResources());\n\n\n        AwResource.setErrorPageResources(R.raw.loaderror, R.raw.nodomain);\n        AwResource.setDefaultTextEncoding(R.string.default_encoding);\n\n        sInitialized = true;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public BeanConnector(Class<E> beanClass) {\n        final Method[] methods = beanClass.getMethods();\n        for (int m = 0; m < methods.length; m++) {\n            if(methods[m].getParameterTypes().length != 1) continue;\n            if(methods[m].getParameterTypes()[0] != PropertyChangeListener.class) continue;\n            if(methods[m].getName().startsWith(\"add\")) this.addListenerMethod = methods[m];\n            if(methods[m].getName().startsWith(\"remove\")) this.removeListenerMethod = methods[m];\n        }\n\n        if (this.addListenerMethod == null || this.removeListenerMethod == null)\n            throw new IllegalArgumentException(\"Couldn't find listener methods for \" + beanClass.getName());\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void visitLdcInsn(Object cst) {\n        if (mv != null) {\n            mv.visitLdcInsn(cst);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; }\n        return retVal;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void runScheduleJobToAction(List<JobPersistenceOld> jobDetails, Date now, SimpleDateFormat dfDate, Map<Long, JobPersistence> actionDetails, String currentDateStr){\n\t\tfor(JobPersistenceOld jobDetail : jobDetails){\n\t\t\tif(jobDetail.getScheduleType() != null && jobDetail.getScheduleType()==0){\n\t\t\t\ttry{\n\t\t\t\t\tString jobCronExpression = jobDetail.getCronExpression();\n\t\t\t\t\tString cronDate= dfDate.format(now);\n\t\t\t\t\tList<String> lTime = new ArrayList<String>();\n\t\t\t\t\tif(jobCronExpression != null && jobCronExpression.trim().length() > 0){\n\t\t\t\t\t\tboolean isCronExp = false;\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\tisCronExp = CronExpParser.Parser(jobCronExpression, cronDate, lTime);\n\t\t\t\t\t\t}catch(Exception ex){\n\t\t\t\t\t\t\tisCronExp = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!isCronExp) {\n\t\t\t\t\t\t\tlog.error(\"\u93c3\u72b3\u7876\u9422\u71b8\u579aCron\u741b\u3128\u63ea\u5bee\u5fe5\u7d30\u93c3\u30e6\u6e61,\" + cronDate + \";\u6d93\u5d87\ue0c1\u935a\u5823\ue749\u9352\u6a86ron\u741b\u3128\u63ea\u5bee\u5fe5\u7d30\" + jobCronExpression);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (int i = 0; i < lTime.size(); i++) {\n\t\t\t\t\t\t\tString actionDateStr = ZeusDateTool.StringToDateStr(lTime.get(i), \"yyyy-MM-dd HH:mm:ss\", \"yyyyMMddHHmm\");\n\t\t\t\t\t\t\tString actionCronExpr = ZeusDateTool.StringToDateStr(lTime.get(i), \"yyyy-MM-dd HH:mm:ss\", \"0 m H d M\") + \" ?\";\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tJobPersistence actionPer = new JobPersistence();\n\t\t\t\t\t\t\tactionPer.setId(Long.parseLong(actionDateStr)*1000000+jobDetail.getId());//update action id\n\t\t\t\t\t\t\tactionPer.setToJobId(jobDetail.getId());\n\t\t\t\t\t\t\tactionPer.setAuto(jobDetail.getAuto());\n\t\t\t\t\t\t\tactionPer.setConfigs(jobDetail.getConfigs());\n\t\t\t\t\t\t\tactionPer.setCronExpression(actionCronExpr);//update action cron expression\n\t\t\t\t\t\t\tactionPer.setCycle(jobDetail.getCycle());\n\t\t\t\t\t\t\tString jobDependencies = jobDetail.getDependencies();\n\t\t\t\t\t\t\tactionPer.setDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setJobDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setDescr(jobDetail.getDescr());\n\t\t\t\t\t\t\tactionPer.setGmtCreate(jobDetail.getGmtCreate());\n\t\t\t\t\t\t\tactionPer.setGmtModified(new Date());\n\t\t\t\t\t\t\tactionPer.setGroupId(jobDetail.getGroupId());\n\t\t\t\t\t\t\tactionPer.setHistoryId(jobDetail.getHistoryId());\n\t\t\t\t\t\t\tactionPer.setHost(jobDetail.getHost());\n\t\t\t\t\t\t\tactionPer.setHostGroupId(jobDetail.getHostGroupId());\n\t\t\t\t\t\t\tactionPer.setLastEndTime(jobDetail.getLastEndTime());\n\t\t\t\t\t\t\tactionPer.setLastResult(jobDetail.getLastResult());\n\t\t\t\t\t\t\tactionPer.setName(jobDetail.getName());\n\t\t\t\t\t\t\tactionPer.setOffset(jobDetail.getOffset());\n\t\t\t\t\t\t\tactionPer.setOwner(jobDetail.getOwner());\n\t\t\t\t\t\t\tactionPer.setPostProcessers(jobDetail.getPostProcessers());\n\t\t\t\t\t\t\tactionPer.setPreProcessers(jobDetail.getPreProcessers());\n\t\t\t\t\t\t\tactionPer.setReadyDependency(jobDetail.getReadyDependency());\n\t\t\t\t\t\t\tactionPer.setResources(jobDetail.getResources());\n\t\t\t\t\t\t\tactionPer.setRunType(jobDetail.getRunType());\n\t\t\t\t\t\t\tactionPer.setScheduleType(jobDetail.getScheduleType());\n\n\t\t\t\t\t\t\tactionPer.setStartTime(jobDetail.getStartTime());\n\t\t\t\t\t\t\tactionPer.setStartTimestamp(jobDetail.getStartTimestamp());\n\t\t\t\t\t\t\tactionPer.setStatisStartTime(jobDetail.getStatisStartTime());\n\t\t\t\t\t\t\tactionPer.setStatisEndTime(jobDetail.getStatisEndTime());\n\t\t\t\t\t\t\tactionPer.setStatus(jobDetail.getStatus());\n\t\t\t\t\t\t\tactionPer.setTimezone(jobDetail.getTimezone());\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tlog.info(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59dfJobId: \" + jobDetail.getId()+\";  ActionId: \" +actionPer.getId());\n\t\t\t\t\t\t\t\t\tcontext.getGroupManager().saveJob(actionPer);\n\t\t\t\t\t\t\t\t\tlog.info(\"success\");\n\t\t\t\t\t\t\t\t\tactionDetails.put(actionPer.getId(),actionPer);\n\t\t\t\t\t\t\t} catch (ZeusException e) {\n\t\t\t\t\t\t\t\tlog.error(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59dfJobId:\" + jobDetail.getId() + \" \u9422\u71b8\u579aAction\" +actionPer.getId() + \"\u6fb6\u8fab\u89e6\", e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}catch(Exception ex){\n\t\t\t\t\tlog.error(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59df\u9422\u71b8\u579aAction\u6fb6\u8fab\u89e6\",ex);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n\n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n\n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n\n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic DocumentInfo(DocumentId id, String name, String path,\n            LocaleId sourceLocale, ContainerTranslationStatistics stats,\n            AuditInfo lastModified, Map<String, String> downloadExtensions,\n            AuditInfo lastTranslated) {\n        this.id = id;\n        this.name = name;\n        this.path = path;\n        this.stats = stats;\n        this.sourceLocale = sourceLocale;\n        this.lastModified = lastModified;\n        this.downloadExtensions = downloadExtensions;\n        this.lastTranslated = lastTranslated;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode parse(java.net.URL u, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException, java.io.IOException {\n          return (com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( u, type, options ); }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void printMethods() {\n\t\tif (TypeUtil.isClassLike(type)) {\n\t\t\tfor (List<IMethodBinding> e : methods.values()) {\n\t\t\t\tfor (IMethodBinding mb : e) {\n\t\t\t\t\taccess = TransformUtil.declareBridge(ctx, out, type, mb,\n\t\t\t\t\t\t\tdeps, access);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tList<IMethodBinding> superMethods = hiddenMethods(type, ctx, methods);\n\n\t\tfor (IMethodBinding mb : superMethods) {\n\t\t\taccess = printAccess(out, mb.getModifiers(), access);\n\t\t\tprint(i1);\n\t\t\tTransformUtil.printSignature(ctx, out, type,\n\t\t\t\t\tmb.getMethodDeclaration(), deps, false);\n\t\t\tif (Modifier.isAbstract(mb.getModifiers())) {\n\t\t\t\tprint(\" = 0\");\n\t\t\t}\n\n\t\t\tprintln(\";\");\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void quadrantRotate(int numquadrants,\n                               double anchorx, double anchory)\n    {\n        switch (numquadrants & 3) {\n        case 0:\n            return;\n        case 1:\n            m02 += anchorx * (m00 - m01) + anchory * (m01 + m00);\n            m12 += anchorx * (m10 - m11) + anchory * (m11 + m10);\n            rotate90();\n            break;\n        case 2:\n            m02 += anchorx * (m00 + m00) + anchory * (m01 + m01);\n            m12 += anchorx * (m10 + m10) + anchory * (m11 + m11);\n            rotate180();\n            break;\n        case 3:\n            m02 += anchorx * (m00 + m01) + anchory * (m01 - m00);\n            m12 += anchorx * (m10 + m11) + anchory * (m11 - m10);\n            rotate270();\n            break;\n        }\n        if (m02 == 0.0 && m12 == 0.0) {\n            state &= ~APPLY_TRANSLATE;\n        } else {\n            state |= APPLY_TRANSLATE;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic void channelInactive(ChannelHandlerContext ctx) throws Exception {\n\t\t\tChannel channel = ctx.channel();\n\t\t\tchannels.remove(channel);\n\t\t\tNode client = channel.attr(STATE).get();\n\t\t\tuserLinkList.delUser(client);\n\t\t\tcombobox.removeItem(client.username);\n\t\t\tsuper.channelUnregistered(ctx);\n\t\t\tbroadcasts(new LoginOutMessage(client.username));\n\t\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public void onDownloadError(int index, String message) {\n    for (int i = 0; i < mDownloadStatus.length; i++) {\n        if (mDownloadStatus[i] != DownFile.DownloadStatus.FINISH && mDownloadStatus[i] != DownFile.DownloadStatus.ERROR) {\n            mDownloadThreads[i].cancel();\n        }\n    }\n        downFile.state = DownFile.DownloadStatus.ERROR;\n        notifyUpdate(downFile, Constants.WHAT_ERROR);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static Mat zeros(int rows, int cols, int type)\n    {\n\n        Mat retVal = new Mat(n_zeros(rows, cols, type));\n\n        return retVal;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate URI api(String path) {\n        if (!path.toLowerCase().matches(\"https?://.*\")) {\n            path = urlJoin(this.context, path);\n        }\n        if (!path.contains(\"?\")) {\n            if (!path.endsWith(\"/stop\")) {\n                path = urlJoin(path, \"api/json\");\n            }\n        } else {\n            String[] components = path.split(\"\\\\?\", 2);\n            path = urlJoin(components[0], \"api/json\") + \"?\" + components[1];\n        }\n        URI requestUri = uri.resolve(\"/\").resolve(path);\n        return requestUri;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n\tpublic void testBlock () throws ValidationException\n\t{\n\t\tBlk b1 =\n\t\t\t\tBlk.fromWireDump (\"\");\n\t\tassertTrue (b1.getHash ().equals (\"0000000000000449ee5b94ba7a051caffff5c23d6a03335f6e20e3985b5ffa61\"));\n\t\tBlk b2 = Blk.fromWireDump (b1.toWireDump ());\n\t\tb2.computeHash ();\n\t\tassertTrue (b1.getHash ().equals (b2.getHash ()));\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic SmoothStreamingRendererBuilder(String userAgent, String url, String contentId,\n      MediaDrmCallback drmCallback, TextView debugTextView) {\n    this.userAgent = userAgent;\n    this.url = url;\n    this.contentId = contentId;\n    this.drmCallback = drmCallback;\n    this.debugTextView = debugTextView;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\n    public static Bitmap fastblur(Context context, Bitmap sentBitmap, float radius) {\n\n        if (Build.VERSION.SDK_INT > 16 &&\n                    (!Build.MODEL.contains(\"google_sdk\")\n                             && !Build.MODEL.contains(\"Emulator\")\n                             && !Build.MODEL.contains(\"Android SDK\")\n                             && !Build.FINGERPRINT.contains(\"vbox86p\"))) {\n            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n            final RenderScript rs = RenderScript.create(context);\n            final Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n                                                                 Allocation.USAGE_SCRIPT);\n            final Allocation output = Allocation.createTyped(rs, input.getType());\n            final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n            script.setRadius(radius );\n            script.setInput(input);\n            script.forEach(output);\n            output.copyTo(bitmap);\n            return bitmap;\n        }\n\n        radius *= 0.1;\n        return blurfast(sentBitmap, (int) radius);\n\n\n\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1],\n                col = (int)val[2];\n            float toSet = val[3];\n            \n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            table.setVal(row-1, col-1, toSet);\n            return toSet;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        int length = bytes.size();\n        char[] chars = new char[length]; // This is sized to avoid a realloc.\n        int outAt = 0;\n\n        for (int at = 0; length > 0; ) {\n            int v0 = bytes.getUnsignedByte(at);\n            char out;\n            switch (v0 >> 4) {\n                case 0x00: case 0x01: case 0x02: case 0x03:\n                case 0x04: case 0x05: case 0x06: case 0x07: {\n                    length--;\n                    if (v0 == 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    out = (char) v0;\n                    at++;\n                    break;\n                }\n                case 0x0c: case 0x0d: {\n                    length -= 2;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes.getUnsignedByte(at + 1);\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int value = ((v0 & 0x1f) << 6) | (v1 & 0x3f);\n                    if ((value != 0) && (value < 0x80)) {\n                        \n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    out = (char) value;\n                    at += 2;\n                    break;\n                }\n                case 0x0e: {\n                    length -= 3;\n                    if (length < 0) {\n                        return throwBadUtf8(v0, at);\n                    }\n                    int v1 = bytes.getUnsignedByte(at + 1);\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v1, at + 1);\n                    }\n                    int v2 = bytes.getUnsignedByte(at + 2);\n                    if ((v1 & 0xc0) != 0x80) {\n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    int value = ((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) |\n                        (v2 & 0x3f);\n                    if (value < 0x800) {\n                        \n                        return throwBadUtf8(v2, at + 2);\n                    }\n                    out = (char) value;\n                    at += 3;\n                    break;\n                }\n                default: {\n                    return throwBadUtf8(v0, at);\n                }\n            }\n            chars[outAt] = out;\n            outAt++;\n        }\n\n        return new String(chars, 0, outAt);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public boolean isSourceEncodingSupported(AudioFormat.Encoding src)\n  {\n    AudioFormat.Encoding[] srcs = getSourceEncodings();\n    for (int i = 0; i < srcs.length; ++i)\n      {\n        if (src.equals(srcs[i]))\n          return true;\n      }\n    return false;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n        this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n        BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n        this.updateNaturalParameterPrior(prior);\n\n        return learntBN;\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n\tpublic PsiBuilder.Marker parseAndDone(ShaderLabParserBuilder builder, PsiBuilder.Marker mark)\n\t{\n\t\tif(builder.getTokenType() == ShaderLabTokens.LPAR)\n\t\t{\n\t\t\tPsiBuilder.Marker valueMarker = builder.mark();\n\t\t\tparseElementsInBraces(builder, ShaderLabTokens.LPAR, ShaderLabTokens.RPAR, ShaderLabTokens.INTEGER_LITERAL);\n\t\t\tvalueMarker.done(ShaderLabElements.PROPERTY_VALUE);\n\t\t}\n\t\telse if(builder.getTokenType() == ShaderLabTokens.LBRACKET)\n\t\t{\n\t\t\tparseBracketReference(builder);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbuilder.error(\"Expected value\");\n\t\t}\n\t\tmark.done(ShaderLabElements.SIMPLE_VALUE);\n\t\treturn mark;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker, boolean showDirection) {\n        this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic SmoothStreamingRendererBuilder(Context context, String userAgent, String url,\n      MediaDrmCallback drmCallback) {\n    this.context = context;\n    this.userAgent = userAgent;\n    this.url = Util.toLowerInvariant(url).endsWith(\"/manifest\") ? url : url + \"/Manifest\";\n    this.drmCallback = drmCallback;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public void onPlayerStateChange(PlayerState oldState, PlayerState newState, Bundle extra) {\n\n        mPrevState = mCurrentState;\n        mCurrentState = newState;\n        Log.d(TAG, \"State change event! Oldstate= \" + oldState + \" NewState= \" + newState);\n        if (mPrevState == mCurrentState) {\n            Log.w(TAG, \"Duplicate state change message!!! \");\n        }\n        if (mPrevState == PlayerState.BUFFERING && mCurrentState != PlayerState.BUFFERING) {\n            AnalyticsHelper.trackPlaybackControlAction(AnalyticsTags.ACTION_PLAYBACK_BUFFER_END,\n                                                       mSelectedContent, getCurrentPosition());\n        }\n        switch (newState) {\n            case IDLE:\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mIsContentChangeRequested) {\n                    openSelectedContent();\n                }\n                break;\n            case OPENING:\n                break;\n            case OPENED:\n                if (mPlayer != null && mIsActivityResumed) {\n                    mPlayer.prepare();\n                }\n                else {\n                    mIsContentChangeRequested = false;\n                }\n                break;\n            case PREPARING:\n                if (mPlaybackOverlayFragment != null && mPlaybackOverlayFragment.getView() !=\n                        null) {\n                    mPlaybackOverlayFragment.getView().setVisibility(View.VISIBLE);\n                }\n                break;\n            case READY:\n                mPlaybackState = LeanbackPlaybackState.PAUSED;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(false);\n                }\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mPrevState == PlayerState.PREPARING) {\n                    if (mPlaybackOverlayFragment != null) {\n                        modifyClosedCaptionState(mIsCloseCaptionEnabled);\n\n                        mPlaybackOverlayFragment.updatePlayback();\n                        mPlaybackOverlayFragment.startProgressAutomation();\n                    }\n                    if (mCurrentPlaybackPosition > 0) {\n                        mPlayer.seekTo(mCurrentPlaybackPosition);\n                    }\n                    if (mAutoPlay || mIsContentChangeRequested) {\n                        play();\n                        mAutoPlay = false;\n                        if (mIsContentChangeRequested) {\n                            mIsContentChangeRequested = false;\n                        }\n                    }\n                }\n                else if (mAudioFocusState == AudioFocusState.NoFocusNoDuck) {\n                    play();\n                }\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PAUSED);\n                }\n                break;\n            case PLAYING:\n                mPlaybackState = LeanbackPlaybackState.PLAYING;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(true);\n                }\n                hideProgress();\n                mWindow.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PLAYING);\n                }\n                if (mCurrentPlaybackPosition < getCurrentPosition()) {\n                    mCurrentPlaybackPosition = getCurrentPosition();\n                }\n                AnalyticsHelper.trackPlaybackStarted(mSelectedContent, getDuration(),\n                                                     mCurrentPlaybackPosition);\n                break;\n            case BUFFERING:\n                showProgress();\n                AnalyticsHelper.trackPlaybackControlAction(AnalyticsTags\n                                                                   .ACTION_PLAYBACK_BUFFER_START,\n                                                           mSelectedContent, getCurrentPosition());\n                break;\n            case SEEKING:\n                showProgress();\n                break;\n            case ENDED:\n                hideProgress();\n                if (mAdsImplementation != null && mAdsImplementation.isPostRollAvailable()) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.COMPLETED);\n                }\n                else {\n                    playbackFinished();\n                }\n\n                break;\n            case CLOSING:\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.stopProgressAutomation();\n                }\n                break;\n            case ERROR:\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                Log.e(TAG, \"Player encountered an error!\");\n                break;\n            default:\n                Log.e(TAG, \"Unknown state!!!!!\");\n                break;\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n\n        PartialSufficientSatistics partialSufficientSatistics = PartialSufficientSatistics.createZeroPartialSufficientStatistics(efBayesianNetwork);\n        partialSufficientSatistics.copy(this.sumSS);\n        partialSufficientSatistics.normalize();\n        SufficientStatistics finalSS = efBayesianNetwork.createZeroSufficientStatistics();\n        finalSS.sum(partialSufficientSatistics.getCompoundVector());\n\n        efBayesianNetwork.setMomentParameters(finalSS);\n        return efBayesianNetwork.toBayesianNetwork(dag);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void setSceneRasterStartAndStopTime(final Product product) {\n            final ProductData.UTC sceneRasterStartTime = getSceneRasterStartTime();\n            if (sceneRasterStartTime != null) {\n                product.setStartTime(sceneRasterStartTime);\n            }\n            final ProductData.UTC sceneRasterStopTime = getSceneRasterStopTime();\n            if (sceneRasterStopTime != null) {\n                product.setEndTime(sceneRasterStopTime);\n            }\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic int normalizeMe() throws IllegalArgumentException {\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint i;\n\t\tfor (i = nWords - 1; i >= 0 && (l = data[i]) == 0; i--)\n\t\t\tj++;\n\n\t\tif (i < 0)\n\t\t\tthrow new IllegalArgumentException(\"zero value\");\n\t\tnWords -= j;\n\t\tif ((l & -268435456) != 0) {\n\t\t\tfor (k = 32; (l & -268435456) != 0; k--)\n\t\t\t\tl >>>= 1;\n\n\t\t} else {\n\t\t\twhile (l <= 1048575) {\n\t\t\t\tl <<= 8;\n\t\t\t\tk += 8;\n\t\t\t}\n\t\t\twhile (l <= 134217727) {\n\t\t\t\tl <<= 1;\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t\tif (k != 0)\n\t\t\tlshiftMe(k);\n\t\treturn k;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static String getActionName(ActionListener listener)\n        {\n                Enumeration en = getActions();\n                while(en.hasMoreElements())\n                {\n                        String name = (String)en.nextElement();\n                        ActionListener _listener = getAction(name);\n                        if(_listener == listener) {\n                                return name;\n                        }\n                }\n                return null;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic static <P extends IUnlistedProperty<T>, T> T getStatePropertySafely(@Nullable TileEntity te, Class<? extends Block> block, P property, T defaultVal, boolean actual, boolean extended) {\n\t\tif(te == null || te.getWorld() == null) {\n\t\t\treturn defaultVal;\n\t\t}\n\t\tIBlockState state = te.getWorld().getBlockState(te.getPos());\n\t\tif(block.isInstance(state.getBlock())) {\n\t\t\tif(actual) {\n\t\t\t\tstate = state.getActualState(te.getWorld(), te.getPos());\n\t\t\t}\n\t\t\tif(extended) {\n\t\t\t\tstate = state.getBlock().getExtendedState(state, te.getWorld(), te.getPos());\n\t\t\t}\n\t\t\tif(state instanceof IExtendedBlockState) {\n\t\t\t\treturn ((IExtendedBlockState)state).getValue(property);\n\t\t\t}\n\t\t}\n\t\treturn defaultVal;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public void visitLdcInsn(Object cst) {\n        if (mv != null) {\n            mv.visitLdcInsn(cst);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate URI api(String path) {\n        if (!path.toLowerCase().matches(\"https?://.*\")) {\n            path = urlJoin(this.context, path);\n        }\n        if (!path.contains(\"?\")) {\n            if (!path.endsWith(\"/stop\")) {\n                path = urlJoin(path, \"api/json\");\n            }\n        } else {\n            String[] components = path.split(\"\\\\?\", 2);\n            path = urlJoin(components[0], \"api/json\") + \"?\" + components[1];\n        }\n        URI requestUri = uri.resolve(\"/\").resolve(path);\n        return requestUri;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tpublic CompletableFuture<StravaAthlete> updateAuthenticatedAthleteAsync(final String city, final String state, final String country, final StravaGender sex, final Float weight) {\n\t\treturn StravaServiceImpl.future(() -> updateAuthenticatedAthlete(city, state, country, sex, weight));\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static void drawQuad() {\n        \n        if (!Debug.noVBO) {\n            vertex_VBO.bindWithFormat(3, Format.FLOAT, 0, 0); \n    \n            texture_VBO.bindWithFormat(2, Format.FLOAT, 0, 0); \n            \n            index_VBO.bindAsIndex();\n            \n            VBO.render(6, Format.UNSIGNED_SHORT);\n        } else {\n            vertex_VBO.bindImmediate(3, Format.FLOAT, 0); \n    \n            texture_VBO.bindImmediate(2, Format.FLOAT, 0); \n            \n            index_VBO.renderImmediate(6, Format.UNSIGNED_SHORT);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate Component buildHeader() {\n        HorizontalLayout header = new HorizontalLayout();\n        header.addStyleName(\"viewheader\");\n        header.setSpacing(true);\n\n        titleLabel = new Label(MsgUtil.getMsgFallbackToSelf(messageSource, \"view.dashboard.\", \"title\"));\n        titleLabel.setId(TITLE_ID);\n        titleLabel.setSizeUndefined();\n        titleLabel.addStyleName(ValoTheme.LABEL_H1);\n        titleLabel.addStyleName(ValoTheme.LABEL_NO_MARGIN);\n        header.addComponent(titleLabel);\n\n        \n        \n        return header;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic Class<?> toClass() {\n            switch (this) {\n            case Boolean:\n                return boolean.class;\n            case String:\n                return CharSequence.class;\n            case Number:\n                return double.class;\n            case Number_int:\n                return int.class;\n            case Number_uint:\n                return long.class;\n            case Object:\n                return ScriptObject.class;\n            case Reference:\n                return Reference.class;\n            case Null:\n                return Null.class;\n            case Undefined:\n                return Undefined.class;\n            case Any:\n                return Object.class;\n            case Empty:\n            default:\n                throw new AssertionError();\n            }\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic void openOrder(int orderId, com.ib.client.Contract contractIB, com.ib.client.Order order,\n\t\t\tOrderState orderState) {\n\t\ttry {\n\n\t\t\tTWSBrokerModel.logOrderState(orderState);\n\t\t\tTWSBrokerModel.logTradeOrder(order);\n\n\t\t\tTradeOrder transientInstance = m_tradePersistentModel.findTradeOrderByKey(new Integer(order.m_orderId));\n\n\t\t\tif (null == transientInstance) {\n\t\t\t\terror(orderId, 3170,\n\t\t\t\t\t\t\"Warning Order not found for Order Key: \" + order.m_orderId + \" make sure Client ID: \"\n\t\t\t\t\t\t\t\t+ this.m_clientId + \" is not the master in TWS. On openOrder update.\");\n\t\t\t\ttransientInstance = new TradeOrder();\n\t\t\t\ttransientInstance.setOrderKey(order.m_orderId);\n\t\t\t\ttransientInstance.setCreateDate(TradingCalendar.getDateTimeNowMarketTimeZone());\n\t\t\t\tTWSBrokerModel.updateTradeOrder(order, orderState, transientInstance);\n\t\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t\n\n\t\t\tif (TWSBrokerModel.updateTradeOrder(order, orderState, transientInstance)) {\n\n\t\t\t\tif (OrderStatus.FILLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t_log.debug(\"Open order filled Order Key:\" + transientInstance.getOrderKey());\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\n\t\t\t\t\tif (transientInstance.hasTradePosition() && !transientInstance.getTradePosition().isOpen()) {\n\t\t\t\t\t\tthis.firePositionClosed(transientInstance.getTradePosition());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log.debug(\"Open order state changed. Status:\" + orderState.m_status);\n\t\t\t\t\ttransientInstance = m_tradePersistentModel.persistTradeOrder(transientInstance);\n\t\t\t\t\tif (OrderStatus.CANCELLED.equals(transientInstance.getStatus())) {\n\t\t\t\t\t\tthis.fireTradeOrderCancelled(transientInstance);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.fireTradeOrderStatusChanged(transientInstance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\topenOrders.put(transientInstance.getOrderKey(), transientInstance);\n\t\t} catch (Exception ex) {\n\t\t\terror(orderId, 3180, \"Errors updating open order: \" + ex.getMessage());\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic GradientRadialBackground( int innerColor, int outerColor, int start, int end, int centerX, int centerY ) {\n\t\tthis( innerColor, outerColor, new Dimension(start, true), new Dimension(end, true), new Dimension(centerX, true), new Dimension(centerY, true));\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate String nextSignature() {\n        char key = signature.charAt(currentIndex++);\n\n        switch(key) {\n            case '[':\n                return  key + nextSignature();\n\n            case 'L':\n                int endClass = signature.indexOf(SIGNATURE_ENDCLASS,\n                                                 currentIndex);\n                String retVal = signature.substring(currentIndex - 1,\n                                                    endClass + 1);\n                currentIndex = endClass + 1;\n                return retVal;\n\n            case 'V':\n            case 'Z':\n            case 'B':\n            case 'C':\n            case 'S':\n            case 'I':\n            case 'J':\n            case 'F':\n            case 'D':\n                return String.valueOf(key);\n\n            case SIGNATURE_FUNC:\n            case SIGNATURE_ENDFUNC:\n                return nextSignature();\n\n            default:\n                throw new IllegalArgumentException(\n                    \"Invalid JNI signature character '\" + key + \"'\");\n\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate ExternalCarrierBillingInstrumentProto(Builder builder) {\n    this(builder.instrumentKey, builder.subscriberIdentifier, builder.accountType, builder.subscriberCurrency, builder.transactionLimit, builder.subscriberName, builder.address1, builder.address2, builder.city, builder.state, builder.postalCode, builder.country, builder.encryptedSubscriberInfo);\n    setBuilder(builder);\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic static <P extends IProperty<T>, T extends Comparable<T>> T getStatePropertySafely(@Nullable TileEntity te, Class<? extends Block> block, P property, T defaultVal, boolean actual, boolean extended) {\n\t\tif(te == null || te.getWorld() == null) {\n\t\t\treturn defaultVal;\n\t\t}\n\t\tIBlockState state = te.getWorld().getBlockState(te.getPos());\n\t\tif(block.isInstance(state.getBlock())) {\n\t\t\tif(actual) {\n\t\t\t\tstate = state.getActualState(te.getWorld(), te.getPos());\n\t\t\t}\n\t\t\tif(extended) {\n\t\t\t\tstate = state.getBlock().getExtendedState(state, te.getWorld(), te.getPos());\n\t\t\t}\n\t\t\treturn state.getValue(property);\n\t\t}\n\t\treturn defaultVal;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic static <P extends IProperty<T>, T extends Comparable<T>> T getStatePropertySafely(@Nullable TileEntity te, Class<? extends Block> block, P property, T defaultVal, boolean actual, boolean extended) {\n\t\tif(te == null || te.getWorld() == null) {\n\t\t\treturn defaultVal;\n\t\t}\n\t\tIBlockState state = te.getWorld().getBlockState(te.getPos());\n\t\tif(block.isInstance(state.getBlock())) {\n\t\t\tif(actual) {\n\t\t\t\tstate = state.getActualState(te.getWorld(), te.getPos());\n\t\t\t}\n\t\t\tif(extended) {\n\t\t\t\tstate = state.getBlock().getExtendedState(state, te.getWorld(), te.getPos());\n\t\t\t}\n\t\t\treturn state.getValue(property);\n\t\t}\n\t\treturn defaultVal;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic void testParameterTypes() throws SQLException {\n\n        Connection conn = getConnection();\n        Statement s = createStatement();\n\n        s.execute(\"create table PT1(A integer not null primary key, \" +\n                  \"                 B char(10), C varchar(20))\");\n        s.execute(\n            \"create procedure PT1(in a int, in b char(10), c varchar(20)) \" +\n            \"parameter style java dynamic result sets 1 language java \" +\n            \"modifies sql data \" +\n            \"external name '\" + thisClassName + \".parameter1'\");\n\n        String[] sysaliasDefinition = {\n            \"APP.PT1 AS \" + thisClassName + \".parameter1\" +\n            \"(IN \\\"A\\\" INTEGER,IN \\\"B\\\" CHAR(10),IN \\\"C\\\" VARCHAR(20)) \" +\n            \"LANGUAGE JAVA PARAMETER STYLE JAVA \" +\n            \"MODIFIES SQL DATA DYNAMIC RESULT SETS 1\" };\n\n        String[] dbMetadataDefinition = {\n            \"APP.PT1 AS \" + thisClassName + \".parameter1 \" +\n            \"type procedureNoResult\" };\n\n        String[] columnDefinition = {\n            \"procedureColumnIn A INTEGER\",\n            \"procedureColumnIn B CHAR\", \"procedureColumnIn C VARCHAR\" };\n\n        checkMatchingProcedures(conn, \"PT1\", sysaliasDefinition,\n                dbMetadataDefinition, columnDefinition);\n\n        CallableStatement pt1 = conn.prepareCall(\"call PT1(?, ?, ?)\");\n\n        pt1.setInt(1, 20);\n        pt1.setString(2, \"abc\");\n        pt1.setString(3, \"efgh\");\n        pt1.execute();\n        JDBC.assertFullResultSet(pt1.getResultSet(), new String[][] { { \"20\",\n                \"abc\", \"10\", \"efgh\", \"4\" } });\n\n        pt1.setInt(1, 30);\n        pt1.setString(2, \"abc   \");\n        pt1.setString(3, \"efgh  \");\n        pt1.execute();\n        JDBC.assertFullResultSet(pt1.getResultSet(), new String[][] { { \"30\",\n                \"abc\", \"10\", \"efgh\", \"6\" } });\n\n        pt1.setInt(1, 40);\n\n        char[] c75 = new char[75]; Arrays.fill(c75, ' ');\n        char[] c77 = new char[77]; Arrays.fill(c77, ' ');\n        pt1.setString(2, \"abc\" + new String(c75));\n        pt1.setString(3, \"efgh\" + new String(c77));\n\n        pt1.execute();\n        JDBC.assertFullResultSet(pt1.getResultSet(), new String[][] { { \"40\",\n                \"abc\", \"10\", \"efgh\", \"20\" } });\n\n        pt1.setInt(1, 50);\n        pt1.setString(2, \"0123456789X\");\n        pt1.setString(3, \"efgh  \");\n        assertPreparedStatementError(LANG_STRING_TRUNCATION, pt1);\n\n        pt1.setInt(1, 50);\n        pt1.setString(2, \"0123456789\");\n        pt1.setString(3, \"efgh  \");\n        pt1.execute();\n        JDBC.assertFullResultSet(pt1.getResultSet(), new String[][] { { \"50\",\n                \"0123456789\", \"10\", \"efgh\", \"6\" } });\n        pt1.close();\n\n        s.execute(\"drop procedure PT1\");\n\n        s.execute(\n            \"create procedure PT2(in a int, in b DECIMAL(4), c DECIMAL(7,3)) \" +\n            \"parameter style java dynamic result sets 1 language java \" +\n            \"modifies sql data \" +\n            \"external name '\" + thisClassName + \".parameter2'\");\n\n        sysaliasDefinition = new String[] {\n            \"APP.PT2 AS \" + thisClassName + \".parameter2\" +\n            \"(IN \\\"A\\\" INTEGER,IN \\\"B\\\" DECIMAL(4,0),IN \\\"C\\\" DECIMAL(7,3)) \" +\n            \"LANGUAGE JAVA PARAMETER STYLE JAVA \" +\n            \"MODIFIES SQL DATA DYNAMIC RESULT SETS 1\" };\n\n        dbMetadataDefinition = new String[] {\n            \"APP.PT2 AS \" +\n            thisClassName + \".parameter2 type procedureNoResult\" };\n\n        columnDefinition = new String[] { \"procedureColumnIn A INTEGER\",\n                \"procedureColumnIn B DECIMAL\", \"procedureColumnIn C DECIMAL\" };\n\n        checkMatchingProcedures(conn, \"PT2\", sysaliasDefinition,\n                dbMetadataDefinition, columnDefinition);\n\n        CallableStatement pt2 = conn.prepareCall(\"call PT2(?, ?, ?)\");\n\n        pt2.setInt(1, 60);\n        pt2.setString(2, \"34\");\n        pt2.setString(3, \"54.1\");\n        boolean firstIsResultSet = pt2.execute();\n        ResultSet rs = pt2.getResultSet();\n        JDBC.assertFullResultSet(rs,\n                new String[][] { { \"60\", \"34\", \"54.100\" } });\n\n        pt2.setInt(1, 70);\n        pt2.setBigDecimal(2, new BigDecimal(\"831\"));\n        pt2.setBigDecimal(3, new BigDecimal(\"45.7\"));\n        pt2.execute();\n        rs = pt2.getResultSet();\n        JDBC.assertFullResultSet(rs,\n                new String[][] { { \"70\", \"831\", \"45.700\" } });\n\n        pt2.setInt(1, -1);\n        pt2.setBigDecimal(2, new BigDecimal(\"10243\"));\n        pt2.setBigDecimal(3, null);\n\n        try {\n            pt2.execute();\n            fail(\"FAIL - too many digits in decimal value accepted\");\n        } catch (SQLException sqle) {\n            assertSQLState(\"22003\", sqle);\n        }\n        pt2.setInt(1, 80);\n        pt2.setBigDecimal(2, new BigDecimal(\"993\"));\n        pt2.setBigDecimal(3, new BigDecimal(\"1234.5678\"));\n        pt2.execute();\n        rs = pt2.getResultSet();\n        JDBC.assertFullResultSet(rs,\n                new String[][] { { \"80\", \"993\", \"1234.567\" } });\n        pt2.close();\n\n        s.execute(\"drop procedure PT2\");\n\n        s.execute(\n            \"create procedure PTSMALLINT2(\" +\n            \"    in    p_in    SMALLINT, \" +\n            \"    inout p_inout SMALLINT, \" +\n            \"    out   p_out   SMALLINT) \" +\n            \"parameter style java dynamic result sets 0 language java \" +\n            \"no sql \" +\n            \"external name '\" + thisClassName + \".pSMALLINT'\");\n\n        sysaliasDefinition = new String[] {\n            \"APP.PTSMALLINT2 AS \" + thisClassName + \".pSMALLINT\" +\n            \"(IN \\\"P_IN\\\" SMALLINT,\" +\n            \"INOUT \\\"P_INOUT\\\" SMALLINT,\" +\n            \"OUT \\\"P_OUT\\\" SMALLINT) \" +\n            \"LANGUAGE JAVA PARAMETER STYLE JAVA NO SQL\" };\n\n        dbMetadataDefinition = new String[] {\n            \"APP.PTSMALLINT2 AS \" +\n            thisClassName + \".pSMALLINT type procedureNoResult\" };\n\n        columnDefinition = new String[] { \"procedureColumnIn P_IN SMALLINT\",\n                \"procedureColumnInOut P_INOUT SMALLINT\",\n                \"procedureColumnOut P_OUT SMALLINT\" };\n\n        checkMatchingProcedures(conn, \"PT2\", sysaliasDefinition,\n                dbMetadataDefinition, columnDefinition);\n\n        CallableStatement ptsi = conn.prepareCall(\"call PTSMALLINT2(?, ?, ?)\");\n        ptsi.registerOutParameter(2, Types.SMALLINT);\n        ptsi.registerOutParameter(3, Types.SMALLINT);\n\n        ptsi.setNull(1, Types.SMALLINT);\n        ptsi.setShort(2, (short) 7);\n        try {\n            ptsi.execute();\n            fail(\"FAIL NULL PASSED to  primitive\");\n        } catch (SQLException sqle) {\n            assertSQLState(\"39004\", sqle);\n        }\n\n        ptsi.setShort(1, (short) 4);\n        ptsi.setNull(2, Types.SMALLINT);\n        try {\n            ptsi.execute();\n            fail(\"FAIL NULL PASSED to  primitive\");\n        } catch (SQLException sqle) {\n            assertSQLState(\"39004\", sqle);\n        }\n\n        ptsi.setShort(1, (short) 6);\n        ptsi.setShort(2, (short) 3);\n        ptsi.execute();\n        assertEquals(\"wrong value for p_inout\", \"9\", ptsi.getObject(2)\n                .toString());\n        assertEquals(\"wrong value for p_out\", \"6\", ptsi.getObject(3).toString());\n\n        ptsi.setShort(2, (short) 3);\n        ptsi.execute();\n        assertEquals(\"wrong value for p_inout\", \"9\", ptsi.getObject(2)\n                .toString());\n        assertEquals(\"wrong value for p_out\", \"6\", ptsi.getObject(3).toString());\n\n        ptsi.setObject(1, 6);\n        ptsi.setObject(2, 3);\n\n        ptsi.execute();\n        assertEquals(\"wrong value for p_inout\", \"9\", ptsi.getObject(2)\n                .toString());\n        assertFalse(ptsi.wasNull());\n        assertEquals(\"wrong value for p_out\", \"6\", ptsi.getObject(3).toString());\n        assertFalse(ptsi.wasNull());\n\n        ptsi.close();\n\n        s.execute(\"drop procedure PTSMALLINT2\");\n        s.execute(\"drop table PT1\");\n\n        s.close();\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\n    public static Bitmap fastblur(Context context, Bitmap sentBitmap, float radius) {\n\n        if (Build.VERSION.SDK_INT > 16 &&\n                    (!Build.MODEL.contains(\"google_sdk\")\n                             && !Build.MODEL.contains(\"Emulator\")\n                             && !Build.MODEL.contains(\"Android SDK\")\n                             && !Build.FINGERPRINT.contains(\"vbox86p\"))) {\n            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n            final RenderScript rs = RenderScript.create(context);\n            final Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n                                                                 Allocation.USAGE_SCRIPT);\n            final Allocation output = Allocation.createTyped(rs, input.getType());\n            final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n            script.setRadius(radius );\n            script.setInput(input);\n            script.forEach(output);\n            output.copyTo(bitmap);\n            return bitmap;\n        }\n\n        radius *= 0.1;\n        return blurfast(sentBitmap, (int) radius);\n\n\n\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public PluginLoadOrder getLoad() {\n        return order;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Test\n\tpublic void testBlock() throws IOException {\n\t\tBlock b = new Block(BlockCompressionMethod.GZIP.ordinal(),\n\t\t\t\tBlockContentType.CORE, 0, \"123457890\".getBytes(), null);\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tb.write(baos);\n\n\t\tByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n\t\tBlock b2 = new Block(bais, true, true);\n\n\t\tassertArrayEquals(b.getRawContent(), b2.getRawContent());\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic String operatorName(int tag) {\n        switch(tag) {\n            case JCTree.POS:     return \"+\";\n            case JCTree.NEG:     return \"-\";\n            case JCTree.NOT:     return \"!\";\n            case JCTree.COMPL:   return \"~\";\n            case JCTree.PREINC:  return \"++\";\n            case JCTree.PREDEC:  return \"--\";\n            case JCTree.POSTINC: return \"++\";\n            case JCTree.POSTDEC: return \"--\";\n            case JCTree.NULLCHK: return \"<*nullchk*>\";\n            case JCTree.OR:      return \"||\";\n            case JCTree.AND:     return \"&&\";\n            case JCTree.EQ:      return \"==\";\n            case JCTree.NE:      return \"!=\";\n            case JCTree.LT:      return \"<\";\n            case JCTree.GT:      return \">\";\n            case JCTree.LE:      return \"<=\";\n            case JCTree.GE:      return \">=\";\n            case JCTree.BITOR:   return \"|\";\n            case JCTree.BITXOR:  return \"^\";\n            case JCTree.BITAND:  return \"&\";\n            case JCTree.SL:      return \"<<\";\n            case JCTree.SR:      return \">>\";\n            case JCTree.USR:     return \">>>\";\n            case JCTree.PLUS:    return \"+\";\n            case JCTree.MINUS:   return \"-\";\n            case JCTree.MUL:     return \"*\";\n            case JCTree.DIV:     return \"/\";\n            case JCTree.MOD:     return \"%\";\n            default: throw new Error();\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + order.m_lmtPrice +\n        \" auxPrice=\" + order.m_auxPrice +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + order.m_minQty +\n        \" percentOffset=\" + order.m_percentOffset +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + order.m_nbboPriceCap +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + order.m_startingPrice +\n        \" stockRefPrice=\" + order.m_stockRefPrice +\n        \" delta=\" + order.m_delta +\n        \" stockRangeLower=\" + order.m_stockRangeLower +\n        \" stockRangeUpper=\" + order.m_stockRangeUpper +\n        \" volatility=\" + order.m_volatility +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + order.m_trailStopPrice +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + order.m_basisPoints;\n        \t\tmsg += \" basisPointsType=\" + order.m_basisPointsType;\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprotected void init() {\n        pullProcessorConfigTask = new AsyncTaskManager<>(mwPrivate, \"Reading data processor config timed out\");\n        taskTimeout = new Runnable() {\n            @Override\n            public void run() {\n                pendingDataProcessors= null;\n                for(byte it: successfulProcessors) {\n                    removeProcessor(true, it);\n                }\n                createProcessorsTask.setError(new TimeoutException(\"Creating data processor timed out\"));\n            }\n        };\n\n        this.mwPrivate.addResponseHandler(new Pair<>(DATA_PROCESSOR.id, Util.setRead(ADD)), new RegisterResponseHandler() {\n            @Override\n            public void onResponseReceived(byte[] response) {\n                pullProcessorConfigTask.cancelTimeout();\n\n                ProcessorEntry entry = new ProcessorEntry();\n                entry.id = readId;\n                entry.offset = (byte) (response[5] & 0x1f);\n                entry.length = (byte) (((response[5] >> 5) & 0x7) + 1);\n\n                entry.source = new byte[3];\n                System.arraycopy(response, 2, entry.source, 0, entry.source.length);\n\n                entry.config = new byte[response.length - 6];\n                System.arraycopy(response, 6, entry.config, 0, entry.config.length);\n\n                pullChainResult.push(entry);\n\n                if (response[2] == DATA_PROCESSOR.id && response[3] == NOTIFY) {\n                    readId = response[4];\n                    mwPrivate.sendCommand(new byte[] {DATA_PROCESSOR.id, Util.setRead(ADD), response[4]});\n                    pullProcessorConfigTask.restartTimeout(Constant.RESPONSE_TIMEOUT);\n                } else {\n                    pullProcessorConfigTask.setResult(pullChainResult);\n                }\n            }\n        });\n        this.mwPrivate.addResponseHandler(new Pair<>(DATA_PROCESSOR.id, ADD), new RegisterResponseHandler() {\n            @Override\n            public void onResponseReceived(byte[] response) {\n                timeoutFuture.cancel(false);\n\n                Processor current = pendingDataProcessors.poll();\n                current.editor.source.eventConfig[2]= response[2];\n                if (current.state != null) {\n                    current.state.eventConfig[2] = response[2];\n                }\n                activeProcessors.put(response[2], current);\n                successfulProcessors.add(response[2]);\n\n                createProcessor();\n            }\n        });\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic int normalizeMe() throws IllegalArgumentException {\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint i;\n\t\tfor (i = nWords - 1; i >= 0 && (l = data[i]) == 0; i--)\n\t\t\tj++;\n\n\t\tif (i < 0)\n\t\t\tthrow new IllegalArgumentException(\"zero value\");\n\t\tnWords -= j;\n\t\tif ((l & -268435456) != 0) {\n\t\t\tfor (k = 32; (l & -268435456) != 0; k--)\n\t\t\t\tl >>>= 1;\n\n\t\t} else {\n\t\t\twhile (l <= 1048575) {\n\t\t\t\tl <<= 8;\n\t\t\t\tk += 8;\n\t\t\t}\n\t\t\twhile (l <= 134217727) {\n\t\t\t\tl <<= 1;\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t\tif (k != 0)\n\t\t\tlshiftMe(k);\n\t\treturn k;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate PolicyDescriptions createPolicyDescriptions(Map<URI, PolicyDescription> policies) {\n        System.out.println(\"setting policydescriptions # of policies: \"+policies.size());\n        PolicyDescriptions pd = new PolicyDescriptions();\n        for(URI key : policies.keySet()) {\n            PolicyDescriptionsEntry entry = new PolicyDescriptionsEntry();\n            entry.setKey(key);\n\n            entry.setValue(policies.get(key));\n            pd.getEntry().add(entry);\n\n            \n        }\n        return pd;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate static URI resolve(URI base, URI child) {\n        if (child.isOpaque() || base.isOpaque())\n            return child;\n\n        if ((child.scheme == null) && (child.authority == null)\n            && child.path.equals(\"\") && (child.fragment != null)\n            && (child.query == null)) {\n            if ((base.fragment != null)\n                && child.fragment.equals(base.fragment)) {\n                return base;\n            }\n            URI ru = new URI();\n            ru.scheme = base.scheme;\n            ru.authority = base.authority;\n            ru.userInfo = base.userInfo;\n            ru.host = base.host;\n            ru.port = base.port;\n            ru.path = base.path;\n            ru.fragment = child.fragment;\n            ru.query = base.query;\n            return ru;\n        }\n\n        if (child.scheme != null)\n            return child;\n\n        URI ru = new URI();             // Resolved URI\n        ru.scheme = base.scheme;\n        ru.query = child.query;\n        ru.fragment = child.fragment;\n\n        if (child.authority == null) {\n            ru.authority = base.authority;\n            ru.host = base.host;\n            ru.userInfo = base.userInfo;\n            ru.port = base.port;\n\n            String cp = (child.path == null) ? \"\" : child.path;\n            if ((cp.length() > 0) && (cp.charAt(0) == '/')) {\n                ru.path = child.path;\n            } else {\n                ru.path = resolvePath(base.path, cp, base.isAbsolute());\n            }\n        } else {\n            ru.authority = child.authority;\n            ru.host = child.host;\n            ru.userInfo = child.userInfo;\n            ru.host = child.host;\n            ru.port = child.port;\n            ru.path = child.path;\n        }\n\n        return ru;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n\n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n\n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n\n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic ShortcutView(final Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t\tpm = context.getPackageManager();\n\t\t\n\t\tsec = PreferenceManager.getDefaultSharedPreferences(getContext());\n\n\t\tpkg = sec.getString(\"pkg\", \"\");\n\t\tpin = sec.getString(\"pin\", \"\");\t\t\n\t\t\n\t\t\n\t\tfor (int i = 0; i < CAPACITY; i++) {\n\t\t\tfinal int b = i;\n\t\t\tApplicationInfo ai = null;\n\t\t\tString sv = null;\n\t\t\tString s = Settings.System.getString(context.getContentResolver(), \"PiSC\" + i);\n\n\t\t\tif (s == null | s == \"\") {\n\n\t\t\t\tSettings.System.putString(context.getContentResolver(), \"PiSC\"+b, \"com.pilockerstable\");\n\t\t\t}\n\t\t\tsv = s;\n\t\t\tShortCut sc = new ShortCut(context, attrs);\n\t\t\t\n\t\t\ttry {\n\t\t\t\tai = pm.getApplicationInfo(sv, 0);\n\t\t\t} catch (NameNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\ttry{\n\t\t\tString App_Name = (String) pm.getApplicationLabel(ai);\n\t\t\tDrawable Icon = pm.getApplicationIcon(ai);\n\t\t\tShortcutter st = new Shortcutter(App_Name, Icon);\n\t\t\tsc.setName(st.getName());\n\t\t\tsc.setImage(st.getIcon());\t\t\t\n\t\t\taddView(sc);\n\t\t\t\n\t\t\t}catch(Exception e){\n\t\t\t\tSettings.System.putString(context.getContentResolver(), \"PiSC\"+b, \"com.pilockerstable\");\n\t\t\t}\n\t\t\t\n\t\t\tsc.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t\n\t\t\t\tString sv = Settings.System.getString( context.getContentResolver(), \"PiSC\" + b);\n\n\t\t\t\t@Override \n\t\t\t\tpublic void onClick(View arg0) {\n\n\t\t\t\t\tif( pin.equals(\"\") || pin.equals(null) || pin.isEmpty()) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t((Activity) context).finish();\n\t\t\t\t\t\tIntent i = new Intent();\n\t\t\t\t\t\ti.setClass(getContext(), LockerService.class);\n\t\t\t\t\t\tcontext.startService(i);\n\t\t\t\t\t\tIntent LaunchIntent = context.getPackageManager().getLaunchIntentForPackage(sv);\n\t\t\t\t\t\tcontext.startActivity(LaunchIntent);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t}else{\n\t\t\t\t\t\n\t\t\t\t\tsave(\"pkg\", \"true\");\n\t\t\t\t\tIntent x = new Intent(getContext(), PinActivity.class);\n\t\t\t\t\tx.putExtra(\"sv\", sv);\n\t\t\t\t\tcontext.startActivity(x);\n\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nstatic void addEntries(ZipOutputStream zos, File dir, String dbName, int old) throws Exception {\n\n\t\tString[] list = dir.list();\n\n\t\tfor (int i = 0; i < list.length; i++) {\n\n\t\t\tFile f = new File(dir, list[i]);\n\t\t\tif (f.isDirectory()) {\n\t\t\t\taddEntries(zos, f, dbName, old);\n\t\t\t} else {\n\t\t\t\taddFile(zos, f, dbName, old);\n\t\t\t}\n\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic static void initConfig(Context context) {\n\t\tif(init) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tInputStream inputStream =  context.getResources().openRawResource(R.raw.config);\n\t\t\tProperties properties  = new Properties();\n\t\t\tproperties.load(inputStream);\n\t\t\tdebug = Boolean.valueOf(properties.getProperty(\"debug\"));\n\t\t\tL.e(\"Debug:\"+debug);\n\t\t\tpersistLog = Boolean.valueOf(properties.getProperty(\"persistLog\"));\n\t\t\tL.e(\"persistLog:\"+persistLog);\n\n\t\t\tmainCategoruUrl = properties.getProperty(\"mainCategoruUrl\");\n\t\t\tL.e(\"mainCategoruUrl:\"+mainCategoruUrl);\n\t\t\tinit = true;\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void clearContexts(Resource... contexts)\n\t\tthrows IOException\n\t{\n\t\tlogger.debug(\"clearing contexts...\");\n\t\tluceneIndex.begin();\n\t\ttry {\n\t\t\tluceneIndex.clearContexts(contexts);\n\t\t\tluceneIndex.commit();\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tlogger.error(\"Rolling back\", e);\n\t\t\tluceneIndex.rollback();\n\t\t\tthrow e;\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps,\n                boolean isUserGenerated) {\n            Validate.notNull(objectProperty, \"objectProperty\");\n            Validate.containsNoNulls(bitmaps, \"bitmaps\");\n            if (action == null) {\n                throw new FacebookException(\"Can not set attachments prior to setting action.\");\n            }\n\n            List<String> attachmentUrls = addImageAttachments(bitmaps);\n            updateObjectAttachmentUrls(objectProperty, attachmentUrls, isUserGenerated);\n\n            return this;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    protected void fireVetoableChange(String propertyName, Object oldValue,\n                                      Object newValue)\n        throws PropertyVetoException\n    {\n        if (oldValue == newValue) {\n            return;\n        }\n        VetoableChangeSupport vetoableSupport =\n            this.vetoableSupport;\n        if (vetoableSupport != null) {\n            vetoableSupport.fireVetoableChange(propertyName, oldValue,\n                                               newValue);\n        }\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic FileObject getFileObject(String file) {\n\t\tString path;\n\t\tif (file.startsWith(\"/\")) {\n\t\t\tpath = file;\n\t\t} else if (currDir.length() > 1) {\n\t\t\tpath = currDir + \"/\" + file;\n\t\t} else {\n\t\t\tpath = \"/\" + file;\n\t\t}\n\t\treturn new HdfsFileObject(path, user);\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nboolean execute2(final CommandSender sender, final String commandLabel, final String rest) {\n\t\tfinal ScriptCommandEvent event = new ScriptCommandEvent(ScriptCommand.this, sender);\n\t\t\n\t\tfinal ParseLogHandler log = SkriptLogger.startParseLogHandler();\n\t\ttry {\n\t\t\tfinal boolean ok = SkriptParser.parseArguments(rest, ScriptCommand.this, event);\n\t\t\tif (!ok) {\n\t\t\t\tfinal LogEntry e = log.getError();\n\t\t\t\tif (e != null)\n\t\t\t\t\tsender.sendMessage(ChatColor.DARK_RED + e.getMessage());\n\t\t\t\tsender.sendMessage(Commands.m_correct_usage + \" \" + usage);\n\t\t\t\tlog.clear();\n\t\t\t\tlog.printLog();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlog.clear();\n\t\t\tlog.printLog();\n\t\t} finally {\n\t\t\tlog.stop();\n\t\t}\n\t\t\n\t\tif (Skript.log(Verbosity.VERY_HIGH))\n\t\t\tSkript.info(\"# /\" + name + \" \" + rest);\n\t\tfinal long startTrigger = System.nanoTime();\n\t\t\n\t\tif (!trigger.execute(event))\n\t\t\tsender.sendMessage(Commands.m_internal_error.toString());\n\t\t\n\t\tif (Skript.log(Verbosity.VERY_HIGH))\n\t\t\tSkript.info(\"# \" + name + \" took \" + 1. * (System.nanoTime() - startTrigger) / 1000000. + \" milliseconds\");\n\t\treturn true;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tprivate void buildElements()\n\t{\n\t\ttitleLabel = new Label(Box2DBumpers.APPLICATION_NAME, skin, URL_LABEL_FONT, Color.YELLOW);\n\n\t\tstartButton = new TextButton(\"Start\", skin);\n\t\taboutButton = new TextButton(\"About\", skin);\n\n\t\ttable = new Table();\n\n\t\ttable.setSize(getWidth(), getHeight());\n\n\t\ttable.row();\n\t\ttable.add(titleLabel).expandY().expandX();\n\t\ttable.row();\n\t\ttable.add(startButton).expandY().expandX();\n\t\ttable.row();\n\t\ttable.add(aboutButton).expandY().expandX();\n\n\t\ttable.setFillParent(true);\n\n\t\ttable.pack();\n\t\t\n\t\tstartButton.addListener(new ClickListener()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic void clicked(InputEvent event, float x, float y)\n\t\t\t{\n\t\t\t\tdirector.sendEvent(AppEvents.EVENT_TRANSITION_TO_MAIN_SCENE, event.getRelatedActor());\n\t\t\t}\n\n\t\t});\n\n\t\taboutButton.addListener(new ClickListener()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic void clicked(InputEvent event, float x, float y)\n\t\t\t{\n\t\t\t\tdirector.sendEvent(AppEvents.EVENT_TRANSITION_TO_ABOUT_SCENE, event.getRelatedActor());\n\t\t\t}\n\n\t\t});\n\n\t\ttable.pack();\n\n\t\taddActor(table);\n\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n  public boolean isSourceEncodingSupported(AudioFormat.Encoding src)\n  {\n    AudioFormat.Encoding[] srcs = getSourceEncodings();\n    for (int i = 0; i < srcs.length; ++i)\n      {\n        if (src.equals(srcs[i]))\n          return true;\n      }\n    return false;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public Map<String, String> getExamples() {\n        return new ExampleMapFactory()\n                .put(\"x+=1;\", \"x++;\")\n                .put(\"well += 1;\", \"well++;\")\n                .put(\"x+=i;\", null)\n                .put(\"x+=2;\", null)\n                .put(\"\\nx+=1;\", \"\\nx++;\")\n                .put(\"x+=1\", \"x++\")\n                .put(\"for(int i=0; i<5; i+=1){;}\", \"for(int i=0; i<5; i++){;}\")\n                .map();\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n   public void onSurfaceCreated(GL10 gl, EGLConfig config) {\n      gl.glClearColor(0.0f, 0.0f, 0.0f, 1.0f);  // Set color's clear-value to black\n      gl.glClearDepthf(1.0f);            // Set depth's clear-value to farthest\n      gl.glEnable(GL10.GL_DEPTH_TEST);   // Enables depth-buffer for hidden surface removal\n      gl.glDepthFunc(GL10.GL_LEQUAL);    // The type of depth testing to do\n      gl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT, GL10.GL_NICEST);  // nice perspective view\n      gl.glShadeModel(GL10.GL_SMOOTH);   // Enable smooth shading of color\n      gl.glDisable(GL10.GL_DITHER);      // Disable dithering for better performance\n      \n      createTexture(gl);\n      gl.glEnable(GL10.GL_TEXTURE_2D);  // Enable texture (NEW)\n      gl.glEnable(GL_TEXTURE_EXTERNAL_OES);\n  \n   }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate PasswordImpl(int origin,String rawPassword, String salt) {\n\t\tthis.rawPassword=rawPassword;\n\t\tthis.password=hash(rawPassword, salt);\n\t\tthis.salt=salt;\n\t\tthis.type=StringUtil.isEmpty(salt)?HASHED:HASHED_SALTED;\n\t\tthis.origin=origin;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static ITextViewer getViewer(IEditorPart editorPart) {\n        Object viewer = editorPart.getAdapter(ITextOperationTarget.class);\n\n        return (viewer instanceof ITextViewer) ? (ITextViewer) viewer : null;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; }\n        return retVal;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate URI api(String path) {\n        if (!path.toLowerCase().matches(\"https?://.*\")) {\n            path = urlJoin(this.context, path);\n        }\n        if (!path.contains(\"?\")) {\n            if (!path.endsWith(\"/stop\")) {\n                path = urlJoin(path, \"api/json\");\n            }\n        } else {\n            String[] components = path.split(\"\\\\?\", 2);\n            path = urlJoin(components[0], \"api/json\") + \"?\" + components[1];\n        }\n        URI requestUri = uri.resolve(\"/\").resolve(path);\n        return requestUri;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\n    public static Bitmap fastblur(Context context, Bitmap sentBitmap, float radius) {\n\n        if (Build.VERSION.SDK_INT > 16 &&\n                    (!Build.MODEL.contains(\"google_sdk\")\n                             && !Build.MODEL.contains(\"Emulator\")\n                             && !Build.MODEL.contains(\"Android SDK\")\n                             && !Build.FINGERPRINT.contains(\"vbox86p\"))) {\n            Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n            final RenderScript rs = RenderScript.create(context);\n            final Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n                                                                 Allocation.USAGE_SCRIPT);\n            final Allocation output = Allocation.createTyped(rs, input.getType());\n            final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n            script.setRadius(radius );\n            script.setInput(input);\n            script.forEach(output);\n            output.copyTo(bitmap);\n            return bitmap;\n        }\n\n        radius *= 0.1;\n        return blurfast(sentBitmap, (int) radius);\n\n\n\n\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static String getActionName(ActionListener listener)\n        {\n                Enumeration en = getActions();\n                while(en.hasMoreElements())\n                {\n                        String name = (String)en.nextElement();\n                        ActionListener _listener = getAction(name);\n                        if(_listener == listener) {\n                                return name;\n                        }\n                }\n                return null;\n        }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate void printMethods() {\n\t\tif (TypeUtil.isClassLike(type)) {\n\t\t\tfor (List<IMethodBinding> e : methods.values()) {\n\t\t\t\tfor (IMethodBinding mb : e) {\n\t\t\t\t\taccess = TransformUtil.declareBridge(ctx, out, type, mb,\n\t\t\t\t\t\t\tdeps, access);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tList<IMethodBinding> superMethods = hiddenMethods(type, ctx, methods);\n\n\t\tfor (IMethodBinding mb : superMethods) {\n\t\t\taccess = printAccess(out, mb.getModifiers(), access);\n\t\t\tprint(i1);\n\t\t\tTransformUtil.printSignature(ctx, out, type,\n\t\t\t\t\tmb.getMethodDeclaration(), deps, false);\n\t\t\tif (Modifier.isAbstract(mb.getModifiers())) {\n\t\t\t\tprint(\" = 0\");\n\t\t\t}\n\n\t\t\tprintln(\";\");\n\t\t}\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate String endCapture() {\n    int end = current == -1 ? index : index - 1;\n    String captured;\n    if( captureBuffer.length() > 0 ) {\n      captureBuffer.append( buffer, captureStart, end - captureStart );\n      captured = captureBuffer.toString();\n      captureBuffer.setLength( 0 );\n    } else {\n      captured = new String( buffer, captureStart, end - captureStart );\n    }\n    captureStart = -1;\n    return captured;\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic boolean stem() {\n\t\tint v_1;\n\t\tint v_2;\n\t\tint v_3;\n\t\tint v_4;\n\t\tint v_5;\n\t\tint v_6;\n\t\tint v_7;\n\t\tv_1 = cursor;\n\t\tlab0: do {\n\t\t\tif (!r_prelude()) {\n\t\t\t\tbreak lab0;\n\t\t\t}\n\t\t} while (false);\n\t\tcursor = v_1;\n\t\tv_2 = cursor;\n\t\tlab1: do {\n\t\t\tif (!r_mark_regions()) {\n\t\t\t\tbreak lab1;\n\t\t\t}\n\t\t} while (false);\n\t\tcursor = v_2;\n\t\tlimit_backward = cursor;\n\t\tcursor = limit;\n\t\tv_3 = limit - cursor;\n\t\tlab2: do {\n\t\t\tif (!r_attached_pronoun()) {\n\t\t\t\tbreak lab2;\n\t\t\t}\n\t\t} while (false);\n\t\tcursor = limit - v_3;\n\t\tv_4 = limit - cursor;\n\t\tlab3: do {\n\t\t\tlab4: do {\n\t\t\t\tv_5 = limit - cursor;\n\t\t\t\tlab5: do {\n\t\t\t\t\tif (!r_standard_suffix()) {\n\t\t\t\t\t\tbreak lab5;\n\t\t\t\t\t}\n\t\t\t\t\tbreak lab4;\n\t\t\t\t} while (false);\n\t\t\t\tcursor = limit - v_5;\n\t\t\t\tif (!r_verb_suffix()) {\n\t\t\t\t\tbreak lab3;\n\t\t\t\t}\n\t\t\t} while (false);\n\t\t} while (false);\n\t\tcursor = limit - v_4;\n\t\tv_6 = limit - cursor;\n\t\tlab6: do {\n\t\t\tif (!r_vowel_suffix()) {\n\t\t\t\tbreak lab6;\n\t\t\t}\n\t\t} while (false);\n\t\tcursor = limit - v_6;\n\t\tcursor = limit_backward; // do, line 189\n\t\tv_7 = cursor;\n\t\tlab7: do {\n\t\t\tif (!r_postlude()) {\n\t\t\t\tbreak lab7;\n\t\t\t}\n\t\t} while (false);\n\t\tcursor = v_7;\n\t\treturn true;\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n    public static Mat zeros(Size size, int type)\n    {\n\n        Mat retVal = new Mat(n_zeros(size.width, size.height, type));\n\n        return retVal;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tstatic Varargs gsub( Varargs args ) {\n\t\tLuaString src = args.checkstring( 1 );\n\t\tfinal int srclen = src.length();\n\t\tLuaString p = args.checkstring( 2 );\n\t\tLuaValue repl = args.arg( 3 );\n\t\tint max_s = args.optint( 4, srclen + 1 );\n\t\tfinal boolean anchor = p.length() > 0 && p.charAt( 0 ) == '^';\n\t\t\n\t\tBuffer lbuf = new Buffer( srclen );\n\t\tMatchState ms = new MatchState( args, src, p );\n\t\t\n\t\tint soffset = 0;\n\t\tint n = 0;\n\t\twhile ( n < max_s ) {\n\t\t\tms.reset();\n\t\t\tint res = ms.match( soffset, anchor ? 1 : 0 );\n\t\t\tif ( res != -1 ) {\n\t\t\t\tn++;\n\t\t\t\tms.add_value( lbuf, soffset, res, repl );\n\t\t\t}\n\t\t\tif ( res != -1 && res > soffset )\n\t\t\t\tsoffset = res;\n\t\t\telse if ( soffset < srclen )\n\t\t\t\tlbuf.append( (byte) src.luaByte( soffset++ ) );\n\t\t\telse\n\t\t\t\tbreak;\n\t\t\tif ( anchor )\n\t\t\t\tbreak;\n\t\t}\n\t\tlbuf.append( src.substring( soffset, srclen ) );\n\t\treturn varargsOf(lbuf.tostring(), valueOf(n));\n\t}\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\npublic synchronized String[] getFieldNames() {\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {\n            MODELMBEAN_LOGGER.logp(Level.FINEST,\n                    DescriptorSupport.class.getName(),\n                    \"getFieldNames()\", \"Entry\");\n        }\n        int numberOfEntries = descriptorMap.size();\n\n        String[] responseFields = new String[numberOfEntries];\n        Set<Map.Entry<String, Object>> returnedSet = descriptorMap.entrySet();\n\n        int i = 0;\n\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {\n            MODELMBEAN_LOGGER.logp(Level.FINEST,\n                    DescriptorSupport.class.getName(),\n                    \"getFieldNames()\",\n                    \"Returning \" + numberOfEntries + \" fields\");\n        }\n\n        for (Iterator<Map.Entry<String, Object>> iter = returnedSet.iterator();\n             iter.hasNext(); i++) {\n            Map.Entry<String, Object> currElement = iter.next();\n\n            if (( currElement == null ) || (currElement.getKey() == null)) {\n                if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {\n                    MODELMBEAN_LOGGER.logp(Level.FINEST,\n                            DescriptorSupport.class.getName(),\n                            \"getFieldNames()\", \"Field is null\");\n                }\n            } else {\n                responseFields[i] = currElement.getKey().toString();\n            }\n        }\n\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {\n            MODELMBEAN_LOGGER.logp(Level.FINEST,\n                    DescriptorSupport.class.getName(),\n                    \"getFieldNames()\", \"Exit\");\n        }\n\n        return responseFields;\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n@Override\n    public void onDownloadError(int index, String message) {\n    for (int i = 0; i < mDownloadStatus.length; i++) {\n        if (mDownloadStatus[i] != Constants.DOWNLOAD_STATE_FINISH && mDownloadStatus[i] != Constants.DOWNLOAD_STATE_ERROR) {\n            mDownloadThreads[i].cancel();\n        }\n    }\n    notifyError(message);\n    }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(java.io.File file) throws org.apache.xmlbeans.XmlException, java.io.IOException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( file, type, null ); }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\nprivate BytesRef addTail(int state, BytesRefBuilder term, int idx, int leadLabel) {\n    int maxIndex = -1;\n    int numTransitions = automaton.initTransition(state, transition);\n    for(int i=0;i<numTransitions;i++) {\n      automaton.getNextTransition(transition);\n      if (transition.min < leadLabel) {\n        maxIndex = i;\n      } else {\n        break;\n      }\n    }\n\n\n    assert maxIndex != -1;\n    automaton.getTransition(state, maxIndex, transition);\n\n    final int floorLabel;\n    if (transition.max > leadLabel-1) {\n      floorLabel = leadLabel-1;\n    } else {\n      floorLabel = transition.max;\n    }\n    term.grow(1+idx);\n    term.setByteAt(idx, (byte) floorLabel);\n\n    state = transition.dest;\n    idx++;\n\n    while (true) {\n      numTransitions = automaton.getNumTransitions(state);\n      if (numTransitions == 0) {\n        assert runAutomaton.isAccept(state);\n        term.setLength(idx);\n        return term.get();\n      } else {\n        automaton.getTransition(state, numTransitions-1, transition);\n        term.grow(1+idx);\n        term.setByteAt(idx, (byte) transition.max);\n        state = transition.dest;\n        idx++;\n      }\n    }\n  }\n}", "nl": "just for space"}
{"code": "class EmptyClass {\n\n\n\tpublic static <P extends IProperty<T>, T extends Comparable<T>> T getStatePropertySafely(@Nullable TileEntity te, Class<? extends Block> block, P property, T defaultVal) {\n\t\treturn getStatePropertySafely(te, block, property, defaultVal, false, false);\n\t}\n}", "nl": "just for space"}
