{"code": "class EmptyClass {\n\nprivate Path computeBootClassPath() {\n        bootClassPathRtJar = null;\n        String optionValue;\n        Path path = new Path();\n\n        Map<String,String> envs = System.getenv();\n\n        path.addFiles(envs.get(\"BOOTCLASSPATH\"));\n\n        \n        \n        return path;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static long getLongFromString(String stringVal) throws SQLException {\n        if (StringUtils.isBlank(stringVal)) {\n            return 0;\n        }\n        try {\n            int decimalIndex = stringVal.indexOf(\".\");\n\n            if (decimalIndex != -1) {\n                double valueAsDouble = Double.parseDouble(stringVal);\n                return (long) valueAsDouble;\n            }\n\n            return Long.parseLong(stringVal);\n        } catch (NumberFormatException e) {\n            throw new SQLException(\"Parse integer error:\" + stringVal);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tpublic synchronized void clearContexts(Resource... contexts)\n\t\tthrows IOException\n\t{\n\n\n\t\tlogger.debug(\"deleting contexts: {}\", Arrays.toString(contexts));\n\n\t\tfor (Resource context : contexts) {\n\t\t\tString contextString = SearchFields.getContextID(context);\n\t\t\tTerm contextTerm = new Term(SearchFields.CONTEXT_FIELD_NAME, contextString);\n\n\n\t\t\tgetIndexWriter().deleteDocuments(contextTerm);\n\t\t}\n\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic WebSocketServer( InetSocketAddress address , int decodercount , List<Draft> drafts ) {\n\t\tthis( address, decodercount, drafts, new HashSet<WebSocket>() );\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void populateAxisService() throws org.apache.axis2.AxisFault {\n\n     _service = new org.apache.axis2.description.AxisService(\"Calais\" + getUniqueSuffix());\n     addAnonymousOperations();\n\n        org.apache.axis2.description.AxisOperation __operation;\n\n        _operations = new org.apache.axis2.description.AxisOperation[1];\n        \n                   __operation = new org.apache.axis2.description.OutInAxisOperation();\n                \n\n            __operation.setName(new javax.xml.namespace.QName(\"http://clearforest.com/\", \"enlighten\"));\n\t    _service.addOperation(__operation);\n\t    \n\n\t    \n\t    \n            _operations[0]=__operation;\n            \n        \n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic byte[] getRawOffsetIndices() {\n\t\tbyte abyte0[] = null;\n\t\tSoftReference softreference = rawOffsetIndices;\n\t\tif (softreference != null) {\n\t\t\tabyte0 = (byte[]) softreference.get();\n\t\t\tif (abyte0 != null)\n\t\t\t\treturn abyte0;\n\t\t}\n\t\tbyte abyte1[] = getZoneInfoMappings();\n\t\tint i = JAVAZM_LABEL_LENGTH + 1;\n\t\tint j = abyte1.length;\n\t\ttry {\n\t\t\tlabel0: do {\n\t\t\t\tif (i >= j)\n\t\t\t\t\tbreak;\n\t\t\t\tbyte byte0 = abyte1[i++];\n\t\t\t\tint k = ((abyte1[i++] & 255) << 8) + (abyte1[i++] & 255);\n\t\t\t\tswitch (byte0) {\n\t\t\t\tcase 66: // 'B'\n\t\t\t\t\tabyte0 = new byte[k];\n\t\t\t\t\tfor (int l = 0; l < k; l++)\n\t\t\t\t\t\tabyte0[l] = abyte1[i++];\n\n\t\t\t\t\tbreak label0;\n\n\t\t\t\tdefault:\n\t\t\t\t\ti += k;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} while (true);\n\t\t} catch (ArrayIndexOutOfBoundsException arrayindexoutofboundsexception) {\n\t\t\tSystem.err.println(\"ZoneInfo: corrupted ZoneInfoMappings\");\n\t\t}\n\t\trawOffsetIndices = new SoftReference(abyte0);\n\t\treturn abyte0;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n  public static double interpolateZ(Coordinate p, Coordinate v0, Coordinate v1,\n      Coordinate v2)\n  {\n    double x0 = v0.x;\n    double y0 = v0.y;\n    double a = v1.x - x0;\n    double b = v2.x - x0;\n    double c = v1.y - y0;\n    double d = v2.y - y0;\n    double det = a * d - b * c;\n    double dx = p.x - x0;\n    double dy = p.y - y0;\n    double t = (d * dx - b * dy) / det;\n    double u = (-c * dx + a * dy) / det;\n    double z = v0.z + t * (v1.z - v0.z) + u * (v2.z - v0.z);\n    return z;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n        NetworkUtil.releaseMsgCompletely(initialLineBuf);\n        if (!decodeFinished) {\n            String msg = \"Server channel inactive while decoding response header\";\n            LOGGER.debug(msg);\n            NetworkUtil.releaseMsgCompletely(headerBuf);\n            listener.onThrowable(msg, ServerChannelInactiveException.INSTANCE);\n        }\n        super.channelInactive(ctx);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic void registerResources() {\n        if (sInitialized) {\n            return;\n        }\n        \n        org.chromium.content.R.attr.select_dialog_multichoice =\n                R.attr.select_dialog_multichoice;\n        org.chromium.content.R.attr.select_dialog_singlechoice =\n                R.attr.select_dialog_singlechoice;\n        org.chromium.ui.R.color.dropdown_dark_divider_color =\n                R.color.dropdown_dark_divider_color;\n        org.chromium.ui.R.color.dropdown_divider_color =\n                R.color.dropdown_divider_color;\n        org.chromium.ui.R.color.color_picker_border_color =\n                R.color.color_picker_border_color;\n        org.chromium.content.R.dimen.link_preview_overlay_radius =\n                R.dimen.link_preview_overlay_radius;\n        org.chromium.ui.R.dimen.dropdown_item_height =\n                R.dimen.dropdown_item_height;\n        org.chromium.ui.R.dimen.dropdown_item_divider_height =\n                R.dimen.dropdown_item_divider_height;\n        org.chromium.ui.R.dimen.color_button_height =\n                R.dimen.color_button_height;\n        org.chromium.ui.R.dimen.config_min_scaling_span =\n                R.dimen.config_min_scaling_span;\n        org.chromium.ui.R.dimen.config_min_scaling_touch_major =\n                R.dimen.config_min_scaling_touch_major;\n        org.chromium.content.R.drawable.ondemand_overlay =\n                R.drawable.ondemand_overlay;\n        org.chromium.ui.R.drawable.color_button_background =\n                R.drawable.color_button_background;\n        org.chromium.ui.R.drawable.color_picker_advanced_select_handle =\n                R.drawable.color_picker_advanced_select_handle;\n        org.chromium.ui.R.id.ampm = R.id.ampm;\n        org.chromium.ui.R.id.date_picker =\n                R.id.date_picker;\n        org.chromium.ui.R.id.date_time_suggestion_value =\n                R.id.date_time_suggestion_value;\n        org.chromium.ui.R.id.date_time_suggestion_label =\n                R.id.date_time_suggestion_label;\n        org.chromium.ui.R.id.hour = R.id.hour;\n        org.chromium.ui.R.id.milli = R.id.milli;\n        org.chromium.ui.R.id.minute = R.id.minute;\n        org.chromium.ui.R.id.pickers = R.id.pickers;\n        org.chromium.ui.R.id.position_in_year =\n                R.id.position_in_year;\n        org.chromium.ui.R.id.second = R.id.second;\n        org.chromium.ui.R.id.second_colon =\n                R.id.second_colon;\n        org.chromium.ui.R.id.second_dot =\n                R.id.second_dot;\n        org.chromium.content.R.id.select_action_menu_select_all =\n                R.id.select_action_menu_select_all;\n        org.chromium.content.R.id.select_action_menu_cut =\n                R.id.select_action_menu_cut;\n        org.chromium.content.R.id.select_action_menu_copy =\n                R.id.select_action_menu_copy;\n        org.chromium.content.R.id.select_action_menu_paste =\n                R.id.select_action_menu_paste;\n        org.chromium.content.R.id.select_action_menu_share =\n                R.id.select_action_menu_share;\n        org.chromium.content.R.id.select_action_menu_web_search =\n                R.id.select_action_menu_web_search;\n        org.chromium.ui.R.id.time_picker =\n                R.id.time_picker;\n        org.chromium.ui.R.id.year = R.id.year;\n        org.chromium.content.R.id.main_text =\n                R.id.main_text;\n        org.chromium.content.R.id.sub_text =\n                R.id.sub_text;\n        org.chromium.content.R.id.arrow_image =\n                R.id.arrow_image;\n        org.chromium.ui.R.id.selected_color_view =\n                R.id.selected_color_view;\n        org.chromium.ui.R.id.title =\n                R.id.title;\n        org.chromium.ui.R.id.more_colors_button =\n                R.id.more_colors_button;\n        org.chromium.ui.R.id.color_picker_advanced =\n                R.id.color_picker_advanced;\n        org.chromium.ui.R.id.color_picker_simple =\n                R.id.color_picker_simple;\n        org.chromium.ui.R.id.color_button_swatch =\n                R.id.color_button_swatch;\n        org.chromium.ui.R.id.more_colors_button_border =\n                R.id.more_colors_button_border;\n        org.chromium.ui.R.id.gradient =\n                R.id.gradient;\n        org.chromium.ui.R.id.text =\n                R.id.text;\n        org.chromium.ui.R.id.seek_bar =\n                R.id.seek_bar;\n        org.chromium.ui.R.id.dropdown_label =\n                R.id.dropdown_label;\n        org.chromium.ui.R.id.dropdown_popup_window =\n                R.id.dropdown_popup_window;\n        org.chromium.ui.R.id.dropdown_sublabel =\n                R.id.dropdown_sublabel;\n        org.chromium.ui.R.layout.date_time_picker_dialog =\n                R.layout.date_time_picker_dialog;\n        org.chromium.ui.R.layout.date_time_suggestion =\n                R.layout.date_time_suggestion;\n        org.chromium.ui.R.layout.two_field_date_picker =\n                R.layout.two_field_date_picker;\n        org.chromium.ui.R.layout.multi_field_time_picker_dialog =\n                R.layout.multi_field_time_picker_dialog;\n        org.chromium.content.R.layout.validation_message_bubble =\n                R.layout.validation_message_bubble;\n        org.chromium.ui.R.layout.color_picker_dialog_title =\n                R.layout.color_picker_dialog_title;\n        org.chromium.ui.R.layout.color_picker_dialog_content =\n                R.layout.color_picker_dialog_content;\n        org.chromium.ui.R.layout.color_picker_advanced_component =\n                R.layout.color_picker_advanced_component;\n        org.chromium.ui.R.layout.dropdown_item =\n                R.layout.dropdown_item;\n        org.chromium.content.R.menu.select_action_menu =\n                R.menu.select_action_menu;\n        org.chromium.content.R.string.accessibility_content_view =\n                R.string.accessibility_content_view;\n        org.chromium.ui.R.string.accessibility_date_picker_month =\n                R.string.accessibility_date_picker_month;\n        org.chromium.ui.R.string.accessibility_date_picker_week =\n                R.string.accessibility_date_picker_week;\n        org.chromium.ui.R.string.accessibility_date_picker_year =\n                R.string.accessibility_date_picker_year;\n        org.chromium.ui.R.string.accessibility_datetime_picker_date =\n                R.string.accessibility_datetime_picker_date;\n        org.chromium.ui.R.string.accessibility_datetime_picker_time =\n                R.string.accessibility_datetime_picker_time;\n        org.chromium.content.R.string.actionbar_share =\n                R.string.actionbar_share;\n        org.chromium.content.R.string.actionbar_web_search =\n                R.string.actionbar_web_search;\n        org.chromium.ui.R.string.date_picker_dialog_clear =\n                R.string.date_picker_dialog_clear;\n        org.chromium.ui.R.string.date_picker_dialog_set =\n                R.string.date_picker_dialog_set;\n        org.chromium.ui.R.string.date_picker_dialog_title =\n                R.string.date_picker_dialog_title;\n        org.chromium.ui.R.string.date_picker_dialog_other_button_label =\n                R.string.date_picker_dialog_other_button_label;\n        org.chromium.ui.R.string.date_time_picker_dialog_title =\n                R.string.date_time_picker_dialog_title;\n        org.chromium.content.R.string.media_player_error_button =\n                R.string.media_player_error_button;\n        org.chromium.content.R.string.media_player_error_text_invalid_progressive_playback =\n                R.string.media_player_error_text_invalid_progressive_playback;\n        org.chromium.content.R.string.media_player_error_text_unknown =\n                R.string.media_player_error_text_unknown;\n        org.chromium.content.R.string.media_player_error_title =\n                R.string.media_player_error_title;\n        org.chromium.content.R.string.media_player_loading_video =\n                R.string.media_player_loading_video;\n        org.chromium.ui.R.string.month_picker_dialog_title =\n                R.string.month_picker_dialog_title;\n        org.chromium.content.R.string.profiler_error_toast =\n                R.string.profiler_error_toast;\n        org.chromium.content.R.string.profiler_no_storage_toast =\n                R.string.profiler_no_storage_toast;\n        org.chromium.content.R.string.profiler_started_toast =\n                R.string.profiler_started_toast;\n        org.chromium.content.R.string.profiler_stopped_toast =\n                R.string.profiler_stopped_toast;\n        org.chromium.ui.R.string.time_picker_dialog_am =\n                R.string.time_picker_dialog_am;\n        org.chromium.ui.R.string.time_picker_dialog_pm =\n                R.string.time_picker_dialog_pm;\n        org.chromium.ui.R.string.time_picker_dialog_hour_minute_separator =\n                R.string.time_picker_dialog_hour_minute_separator;\n        org.chromium.ui.R.string.time_picker_dialog_hour_minute_separator =\n                R.string.time_picker_dialog_hour_minute_separator;\n        org.chromium.ui.R.string.time_picker_dialog_minute_second_separator =\n                R.string.time_picker_dialog_minute_second_separator;\n        org.chromium.ui.R.string.time_picker_dialog_second_subsecond_separator =\n                R.string.time_picker_dialog_second_subsecond_separator;\n        org.chromium.ui.R.string.time_picker_dialog_title =\n                R.string.time_picker_dialog_title;\n        org.chromium.ui.R.string.week_picker_dialog_title =\n                R.string.week_picker_dialog_title;\n        org.chromium.ui.R.string.copy_to_clipboard_failure_message =\n                R.string.copy_to_clipboard_failure_message;\n        org.chromium.ui.R.string.low_memory_error =\n                R.string.low_memory_error;\n        org.chromium.ui.R.string.opening_file_error =\n                R.string.opening_file_error;\n        org.chromium.ui.R.string.color_picker_button_more =\n                R.string.color_picker_button_more;\n        org.chromium.ui.R.string.color_picker_hue =\n                R.string.color_picker_hue;\n        org.chromium.ui.R.string.color_picker_saturation =\n                R.string.color_picker_saturation;\n        org.chromium.ui.R.string.color_picker_value =\n                R.string.color_picker_value;\n        org.chromium.ui.R.string.color_picker_button_set =\n                R.string.color_picker_button_set;\n        org.chromium.ui.R.string.color_picker_button_cancel =\n                R.string.color_picker_button_cancel;\n        org.chromium.ui.R.string.color_picker_dialog_title =\n                R.string.color_picker_dialog_title;\n        org.chromium.ui.R.string.color_picker_button_red =\n                R.string.color_picker_button_red;\n        org.chromium.ui.R.string.color_picker_button_cyan =\n                R.string.color_picker_button_cyan;\n        org.chromium.ui.R.string.color_picker_button_blue =\n                R.string.color_picker_button_blue;\n        org.chromium.ui.R.string.color_picker_button_green =\n                R.string.color_picker_button_green;\n        org.chromium.ui.R.string.color_picker_button_magenta =\n                R.string.color_picker_button_magenta;\n        org.chromium.ui.R.string.color_picker_button_yellow =\n                R.string.color_picker_button_yellow;\n        org.chromium.ui.R.string.color_picker_button_black =\n                R.string.color_picker_button_black;\n        org.chromium.ui.R.string.color_picker_button_white =\n                R.string.color_picker_button_white;\n        org.chromium.content.R.style.SelectPopupDialog =\n                R.style.SelectPopupDialog;\n        org.chromium.ui.R.style.DropdownPopupWindow =\n                R.style.DropdownPopupWindow;\n\n\n        if (false) {\n            verifyFields(org.chromium.content.R.class);\n            verifyFields(org.chromium.ui.R.class);\n        }\n\n\n        \n\n        sInitialized = true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static List<ClassParams> getApplicable(Instances instances, String paramDirName, Testable type, List<String> allowed, List<String> options)\n    {\n        File paramDir = new File(paramDirName);\n        if(!paramDir.exists() || !paramDir.isDirectory())\n        {\n            throw new RuntimeException(paramDirName + \" is not a valid directory\");\n        }\n        FileFilter paramFilter = new FileFilter() {\n            public boolean accept(File file) {\n                return file.getName().endsWith(\".params\") && !file.getName().startsWith(\".\");\n            }\n        };\n\n        ArrayList<String> names = new ArrayList<String>();\n        File[] params = paramDir.listFiles(paramFilter);\n        for(File i:params)\n        {\n           names.add(Util.removeExtension(i.getName()));\n        }\n        java.util.Collections.sort(names);\n\n        ArrayList<ClassParams> goodMethods = new ArrayList<ClassParams>();\n\n        for(String name: names)\n        {\n            if(allowed != null && !allowed.contains(name))\n                continue;\n            if(isApplicable(name, instances, options, type))\n            {\n                goodMethods.add(new ClassParams(paramDirName + File.separatorChar + name + \".params\"));\n            }\n        }\n        return goodMethods;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static String getActionName(ActionListener listener)\n\t{\n\t\tEnumeration enu = getActions();\n\t\twhile(enu.hasMoreElements())\n\t\t{\n\t\t\tString name = (String)enu.nextElement();\n\t\t\tActionListener _listener = getAction(name);\n\t\t\tif(_listener == listener)\n\t\t\t\treturn name;\n\t\t}\n\t\treturn null;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String getActionName(ActionListener listener) {\n        Enumeration enumActions = getActions();\n        while(enumActions.hasMoreElements()) {\n            String name = (String)enumActions.nextElement();\n            ActionListener _listener = getAction(name);\n            if(_listener == listener)\n                return name;\n        }\n        return null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Class<?>[] parseTypes(String arg) {\n        String[] names = parseTypeNames(arg);\n        Class<?>[] objs = new Class[names.length];\n        for (int i = 0; i < names.length; i++)\n            objs[i] = ClassUtil.toClass(names[i], _loader);\n        return objs;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void quadrantRotate(int numquadrants) {\n        switch (numquadrants & 3) {\n        case 0:\n            break;\n        case 1:\n            rotate90();\n            break;\n        case 2:\n            rotate180();\n            break;\n        case 3:\n            rotate270();\n            break;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String getActionName(ActionListener listener) {\n        Enumeration enumActions = getActions();\n        while(enumActions.hasMoreElements()) {\n            String name = (String)enumActions.nextElement();\n            ActionListener _listener = getAction(name);\n            if(_listener == listener)\n                return name;\n        }\n        return null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void doGenerate(final Resource resource, final IFileSystemAccess fsa) {\n    EList<EObject> _contents = resource.getContents();\n    EObject _head = IterableExtensions.<EObject>head(_contents);\n    Model model = ((Model) _head);\n    SqliteDatabaseSnapshot.Builder _get = this.mDbSnapshotBuilderProvider.get();\n    final SqliteDatabaseSnapshot snapshot = _get.build(model);\n    String _packageName = model.getPackageName();\n    DatabaseBlock _database = model.getDatabase();\n    String _name = _database.getName();\n    String _pascalize = Strings.pascalize(_name);\n    String _concat = \"Abstract\".concat(_pascalize);\n    String _concat_1 = _concat.concat(\"OpenHelper\");\n    String _resolveFileName = Strings.resolveFileName(_packageName, _concat_1);\n    CharSequence _generate = this.mOpenHelperGenerator.generate(model, snapshot);\n    fsa.generateFile(_resolveFileName, _generate);\n    String _packageName_1 = model.getPackageName();\n    DatabaseBlock _database_1 = model.getDatabase();\n    String _name_1 = _database_1.getName();\n    String _pascalize_1 = Strings.pascalize(_name_1);\n    String _concat_2 = _pascalize_1.concat(\"OpenHelper\");\n    String _resolveFileName_1 = Strings.resolveFileName(_packageName_1, _concat_2);\n    CharSequence _generateStub = this.mOpenHelperGenerator.generateStub(model, snapshot);\n    fsa.generateFile(_resolveFileName_1, \n      MechanoidOutputConfigurationProvider.DEFAULT_STUB_OUTPUT, _generateStub);\n    String _packageName_2 = model.getPackageName();\n    DatabaseBlock _database_2 = model.getDatabase();\n    String _name_2 = _database_2.getName();\n    String _pascalize_2 = Strings.pascalize(_name_2);\n    String _concat_3 = _pascalize_2.concat(\"Contract\");\n    String _resolveFileName_2 = Strings.resolveFileName(_packageName_2, _concat_3);\n    CharSequence _generate_1 = this.mContentProviderContractGenerator.generate(model, snapshot);\n    fsa.generateFile(_resolveFileName_2, _generate_1);\n    String _packageName_3 = model.getPackageName();\n    DatabaseBlock _database_3 = model.getDatabase();\n    String _name_3 = _database_3.getName();\n    String _pascalize_3 = Strings.pascalize(_name_3);\n    String _concat_4 = \"Abstract\".concat(_pascalize_3);\n    String _concat_5 = _concat_4.concat(\"ContentProvider\");\n    String _resolveFileName_3 = Strings.resolveFileName(_packageName_3, _concat_5);\n    CharSequence _generate_2 = this.mContentProviderGenerator.generate(model, snapshot);\n    fsa.generateFile(_resolveFileName_3, _generate_2);\n    String _packageName_4 = model.getPackageName();\n    DatabaseBlock _database_4 = model.getDatabase();\n    String _name_4 = _database_4.getName();\n    String _pascalize_4 = Strings.pascalize(_name_4);\n    String _concat_6 = _pascalize_4.concat(\"ContentProvider\");\n    String _resolveFileName_4 = Strings.resolveFileName(_packageName_4, _concat_6);\n    CharSequence _generateStub_1 = this.mContentProviderGenerator.generateStub(model, snapshot);\n    fsa.generateFile(_resolveFileName_4, \n      MechanoidOutputConfigurationProvider.DEFAULT_STUB_OUTPUT, _generateStub_1);\n    Collection<CreateTableStatement> _tables = snapshot.getTables();\n    final Procedure1<CreateTableStatement> _function = new Procedure1<CreateTableStatement>() {\n      public void apply(final CreateTableStatement statement) {\n        SqliteModelGenerator.this.generateActiveRecordEntity(resource, fsa, ((CreateTableStatement) statement));\n      }\n    };\n    IterableExtensions.<CreateTableStatement>forEach(_tables, _function);\n    Collection<CreateViewStatement> _views = snapshot.getViews();\n    final Procedure1<CreateViewStatement> _function_1 = new Procedure1<CreateViewStatement>() {\n      public void apply(final CreateViewStatement statement) {\n        SqliteModelGenerator.this.generateActiveRecordEntity(resource, fsa, ((CreateViewStatement) statement));\n      }\n    };\n    IterableExtensions.<CreateViewStatement>forEach(_views, _function_1);\n    Collection<CreateTableStatement> _configInitTables = ModelUtil.getConfigInitTables(model);\n    final Procedure1<CreateTableStatement> _function_2 = new Procedure1<CreateTableStatement>() {\n      public void apply(final CreateTableStatement statement) {\n        SqliteModelGenerator.this.generateActiveRecordEntity(resource, fsa, ((CreateTableStatement) statement));\n      }\n    };\n    IterableExtensions.<CreateTableStatement>forEach(_configInitTables, _function_2);\n    Collection<CreateViewStatement> _configInitViews = ModelUtil.getConfigInitViews(model);\n    final Procedure1<CreateViewStatement> _function_3 = new Procedure1<CreateViewStatement>() {\n      public void apply(final CreateViewStatement statement) {\n        SqliteModelGenerator.this.generateActiveRecordEntity(resource, fsa, ((CreateViewStatement) statement));\n      }\n    };\n    IterableExtensions.<CreateViewStatement>forEach(_configInitViews, _function_3);\n    DatabaseBlock _database_5 = model.getDatabase();\n    EList<MigrationBlock> _migrations = _database_5.getMigrations();\n    final Procedure2<MigrationBlock, Integer> _function_4 = new Procedure2<MigrationBlock, Integer>() {\n      public void apply(final MigrationBlock item, final Integer index) {\n        SqliteModelGenerator.this.generateMigration(resource, fsa, item, ((index).intValue() + 1));\n      }\n    };\n    IterableExtensions.<MigrationBlock>forEach(_migrations, _function_4);\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprotected void init() {\n        taskTimeout = new Runnable() {\n            @Override\n            public void run() {\n                pendingDataProcessors= null;\n                for(byte it: successfulProcessors) {\n                    removeProcessor(true, it);\n                }\n                createProcessorsTask.setError(new TimeoutException(\"Creating data processor timed out\"));\n            }\n        };\n\n        this.mwPrivate.addResponseHandler(new Pair<>(DATA_PROCESSOR.id, ADD), new JseMetaWearBoard.RegisterResponseHandler() {\n            @Override\n            public void onResponseReceived(byte[] response) {\n                timeoutFuture.cancel(false);\n\n                Processor current = pendingDataProcessors.poll();\n                current.editor.source.eventConfig[2]= response[2];\n                if (current.state != null) {\n                    current.state.eventConfig[2] = response[2];\n                }\n                activeProcessors.put(response[2], current);\n                successfulProcessors.add(response[2]);\n\n                createProcessor();\n            }\n        });\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void handlePatch(final PatchParam patchParam) throws Throwable {\n        {\n            Class<?> cls = null;\n            try {\n                cls= patchParam.context.getClass().getClassLoader().loadClass(\"com.taobao.dexposed.TestFragment\");\n            } catch (Exception e) {\n                e.printStackTrace();\n                return;\n            }\n            Log.e(TAG, \"cls:\" + cls);\n            DexposedBridge.findAndHookMethod(cls, \"getText\", new XC_MethodReplacement() {\n                @Override\n                protected Object replaceHookedMethod(MethodHookParam methodHookParam) throws Throwable {\n                    Log.e(TAG, \"methodHookParam:\" + methodHookParam.method.getName());\n                    return \"from patch\";\n                }\n            });\n\n            DexposedBridge.findAndHookMethod(cls, \"onCreateView\", LayoutInflater.class, ViewGroup.class, Bundle.class, new XC_MethodReplacement() {\n                @Override\n                protected Object replaceHookedMethod(MethodHookParam methodHookParam) throws Throwable {\n                    ViewGroup view = (ViewGroup) methodHookParam.args[1];\n                    TextView tv = new TextView(view.getContext());\n                    tv.setText(\"replace onCreateView\");\n                    return tv;\n                }\n            });\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void adaptToEnablementChange(HighlightingStyle highlighting,\n\t\t\tPropertyChangeEvent event) {\n\t\tObject value = event.getNewValue();\n\t\tboolean eventValue;\n\t\tif (value instanceof Boolean)\n\t\t\teventValue = ((Boolean) value).booleanValue();\n\t\telse if (IPreferenceStore.TRUE.equals(value))\n\t\t\teventValue = true;\n\t\telse\n\t\t\teventValue = false;\n\t\thighlighting.setEnabled(eventValue);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static <N extends RootedDAGNode<N>> List<N> topologicalSort(N root) throws GraphException {\n\t\tList<N> queued = new ArrayList<N>();\n\t\tqueued.add(root);\n\t\tint i=0;\n\t\twhile (i<queued.size()) {\n\t\t\tN n = queued.get(i);\n\t\t\tfor (N c : n.getChildren()) {\n\t\t\t\tif (!queued.contains(c))\n\t\t\t\t\tqueued.add(c);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tCollections.reverse(queued);\n\t\tList<N> sorted = new ArrayList<N>();\n\t\ti = 0;\n\t\twhile (!queued.isEmpty()) {\n\t\t\ti = queued.size()-1;\n\t\t\twhile (i>=0) {\n\t\t\t\tN n = queued.get(i);\n\t\t\t\tboolean allParentsSorted = true;\n\t\t\t\tfor (N p : n.getParents()) {\n\t\t\t\t\tif (!sorted.contains(p)) {\n\t\t\t\t\t\tallParentsSorted = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (allParentsSorted) {\n\t\t\t\t\tsorted.add(queued.remove(i));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tif (i==-1)\n\t\t\t\tthrow new GraphException(\"Cannot produce a topological sort: not a DAG\");\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic WebSocketServer( InetSocketAddress address , int decodercount , List<Draft> drafts , Collection<WebSocket> connectionscontainer ) {\n\t\tif( address == null || decodercount < 1 || connectionscontainer == null ) {\n\t\t\tthrow new IllegalArgumentException( \"address and connectionscontainer must not be null and you need at least 1 decoder\" );\n\t\t}\n\n\t\tif( drafts == null )\n\t\t\tthis.drafts = Collections.emptyList();\n\t\telse\n\t\t\tthis.drafts = drafts;\n\n\t\tthis.address = address;\n\t\tthis.connections = connectionscontainer;\n\t\tsetTcpNoDelay(false);\n\t\tiqueue = new LinkedList<WebSocketImpl>();\n\n\t\tdecoders = new ArrayList<WebSocketWorker>( decodercount );\n\t\tbuffers = new LinkedBlockingQueue<ByteBuffer>();\n\t\tfor( int i = 0 ; i < decodercount ; i++ ) {\n\t\t\tWebSocketWorker ex = new WebSocketWorker();\n\t\t\tdecoders.add( ex );\n\t\t\tex.start();\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static <N extends RootedDAGNode<N>> List<N> topologicalSort(N root) throws GraphException {\n\t\tList<N> queued = new ArrayList<N>();\n\t\tqueued.add(root);\n\t\tint i=0;\n\t\twhile (i<queued.size()) {\n\t\t\tN n = queued.get(i);\n\t\t\tfor (N c : n.getChildren()) {\n\t\t\t\tif (!queued.contains(c))\n\t\t\t\t\tqueued.add(c);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tCollections.reverse(queued);\n\t\tList<N> sorted = new ArrayList<N>();\n\t\ti = 0;\n\t\twhile (!queued.isEmpty()) {\n\t\t\ti = queued.size()-1;\n\t\t\twhile (i>=0) {\n\t\t\t\tN n = queued.get(i);\n\t\t\t\tboolean allParentsSorted = true;\n\t\t\t\tfor (N p : n.getParents()) {\n\t\t\t\t\tif (!sorted.contains(p)) {\n\t\t\t\t\t\tallParentsSorted = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (allParentsSorted) {\n\t\t\t\t\tsorted.add(queued.remove(i));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tif (i==-1)\n\t\t\t\tthrow new GraphException(\"Cannot produce a topological sort: not a DAG\");\n\t\t}\n\t\treturn sorted;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(java.lang.String xmlAsString) throws org.apache.xmlbeans.XmlException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( xmlAsString, type, null ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static Class toClass(String str, boolean resolve,\n                                ClassLoader loader) {\n        if (str == null) {\n            throw new NullPointerException(\"str == null\");\n        }\n\n        int dims = 0;\n        while (str.endsWith(\"[]\")) {\n            dims++;\n            str = str.substring(0, str.length() - 2);\n        }\n\n        boolean primitive = false;\n        if (str.indexOf('.') == -1) {\n            for (int i = 0; !primitive && (i < _codes.length); i++) {\n                if (_codes[i][1].equals(str)) {\n                    if (dims == 0) {\n                        return (Class) _codes[i][0];\n                    }\n                    str = (String) _codes[i][2];\n                    primitive = true;\n                }\n            }\n        }\n\n        if (dims > 0) {\n            StringBuilder buf = new StringBuilder(str.length() + dims + 2);\n            for (int i = 0; i < dims; i++) {\n                buf.append('[');\n            }\n            if (!primitive) {\n                buf.append('L');\n            }\n            buf.append(str);\n            if (!primitive) {\n                buf.append(';');\n            }\n            str = buf.toString();\n        }\n\n        if (loader == null) {\n            loader = Thread.currentThread().getContextClassLoader();\n        }\n\n        try {\n            return Class.forName(str, resolve, loader);\n        }\n        catch (ClassNotFoundException | NoClassDefFoundError e) {\n            throw new IllegalArgumentException(e.getMessage());\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        \n        byte[] byteArray = new byte[bytes.size()]; \n        bytes.getBytes(byteArray, 0);\n        return Utf8Utils.utf8BytesToString(byteArray);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        protected void execute2() {\n            versionTo = 24;\n\n            sql = \"DROP TABLE IF EXISTS newuser\";\n            DbUtils.execSQL(db, sql);\n\n            sql = \"UPDATE user SET user_created_date = 0 WHERE user_created_date IS NULL\";\n            DbUtils.execSQL(db, sql);\n            sql = \"UPDATE user SET user_oid = ('andstatustemp:' || _id) WHERE user_oid IS NULL\";\n            DbUtils.execSQL(db, sql);\n\n            sql = \"CREATE TABLE newuser (_id INTEGER PRIMARY KEY AUTOINCREMENT,origin_id INTEGER NOT NULL,user_oid TEXT,username TEXT NOT NULL,webfinger_id TEXT NOT NULL,real_name TEXT,user_description TEXT,location TEXT,profile_url TEXT,homepage TEXT,avatar_url TEXT,banner_url TEXT,msg_count INTEGER DEFAULT 0 NOT NULL,favorited_count INTEGER DEFAULT 0 NOT NULL,following_count INTEGER DEFAULT 0 NOT NULL,followers_count INTEGER DEFAULT 0 NOT NULL,user_created_date INTEGER,user_updated_date INTEGER,user_ins_date INTEGER NOT NULL,home_timeline_position TEXT DEFAULT '' NOT NULL,home_timeline_item_date INTEGER DEFAULT 0 NOT NULL,home_timeline_date INTEGER DEFAULT 0 NOT NULL,favorites_timeline_position TEXT DEFAULT '' NOT NULL,favorites_timeline_item_date INTEGER DEFAULT 0 NOT NULL,favorites_timeline_date INTEGER DEFAULT 0 NOT NULL,direct_timeline_position TEXT DEFAULT '' NOT NULL,direct_timeline_item_date INTEGER DEFAULT 0 NOT NULL,direct_timeline_date INTEGER DEFAULT 0 NOT NULL,mentions_timeline_position TEXT DEFAULT '' NOT NULL,mentions_timeline_item_date INTEGER DEFAULT 0 NOT NULL,mentions_timeline_date INTEGER DEFAULT 0 NOT NULL,user_timeline_position TEXT DEFAULT '' NOT NULL,user_timeline_item_date INTEGER DEFAULT 0 NOT NULL,user_timeline_date INTEGER DEFAULT 0 NOT NULL,following_user_date INTEGER DEFAULT 0 NOT NULL,followers_user_date INTEGER DEFAULT 0 NOT NULL,user_msg_id INTEGER DEFAULT 0 NOT NULL,user_msg_date INTEGER DEFAULT 0 NOT NULL)\";\n            DbUtils.execSQL(db, sql);\n            sql = \"INSERT INTO newuser (\" +\n                    \" _id, origin_id, user_oid, username, webfinger_id, real_name, user_description, location,\" +\n                    \" profile_url, homepage, avatar_url, banner_url,\" +\n                    \" msg_count, favorited_count, following_count, followers_count,\" +\n                    \" user_created_date, user_updated_date, user_ins_date,\" +\n                    \" home_timeline_position, home_timeline_item_date, home_timeline_date, favorites_timeline_position, favorites_timeline_item_date, favorites_timeline_date, direct_timeline_position, direct_timeline_item_date, direct_timeline_date, mentions_timeline_position, mentions_timeline_item_date, mentions_timeline_date, user_timeline_position, user_timeline_item_date, user_timeline_date,\" +\n                    \" following_user_date, followers_user_date, user_msg_id, user_msg_date\" +\n                    \") SELECT \" +\n                    \" _id, origin_id, user_oid, username, webfinger_id, real_name, user_description, NULL,\" +\n                    \" url,         homepage, avatar_url, NULL,\" +\n                    \"         0,               0,               0,               0,\" +\n                    \" user_created_date,                 0, user_ins_date,\" +\n                    \" home_timeline_position, home_timeline_item_date, home_timeline_date, favorites_timeline_position, favorites_timeline_item_date, favorites_timeline_date, direct_timeline_position, direct_timeline_item_date, direct_timeline_date, mentions_timeline_position, mentions_timeline_item_date, mentions_timeline_date, user_timeline_position, user_timeline_item_date, user_timeline_date,\" +\n                    \" following_user_date,                   0, user_msg_id, user_msg_date\" +\n                    \" FROM user\";\n            DbUtils.execSQL(db, sql);\n\n            sql = \"DROP INDEX idx_user_origin\";\n            DbUtils.execSQL(db, sql);\n            sql = \"DROP TABLE user\";\n            DbUtils.execSQL(db, sql);\n\n            sql = \"ALTER TABLE newuser RENAME TO user\";\n            DbUtils.execSQL(db, sql);\n            try {\n                sql = \"CREATE UNIQUE INDEX idx_user_origin ON user (origin_id, user_oid)\";\n                DbUtils.execSQL(db, sql);\n            } catch (Exception e) {\n                MyLog.i(this, \"Couldn't create unique constraint\", e);\n                sql = \"CREATE INDEX idx_user_origin ON user (origin_id, user_oid)\";\n                DbUtils.execSQL(db, sql);\n            }\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate Path computeBootClassPath() {\n        bootClassPathRtJar = null;\n        String optionValue;\n        Path path = new Path();\n\n        Map<String,String> envs = System.getenv();\n\n        path.addFiles(envs.get(\"BOOTCLASSPATH\"));\n\n        \n        \n        return path;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; } \n        return retVal;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate String nextSignature() {\n        char key = signature.charAt(currentIndex++);\n\n        switch(key) {\n            case '[':\n                return  key + nextSignature();\n\n            case 'L':\n                int endClass = signature.indexOf(SIGNATURE_ENDCLASS,\n                                                 currentIndex);\n                String retVal = signature.substring(currentIndex - 1,\n                                                    endClass + 1);\n                currentIndex = endClass + 1;\n                return retVal;\n\n            case 'V':\n            case 'Z':\n            case 'B':\n            case 'C':\n            case 'S':\n            case 'I':\n            case 'J':\n            case 'F':\n            case 'D':\n                return String.valueOf(key);\n\n            case SIGNATURE_FUNC:\n            case SIGNATURE_ENDFUNC:\n                return nextSignature();\n\n            default:\n                throw new IllegalArgumentException(\n                    \"Invalid JNI signature character '\" + key + \"'\");\n\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public <T> List<T> toBeanList(ResultSet rs, Class<? extends T> type) throws SQLException {\n        List<T> results = new ArrayList<T>();\n\n        if (!rs.next()) {\n            return results;\n        }\n\n        PropertyDescriptor[] props = this.propertyDescriptors(type);\n        ResultSetMetaData rsmd = rs.getMetaData();\n        int[] columnToProperty = this.mapColumnsToProperties(rsmd, props);\n\n        do {\n            results.add(this.createBean(rs, type, props, columnToProperty));\n        } while (rs.next());\n\n        return results;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void ReadCommonRecord(NBTTagCompound tag) {\n        super.ReadCommonRecord(tag);\n\n        Continuous = tag.getBoolean(\"Continuous\");\n\n        for (Directions Direction : Directions.values()) {\n            SideClosed[Direction.ordinal()] = tag.getBoolean(\"SideClosed\" + Direction.ordinal());\n        }\n\n        Active = tag.getBoolean(\"Active\");\n\n        Tier = tag.getInteger(\"Tier\");\n\n        energyStored = tag.getInteger(\"energyStored\");\n\n        requiresScrewdriverToOpen=tag.getBoolean(\"screwdriver\");\n\n        isAnchored=tag.getBoolean(\"anchored\");\n\n        personalDurationInTicks = tag.getInteger(\"PersonalDuration\");\n\n        zeroContinuousCooldown = tag.getBoolean(\"ForceZeroCooldown\");\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void addFooterView(View v, Object data, boolean isSelectable) {\n        FixedViewInfo info = new FixedViewInfo();\n        info.view = v;\n        info.data = data;\n        info.isSelectable = isSelectable;\n        mFooterViewInfos.add(info);\n\n        if (mDataSetObserver != null) {\n            mDataSetObserver.onChanged();\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String getActionName(ActionListener listener) {\n        Enumeration enumActions = getActions();\n        while(enumActions.hasMoreElements()) {\n            String name = (String)enumActions.nextElement();\n            ActionListener _listener = getAction(name);\n            if(_listener == listener)\n                return name;\n        }\n        return null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nvoid moveView(float _deltaX, float _deltaY){\n\t\t\n\t\t\n\t\t GLOBAL.CAM_OFFSET_X +=  _deltaX;\n\t\t GLOBAL.CAM_OFFSET_Y +=  _deltaY;\n\t\n\t\t \n\t\t float leftEdge = (float) (GLOBAL.CAM_OFFSET_X - ((GLOBAL.applet.width/2)/GLOBAL.ZOOM));\n\t\t\tif(leftEdge < SETTINGS.MIN_CAM_X_OFFSET)\n\t\t\t\tGLOBAL.CAM_OFFSET_X = SETTINGS.MIN_CAM_X_OFFSET + ((GLOBAL.applet.width/2)/GLOBAL.ZOOM);\n\t\t\t\n\t\t\t\n\t\t\t float rightEdge = (float) (GLOBAL.CAM_OFFSET_X + ((GLOBAL.applet.width/2)/GLOBAL.ZOOM));\n\t\t\tif(rightEdge > SETTINGS.MAX_CAM_X_OFFSET)\n\t\t\t\tGLOBAL.CAM_OFFSET_X = SETTINGS.MAX_CAM_X_OFFSET - ((GLOBAL.applet.width/2)/GLOBAL.ZOOM);\n\t\t\t\n\t\t\tdouble topEdge = (double) GLOBAL.CAM_OFFSET_Y + ((GLOBAL.applet.height/2)/GLOBAL.ZOOM);\n\t\t\tif(topEdge > SETTINGS.MAX_CAM_Y_OFFSET)\n\t\t\t\tGLOBAL.CAM_OFFSET_Y = SETTINGS.MAX_CAM_Y_OFFSET - ((GLOBAL.applet.height/2)/GLOBAL.ZOOM);\n\t\t\t\n\t\t\tfloat bottomEdge = (float) (GLOBAL.CAM_OFFSET_Y - ((GLOBAL.applet.height/2)/GLOBAL.ZOOM));\n\t\t\tif(bottomEdge < SETTINGS.MIN_CAM_Y_OFFSET)\n\t\t\t\tGLOBAL.CAM_OFFSET_Y = SETTINGS.MIN_CAM_Y_OFFSET + ((GLOBAL.applet.height/2)/GLOBAL.ZOOM);\n\t\t\t\n\t\t \n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic void doGenerate(IProgressMonitor monitor) throws IOException {\n\t\tif (!targetFolder.getLocation().toFile().exists()) {\n\t\t\ttargetFolder.getLocation().toFile().mkdirs();\n\t\t}\n\t\t\n\t\tmonitor.subTask(\"Loading...\");\n\t\tcom.github.lbroudoux.dsl.eip.gen.camel.main.GenerateXmlRoutes gen0 = new com.github.lbroudoux.dsl.eip.gen.camel.main.GenerateXmlRoutes(modelURI, targetFolder.getLocation().toFile(), arguments);\n\t\tmonitor.worked(1);\n\t\tString generationID = org.eclipse.acceleo.engine.utils.AcceleoLaunchingUtil.computeUIProjectID(\"com.github.lbroudoux.dsl.eip.gen.camel\", \"com.github.lbroudoux.dsl.eip.gen.camel.main.GenerateJavaRoutes\", modelURI.toString(), targetFolder.getFullPath().toString(), new ArrayList<String>());\n\t\tgen0.setGenerationID(generationID);\n\t\tgen0.doGenerate(BasicMonitor.toMonitor(monitor));\n\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        public static String getActionName(ActionListener listener)\n        {\n                Enumeration en = getActions();\n                while(en.hasMoreElements())\n                {\n                        String name = (String)en.nextElement();\n                        ActionListener _listener = getAction(name);\n                        if(_listener == listener) {\n                                return name;\n                        }\n                }\n                return null;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public PartitionLoad getLoad() throws IOException{\n        Map<ServerName, List<HRegionInfo>> serverToRegionMap=new HashMap<>();\n        try(RegionLocator rl=connection.getRegionLocator(tableName)){\n            List<HRegionLocation> locations=rl.getAllRegionLocations();\n            for(HRegionLocation location : locations){\n                List<HRegionInfo> info=serverToRegionMap.get(location.getServerName());\n                if(info==null){\n                    info = new LinkedList<>();\n                    serverToRegionMap.put(location.getServerName(),info);\n                }\n                info.add(location.getRegionInfo());\n            }\n        }\n        int totalStoreFileSizeMB = 0;\n        int totalMemstoreSieMB = 0;\n        int storefileIndexSizeMB = 0;\n        try(Admin admin=connection.getAdmin()){\n            ClusterStatus clusterStatus=admin.getClusterStatus();\n            for(Map.Entry<ServerName,List<HRegionInfo>> entry:serverToRegionMap.entrySet()){\n                ServerLoad load=clusterStatus.getLoad(entry.getKey());\n                Map<byte[], RegionLoad> regionsLoad=load.getRegionsLoad();\n                for(HRegionInfo info:entry.getValue()){\n                    RegionLoad rl = regionsLoad.get(info.getRegionName());\n                    totalStoreFileSizeMB+=rl.getStorefileSizeMB();\n                    totalMemstoreSieMB+=rl.getMemStoreSizeMB();\n                    storefileIndexSizeMB+=rl.getStorefileIndexSizeMB();\n                }\n            }\n        }\n        return new HPartitionLoad(getName(),totalStoreFileSizeMB,totalMemstoreSieMB,storefileIndexSizeMB);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private void addEntries(String newEntries, String modifications, String comment) {\n        boolean modified = false;\n        int childcount = 0;\n        String lastadded = null;\n        DefaultMutableTreeNode insert = (DefaultMutableTreeNode) jTreeDesktop.getLastSelectedPathComponent();\n        if (!insert.getAllowsChildren()) {\n            DefaultMutableTreeNode parent = (DefaultMutableTreeNode) insert.getParent();\n            childcount = parent.getIndex(insert) + 1;\n            insert = parent;\n        }\n        int[] entries = Tools.retrieveEntryNumbersFromInput(newEntries, dataObj.getCount(Daten.ZKNCOUNT));\n        LinkedList<Integer> multipleEntries = new LinkedList<>();\n        showMultipleEntryMsg = true;\n        if (entries != null) {\n            for (int cnt : entries) {\n                if (noDoubleEntries(insert, cnt)) {\n                    for (int me = 0; me < desktopObj.getCount(); me++) {\n                        if (desktopObj.checkForDoubleEntry(me, cnt)) {\n                            multipleEntries.add(cnt);\n                        }\n                    }\n                    lastadded = desktopObj.addEntry(TreeUtil.getNodeTimestamp(insert),\n                            String.valueOf(cnt),\n                            childcount);\n                    if (modifications != null && !modifications.isEmpty()) {\n                        desktopObj.addModifiedEntry(lastadded, modifications);\n                    }\n                    if (comment != null && !comment.isEmpty()) {\n                        desktopObj.setComment(lastadded, comment);\n                    }\n                    modified = true;\n                    childcount++;\n                }\n            }\n        }\n        if (modified) {\n            updateTreeView();\n            selectTreePath(lastadded);\n            showMultipleOccurencesMessage(Tools.retrieveDoubleEntries(desktopObj, multipleEntries));\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static boolean putMapNotEmptyKeyAndValue(Map<String, String> map, String key, String value,\n            String defaultValue) {\n        if (map == null || StringUtils.isEmpty(key)) {\n            return false;\n        }\n\n        map.put(key, StringUtils.isEmpty(value) ? defaultValue : value);\n        return true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n        logger.trace(\"Start handling inactive event for client {}\", this.clientId);\n\n        if (this.connected) {\n\n            logger.debug(\"Connection closed: Connection lost from client {} user {}\", this.clientId, this.userName);\n\n            boolean redirect = handleConnectLost(ctx);\n\n            if (redirect)\n                logger.trace(\"Send a copy of DISCONNECT message from client {} to 3rd party application\", this.clientId);\n            this.cluster.sendToApplication(new Message<>(\n                    new MqttFixedHeader(MqttMessageType.DISCONNECT, false, MqttQoS.AT_MOST_ONCE, false, 0),\n                    new MqttAdditionalHeader(this.version, this.clientId, this.userName, this.brokerId), null, null));\n\n            if (this.willMessage != null) {\n\n                MqttQoS willQos = this.willMessage.fixedHeader().qos();\n                String willTopic = this.willMessage.variableHeader().topicName();\n                boolean willRetain = this.willMessage.fixedHeader().retain();\n\n                AuthorizeResult result = this.authenticator.authPublish(this.clientId, this.userName, willTopic, willQos.value(), willRetain);\n                if (result == AuthorizeResult.OK) {\n                    logger.trace(\"Authorization WILL message succeeded on topic {} for client {}\", willTopic, this.clientId);\n\n                    onwardRecipients(this.willMessage, Message.fromMqttMessage(this.willMessage, this.version, this.clientId, this.userName, this.brokerId).payload());\n                }\n                else {\n                    logger.trace(\"Authorization WILL message failed on topic {} for client {}\", willTopic, this.clientId);\n                }\n            }\n        }\n\n        logger.trace(\"Finish handling inactive event for client {}\", this.clientId);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static String getMsgWithLineNumber(String msg) {\n        try {\n            for (StackTraceElement st : (new Throwable()).getStackTrace()) {\n                if (mClassname.equals(st.getClassName()) || mMethods.contains(st.getMethodName())) {\n                    continue;\n                } else {\n                    int b = st.getClassName().lastIndexOf(\".\") + 1;\n                    String message = new StringBuilder(st.getClassName().substring(b)).append(\"->\").append(st.getMethodName())\n                            .append(\"():\").append(st.getLineNumber()).append(msg).toString();\n                    return message;\n                }\n\n            }\n        } catch (Exception e) {\n\n        }\n        return msg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprotected SynonymParser getParser(Analyzer analyzer) {\n    \t\n    \tchar sep = ',';\n    \tif (args.containsKey(\"format\") && args.get(\"format\").equals(\"semicolon\")) {\n    \t\tsep = ';';\n    \t};\n    \t\n    \tfinal Character charSeparator = sep;\n    \t\n      return new NewSolrSynonymParser(true, true, analyzer) {\n\n        public void add(Reader in) throws IOException, ParseException {\n          LineNumberReader br = new LineNumberReader(in);\n          StringBuffer newBr = new StringBuffer();\n          String line = null;\n          \n          String[] parts;\n          \n          try {\n            while ((line = br.readLine()) != null) {\n              if (line.length() == 0 || line.charAt(0) == '#') {\n                continue; // ignore empty lines and comments\n              }\n              String[] sides = line.split(\"=>\");\n              if (sides.length > 1) { // explicit mapping\n                String[] names = getNames(sides[1]);\n                parts = AuthorUtils.splitName(sides[0]);\n                if (isLongForm(parts) && containsLongForm(names) > 0) {\n                  newBr.append(escape(makeShortForm(parts)) + \"=>\" +\n                      sides[0] + \",\" +\n                      buildLine(names));\n                  newBr.append(\"\\n\");\n                }\n              }\n              else {\n                String[] names = getNames(sides[0]);\n                if (containsLongForm(names) > 1) {\n                  String newLine = buildLine(names);\n                  for (int i=0;i<names.length;i++) {\n                  \tparts = AuthorUtils.splitName(sides[i]);\n                    if (isLongForm(parts)) {\n                      newBr.append(escape(makeShortForm(parts)) + \"=>\" +\n                          newLine);\n                      newBr.append(\"\\n\");\n                    }\n                  }\n                }\n              }\n            }\n          } catch (IllegalArgumentException e) {\n            ParseException ex = new ParseException(\"Invalid synonym rule at line \" + br.getLineNumber(), 0);\n            ex.initCause(e);\n            throw ex;\n          } finally {\n            br.close();\n          }\n          \n          super.add(new InputStreamReader(new ByteArrayInputStream(newBr.toString().getBytes()),\n              Charset.forName(\"UTF-8\").newDecoder()));\n\n        }\n        @Override\n        public void add(CharsRef input, CharsRef output, boolean includeOrig) {\n          super.add(input, output, true);\n        }\n        \n        private String[] getNames(String vals) {\n          List<String> nn = StrUtils.splitSmart(vals, charSeparator);\n          String names[] = new String[nn.size()];\n          int j = 0;\n          for (String n: nn) {\n            names[j] = unescape(n);\n            j++;\n          }\n          return names;\n        }\n        private String buildLine(String[] names) {\n          HashSet<String> set = new HashSet<String>();\n          StringBuilder out = new StringBuilder();\n          boolean notFirst = false;\n          \n          for (String name: names) {\n            \n            String[] p = AuthorUtils.splitName(name);\n            if (isLongForm(p)) {\n              set.add(makeShortForm(p));\n            }\n            set.add(name);\n          }\n          for (String name: set) {\n            if (notFirst) out.append(\",\");\n            out.append(escape(name));\n            notFirst = true;\n          }\n          return out.toString();\n        }\n        \n        \n        private String unescape(String s) {\n          return s.replace(\"\\\\ \", \" \").replace(\"\\\\\" + charSeparator, charSeparator.toString());\n        }\n        \n        \n        private String escape(String s) {\n          return s.replace(\" \", \"\\\\ \").replace(\",\", \"\\\\,\");\n        }\n        \n        \n        private String makeShortForm(String[] parts) {\n          StringBuilder out = new StringBuilder();\n          out.append(parts[0]);\n          for (int i=1;i<parts.length;i++) {\n            out.append(\" \");\n            out.append(parts[i].substring(0, 1));\n          }\n          return out.toString();\n        }\n        \n        private boolean isLongForm(String[] parts) {\n          boolean res = false;\n          for (int i=1;i<parts.length;i++) {\n            if (parts[i].length() > 1)\n              return true;\n          }\n          return res;\n        }\n        private int containsLongForm(String[] names) {\n          int i = 0;\n          for (String name: names) {\n            if (isLongForm(AuthorUtils.splitName(name))) {\n              i++;\n            }\n          }\n          return i;\n        }\n      };\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic private void unpack2(int[] out, IntBuffer in)\n  {\n  int outOffset = 0;\n  final int mask = 3;\n  for(int i=0; i<4; ++i){\n    int curInputValue0 = in.get();\n    int curInputValue1 = in.get();\n    out[0+outOffset] = curInputValue0 & mask;\n    out[1+outOffset] = (curInputValue0 >>> 2) & mask;\n    out[2+outOffset] = (curInputValue0 >>> 4) & mask;\n    out[3+outOffset] = (curInputValue0 >>> 6) & mask;\n    out[4+outOffset] = (curInputValue0 >>> 8) & mask;\n    out[5+outOffset] = (curInputValue0 >>> 10) & mask;\n    out[6+outOffset] = (curInputValue0 >>> 12) & mask;\n    out[7+outOffset] = (curInputValue0 >>> 14) & mask;\n    out[8+outOffset] = (curInputValue0 >>> 16) & mask;\n    out[9+outOffset] = (curInputValue0 >>> 18) & mask;\n    out[10+outOffset] = (curInputValue0 >>> 20) & mask;\n    out[11+outOffset] = (curInputValue0 >>> 22) & mask;\n    out[12+outOffset] = (curInputValue0 >>> 24) & mask;\n    out[13+outOffset] = (curInputValue0 >>> 26) & mask;\n    out[14+outOffset] = (curInputValue0 >>> 28) & mask;\n    out[15+outOffset] = curInputValue0 >>> 30;\n    out[16+outOffset] = curInputValue1 & mask;\n    out[17+outOffset] = (curInputValue1 >>> 2) & mask;\n    out[18+outOffset] = (curInputValue1 >>> 4) & mask;\n    out[19+outOffset] = (curInputValue1 >>> 6) & mask;\n    out[20+outOffset] = (curInputValue1 >>> 8) & mask;\n    out[21+outOffset] = (curInputValue1 >>> 10) & mask;\n    out[22+outOffset] = (curInputValue1 >>> 12) & mask;\n    out[23+outOffset] = (curInputValue1 >>> 14) & mask;\n    out[24+outOffset] = (curInputValue1 >>> 16) & mask;\n    out[25+outOffset] = (curInputValue1 >>> 18) & mask;\n    out[26+outOffset] = (curInputValue1 >>> 20) & mask;\n    out[27+outOffset] = (curInputValue1 >>> 22) & mask;\n    out[28+outOffset] = (curInputValue1 >>> 24) & mask;\n    out[29+outOffset] = (curInputValue1 >>> 26) & mask;\n    out[30+outOffset] = (curInputValue1 >>> 28) & mask;\n    out[31+outOffset] = curInputValue1 >>> 30;\n    outOffset += 32;\n  }\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n      private com.google.protobuf.SingleFieldBuilder<\n          org.onebusaway.transit_data_federation.services.service_alerts.ServiceAlerts.Id, org.onebusaway.transit_data_federation.services.service_alerts.ServiceAlerts.Id.Builder, org.onebusaway.transit_data_federation.services.service_alerts.ServiceAlerts.IdOrBuilder>\n          getIdFieldBuilder() {\n        if (idBuilder_ == null) {\n          idBuilder_ = new com.google.protobuf.SingleFieldBuilder<\n              org.onebusaway.transit_data_federation.services.service_alerts.ServiceAlerts.Id, org.onebusaway.transit_data_federation.services.service_alerts.ServiceAlerts.Id.Builder, org.onebusaway.transit_data_federation.services.service_alerts.ServiceAlerts.IdOrBuilder>(\n                  id_,\n                  getParentForChildren(),\n                  isClean());\n          id_ = null;\n        }\n        return idBuilder_;\n      }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n\n\n        Debug.v(\"onCreate here!\");\n        Debug.d(1, 2, 3, 4, 5);\n        Debug.i(\"0\", \"1\", \"2\", \"3\"); // will just enumerate strings\n        Debug.w(\"%s %s %s\", null, null, null); // will call String.format\n        Debug.e(true, null, Integer.MAX_VALUE, Long.MIN_VALUE);\n        Debug.wtf(\"No, really, WTF?!\");\n\n\n        if (savedInstanceState == null) {\n            getSupportFragmentManager()\n                    .beginTransaction()\n                    .add(R.id.content, new MainFragment())\n                    .commit();\n        }\n\n        Debug.trace(100);\n\n\n\n\n\n\n\n\n\n        final UnknownHostException exception = new UnknownHostException();\n        exception.initCause(new Throwable());\n        Debug.e(exception, \"Hello this is a message for exception\");\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic IssuerEntry(final int id, final X509Certificate cert)\n            throws CertificateEncodingException {\n        this.id = id;\n        this.cert = ParamUtil.requireNonNull(\"cert\", cert);\n        this.notBefore = cert.getNotBefore();\n        this.issuerHashMap = getIssuerHashAndKeys(cert.getEncoded());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nvoid moveView(float _deltaX, float _deltaY){\n\t\t\n\t\t\n\t\t GLOBAL.CAM_OFFSET_X +=  _deltaX;\n\t\t GLOBAL.CAM_OFFSET_Y +=  _deltaY;\n\t\n\t\t \n\t\t float leftEdge = (float) (GLOBAL.CAM_OFFSET_X - ((GLOBAL.applet.width/2)/GLOBAL.ZOOM));\n\t\t\tif(leftEdge < SETTINGS.MIN_CAM_X_OFFSET)\n\t\t\t\tGLOBAL.CAM_OFFSET_X = SETTINGS.MIN_CAM_X_OFFSET + ((GLOBAL.applet.width/2)/GLOBAL.ZOOM);\n\t\t\t\n\t\t\t\n\t\t\t float rightEdge = (float) (GLOBAL.CAM_OFFSET_X + ((GLOBAL.applet.width/2)/GLOBAL.ZOOM));\n\t\t\tif(rightEdge > SETTINGS.MAX_CAM_X_OFFSET)\n\t\t\t\tGLOBAL.CAM_OFFSET_X = SETTINGS.MAX_CAM_X_OFFSET - ((GLOBAL.applet.width/2)/GLOBAL.ZOOM);\n\t\t\t\n\t\t\tdouble topEdge = (double) GLOBAL.CAM_OFFSET_Y + ((GLOBAL.applet.height/2)/GLOBAL.ZOOM);\n\t\t\tif(topEdge > SETTINGS.MAX_CAM_Y_OFFSET)\n\t\t\t\tGLOBAL.CAM_OFFSET_Y = SETTINGS.MAX_CAM_Y_OFFSET - ((GLOBAL.applet.height/2)/GLOBAL.ZOOM);\n\t\t\t\n\t\t\tfloat bottomEdge = (float) (GLOBAL.CAM_OFFSET_Y - ((GLOBAL.applet.height/2)/GLOBAL.ZOOM));\n\t\t\tif(bottomEdge < SETTINGS.MIN_CAM_Y_OFFSET)\n\t\t\t\tGLOBAL.CAM_OFFSET_Y = SETTINGS.MIN_CAM_Y_OFFSET + ((GLOBAL.applet.height/2)/GLOBAL.ZOOM);\n\t\t\t\n\t\t \n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate <E> void buildElements(ReadableDocument<? super E, E, ?> doc, E e, List<E> els) {\n    E child = DocHelper.getFirstChildElement(doc, e);\n    while (child != null) {\n      els.add(child);\n      buildElements(doc, child, els);\n      child = DocHelper.getNextSiblingElement(doc, child);\n    }\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public void changeSelection(int row, int column, boolean toggle, boolean extend) {\n        lastRow = currentRow;\n        int lastColumn = currentColumn;\n        currentRow = row;\n        currentColumn = column;\n\n        super.changeSelection(row, column, toggle, extend);\n\n        if (getSelectedRow() == lastSelectedRow && getSelectedColumn() == lastSelectedCol) {\n            lastSelectedEqCnt++;\n\n            if (lastSelectedEqCnt == 10) {\n                System.out.println(\"Sticky cursor!\");\n                throw new RuntimeException(\"Sticky cursor!\");\n               \n            }\n        } else {\n            lastSelectedEqCnt = 0;\n            lastSelectedRow = row;\n            lastSelectedCol = column;\n        }\n        if (currentRow != lastRow || (currentColumn != lastColumn && viewMode != TableViewMode.FULL)) {\n            selectionChangedTimestamp = System.currentTimeMillis();\n            fireSelectedFileChangedEvent();\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                row = (int)val[1],\n                col = (int)val[2];\n            float toAdd = val[3];\n            \n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            table.setVal(row-1, col-1, (Float)table.value(row-1, col-1) + toAdd);\n            return toAdd;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic ShortcutView(final Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t\tpm = context.getPackageManager();\n\t\t\n\t\tsec = PreferenceManager.getDefaultSharedPreferences(getContext());\n\n\t\tpkg = sec.getString(\"pkg\", \"\");\n\t\tpin = sec.getString(\"pin\", \"\");\t\t\n\t\t\n\t\t\n\t\tfor (int i = 0; i < CAPACITY; i++) {\n\t\t\tfinal int b = i;\n\t\t\tApplicationInfo ai = null;\n\t\t\tString sv = null;\n\t\t\tString s = Settings.System.getString(context.getContentResolver(), \"PiSC\" + i);\n\n\t\t\tif (s == null | s == \"\") {\n\n\t\t\t\tSettings.System.putString(context.getContentResolver(), \"PiSC\"+b, \"com.pilockerstable\");\n\t\t\t}\n\t\t\tsv = s;\n\n\t\t\ttry {\n\t\t\t\tai = pm.getApplicationInfo(sv, 0);\n\t\t\t} catch (NameNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tShortCut sc = new ShortCut(context, attrs);\n\t\t\tString App_Name = (String) pm.getApplicationLabel(ai);\n\t\t\tDrawable Icon = pm.getApplicationIcon(ai);\n\t\t\tShortcutter st = new Shortcutter(App_Name, Icon);\n\t\t\tsc.setName(st.getName());\n\t\t\tsc.setImage(st.getIcon());\n\n\t\t\taddView(sc);\n\t\t\tsc.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t\n\t\t\t\tString sv = Settings.System.getString( context.getContentResolver(), \"PiSC\" + b);\n\n\t\t\t\t@Override \n\t\t\t\tpublic void onClick(View arg0) {\n\n\t\t\t\t\tif( pin.equals(\"\") || pin.equals(null) || pin.isEmpty()) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t((Activity) context).finish();\n\t\t\t\t\t\tIntent i = new Intent();\n\t\t\t\t\t\ti.setClass(getContext(), LockerService.class);\n\t\t\t\t\t\tcontext.startService(i);\n\t\t\t\t\t\tIntent LaunchIntent = context.getPackageManager().getLaunchIntentForPackage(sv);\n\t\t\t\t\t\tcontext.startActivity(LaunchIntent);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t} else{\n\t\t\t\t\t\n\t\t\t\t\tsave(\"pkg\", \"true\");\n\t\t\t\t\tIntent x = new Intent(getContext(), PinActivity.class);\n\t\t\t\t\tx.putExtra(\"sv\", sv);\n\t\t\t\t\tcontext.startActivity(x);\n\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public void onReply(int num, String value, String msg)\n        {\n            switch (num)\n            {\n                case 353:\n                    tmpUserList.addAll(CollectionUtil.asList(msg.split(\" \")));\n                    break;\n\n                case 366:\n                    userList.setListData(tmpUserList.toArray(new String[tmpUserList.size()]));\n                    tmpUserList.clear();\n                    break;\n\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 250:\n                case 251:\n                case 252:\n                case 253:\n                case 254:\n                case 255:\n                case 256:\n                case 257:\n                case 258:\n                case 259:\n                case 261:\n                case 262:\n                case 263:\n                case 265:\n                case 266:\n                case 372:\n                case 375:\n                case 376:\n                    break;\n\n                default:\n                    onReceive(null, null, msg);\n            }\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n  public boolean feed_publishTemplatizedAction(Integer actorId, CharSequence titleTemplate,\n                                               Map<String, CharSequence> titleData,\n                                               CharSequence bodyTemplate,\n                                               Map<String, CharSequence> bodyData,\n                                               CharSequence bodyGeneral,\n                                               Collection<Integer> targetIds,\n                                               Collection<IFeedImage> images)\n  throws FacebookException, IOException {\n    return feed_publishTemplatizedAction(titleTemplate, titleData, bodyTemplate, bodyData, bodyGeneral,\n                                         targetIds, images,  null);\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void appendReplacement(StringBuffer sb, Matcher m)\n\t{\n\t\tString key = m.group(1), value;\n\t\tint ascii;\n\t\t\n\t\tif ((value = m_tags.get(key.toLowerCase())) != null)\n\t\t\tm.appendReplacement(sb, value);\n\t\telse if ((ascii = getASCII(key)) != -1)\n\t\t\tm.appendReplacement(sb, Character.toString((char)ascii));\n\t\telse\n\t\t\tm.appendReplacement(sb, m.group());\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public Constructor[] getDeclaredConstructors() throws SecurityException {\n    \t_throw();\n    \treturn null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate static Graph<ITestNGMethod> topologicalSort(ITestNGMethod[] methods,\n      List<ITestNGMethod> sequentialList, List<ITestNGMethod> parallelList) {\n    Graph<ITestNGMethod> result = new Graph<ITestNGMethod>();\n\n    if (methods.length == 0) {\n      return result;\n    }\n\n    for (ITestNGMethod m : methods) {\n      result.addNode(m);\n\n      List<ITestNGMethod> predecessors = Lists.newArrayList();\n\n      String[] methodsDependedUpon = m.getMethodsDependedUpon();\n      String[] groupsDependedUpon = m.getGroupsDependedUpon();\n      if (methodsDependedUpon.length > 0) {\n        ITestNGMethod[] methodsNamed =\n          MethodHelper.findDependedUponMethods(m, methods);\n        for (ITestNGMethod pred : methodsNamed) {\n          predecessors.add(pred);\n        }\n      }\n      if (groupsDependedUpon.length > 0) {\n        for (String group : groupsDependedUpon) {\n          ITestNGMethod[] methodsThatBelongToGroup =\n            MethodGroupsHelper.findMethodsThatBelongToGroup(m, methods, group);\n          for (ITestNGMethod pred : methodsThatBelongToGroup) {\n            predecessors.add(pred);\n          }\n        }\n      }\n\n      for (ITestNGMethod predecessor : predecessors) {\n        result.addPredecessor(m, predecessor);\n      }\n    }\n\n    result.topologicalSort();\n    sequentialList.addAll(result.getStrictlySortedNodes());\n    parallelList.addAll(result.getIndependentNodes());\n\n    return result;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic Object toClass(InputEvent event) throws IOException {\n        ByteArrayInputStream bis = new ByteArrayInputStream(event.getData());\n        ObjectInput in = null;\n        try {\n            in = new ObjectInputStream(bis);\n            return in.readObject();\n        } catch (ClassNotFoundException e) {\n            throw new IOException(e);\n        } finally {\n            try {\n                bis.close();\n            } catch (IOException ex) {\n                ;\n            }\n            try {\n                if (in != null) {\n                    in.close();\n                }\n            } catch (IOException ex) {\n            }\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void defaultAction(HttpServletRequest req, HttpServletResponse res)\n                   throws ServletException, IOException\n    {\n     bmsample3home home = null;\n     bmsample3 remote = null;\n     res.setContentType(\"text/plain\");\n     PrintWriter out = res.getWriter();\n     Context ctx;\n\t       \n     try\n      {\n      Hashtable env = new Hashtable(1);\n      env.put(\"javax.naming.factory.initial\", \"com.netscape.server.jndi.RootContextFactory\");\n      ctx = new InitialContext(env);\n\n      Object objref = ctx.lookup(\"ejb/bmsamplebean3\");\n      home = (bmsample3home)PortableRemoteObject.narrow(objref, bmsample3home.class);\n      remote = home.create();\n      out.println(\"calling  bean1 \");\n      out.println(\" the result of invoking the ejb method is \" + remote.performDBOps());\n\t   }\n       catch (Exception e)\n       {\n\t   System.out.println(\" ERROR: \" + e);\n       }\n        try\n        {\n    \n        }catch(Exception e){}\t\t\t      \n\t\t\t\t\t\t\t\t      \n\t  \n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static String loadJSONFromAsset(Context context, String path) {\n        String json;\n        try {\n            InputStream is = context.getAssets().open(path);\n            int size = is.available();\n            byte[] buffer = new byte[size];\n            is.read(buffer);\n            is.close();\n            json = new String(buffer, \"UTF-8\");\n        } catch (IOException ex) {\n            ex.printStackTrace();\n            return null;\n        }\n        return json;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic void registerResources() {\n        if (sInitialized) {\n            return;\n        }\n        \n        org.chromium.content.R.attr.select_dialog_multichoice =\n                R.attr.select_dialog_multichoice;\n        org.chromium.content.R.attr.select_dialog_singlechoice =\n                R.attr.select_dialog_singlechoice;\n        org.chromium.ui.R.color.dropdown_dark_divider_color =\n                R.color.dropdown_dark_divider_color;\n        org.chromium.ui.R.color.dropdown_divider_color =\n                R.color.dropdown_divider_color;\n        org.chromium.ui.R.color.color_picker_border_color =\n                R.color.color_picker_border_color;\n        org.chromium.content.R.dimen.link_preview_overlay_radius =\n                R.dimen.link_preview_overlay_radius;\n        org.chromium.ui.R.dimen.dropdown_item_height =\n                R.dimen.dropdown_item_height;\n        org.chromium.ui.R.dimen.dropdown_item_divider_height =\n                R.dimen.dropdown_item_divider_height;\n        org.chromium.ui.R.dimen.color_button_height =\n                R.dimen.color_button_height;\n        org.chromium.ui.R.dimen.config_min_scaling_span =\n                R.dimen.config_min_scaling_span;\n        org.chromium.ui.R.dimen.config_min_scaling_touch_major =\n                R.dimen.config_min_scaling_touch_major;\n        org.chromium.content.R.drawable.ondemand_overlay =\n                R.drawable.ondemand_overlay;\n        org.chromium.ui.R.drawable.color_button_background =\n                R.drawable.color_button_background;\n        org.chromium.ui.R.drawable.color_picker_advanced_select_handle =\n                R.drawable.color_picker_advanced_select_handle;\n        org.chromium.ui.R.id.ampm = R.id.ampm;\n        org.chromium.ui.R.id.date_picker =\n                R.id.date_picker;\n        org.chromium.ui.R.id.date_time_suggestion_value =\n                R.id.date_time_suggestion_value;\n        org.chromium.ui.R.id.date_time_suggestion_label =\n                R.id.date_time_suggestion_label;\n        org.chromium.ui.R.id.hour = R.id.hour;\n        org.chromium.ui.R.id.milli = R.id.milli;\n        org.chromium.ui.R.id.minute = R.id.minute;\n        org.chromium.ui.R.id.pickers = R.id.pickers;\n        org.chromium.ui.R.id.position_in_year =\n                R.id.position_in_year;\n        org.chromium.ui.R.id.second = R.id.second;\n        org.chromium.ui.R.id.second_colon =\n                R.id.second_colon;\n        org.chromium.ui.R.id.second_dot =\n                R.id.second_dot;\n        org.chromium.content.R.id.select_action_menu_select_all =\n                R.id.select_action_menu_select_all;\n        org.chromium.content.R.id.select_action_menu_cut =\n                R.id.select_action_menu_cut;\n        org.chromium.content.R.id.select_action_menu_copy =\n                R.id.select_action_menu_copy;\n        org.chromium.content.R.id.select_action_menu_paste =\n                R.id.select_action_menu_paste;\n        org.chromium.content.R.id.select_action_menu_share =\n                R.id.select_action_menu_share;\n        org.chromium.content.R.id.select_action_menu_web_search =\n                R.id.select_action_menu_web_search;\n        org.chromium.ui.R.id.time_picker =\n                R.id.time_picker;\n        org.chromium.ui.R.id.year = R.id.year;\n        org.chromium.content.R.id.main_text =\n                R.id.main_text;\n        org.chromium.content.R.id.sub_text =\n                R.id.sub_text;\n        org.chromium.content.R.id.arrow_image =\n                R.id.arrow_image;\n        org.chromium.ui.R.id.selected_color_view =\n                R.id.selected_color_view;\n        org.chromium.ui.R.id.title =\n                R.id.title;\n        org.chromium.ui.R.id.more_colors_button =\n                R.id.more_colors_button;\n        org.chromium.ui.R.id.color_picker_advanced =\n                R.id.color_picker_advanced;\n        org.chromium.ui.R.id.color_picker_simple =\n                R.id.color_picker_simple;\n        org.chromium.ui.R.id.color_button_swatch =\n                R.id.color_button_swatch;\n        org.chromium.ui.R.id.more_colors_button_border =\n                R.id.more_colors_button_border;\n        org.chromium.ui.R.id.gradient =\n                R.id.gradient;\n        org.chromium.ui.R.id.text =\n                R.id.text;\n        org.chromium.ui.R.id.seek_bar =\n                R.id.seek_bar;\n        org.chromium.ui.R.id.dropdown_label =\n                R.id.dropdown_label;\n        org.chromium.ui.R.id.dropdown_popup_window =\n                R.id.dropdown_popup_window;\n        org.chromium.ui.R.id.dropdown_sublabel =\n                R.id.dropdown_sublabel;\n        org.chromium.ui.R.layout.date_time_picker_dialog =\n                R.layout.date_time_picker_dialog;\n        org.chromium.ui.R.layout.date_time_suggestion =\n                R.layout.date_time_suggestion;\n        org.chromium.ui.R.layout.two_field_date_picker =\n                R.layout.two_field_date_picker;\n        org.chromium.ui.R.layout.multi_field_time_picker_dialog =\n                R.layout.multi_field_time_picker_dialog;\n        org.chromium.content.R.layout.validation_message_bubble =\n                R.layout.validation_message_bubble;\n        org.chromium.ui.R.layout.color_picker_dialog_title =\n                R.layout.color_picker_dialog_title;\n        org.chromium.ui.R.layout.color_picker_dialog_content =\n                R.layout.color_picker_dialog_content;\n        org.chromium.ui.R.layout.color_picker_advanced_component =\n                R.layout.color_picker_advanced_component;\n        org.chromium.ui.R.layout.dropdown_item =\n                R.layout.dropdown_item;\n        org.chromium.content.R.menu.select_action_menu =\n                R.menu.select_action_menu;\n        org.chromium.content.R.string.accessibility_content_view =\n                R.string.accessibility_content_view;\n        org.chromium.ui.R.string.accessibility_date_picker_month =\n                R.string.accessibility_date_picker_month;\n        org.chromium.ui.R.string.accessibility_date_picker_week =\n                R.string.accessibility_date_picker_week;\n        org.chromium.ui.R.string.accessibility_date_picker_year =\n                R.string.accessibility_date_picker_year;\n        org.chromium.ui.R.string.accessibility_datetime_picker_date =\n                R.string.accessibility_datetime_picker_date;\n        org.chromium.ui.R.string.accessibility_datetime_picker_time =\n                R.string.accessibility_datetime_picker_time;\n        org.chromium.content.R.string.actionbar_share =\n                R.string.actionbar_share;\n        org.chromium.content.R.string.actionbar_web_search =\n                R.string.actionbar_web_search;\n        org.chromium.ui.R.string.date_picker_dialog_clear =\n                R.string.date_picker_dialog_clear;\n        org.chromium.ui.R.string.date_picker_dialog_set =\n                R.string.date_picker_dialog_set;\n        org.chromium.ui.R.string.date_picker_dialog_title =\n                R.string.date_picker_dialog_title;\n        org.chromium.ui.R.string.date_picker_dialog_other_button_label =\n                R.string.date_picker_dialog_other_button_label;\n        org.chromium.ui.R.string.date_time_picker_dialog_title =\n                R.string.date_time_picker_dialog_title;\n        org.chromium.content.R.string.media_player_error_button =\n                R.string.media_player_error_button;\n        org.chromium.content.R.string.media_player_error_text_invalid_progressive_playback =\n                R.string.media_player_error_text_invalid_progressive_playback;\n        org.chromium.content.R.string.media_player_error_text_unknown =\n                R.string.media_player_error_text_unknown;\n        org.chromium.content.R.string.media_player_error_title =\n                R.string.media_player_error_title;\n        org.chromium.content.R.string.media_player_loading_video =\n                R.string.media_player_loading_video;\n        org.chromium.ui.R.string.month_picker_dialog_title =\n                R.string.month_picker_dialog_title;\n        org.chromium.content.R.string.profiler_error_toast =\n                R.string.profiler_error_toast;\n        org.chromium.content.R.string.profiler_no_storage_toast =\n                R.string.profiler_no_storage_toast;\n        org.chromium.content.R.string.profiler_started_toast =\n                R.string.profiler_started_toast;\n        org.chromium.content.R.string.profiler_stopped_toast =\n                R.string.profiler_stopped_toast;\n        org.chromium.ui.R.string.time_picker_dialog_am =\n                R.string.time_picker_dialog_am;\n        org.chromium.ui.R.string.time_picker_dialog_pm =\n                R.string.time_picker_dialog_pm;\n        org.chromium.ui.R.string.time_picker_dialog_hour_minute_separator =\n                R.string.time_picker_dialog_hour_minute_separator;\n        org.chromium.ui.R.string.time_picker_dialog_hour_minute_separator =\n                R.string.time_picker_dialog_hour_minute_separator;\n        org.chromium.ui.R.string.time_picker_dialog_minute_second_separator =\n                R.string.time_picker_dialog_minute_second_separator;\n        org.chromium.ui.R.string.time_picker_dialog_second_subsecond_separator =\n                R.string.time_picker_dialog_second_subsecond_separator;\n        org.chromium.ui.R.string.time_picker_dialog_title =\n                R.string.time_picker_dialog_title;\n        org.chromium.ui.R.string.week_picker_dialog_title =\n                R.string.week_picker_dialog_title;\n        org.chromium.ui.R.string.copy_to_clipboard_failure_message =\n                R.string.copy_to_clipboard_failure_message;\n        org.chromium.ui.R.string.low_memory_error =\n                R.string.low_memory_error;\n        org.chromium.ui.R.string.opening_file_error =\n                R.string.opening_file_error;\n        org.chromium.ui.R.string.color_picker_button_more =\n                R.string.color_picker_button_more;\n        org.chromium.ui.R.string.color_picker_hue =\n                R.string.color_picker_hue;\n        org.chromium.ui.R.string.color_picker_saturation =\n                R.string.color_picker_saturation;\n        org.chromium.ui.R.string.color_picker_value =\n                R.string.color_picker_value;\n        org.chromium.ui.R.string.color_picker_button_set =\n                R.string.color_picker_button_set;\n        org.chromium.ui.R.string.color_picker_button_cancel =\n                R.string.color_picker_button_cancel;\n        org.chromium.ui.R.string.color_picker_dialog_title =\n                R.string.color_picker_dialog_title;\n        org.chromium.ui.R.string.color_picker_button_red =\n                R.string.color_picker_button_red;\n        org.chromium.ui.R.string.color_picker_button_cyan =\n                R.string.color_picker_button_cyan;\n        org.chromium.ui.R.string.color_picker_button_blue =\n                R.string.color_picker_button_blue;\n        org.chromium.ui.R.string.color_picker_button_green =\n                R.string.color_picker_button_green;\n        org.chromium.ui.R.string.color_picker_button_magenta =\n                R.string.color_picker_button_magenta;\n        org.chromium.ui.R.string.color_picker_button_yellow =\n                R.string.color_picker_button_yellow;\n        org.chromium.ui.R.string.color_picker_button_black =\n                R.string.color_picker_button_black;\n        org.chromium.ui.R.string.color_picker_button_white =\n                R.string.color_picker_button_white;\n        org.chromium.content.R.style.SelectPopupDialog =\n                R.style.SelectPopupDialog;\n        org.chromium.ui.R.style.DropdownPopupWindow =\n                R.style.DropdownPopupWindow;\n\n\n        if (false) {\n            verifyFields(org.chromium.content.R.class);\n            verifyFields(org.chromium.ui.R.class);\n        }\n\n\n        \n\n        sInitialized = true;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public BeanConnector(Class<E> beanClass, Matcher<PropertyChangeEvent> eventMatcher) {\n        this(beanClass);\n        setEventMatcher(eventMatcher);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void visitLdcInsn(final Object cst) {\n        if (mv != null) {\n            mv.visitLdcInsn(cst);\n        }\n        if (this.locals == null) {\n            labels = null;\n            return;\n        }\n        if (cst instanceof Integer) {\n            push(Opcodes.INTEGER);\n        } else if (cst instanceof Long) {\n            push(Opcodes.LONG);\n            push(Opcodes.TOP);\n        } else if (cst instanceof Float) {\n            push(Opcodes.FLOAT);\n        } else if (cst instanceof Double) {\n            push(Opcodes.DOUBLE);\n            push(Opcodes.TOP);\n        } else if (cst instanceof String) {\n            push(\"java/lang/String\");\n        } else if (cst instanceof Type) {\n            int sort = ((Type) cst).getSort();\n            if (sort == Type.OBJECT || sort == Type.ARRAY) {\n                push(\"java/lang/Class\");\n            } else if (sort == Type.METHOD) {\n                push(\"java/lang/invoke/MethodType\");\n            } else {\n                throw new IllegalArgumentException();\n            }\n        } else if (cst instanceof Handle) {\n            push(\"java/lang/invoke/MethodHandle\");\n        } else {\n            throw new IllegalArgumentException();\n        }\n        labels = null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; } \n        return retVal;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void runScheduleJobToAction(List<JobPersistenceOld> jobDetails, Date now, SimpleDateFormat df2, Map<Long, JobPersistence> actionDetails, String currentDateStr){\n\t\tfor(JobPersistenceOld jobDetail : jobDetails){\n\t\t\tif(jobDetail.getScheduleType() != null && jobDetail.getScheduleType()==0){\n\t\t\t\ttry{\n\t\t\t\t\tString jobCronExpression = jobDetail.getCronExpression();\n\t\t\t\t\tString cronDate= df2.format(now);\n\t\t\t\t\tList<String> lTime = new ArrayList<String>();\n\t\t\t\t\tif(jobCronExpression != null && jobCronExpression.trim().length() > 0){\n\t\t\t\t\t\tboolean isCronExp = false;\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\tisCronExp = CronExpParser.Parser(jobCronExpression, cronDate, lTime);\n\t\t\t\t\t\t}catch(Exception ex){\n\t\t\t\t\t\t\tisCronExp = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!isCronExp) {\n\t\t\t\t\t\t\tlog.error(\"\u93c3\u72b3\u7876\u9422\u71b8\u579aCron\u741b\u3128\u63ea\u5bee\u5fe5\u7d30\u93c3\u30e6\u6e61,\" + cronDate + \";\u6d93\u5d87\ue0c1\u935a\u5823\ue749\u9352\u6a86ron\u741b\u3128\u63ea\u5bee\u5fe5\u7d30\" + jobCronExpression);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (int i = 0; i < lTime.size(); i++) {\n\t\t\t\t\t\t\tString actionDateStr = ZeusDateTool.StringToDateStr(lTime.get(i), \"yyyy-MM-dd HH:mm:ss\", \"yyyyMMddHHmmss\");\n\t\t\t\t\t\t\tString actionCronExpr = ZeusDateTool.StringToDateStr(lTime.get(i), \"yyyy-MM-dd HH:mm:ss\", \"s m H d M\") + \" ?\";\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tJobPersistence actionPer = new JobPersistence();\n\t\t\t\t\t\t\tactionPer.setId(Long.parseLong(actionDateStr)*10000+jobDetail.getId());//update action id\n\t\t\t\t\t\t\tactionPer.setToJobId(jobDetail.getId());\n\t\t\t\t\t\t\tactionPer.setAuto(jobDetail.getAuto());\n\t\t\t\t\t\t\tactionPer.setConfigs(jobDetail.getConfigs());\n\t\t\t\t\t\t\tactionPer.setCronExpression(actionCronExpr);//update action cron expression\n\t\t\t\t\t\t\tactionPer.setCycle(jobDetail.getCycle());\n\t\t\t\t\t\t\tString jobDependencies = jobDetail.getDependencies();\n\t\t\t\t\t\t\tactionPer.setDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setJobDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setDescr(jobDetail.getDescr());\n\t\t\t\t\t\t\tactionPer.setGmtCreate(jobDetail.getGmtCreate());\n\t\t\t\t\t\t\tactionPer.setGmtModified(new Date());\n\t\t\t\t\t\t\tactionPer.setGroupId(jobDetail.getGroupId());\n\t\t\t\t\t\t\tactionPer.setHistoryId(jobDetail.getHistoryId());\n\t\t\t\t\t\t\tactionPer.setHost(jobDetail.getHost());\n\t\t\t\t\t\t\tactionPer.setLastEndTime(jobDetail.getLastEndTime());\n\t\t\t\t\t\t\tactionPer.setLastResult(jobDetail.getLastResult());\n\t\t\t\t\t\t\tactionPer.setName(jobDetail.getName());\n\t\t\t\t\t\t\tactionPer.setOffset(jobDetail.getOffset());\n\t\t\t\t\t\t\tactionPer.setOwner(jobDetail.getOwner());\n\t\t\t\t\t\t\tactionPer.setPostProcessers(jobDetail.getPostProcessers());\n\t\t\t\t\t\t\tactionPer.setPreProcessers(jobDetail.getPreProcessers());\n\t\t\t\t\t\t\tactionPer.setReadyDependency(jobDetail.getReadyDependency());\n\t\t\t\t\t\t\tactionPer.setResources(jobDetail.getResources());\n\t\t\t\t\t\t\tactionPer.setRunType(jobDetail.getRunType());\n\t\t\t\t\t\t\tactionPer.setScheduleType(jobDetail.getScheduleType());\n\t\t\t\t\t\t\tactionPer.setScript(jobDetail.getScript());\n\t\t\t\t\t\t\tactionPer.setStartTime(jobDetail.getStartTime());\n\t\t\t\t\t\t\tactionPer.setStartTimestamp(jobDetail.getStartTimestamp());\n\t\t\t\t\t\t\tactionPer.setStatisStartTime(jobDetail.getStatisStartTime());\n\t\t\t\t\t\t\tactionPer.setStatisEndTime(jobDetail.getStatisEndTime());\n\t\t\t\t\t\t\tactionPer.setStatus(jobDetail.getStatus());\n\t\t\t\t\t\t\tactionPer.setTimezone(jobDetail.getTimezone());\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tSystem.out.println(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59dfJobId: \" + jobDetail.getId()+\";  ActionId: \" +actionPer.getId());\n\t\t\t\t\t\t\t\t\tcontext.getGroupManager().saveJob(actionPer);\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"success\");\n\t\t\t\t\t\t\t\t\tactionDetails.put(actionPer.getId(),actionPer);\n\t\t\t\t\t\t\t} catch (ZeusException e) {\n\t\t\t\t\t\t\t\tSystem.out.println(\"failed\");\n\t\t\t\t\t\t\t\tlog.error(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59dfJobId:\" + jobDetail.getId() + \" \u9422\u71b8\u579aAction\" +actionPer.getId() + \"\u6fb6\u8fab\u89e6\", e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}catch(Exception ex){\n\t\t\t\t\tlog.error(\"\u7039\u6c2d\u6902\u6d60\u8bf2\u59df\u9422\u71b8\u579aAction\u6fb6\u8fab\u89e6\",ex);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(jobDetail.getScheduleType() != null && jobDetail.getScheduleType()==2){\n\t\t\t\ttry{\n\t\t\t\t\tif(jobDetail.getDependencies()==null || jobDetail.getDependencies().trim().length()==0){\n\t\t\t\t\t\tDate date = null;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tdate = DateUtil.timestamp2Date(jobDetail.getStartTimestamp(),\n\t\t\t\t\t\t\t\t\tDateUtil.getDefaultTZStr());\n\t\t\t\t\t\t} catch (ParseException e) {\n\t\t\t\t\t\t\tdate = new Date();\n\t\t\t\t\t\t\tlog.error(\"parse job start timestamp to date failed,\", e);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tSimpleDateFormat dfTime=new SimpleDateFormat(\"HHmmss\");\n\t\t\t\t\t\tSimpleDateFormat dfDate=new SimpleDateFormat(\"yyyyMMdd\");\n\t\t\t\t\t\tSimpleDateFormat dfMinute=new SimpleDateFormat(\"mmss\");\n\t\t\t\t\t\tString currentDate = dfDate.format(new Date());\n\t\t\t\t\t\tString startTime = dfTime.format(date);\n\t\t\t\t\t\tString startMinute = dfMinute.format(date);\n\t\t\t\t\t\tif(jobDetail.getCycle().equals(\"day\")){\n\t\t\t\t\t\t\tDate newStartDate = ZeusDateTool.StringToDate(currentDate+startTime, \"yyyyMMddHHmmss\");\n\t\t\t\t\t\t\tCalendar calendar = Calendar.getInstance();\n\t\t\t\t\t\t\tcalendar.setTimeInMillis(newStartDate.getTime());\n\t\t\t\t\t\t\tcalendar.add(Calendar.DATE, -1);\n\t\t\t\t\t\t\tcalendar.getTime();\n\t\t\t\t\t\t\tDate statisStartTime = calendar.getTime();\n\t\t\t\t\t\t\tcalendar.add(Calendar.MINUTE, 60*23+59);\n\t\t\t\t\t\t\tDate statisEndTime = calendar.getTime();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tJobPersistence actionPer = new JobPersistence();\n\t\t\t\t\t\t\tactionPer.setId(Long.parseLong(currentDate+startTime)*10000+jobDetail.getId());//update action id\n\t\t\t\t\t\t\tactionPer.setToJobId(jobDetail.getId());\n\t\t\t\t\t\t\tactionPer.setAuto(jobDetail.getAuto());\n\t\t\t\t\t\t\tactionPer.setConfigs(jobDetail.getConfigs());\n\t\t\t\t\t\t\tactionPer.setCronExpression(jobDetail.getCronExpression());\n\t\t\t\t\t\t\tactionPer.setCycle(jobDetail.getCycle());\n\t\t\t\t\t\t\tString jobDependencies = jobDetail.getDependencies();\n\t\t\t\t\t\t\tactionPer.setDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setJobDependencies(jobDependencies);\n\t\t\t\t\t\t\tactionPer.setDescr(jobDetail.getDescr());\n\t\t\t\t\t\t\tactionPer.setGmtCreate(jobDetail.getGmtCreate());\n\t\t\t\t\t\t\tactionPer.setGmtModified(new Date());\n\t\t\t\t\t\t\tactionPer.setGroupId(jobDetail.getGroupId());\n\t\t\t\t\t\t\tactionPer.setHistoryId(jobDetail.getHistoryId());\n\t\t\t\t\t\t\tactionPer.setHost(jobDetail.getHost());\n\t\t\t\t\t\t\tactionPer.setLastEndTime(jobDetail.getLastEndTime());\n\t\t\t\t\t\t\tactionPer.setLastResult(jobDetail.getLastResult());\n\t\t\t\t\t\t\tactionPer.setName(jobDetail.getName());\n\t\t\t\t\t\t\tactionPer.setOffset(jobDetail.getOffset());\n\t\t\t\t\t\t\tactionPer.setOwner(jobDetail.getOwner());\n\t\t\t\t\t\t\tactionPer.setPostProcessers(jobDetail.getPostProcessers());\n\t\t\t\t\t\t\tactionPer.setPreProcessers(jobDetail.getPreProcessers());\n\t\t\t\t\t\t\tactionPer.setReadyDependency(jobDetail.getReadyDependency());\n\t\t\t\t\t\t\tactionPer.setResources(jobDetail.getResources());\n\t\t\t\t\t\t\tactionPer.setRunType(jobDetail.getRunType());\n\t\t\t\t\t\t\tactionPer.setScheduleType(jobDetail.getScheduleType());\n\t\t\t\t\t\t\tactionPer.setScript(jobDetail.getScript());\n\t\t\t\t\t\t\tactionPer.setStartTime(newStartDate);\n\t\t\t\t\t\t\tactionPer.setStartTimestamp(newStartDate.getTime());\n\t\t\t\t\t\t\tactionPer.setStatisStartTime(statisStartTime);\n\t\t\t\t\t\t\tactionPer.setStatisEndTime(statisEndTime);\n\t\t\t\t\t\t\tactionPer.setStatus(jobDetail.getStatus());\n\t\t\t\t\t\t\tactionPer.setTimezone(jobDetail.getTimezone());\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tSystem.out.println(\"\u935b\u3126\u6e61\u6d60\u8bf2\u59df\u951b\u581d\u3049\u951b\u5849obId: \" + jobDetail.getId()+\";  ActionId: \" +actionPer.getId());\n\t\t\t\t\t\t\t\t\tcontext.getGroupManager().saveJob(actionPer);\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"success\");\n\t\t\t\t\t\t\t\t\tactionDetails.put(actionPer.getId(),actionPer);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t} catch (ZeusException e) {\n\t\t\t\t\t\t\t\tSystem.out.println(\"failed\");\n\t\t\t\t\t\t\t\tlog.error(\"\u935b\u3126\u6e61\u6d60\u8bf2\u59df\u951b\u581d\u3049\u951b\u5849obId:\" + jobDetail.getId() + \" \u9422\u71b8\u579aAction\" +actionPer.getId() + \"\u6fb6\u8fab\u89e6\", e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(jobDetail.getCycle().equals(\"hour\")){\n\t\t\t\t\t\t\tfor (int i = 0; i < 24; i++) {\t\t\n\t\t\t\t\t\t\t\tString startHour = String.valueOf(i);\n\t\t\t\t\t\t\t\tif(startHour.trim().length()<2){\n\t\t\t\t\t\t\t\t\tstartHour = \"0\"+startHour;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDate newStartDate = ZeusDateTool.StringToDate(currentDate+startHour+startMinute, \"yyyyMMddHHmmss\");\n\t\t\t\t\t\t\t\tCalendar calendar = Calendar.getInstance();\n\t\t\t\t\t\t\t\tcalendar.setTimeInMillis(newStartDate.getTime());\n\t\t\t\t\t\t\t\tcalendar.add(Calendar.HOUR, -1);\n\t\t\t\t\t\t\t\tcalendar.getTime();\n\t\t\t\t\t\t\t\tDate statisStartTime = calendar.getTime();\n\t\t\t\t\t\t\t\tcalendar.add(Calendar.MINUTE, 59);\n\t\t\t\t\t\t\t\tDate statisEndTime = calendar.getTime();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tJobPersistence actionPer = new JobPersistence();\n\t\t\t\t\t\t\t\tactionPer.setId(Long.parseLong(currentDate+startHour+startMinute)*10000+jobDetail.getId());//update action id\n\t\t\t\t\t\t\t\tactionPer.setToJobId(jobDetail.getId());\n\t\t\t\t\t\t\t\tactionPer.setAuto(jobDetail.getAuto());\n\t\t\t\t\t\t\t\tactionPer.setConfigs(jobDetail.getConfigs());\n\t\t\t\t\t\t\t\tactionPer.setCronExpression(jobDetail.getCronExpression());\n\t\t\t\t\t\t\t\tactionPer.setCycle(jobDetail.getCycle());\n\t\t\t\t\t\t\t\tString jobDependencies = jobDetail.getDependencies();\n\t\t\t\t\t\t\t\tactionPer.setDependencies(jobDependencies);\n\t\t\t\t\t\t\t\tactionPer.setJobDependencies(jobDependencies);\n\t\t\t\t\t\t\t\tactionPer.setDescr(jobDetail.getDescr());\n\t\t\t\t\t\t\t\tactionPer.setGmtCreate(jobDetail.getGmtCreate());\n\t\t\t\t\t\t\t\tactionPer.setGmtModified(new Date());\n\t\t\t\t\t\t\t\tactionPer.setGroupId(jobDetail.getGroupId());\n\t\t\t\t\t\t\t\tactionPer.setHistoryId(jobDetail.getHistoryId());\n\t\t\t\t\t\t\t\tactionPer.setHost(jobDetail.getHost());\n\t\t\t\t\t\t\t\tactionPer.setLastEndTime(jobDetail.getLastEndTime());\n\t\t\t\t\t\t\t\tactionPer.setLastResult(jobDetail.getLastResult());\n\t\t\t\t\t\t\t\tactionPer.setName(jobDetail.getName());\n\t\t\t\t\t\t\t\tactionPer.setOffset(jobDetail.getOffset());\n\t\t\t\t\t\t\t\tactionPer.setOwner(jobDetail.getOwner());\n\t\t\t\t\t\t\t\tactionPer.setPostProcessers(jobDetail.getPostProcessers());\n\t\t\t\t\t\t\t\tactionPer.setPreProcessers(jobDetail.getPreProcessers());\n\t\t\t\t\t\t\t\tactionPer.setReadyDependency(jobDetail.getReadyDependency());\n\t\t\t\t\t\t\t\tactionPer.setResources(jobDetail.getResources());\n\t\t\t\t\t\t\t\tactionPer.setRunType(jobDetail.getRunType());\n\t\t\t\t\t\t\t\tactionPer.setScheduleType(jobDetail.getScheduleType());\n\t\t\t\t\t\t\t\tactionPer.setScript(jobDetail.getScript());\n\t\t\t\t\t\t\t\tactionPer.setStartTime(newStartDate);\n\t\t\t\t\t\t\t\tactionPer.setStartTimestamp(newStartDate.getTime());\n\t\t\t\t\t\t\t\tactionPer.setStatisStartTime(statisStartTime);\n\t\t\t\t\t\t\t\tactionPer.setStatisEndTime(statisEndTime);\n\t\t\t\t\t\t\t\tactionPer.setStatus(jobDetail.getStatus());\n\t\t\t\t\t\t\t\tactionPer.setTimezone(jobDetail.getTimezone());\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"\u935b\u3126\u6e61\u6d60\u8bf2\u59df\u951b\u581f\u6902\u951b\u5849obId: \" + jobDetail.getId()+\";  ActionId: \" +actionPer.getId());\n\t\t\t\t\t\t\t\t\t\tcontext.getGroupManager().saveJob(actionPer);\n\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"success\");\n\t\t\t\t\t\t\t\t\t\tactionDetails.put(actionPer.getId(),actionPer);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t} catch (ZeusException e) {\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"failed\");\n\t\t\t\t\t\t\t\t\tlog.error(\"\u935b\u3126\u6e61\u6d60\u8bf2\u59df\u951b\u581f\u6902\u951b\u5849obId:\" + jobDetail.getId() + \" \u9422\u71b8\u579aAction\" +actionPer.getId() + \"\u6fb6\u8fab\u89e6\", e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}catch(Exception ex){\n\t\t\t\t\tlog.error(\"\u935b\u3126\u6e61\u6d60\u8bf2\u59df\u9422\u71b8\u579aAction\u6fb6\u8fab\u89e6\",ex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@RequestMapping(value = \"api\", method = {RequestMethod.GET,\n            RequestMethod.POST}, produces = {\"application/json;charset=UTF-8\"})\n    @ResponseBody\n    public String api(HttpServletRequest request, Model model,\n                      @RequestParam(\"WIDout_trade_no\") String out_trade_no,\n                      @RequestParam(\"WIDsubject\") String subject,\n                      @RequestParam(\"WIDtotal_fee\") String total_fee,\n                      @RequestParam(\"WIDshow_url\") String show_url,\n                      @RequestParam(\"WIDbody\") String body\n    ) {\n\n        Map<String, String> sParaTemp = new HashMap<String, String>();\n        sParaTemp.put(\"service\", AlipayConfig.service);\n        sParaTemp.put(\"partner\", AlipayConfig.partner);\n        sParaTemp.put(\"seller_id\", AlipayConfig.seller_id);\n        sParaTemp.put(\"_input_charset\", AlipayConfig.input_charset);\n        sParaTemp.put(\"payment_type\", AlipayConfig.payment_type);\n        sParaTemp.put(\"notify_url\", AlipayConfig.notify_url);\n        sParaTemp.put(\"return_url\", AlipayConfig.return_url);\n        sParaTemp.put(\"out_trade_no\", out_trade_no);\n        sParaTemp.put(\"subject\", subject);\n        sParaTemp.put(\"total_fee\", total_fee);\n        sParaTemp.put(\"show_url\", show_url);\n        sParaTemp.put(\"body\", body);\n\n\n\n\n        Map<String, String> sPara = AlipaySubmit.buildRequestPara(sParaTemp);\n\n        JSONObject ret = JsonUtil.getOkJson();\n        ret.put(\"params\", sPara);\n        return ret.toString();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic DocumentInfo(String author, String creator, String fileName, boolean isEncrypted, int pages,\n\t\t\tString pdfVersion, String producer, String title) {\n\t\tsuper();\n\t\tthis.author = author;\n\t\tthis.creator = creator;\n\t\tthis.fileName = fileName;\n\t\tthis.isEncrypted = isEncrypted;\n\t\tthis.pages = pages;\n\t\tthis.pdfVersion = pdfVersion;\n\t\tthis.producer = producer;\n\t\tthis.title = title;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        public static com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode parse(org.apache.xmlbeans.xml.stream.XMLInputStream xis) throws org.apache.xmlbeans.XmlException, org.apache.xmlbeans.xml.stream.XMLStreamException {\n          return (com.microsoft.schemas.crm._2011.contracts.ArrayOfArrayOfTimeCode) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( xis, type, null ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n   public static void printMethods(Class cl)\n   {\n      Method[] methods = cl.getDeclaredMethods();\n\n      for (Method m : methods)\n      {\n         Class retType = m.getReturnType();\n         String name = m.getName();\n\n         System.out.print(\"   \");\n         String modifiers = Modifier.toString(m.getModifiers());\n         if (modifiers.length() > 0) System.out.print(modifiers + \" \");         \n         System.out.print(retType.getName() + \" \" + name + \"(\");\n\n         Class[] paramTypes = m.getParameterTypes();\n         for (int j = 0; j < paramTypes.length; j++)\n         {\n            if (j > 0) System.out.print(\", \");\n            System.out.print(paramTypes[j].getName());\n         }\n         System.out.println(\");\");\n      }\n   }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void quadrantRotate(int numquadrants) {\n        switch (numquadrants & 3) {\n        case 0:\n            break;\n        case 1:\n            rotate90();\n            break;\n        case 2:\n            rotate180();\n            break;\n        case 3:\n            rotate270();\n            break;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void channelInactive(ChannelHandlerContext ctx){\n        Assert.notNull(this.channelRepository, \"[Assertion failed] - ChannelRepository is required; it must not be null\");\n        Assert.notNull(ctx);\n\n        String channelKey = ctx.channel().remoteAddress().toString();\n        this.channelRepository.remove(channelKey);\n\n        logger.debug(\"Binded Channel Count is \" + this.channelRepository.size());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\tpublic synchronized void onDownloadError(int index, String message) {\n\t\tTrace.e(\"onDownloadError:\" + message);\n\t\tdownloadStatus[index] = DownloadStatus.error;\n\t\tfor(int i = 0; i < downloadStatus.length; i++){\n\t\t\tif(downloadStatus[i] != DownloadStatus.done \n\t\t\t\t\t&& downloadStatus[i] != DownloadStatus.error){\n\t\t\t\tdownloadThreads[i].cancelByError();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\tentry.status = DownloadStatus.error;\n    \tnotifyUpdate(entry, DownloadService.NOTIFY_ERROR);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic final DenseMatrix zeros(ValueType valueType, long... size) {\n\t\tswitch (size.length) {\n\t\tcase 0:\n\t\t\tthrow new RuntimeException(\"Size not defined\");\n\t\tcase 1:\n\t\t\tthrow new RuntimeException(\"Size must be at least 2-dimensional\");\n\t\tdefault:\n\t\t\tswitch (valueType) {\n\t\t\tcase BIGDECIMAL:\n\t\t\t\treturn new DefaultDenseBigDecimalMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BIGINTEGER:\n\t\t\t\treturn new DefaultDenseBigIntegerMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BOOLEAN:\n\t\t\t\treturn new ArrayDenseBooleanMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BYTE:\n\t\t\t\treturn new DefaultDenseByteMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase CHAR:\n\t\t\t\treturn new DefaultDenseCharMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase DOUBLE:\n\t\t\t\tif (size.length == 2) {\n\t\t\t\t\treturn new DefaultDenseDoubleMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\t\t} else {\n\t\t\t\t\treturn new DefaultDenseDoubleMatrixMultiD(size);\n\t\t\t\t}\n\t\t\tcase FLOAT:\n\t\t\t\treturn new DefaultDenseFloatMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase INT:\n\t\t\t\treturn new DefaultDenseIntMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase LONG:\n\t\t\t\treturn new DefaultDenseLongMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase OBJECT:\n\t\t\t\treturn ObjectMatrix.Factory.zeros(size);\n\t\t\tcase SHORT:\n\t\t\t\treturn new DefaultDenseShortMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase STRING:\n\t\t\t\treturn new DefaultDenseStringMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tdefault:\n\t\t\t\tthrow new RuntimeException(\"unknown value type: \" + valueType);\n\t\t\t}\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private <T> T api(String api, Rest rest, Object value, String[] filters)\n    {\n        if (api.length() > 0) {\n            if (api.startsWith(\"/\") == false) {\n                api = \"/\" + api;\n            }\n            if (api.charAt(api.length() - 1) == '/') {\n                api = api.substring(0, api.length() - 1);\n            }\n            api = api.replace(\".format\", \".json\").replace(\".xml\", \".json\");\n            if (api.indexOf(\".json\") == -1) {\n                api += \".json\";\n            }\n        } else {\n            return null;\n        }\n        \n        Type type = null;\n        if (\n                api.matches(\"^/me.json\") ||\n                api.matches(\"^/me/(followings(/[0-9]+)?|followers(/[0-9]+)?).json\") ||\n                api.matches(\"^/users(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(followings|followers).json\") ||\n                api.matches(\"^/groups/([0-9]+)/(users|moderators|members|contributors).json\")\n        ){\n            type = Type.USER;\n        } else if(\n                api.matches(\"^/tracks(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/(tracks|favorites)(/[0-9]+)?.json\") ||\n                api.matches(\"^/users/([0-9]+)/(tracks|favorites).json\")\n        ){\n            type = Type.TRACK;\n        } else if(\n                api.matches(\"^/playlists(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/playlists.json\") ||\n                api.matches(\"^/users/([0-9]+)/playlists.json\") ||\n                api.matches(\"^/groups/([0-9]+)/tracks.json\")\n        ){\n            type = Type.PLAYLIST;\n        } else if(\n                api.matches(\"^/comments/([0-9]+).json\") ||\n                api.matches(\"^/me/comments.json\") ||\n                api.matches(\"^/tracks/([0-9]+)/comments.json\")\n        ){\n            type = Type.COMMENT;\n        } else if(\n                api.matches(\"^/groups(/[0-9]+)?.json\") ||\n                api.matches(\"^/me/groups.json\") ||\n                api.matches(\"^/users/([0-9]+)/groups.json\")\n        ){\n            type = Type.GROUP;\n        }\n        if (type == null) {\n            return null;\n        }\n        \n        if (filters != null) {\n            if (filters.length > 0 && filters.length % 2 == 0) {\n                api += \"?\";\n                for (int i = 0, l = filters.length; i < l; i += 2) {\n                    if (i != 0) {\n                        api += \"&\";\n                    }\n                    api += (filters[i] + \"=\" + filters[i + 1]);\n                }\n                if(this.token == null){\n                \tapi += (\"&consumer_key=\"+this.app_client_id);\n                }\n            }\n        } else {\n        \tapi += \"?consumer_key=\"+this.app_client_id;\n        }\n        \n        try {\n            \n            Request resource;\n            HttpResponse response;\n            String klass, content;\n            \n            switch(rest){           \n                case GET:\n                    response = wrapper.get(Request.to(api));\n                    \n                    if(response.getStatusLine().getStatusCode()==303){ // recursive better?\n                        api = (String)(response.getFirstHeader(\"Location\").getValue()+\".json\").replace(\"https://api.soundcloud.com\",\"\");\n                        response = wrapper.get( Request.to(api) );\n                    }\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        if (json.startsWith(\"[\") && json.endsWith(\"]\")) {\n                            JSONArray data = (JSONArray) parser.parse(json);\n                            \n                            if (data.size() > 0) {\n                                switch(type){\n                                    case USER:\n                                        ArrayList<User> users = new ArrayList<User>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();                                  \n                                            User user = gson.fromJson(replaceJsonsBlank(tuple), User.class);\n                                            users.add(user);\n                                        }\n                                        return (T) users;\n                                    case TRACK:\n                                        ArrayList<Track> tracks = new ArrayList<Track>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Track track = gson.fromJson(replaceJsonsBlank(tuple), Track.class);\n                                            track.setSoundCloud(this);\n                                            tracks.add(track);\n                                        }\n                                        return (T) tracks;\n                                    case PLAYLIST:\n                                        ArrayList<Playlist> playlists = new ArrayList<Playlist>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Playlist playlist = gson.fromJson(replaceJsonsBlank(tuple), Playlist.class);\n                                            playlists.add(playlist);\n                                        }\n                                        return (T) playlists;\n                                    case COMMENT:\n                                        ArrayList<Comment> comments = new ArrayList<Comment>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Comment comment = gson.fromJson(replaceJsonsBlank(tuple), Comment.class);\n                                            comments.add(comment);\n                                        }\n                                        return (T) comments;\n                                    case GROUP:\n                                        ArrayList<Group> groups = new ArrayList<Group>();\n                                        for (int i = 0, l = data.size(); i < l; i++) {\n                                            String tuple = data.get(i).toString();\n                                            Group group = gson.fromJson(replaceJsonsBlank(tuple), Group.class);\n                                            groups.add(group);\n                                        }\n                                        return (T) groups;\n                                    default: return null;\n                                }\n                                \n                            }\n                            \n                        } else {\n                            \n                            switch(type){\n                                case USER:\n                                    User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                    return (T) user;\n                                case TRACK:\n                                    Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                    track.setSoundCloud(this);\n                                    return (T) track;\n                                case PLAYLIST:\n                                    Playlist playlist = gson.fromJson(replaceJsonsBlank(json), Playlist.class);\n                                    return (T) playlist;\n                                case COMMENT:\n                                    Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                    return (T) comment;\n                                case GROUP:\n                                    Group group = gson.fromJson(replaceJsonsBlank(json), Group.class);\n                                    return (T) group;\n                                default: return null;\n                            }\n                            \n                        }\n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                break;\n                case POST:\n                    \n                    klass = value.getClass().getName();\n                    klass = klass.substring((klass.lastIndexOf('.')+1));\n\n                    if(klass.equals(\"Track\")){\n                        Track track = ((Track)value);\n                        resource = Request.to(Endpoints.TRACKS)\n                                .add(Params.Track.TITLE,track.getTitle())\n                                .add(Params.Track.TAG_LIST,track.getTagList())\n                                .withFile(Params.Track.ASSET_DATA,new File(track.asset_data));\n                    } else if(klass.equals(\"Comment\")){\n                        content = gson.toJson(value);\n                        content = \"{\\\"comment\\\":\"+content+\"}\";\n                        resource = Request.to(api.replace(\".json\",\"\"))\n                                .withContent(content, \"application/json\");\n                    } else {\n                        return null;\n                    }\n                    \n                    response = wrapper.post(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        switch(type){\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            case COMMENT:\n                                Comment comment = gson.fromJson(replaceJsonsBlank(json), Comment.class);\n                                return (T) comment;\n                            default: return null;\n                        }\n                        \n                    } else {\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case PUT:\n                    \n                    if( value!=null ){\n                    \n                        klass = value.getClass().getName();\n                        klass = klass.substring((klass.lastIndexOf('.')+1));\n                        \n                        content = gson.toJson(value);\n    \n                        if(klass.equals(\"User\")){\n                            content = \"{\\\"user\\\":\"+content+\"}\";\n                        } else if(klass.equals(\"Track\")){\n                            content = \"{\\\"track\\\":\"+content+\"}\";\n                        } else {\n                            return null;\n                        }\n                        \n                        resource = Request.to(api.replace(\".json\",\"\")).withContent(content, \"application/json\");\n                    } else {\n                        resource = Request.to(api.replace(\".json\",\"\"));\n                    }\n                    \n                    response = wrapper.put(resource);\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        String json = (String)(Http.formatJSON(Http.getString(response))).trim();\n                        \n                        switch(type){\n                            case USER:\n                                User user = gson.fromJson(replaceJsonsBlank(json), User.class);\n                                return (T) user;\n                            case TRACK:\n                                Track track = gson.fromJson(replaceJsonsBlank(json), Track.class);\n                                track.setSoundCloud(this);\n                                return (T) track;\n                            default: return null;\n                        }\n                    } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {\n                        return (T) new Boolean(true);\n                    } else{\n                        System.err.println(\"Invalid status received: \" + response.getStatusLine());\n                    }\n                    \n                break;\n                case DELETE:\n                    response = wrapper.delete( Request.to(api) );\n                    \n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        return (T) new Boolean(true);\n                    }\n                    return (T) new Boolean(false);\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test public void testBlock() throws Exception {\n        ElementSymbol a = new ElementSymbol(\"a\"); //$NON-NLS-1$\n        String type = new String(\"short\"); //$NON-NLS-1$\n        DeclareStatement declStmt = new DeclareStatement(a, type);\n        Statement stmt = declStmt;\n        Block block = new Block(stmt);       \n       \n        helpBlockTest(\"BEGIN DECLARE short a; END\", \"BEGIN\"+\"\\n\"+\"DECLARE short a;\"+\"\\n\"+\"END\", //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$\n            block);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic SmoothStreamingRendererBuilder(Context context, String userAgent, String url,\n      MediaDrmCallback drmCallback) {\n    this.context = context;\n    this.userAgent = userAgent;\n    this.url = Util.toLowerInvariant(url).endsWith(\"/manifest\") ? url : url + \"/Manifest\";\n    this.drmCallback = drmCallback;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@SuppressLint(\"NewApi\")\n\tpublic static Bitmap fastblur(Context context, Bitmap sentBitmap, int radius) {\n\n\t\tif (VERSION.SDK_INT > 16) {\n\t\t\tBitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n\t\t\tfinal RenderScript rs = RenderScript.create(context);\n\t\t\tfinal Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n\t\t\t\t\tAllocation.USAGE_SCRIPT);\n\t\t\tfinal Allocation output = Allocation.createTyped(rs, input.getType());\n\t\t\tfinal ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n\t\t\tscript.setRadius(radius );\n\t\t\tscript.setInput(input);\n\t\t\tscript.forEach(output);\n\t\t\toutput.copyTo(bitmap);\n\t\t\treturn bitmap;\n\t\t}\n\n\n\n\t\tBitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n\t\tif (radius < 1) {\n\t\t\treturn (null);\n\t\t}\n\n\t\tint w = bitmap.getWidth();\n\t\tint h = bitmap.getHeight();\n\n\t\tint[] pix = new int[w * h];\n\t\tLog.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n\t\tbitmap.getPixels(pix, 0, w, 0, 0, w, h);\n\n\t\tint wm = w - 1;\n\t\tint hm = h - 1;\n\t\tint wh = w * h;\n\t\tint div = radius + radius + 1;\n\n\t\tint r[] = new int[wh];\n\t\tint g[] = new int[wh];\n\t\tint b[] = new int[wh];\n\t\tint rsum, gsum, bsum, x, y, i, p, yp, yi, yw;\n\t\tint vmin[] = new int[Math.max(w, h)];\n\n\t\tint divsum = (div + 1) >> 1;\n\t\tdivsum *= divsum;\n\t\tint dv[] = new int[256 * divsum];\n\t\tfor (i = 0; i < 256 * divsum; i++) {\n\t\t\tdv[i] = (i / divsum);\n\t\t}\n\n\t\tyw = yi = 0;\n\n\t\tint[][] stack = new int[div][3];\n\t\tint stackpointer;\n\t\tint stackstart;\n\t\tint[] sir;\n\t\tint rbs;\n\t\tint r1 = radius + 1;\n\t\tint routsum, goutsum, boutsum;\n\t\tint rinsum, ginsum, binsum;\n\n\t\tfor (y = 0; y < h; y++) {\n\t\t\trinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n\t\t\tfor (i = -radius; i <= radius; i++) {\n\t\t\t\tp = pix[yi + Math.min(wm, Math.max(i, 0))];\n\t\t\t\tsir = stack[i + radius];\n\t\t\t\tsir[0] = (p & 0xff0000) >> 16;\n\t\t\t\tsir[1] = (p & 0x00ff00) >> 8;\n\t\t\t\tsir[2] = (p & 0x0000ff);\n\t\t\t\trbs = r1 - Math.abs(i);\n\t\t\t\trsum += sir[0] * rbs;\n\t\t\t\tgsum += sir[1] * rbs;\n\t\t\t\tbsum += sir[2] * rbs;\n\t\t\t\tif (i > 0) {\n\t\t\t\t\trinsum += sir[0];\n\t\t\t\t\tginsum += sir[1];\n\t\t\t\t\tbinsum += sir[2];\n\t\t\t\t} else {\n\t\t\t\t\troutsum += sir[0];\n\t\t\t\t\tgoutsum += sir[1];\n\t\t\t\t\tboutsum += sir[2];\n\t\t\t\t}\n\t\t\t}\n\t\t\tstackpointer = radius;\n\n\t\t\tfor (x = 0; x < w; x++) {\n\n\t\t\t\tr[yi] = dv[rsum];\n\t\t\t\tg[yi] = dv[gsum];\n\t\t\t\tb[yi] = dv[bsum];\n\n\t\t\t\trsum -= routsum;\n\t\t\t\tgsum -= goutsum;\n\t\t\t\tbsum -= boutsum;\n\n\t\t\t\tstackstart = stackpointer - radius + div;\n\t\t\t\tsir = stack[stackstart % div];\n\n\t\t\t\troutsum -= sir[0];\n\t\t\t\tgoutsum -= sir[1];\n\t\t\t\tboutsum -= sir[2];\n\n\t\t\t\tif (y == 0) {\n\t\t\t\t\tvmin[x] = Math.min(x + radius + 1, wm);\n\t\t\t\t}\n\t\t\t\tp = pix[yw + vmin[x]];\n\n\t\t\t\tsir[0] = (p & 0xff0000) >> 16;\n\t\t\t\tsir[1] = (p & 0x00ff00) >> 8;\n\t\t\t\tsir[2] = (p & 0x0000ff);\n\n\t\t\t\trinsum += sir[0];\n\t\t\t\tginsum += sir[1];\n\t\t\t\tbinsum += sir[2];\n\n\t\t\t\trsum += rinsum;\n\t\t\t\tgsum += ginsum;\n\t\t\t\tbsum += binsum;\n\n\t\t\t\tstackpointer = (stackpointer + 1) % div;\n\t\t\t\tsir = stack[(stackpointer) % div];\n\n\t\t\t\troutsum += sir[0];\n\t\t\t\tgoutsum += sir[1];\n\t\t\t\tboutsum += sir[2];\n\n\t\t\t\trinsum -= sir[0];\n\t\t\t\tginsum -= sir[1];\n\t\t\t\tbinsum -= sir[2];\n\n\t\t\t\tyi++;\n\t\t\t}\n\t\t\tyw += w;\n\t\t}\n\t\tfor (x = 0; x < w; x++) {\n\t\t\trinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n\t\t\typ = -radius * w;\n\t\t\tfor (i = -radius; i <= radius; i++) {\n\t\t\t\tyi = Math.max(0, yp) + x;\n\n\t\t\t\tsir = stack[i + radius];\n\n\t\t\t\tsir[0] = r[yi];\n\t\t\t\tsir[1] = g[yi];\n\t\t\t\tsir[2] = b[yi];\n\n\t\t\t\trbs = r1 - Math.abs(i);\n\n\t\t\t\trsum += r[yi] * rbs;\n\t\t\t\tgsum += g[yi] * rbs;\n\t\t\t\tbsum += b[yi] * rbs;\n\n\t\t\t\tif (i > 0) {\n\t\t\t\t\trinsum += sir[0];\n\t\t\t\t\tginsum += sir[1];\n\t\t\t\t\tbinsum += sir[2];\n\t\t\t\t} else {\n\t\t\t\t\troutsum += sir[0];\n\t\t\t\t\tgoutsum += sir[1];\n\t\t\t\t\tboutsum += sir[2];\n\t\t\t\t}\n\n\t\t\t\tif (i < hm) {\n\t\t\t\t\typ += w;\n\t\t\t\t}\n\t\t\t}\n\t\t\tyi = x;\n\t\t\tstackpointer = radius;\n\t\t\tfor (y = 0; y < h; y++) {\n\t\t\t\tpix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8) | dv[bsum];\n\n\t\t\t\trsum -= routsum;\n\t\t\t\tgsum -= goutsum;\n\t\t\t\tbsum -= boutsum;\n\n\t\t\t\tstackstart = stackpointer - radius + div;\n\t\t\t\tsir = stack[stackstart % div];\n\n\t\t\t\troutsum -= sir[0];\n\t\t\t\tgoutsum -= sir[1];\n\t\t\t\tboutsum -= sir[2];\n\n\t\t\t\tif (x == 0) {\n\t\t\t\t\tvmin[y] = Math.min(y + r1, hm) * w;\n\t\t\t\t}\n\t\t\t\tp = x + vmin[y];\n\n\t\t\t\tsir[0] = r[p];\n\t\t\t\tsir[1] = g[p];\n\t\t\t\tsir[2] = b[p];\n\n\t\t\t\trinsum += sir[0];\n\t\t\t\tginsum += sir[1];\n\t\t\t\tbinsum += sir[2];\n\n\t\t\t\trsum += rinsum;\n\t\t\t\tgsum += ginsum;\n\t\t\t\tbsum += binsum;\n\n\t\t\t\tstackpointer = (stackpointer + 1) % div;\n\t\t\t\tsir = stack[stackpointer];\n\n\t\t\t\troutsum += sir[0];\n\t\t\t\tgoutsum += sir[1];\n\t\t\t\tboutsum += sir[2];\n\n\t\t\t\trinsum -= sir[0];\n\t\t\t\tginsum -= sir[1];\n\t\t\t\tbinsum -= sir[2];\n\n\t\t\t\tyi += w;\n\t\t\t}\n\t\t}\n\n\t\tLog.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n\t\tbitmap.setPixels(pix, 0, w, 0, 0, w, h);\n\t\treturn (bitmap);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        public float value(float... val) throws Exception\n        {\n            if (!model.isPreEvaluated)\n                throw new java.util.MissingResourceException(\"blocking preliminary access\", this.getClass().getName(), \"\");\n            int tind = (int)val[0],\n                col = (int)val[1];\n\n            DataTable table = model.dataTables.get(tind);\n            if (table == null)\n                return 0f;\n            Float min = Float.MAX_VALUE;\n            for(int i = 0; i < table.data.size(); i++)\n            {\n                Object o = table.data.get(i)[col-1];\n                if (o instanceof Float)\n                    min = Math.min((Float)o, min);\n            }\n            if (min == Float.MAX_VALUE)\n            {\n                return 0f;\n            }\n            return min;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static String utf8BytesToString(ByteArray bytes) {\n        \n        byte[] byteArray = new byte[bytes.size()]; \n        bytes.getBytes(byteArray, 0);\n        return Utf8Utils.utf8BytesToString(byteArray);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public boolean isSourceEncodingSupported(AudioFormat.Encoding sourceEncoding){\n\n        AudioFormat.Encoding sourceEncodings[] = getSourceEncodings();\n\n        for(int i=0; i<sourceEncodings.length; i++) {\n            if( sourceEncoding.equals( sourceEncodings[i]) ) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n        if(!nonSequentialModel)\n            return new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n        else{\n\n            CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n            this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n            BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n            this.updateNaturalParameterPrior(prior);\n\n            return learntBN;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n\t\tpublic PsiBuilder.Marker parseAndDone(ShaderLabParserBuilder builder, @NotNull PsiBuilder.Marker mark)\n\t\t{\n\t\t\tIElementType valueTokenType = builder.getTokenType();\n\t\t\tif(valueTokenType == ShaderLabTokens.STRING_LITERAL)\n\t\t\t{\n\t\t\t\tPsiBuilder.Marker refMarker = builder.mark();\n\t\t\t\tbuilder.advanceLexer();\n\t\t\t\trefMarker.done(ShaderLabElements.REFERENCE);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdoneWithErrorSafe(builder, \"Wrong value\");\n\t\t\t}\n\n\t\t\tmark.done(ShaderLabElements.SIMPLE_VALUE);\n\t\t\treturn mark;\n\t\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PrintCommandListener(PrintWriter writer, boolean suppressLogin, char eolMarker, boolean showDirection)\n    {\n        __writer = writer;\n        __nologin = suppressLogin;\n        __eolMarker = eolMarker;\n        __directionMarker = showDirection;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic SmoothStreamingRendererBuilder(String userAgent, String url, String contentId,\n      MediaDrmCallback drmCallback, TextView debugTextView) {\n    this.userAgent = userAgent;\n    this.url = url;\n    this.contentId = contentId;\n    this.drmCallback = drmCallback;\n    this.debugTextView = debugTextView;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public void onPlayerStateChange(PlayerState oldState, PlayerState newState, Bundle extra) {\n\n        mPrevState = mCurrentState;\n        mCurrentState = newState;\n        Log.d(TAG, \"State change event! Oldstate= \" + oldState + \" NewState= \" + newState);\n        if (mPrevState == mCurrentState) {\n            Log.w(TAG, \"Duplicate state change message!!! \");\n        }\n        if (mPrevState == PlayerState.BUFFERING && mCurrentState != PlayerState.BUFFERING) {\n            AnalyticsHelper.trackPlaybackControlAction(AnalyticsTags.ACTION_PLAYBACK_BUFFER_END,\n                                                       mSelectedContent, getCurrentPosition());\n        }\n        switch (newState) {\n            case IDLE:\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mIsContentChangeRequested) {\n                    openSelectedContent();\n                }\n                break;\n            case OPENING:\n                break;\n            case OPENED:\n                if (mPlayer != null && mIsActivityResumed) {\n                    mPlayer.prepare();\n                }\n                else {\n                    mIsContentChangeRequested = false;\n                }\n                if (mIsContentSupportCC && mIsCloseCaptionEnabled) {\n                    if (mPlaybackOverlayFragment != null) {\n                        mPlaybackOverlayFragment.updateCCButtonState(true, true);\n                    }\n                    if (mPlayer != null) {\n                        mPlayer.enableTextTrack(TrackType.SUBTITLE, true);\n                    }\n                }\n                break;\n            case PREPARING:\n                if (mPlaybackOverlayFragment != null && mPlaybackOverlayFragment.getView() !=\n                        null) {\n                    mPlaybackOverlayFragment.getView().setVisibility(View.VISIBLE);\n                }\n                break;\n            case READY:\n                mPlaybackState = LeanbackPlaybackState.PAUSED;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(false);\n                }\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                if (mPrevState == PlayerState.PREPARING) {\n                    if (mPlaybackOverlayFragment != null) {\n                        mPlaybackOverlayFragment.updatePlayback();\n                        mPlaybackOverlayFragment.startProgressAutomation();\n                    }\n                    if (mCurrentPlaybackPosition > 0) {\n                        mPlayer.seekTo(mCurrentPlaybackPosition);\n                    }\n                    if (mAutoPlay || mIsContentChangeRequested) {\n                        play();\n                        mAutoPlay = false;\n                        if (mIsContentChangeRequested) {\n                            mIsContentChangeRequested = false;\n                        }\n                    }\n                }\n                else if (mAudioFocusState == AudioFocusState.NoFocusNoDuck) {\n                    play();\n                }\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PAUSED);\n                }\n                break;\n            case PLAYING:\n                mPlaybackState = LeanbackPlaybackState.PLAYING;\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.togglePlaybackUI(true);\n                }\n                hideProgress();\n                mWindow.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.PLAYING);\n                }\n                break;\n            case BUFFERING:\n                showProgress();\n                AnalyticsHelper.trackPlaybackControlAction(AnalyticsTags\n                                                                   .ACTION_PLAYBACK_BUFFER_START,\n                                                           mSelectedContent, getCurrentPosition());\n                break;\n            case SEEKING:\n                showProgress();\n                break;\n            case ENDED:\n                hideProgress();\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.playbackFinished();\n                }\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n                if (mAdsImplementation != null) {\n                    mAdsImplementation.setPlayerState(IAds.PlayerState.COMPLETED);\n                }\n                break;\n            case CLOSING:\n                if (mPlaybackOverlayFragment != null) {\n                    mPlaybackOverlayFragment.stopProgressAutomation();\n                }\n                break;\n            case ERROR:\n                hideProgress();\n                mWindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                Log.e(TAG, \"Player encountered an error!\");\n                break;\n            default:\n                Log.e(TAG, \"Unknown state!!!!!\");\n                break;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    @Override\n    public BayesianNetwork getLearntBayesianNetwork() {\n        if(!nonSequentialModel)\n            return new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n        else{\n\n            CompoundVector prior = this.plateuStructure.getPlateauNaturalParameterPrior();\n\n            this.updateNaturalParameterPrior(this.plateuStructure.getPlateauNaturalParameterPosterior());\n\n            BayesianNetwork learntBN =  new BayesianNetwork(this.dag, ef_extendedBN.toConditionalDistribution());\n\n            this.updateNaturalParameterPrior(prior);\n\n            return learntBN;\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate void setSceneRasterStartAndStopTime(Product product) {\n        final Product sourceProduct = getSourceProduct();\n        final ProductData.UTC startTime = sourceProduct.getStartTime();\n        final ProductData.UTC stopTime = sourceProduct.getEndTime();\n        final ProductSubsetDef subsetDef = getSubsetDef();\n        if (startTime != null && stopTime != null && subsetDef != null && subsetDef.getRegion() != null) {\n            final double height = sourceProduct.getSceneRasterHeight();\n            final Rectangle region = subsetDef.getRegion();\n            final double regionY = region.getY();\n            final double regionHeight = region.getHeight();\n            final double dStart = startTime.getMJD();\n            final double dStop = stopTime.getMJD();\n            final double vPerLine = (dStop - dStart) / (height - 1);\n            final double newStart = vPerLine * regionY + dStart;\n            final double newStop = vPerLine * (regionHeight - 1) + newStart;\n            product.setStartTime(new ProductData.UTC(newStart));\n            product.setEndTime(new ProductData.UTC(newStop));\n        } else {\n            product.setStartTime(startTime);\n            product.setEndTime(stopTime);\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic int\n    normalizeMe() throws IllegalArgumentException {\n        int src;\n        int wordcount = 0;\n        int bitcount  = 0;\n        int v = 0;\n        for ( src= nWords-1 ; src >= 0 && (v=data[src]) == 0 ; src--){\n            wordcount += 1;\n        }\n        if ( src < 0 ){\n            throw new IllegalArgumentException(\"zero value\");\n        }\n        \n        nWords -= wordcount;\n        \n        if ( (v & 0xf0000000) != 0 ){\n            for( bitcount = 32 ; (v & 0xf0000000) != 0 ; bitcount-- )\n                v >>>= 1;\n        } else {\n            while ( v <= 0x000fffff ){\n                v <<= 8;\n                bitcount += 8;\n            }\n            while ( v <= 0x07ffffff ){\n                v <<= 1;\n                bitcount += 1;\n            }\n        }\n        if ( bitcount != 0 )\n            lshiftMe( bitcount );\n        return bitcount;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static String getActionName(ActionListener listener)\n\t{\n\t\tEnumeration enu = getActions();\n\t\twhile(enu.hasMoreElements())\n\t\t{\n\t\t\tString name = (String)enu.nextElement();\n\t\t\tActionListener _listener = getAction(name);\n\t\t\tif(_listener == listener)\n\t\t\t\treturn name;\n\t\t}\n\t\treturn null;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static <P extends IUnlistedProperty<T>, T> T getStatePropertySafely(@Nullable TileEntity te, Class<? extends Block> block, P property, T defaultVal) {\n\t\treturn getStatePropertySafely(te, block, property, defaultVal, false, false);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void visitLdcInsn(final Object cst) {\n        if (cst instanceof Integer) {\n            int val = ((Integer) cst).intValue();\n            iconst(val);\n        } else if (cst instanceof Byte) {\n            int val = ((Byte) cst).intValue();\n            iconst(val);\n        } else if (cst instanceof Character) {\n            int val = ((Character) cst).charValue();\n            iconst(val);\n        } else if (cst instanceof Short) {\n            int val = ((Short) cst).intValue();\n            iconst(val);\n        } else if (cst instanceof Boolean) {\n            int val = ((Boolean) cst).booleanValue() ? 1 : 0;\n            iconst(val);\n        } else if (cst instanceof Float) {\n            float val = ((Float) cst).floatValue();\n            fconst(val);\n        } else if (cst instanceof Long) {\n            long val = ((Long) cst).longValue();\n            lconst(val);\n        } else if (cst instanceof Double) {\n            double val = ((Double) cst).doubleValue();\n            dconst(val);\n        } else if (cst instanceof String) {\n            aconst(cst);\n        } else if (cst instanceof Type) {\n            tconst((Type) cst);\n        } else if (cst instanceof Handle) {\n            hconst((Handle) cst);\n        } else {\n            throw new IllegalArgumentException();\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .directModelSubstitute(LocalDate.class, java.sql.Date.class)\n                .directModelSubstitute(LocalDateTime.class, java.util.Date.class)\n                .select()\n                .apis(requestHandler -> {\n                    String packageName = requestHandler.getHandlerMethod().getMethod()\n                            .getDeclaringClass().getPackage().getName();\n                    return packageName.startsWith(\"com.akkafun.\") && packageName.contains(\".web\");\n                })\n                .paths(PathSelectors.any())\n                .build();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tpublic CompletableFuture<StravaAthlete> updateAuthenticatedAthleteAsync(final String city, final String state, final String country, final StravaGender sex, final Float weight) {\n\t\treturn this.athleteService.updateAuthenticatedAthleteAsync(city, state, country, sex, weight);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void drawQuad( FloatBuffer vertices ) {\n\t\t\n\t\tvertices.position( 0 );\n\t\taXY.vertexPointer( 2, 4, vertices );\n\t\t\n\t\tvertices.position( 2 );\n\t\taUV.vertexPointer( 2, 4, vertices );\n\n\t\tGdx.gl.glDrawElements( GL20.GL_TRIANGLES, Quad.SIZE, GL20.GL_UNSIGNED_SHORT, Quad.INDICES_1 );\n\t\t\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate Component buildHeader() {\n        HorizontalLayout header = new HorizontalLayout();\n        header.addStyleName(\"viewheader\");\n        header.setSpacing(true);\n\n        titleLabel = new Label(\"Dashboard\");\n        titleLabel.setId(TITLE_ID);\n        titleLabel.setSizeUndefined();\n        titleLabel.addStyleName(ValoTheme.LABEL_H1);\n        titleLabel.addStyleName(ValoTheme.LABEL_NO_MARGIN);\n        header.addComponent(titleLabel);\n\n        notificationsButton = buildNotificationsButton();\n        Component edit = buildEditButton();\n        HorizontalLayout tools = new HorizontalLayout(notificationsButton, edit);\n        tools.setSpacing(true);\n        tools.addStyleName(\"toolbar\");\n        header.addComponent(tools);\n\n        return header;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public static Class toClass(String str, boolean resolve,\n                                ClassLoader loader) {\n        if (str == null) {\n            throw new NullPointerException(\"str == null\");\n        }\n\n        int dims = 0;\n        while (str.endsWith(\"[]\")) {\n            dims++;\n            str = str.substring(0, str.length() - 2);\n        }\n\n        boolean primitive = false;\n        if (str.indexOf('.') == -1) {\n            for (int i = 0; !primitive && (i < _codes.length); i++) {\n                if (_codes[i][1].equals(str)) {\n                    if (dims == 0) {\n                        return (Class) _codes[i][0];\n                    }\n                    str = (String) _codes[i][2];\n                    primitive = true;\n                }\n            }\n        }\n\n        if (dims > 0) {\n            StringBuilder buf = new StringBuilder(str.length() + dims + 2);\n            for (int i = 0; i < dims; i++) {\n                buf.append('[');\n            }\n            if (!primitive) {\n                buf.append('L');\n            }\n            buf.append(str);\n            if (!primitive) {\n                buf.append(';');\n            }\n            str = buf.toString();\n        }\n\n        if (loader == null) {\n            loader = Thread.currentThread().getContextClassLoader();\n        }\n\n        try {\n            return Class.forName(str, resolve, loader);\n        }\n        catch (ClassNotFoundException | NoClassDefFoundError e) {\n            throw new IllegalArgumentException(e.getMessage());\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic GradientRadialBackground( int innerColor, int outerColor, Dimension start, Dimension end, Dimension centerX, Dimension centerY ) {\n\t\tthis.innerColor = innerColor;\n\t\tthis.outerColor = outerColor;\n\t\tif (start != null && end != null && start.getValue(100) != end.getValue( 100)) {\n\t\t\tthis.start = start;\n\t\t\tthis.end = end;\n\t\t}\n\t\tthis.centerX = centerX;\n\t\tthis.centerY = centerY;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate String nextSignature() {\n        char key = signature.charAt(currentIndex++);\n\n        switch(key) {\n            case (JDWP.Tag.ARRAY):\n                return  key + nextSignature();\n\n            case (JDWP.Tag.OBJECT):\n                int endClass = signature.indexOf(SIGNATURE_ENDCLASS,\n                                                 currentIndex);\n                String retVal = signature.substring(currentIndex - 1,\n                                                    endClass + 1);\n                currentIndex = endClass + 1;\n                return retVal;\n\n            case (JDWP.Tag.VOID):\n            case (JDWP.Tag.BOOLEAN):\n            case (JDWP.Tag.BYTE):\n            case (JDWP.Tag.CHAR):\n            case (JDWP.Tag.SHORT):\n            case (JDWP.Tag.INT):\n            case (JDWP.Tag.LONG):\n            case (JDWP.Tag.FLOAT):\n            case (JDWP.Tag.DOUBLE):\n                return String.valueOf(key);\n\n            case SIGNATURE_ENDFUNC:\n            case SIGNATURE_FUNC:\n                return nextSignature();\n\n            default:\n                throw new IllegalArgumentException(\n                    \"Invalid JNI signature character '\" + key + \"'\");\n\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic ExternalCarrierBillingInstrumentProto(String instrumentKey, String subscriberIdentifier, String accountType, String subscriberCurrency, Long transactionLimit, String subscriberName, String address1, String address2, String city, String state, String postalCode, String country, EncryptedSubscriberInfo encryptedSubscriberInfo) {\n    this.instrumentKey = instrumentKey;\n    this.subscriberIdentifier = subscriberIdentifier;\n    this.accountType = accountType;\n    this.subscriberCurrency = subscriberCurrency;\n    this.transactionLimit = transactionLimit;\n    this.subscriberName = subscriberName;\n    this.address1 = address1;\n    this.address2 = address2;\n    this.city = city;\n    this.state = state;\n    this.postalCode = postalCode;\n    this.country = country;\n    this.encryptedSubscriberInfo = encryptedSubscriberInfo;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static <P extends IUnlistedProperty<T>, T> T getStatePropertySafely(@Nullable TileEntity te, Class<? extends Block> block, P property, T defaultVal) {\n\t\treturn getStatePropertySafely(te, block, property, defaultVal, false, false);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static <P extends IUnlistedProperty<T>, T> T getStatePropertySafely(@Nullable TileEntity te, Class<? extends Block> block, P property, T defaultVal) {\n\t\treturn getStatePropertySafely(te, block, property, defaultVal, false, false);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void testParameterTypes() throws Exception {\n        Response<String> response = webb\n                .get(\"/parameter-types\")\n                .param(\"string\", SIMPLE_ASCII)\n                .param(\"number\", 815)\n                .param(\"number\", 4711) // test overwrite feature of multiple calls with same name\n                .param(\"null\", null)\n                .param(\"empty\", \"\")\n                .asString();\n\n        assertEquals(204, response.getStatusCode());\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@SuppressLint(\"NewApi\")\n\tpublic static Bitmap fastblur(Context context, Bitmap sentBitmap, int radius) {\n\n\t\tif (VERSION.SDK_INT > 16) {\n\t\t\tBitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n\t\t\tfinal RenderScript rs = RenderScript.create(context);\n\t\t\tfinal Allocation input = Allocation.createFromBitmap(rs, sentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n\t\t\t\t\tAllocation.USAGE_SCRIPT);\n\t\t\tfinal Allocation output = Allocation.createTyped(rs, input.getType());\n\t\t\tfinal ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\n\t\t\tscript.setRadius(radius );\n\t\t\tscript.setInput(input);\n\t\t\tscript.forEach(output);\n\t\t\toutput.copyTo(bitmap);\n\t\t\treturn bitmap;\n\t\t}\n\n\n\n\t\tBitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n\t\tif (radius < 1) {\n\t\t\treturn (null);\n\t\t}\n\n\t\tint w = bitmap.getWidth();\n\t\tint h = bitmap.getHeight();\n\n\t\tint[] pix = new int[w * h];\n\t\tLog.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n\t\tbitmap.getPixels(pix, 0, w, 0, 0, w, h);\n\n\t\tint wm = w - 1;\n\t\tint hm = h - 1;\n\t\tint wh = w * h;\n\t\tint div = radius + radius + 1;\n\n\t\tint r[] = new int[wh];\n\t\tint g[] = new int[wh];\n\t\tint b[] = new int[wh];\n\t\tint rsum, gsum, bsum, x, y, i, p, yp, yi, yw;\n\t\tint vmin[] = new int[Math.max(w, h)];\n\n\t\tint divsum = (div + 1) >> 1;\n\t\tdivsum *= divsum;\n\t\tint dv[] = new int[256 * divsum];\n\t\tfor (i = 0; i < 256 * divsum; i++) {\n\t\t\tdv[i] = (i / divsum);\n\t\t}\n\n\t\tyw = yi = 0;\n\n\t\tint[][] stack = new int[div][3];\n\t\tint stackpointer;\n\t\tint stackstart;\n\t\tint[] sir;\n\t\tint rbs;\n\t\tint r1 = radius + 1;\n\t\tint routsum, goutsum, boutsum;\n\t\tint rinsum, ginsum, binsum;\n\n\t\tfor (y = 0; y < h; y++) {\n\t\t\trinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n\t\t\tfor (i = -radius; i <= radius; i++) {\n\t\t\t\tp = pix[yi + Math.min(wm, Math.max(i, 0))];\n\t\t\t\tsir = stack[i + radius];\n\t\t\t\tsir[0] = (p & 0xff0000) >> 16;\n\t\t\t\tsir[1] = (p & 0x00ff00) >> 8;\n\t\t\t\tsir[2] = (p & 0x0000ff);\n\t\t\t\trbs = r1 - Math.abs(i);\n\t\t\t\trsum += sir[0] * rbs;\n\t\t\t\tgsum += sir[1] * rbs;\n\t\t\t\tbsum += sir[2] * rbs;\n\t\t\t\tif (i > 0) {\n\t\t\t\t\trinsum += sir[0];\n\t\t\t\t\tginsum += sir[1];\n\t\t\t\t\tbinsum += sir[2];\n\t\t\t\t} else {\n\t\t\t\t\troutsum += sir[0];\n\t\t\t\t\tgoutsum += sir[1];\n\t\t\t\t\tboutsum += sir[2];\n\t\t\t\t}\n\t\t\t}\n\t\t\tstackpointer = radius;\n\n\t\t\tfor (x = 0; x < w; x++) {\n\n\t\t\t\tr[yi] = dv[rsum];\n\t\t\t\tg[yi] = dv[gsum];\n\t\t\t\tb[yi] = dv[bsum];\n\n\t\t\t\trsum -= routsum;\n\t\t\t\tgsum -= goutsum;\n\t\t\t\tbsum -= boutsum;\n\n\t\t\t\tstackstart = stackpointer - radius + div;\n\t\t\t\tsir = stack[stackstart % div];\n\n\t\t\t\troutsum -= sir[0];\n\t\t\t\tgoutsum -= sir[1];\n\t\t\t\tboutsum -= sir[2];\n\n\t\t\t\tif (y == 0) {\n\t\t\t\t\tvmin[x] = Math.min(x + radius + 1, wm);\n\t\t\t\t}\n\t\t\t\tp = pix[yw + vmin[x]];\n\n\t\t\t\tsir[0] = (p & 0xff0000) >> 16;\n\t\t\t\tsir[1] = (p & 0x00ff00) >> 8;\n\t\t\t\tsir[2] = (p & 0x0000ff);\n\n\t\t\t\trinsum += sir[0];\n\t\t\t\tginsum += sir[1];\n\t\t\t\tbinsum += sir[2];\n\n\t\t\t\trsum += rinsum;\n\t\t\t\tgsum += ginsum;\n\t\t\t\tbsum += binsum;\n\n\t\t\t\tstackpointer = (stackpointer + 1) % div;\n\t\t\t\tsir = stack[(stackpointer) % div];\n\n\t\t\t\troutsum += sir[0];\n\t\t\t\tgoutsum += sir[1];\n\t\t\t\tboutsum += sir[2];\n\n\t\t\t\trinsum -= sir[0];\n\t\t\t\tginsum -= sir[1];\n\t\t\t\tbinsum -= sir[2];\n\n\t\t\t\tyi++;\n\t\t\t}\n\t\t\tyw += w;\n\t\t}\n\t\tfor (x = 0; x < w; x++) {\n\t\t\trinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n\t\t\typ = -radius * w;\n\t\t\tfor (i = -radius; i <= radius; i++) {\n\t\t\t\tyi = Math.max(0, yp) + x;\n\n\t\t\t\tsir = stack[i + radius];\n\n\t\t\t\tsir[0] = r[yi];\n\t\t\t\tsir[1] = g[yi];\n\t\t\t\tsir[2] = b[yi];\n\n\t\t\t\trbs = r1 - Math.abs(i);\n\n\t\t\t\trsum += r[yi] * rbs;\n\t\t\t\tgsum += g[yi] * rbs;\n\t\t\t\tbsum += b[yi] * rbs;\n\n\t\t\t\tif (i > 0) {\n\t\t\t\t\trinsum += sir[0];\n\t\t\t\t\tginsum += sir[1];\n\t\t\t\t\tbinsum += sir[2];\n\t\t\t\t} else {\n\t\t\t\t\troutsum += sir[0];\n\t\t\t\t\tgoutsum += sir[1];\n\t\t\t\t\tboutsum += sir[2];\n\t\t\t\t}\n\n\t\t\t\tif (i < hm) {\n\t\t\t\t\typ += w;\n\t\t\t\t}\n\t\t\t}\n\t\t\tyi = x;\n\t\t\tstackpointer = radius;\n\t\t\tfor (y = 0; y < h; y++) {\n\t\t\t\tpix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8) | dv[bsum];\n\n\t\t\t\trsum -= routsum;\n\t\t\t\tgsum -= goutsum;\n\t\t\t\tbsum -= boutsum;\n\n\t\t\t\tstackstart = stackpointer - radius + div;\n\t\t\t\tsir = stack[stackstart % div];\n\n\t\t\t\troutsum -= sir[0];\n\t\t\t\tgoutsum -= sir[1];\n\t\t\t\tboutsum -= sir[2];\n\n\t\t\t\tif (x == 0) {\n\t\t\t\t\tvmin[y] = Math.min(y + r1, hm) * w;\n\t\t\t\t}\n\t\t\t\tp = x + vmin[y];\n\n\t\t\t\tsir[0] = r[p];\n\t\t\t\tsir[1] = g[p];\n\t\t\t\tsir[2] = b[p];\n\n\t\t\t\trinsum += sir[0];\n\t\t\t\tginsum += sir[1];\n\t\t\t\tbinsum += sir[2];\n\n\t\t\t\trsum += rinsum;\n\t\t\t\tgsum += ginsum;\n\t\t\t\tbsum += binsum;\n\n\t\t\t\tstackpointer = (stackpointer + 1) % div;\n\t\t\t\tsir = stack[stackpointer];\n\n\t\t\t\troutsum += sir[0];\n\t\t\t\tgoutsum += sir[1];\n\t\t\t\tboutsum += sir[2];\n\n\t\t\t\trinsum -= sir[0];\n\t\t\t\tginsum -= sir[1];\n\t\t\t\tbinsum -= sir[2];\n\n\t\t\t\tyi += w;\n\t\t\t}\n\t\t}\n\n\t\tLog.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n\t\tbitmap.setPixels(pix, 0, w, 0, 0, w, h);\n\t\treturn (bitmap);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public PartitionLoad getLoad() throws IOException{\n        Map<ServerName, List<HRegionInfo>> serverToRegionMap=new HashMap<>();\n        try(RegionLocator rl=connection.getRegionLocator(tableName)){\n            List<HRegionLocation> locations=rl.getAllRegionLocations();\n            for(HRegionLocation location : locations){\n                List<HRegionInfo> info=serverToRegionMap.get(location.getServerName());\n                if(info==null){\n                    info = new LinkedList<>();\n                    serverToRegionMap.put(location.getServerName(),info);\n                }\n                info.add(location.getRegionInfo());\n            }\n        }\n        int totalStoreFileSizeMB = 0;\n        int totalMemstoreSieMB = 0;\n        int storefileIndexSizeMB = 0;\n        try(Admin admin=connection.getAdmin()){\n            ClusterStatus clusterStatus=admin.getClusterStatus();\n            for(Map.Entry<ServerName,List<HRegionInfo>> entry:serverToRegionMap.entrySet()){\n                ServerLoad load=clusterStatus.getLoad(entry.getKey());\n                Map<byte[], RegionLoad> regionsLoad=load.getRegionsLoad();\n                for(HRegionInfo info:entry.getValue()){\n                    RegionLoad rl = regionsLoad.get(info.getRegionName());\n                    totalStoreFileSizeMB+=rl.getStorefileSizeMB();\n                    totalMemstoreSieMB+=rl.getMemStoreSizeMB();\n                    storefileIndexSizeMB+=rl.getStorefileIndexSizeMB();\n                }\n            }\n        }\n        return new HPartitionLoad(getName(),totalStoreFileSizeMB,totalMemstoreSieMB,storefileIndexSizeMB);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Test\n    public void testBlock() throws HyperLedgerException, IOException {\n        Block b1 =\n                Block.fromWireDump(\"\", formatter, BitcoinHeader.class);\n        assertTrue(b1.getID().equals(new BID(\"0000000000000449ee5b94ba7a051caffff5c23d6a03335f6e20e3985b5ffa61\")));\n        Block b2 = Block.fromWireDump(b1.toWireDump(), formatter, BitcoinHeader.class);\n        assertTrue(b1.getID().equals(b2.getID()));\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate Token operatorName()\n    {\n        Token token = null;\n    \n        switch ( LA(1) )\n        {\n            case 'a':\n            {\n                token = and();\n                break;\n            }\n    \n            case 'o':\n            {\n                token = or();\n                break;\n            }\n    \n            case 'm':\n            {\n                token = mod();\n                break;\n            }\n    \n            case 'd':\n            {\n                token = div();\n                break;\n            }\n        }\n    \n        return token;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nstatic public String openOrder( int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId +\n        \" action=\" + order.m_action +\n        \" quantity=\" + order.m_totalQuantity +\n        \" symbol=\" + contract.m_symbol +\n        \" exchange=\" + contract.m_exchange +\n        \" secType=\" + contract.m_secType +\n        \" type=\" + order.m_orderType +\n        \" lmtPrice=\" + Util.DoubleMaxString(order.m_lmtPrice) +\n        \" auxPrice=\" + Util.DoubleMaxString(order.m_auxPrice) +\n        \" TIF=\" + order.m_tif +\n        \" localSymbol=\" + contract.m_localSymbol +\n        \" client Id=\" + order.m_clientId +\n        \" parent Id=\" + order.m_parentId +\n        \" permId=\" + order.m_permId +\n        \" outsideRth=\" + order.m_outsideRth +\n        \" hidden=\" + order.m_hidden +\n        \" discretionaryAmt=\" + order.m_discretionaryAmt +\n        \" displaySize=\" + order.m_displaySize +\n        \" triggerMethod=\" + order.m_triggerMethod +\n        \" goodAfterTime=\" + order.m_goodAfterTime +\n        \" goodTillDate=\" + order.m_goodTillDate +\n        \" faGroup=\" + order.m_faGroup +\n        \" faMethod=\" + order.m_faMethod +\n        \" faPercentage=\" + order.m_faPercentage +\n        \" faProfile=\" + order.m_faProfile +\n        \" shortSaleSlot=\" + order.m_shortSaleSlot +\n        \" designatedLocation=\" + order.m_designatedLocation +\n        \" exemptCode=\" + order.m_exemptCode +\n        \" ocaGroup=\" + order.m_ocaGroup +\n        \" ocaType=\" + order.m_ocaType +\n        \" rule80A=\" + order.m_rule80A +\n        \" allOrNone=\" + order.m_allOrNone +\n        \" minQty=\" + Util.IntMaxString(order.m_minQty) +\n        \" percentOffset=\" + Util.DoubleMaxString(order.m_percentOffset) +\n        \" eTradeOnly=\" + order.m_eTradeOnly +\n        \" firmQuoteOnly=\" + order.m_firmQuoteOnly +\n        \" nbboPriceCap=\" + Util.DoubleMaxString(order.m_nbboPriceCap) +\n        \" optOutSmartRouting=\" + order.m_optOutSmartRouting +\n        \" auctionStrategy=\" + order.m_auctionStrategy +\n        \" startingPrice=\" + Util.DoubleMaxString(order.m_startingPrice) +\n        \" stockRefPrice=\" + Util.DoubleMaxString(order.m_stockRefPrice) +\n        \" delta=\" + Util.DoubleMaxString(order.m_delta) +\n        \" stockRangeLower=\" + Util.DoubleMaxString(order.m_stockRangeLower) +\n        \" stockRangeUpper=\" + Util.DoubleMaxString(order.m_stockRangeUpper) +\n        \" volatility=\" + Util.DoubleMaxString(order.m_volatility) +\n        \" volatilityType=\" + order.m_volatilityType +\n        \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType +\n        \" deltaNeutralAuxPrice=\" + Util.DoubleMaxString(order.m_deltaNeutralAuxPrice) +\n        \" deltaNeutralConId=\" + order.m_deltaNeutralConId +\n        \" deltaNeutralSettlingFirm=\" + order.m_deltaNeutralSettlingFirm +\n        \" deltaNeutralClearingAccount=\" + order.m_deltaNeutralClearingAccount +\n        \" deltaNeutralClearingIntent=\" + order.m_deltaNeutralClearingIntent +\n        \" continuousUpdate=\" + order.m_continuousUpdate +\n        \" referencePriceType=\" + order.m_referencePriceType +\n        \" trailStopPrice=\" + Util.DoubleMaxString(order.m_trailStopPrice) +\n        \" trailingPercent=\" + Util.DoubleMaxString(order.m_trailingPercent) +\n        \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) +\n        \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) +\n        \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) +\n        \" scalePriceAdjustValue=\" + Util.DoubleMaxString(order.m_scalePriceAdjustValue) +\n        \" scalePriceAdjustInterval=\" + Util.IntMaxString(order.m_scalePriceAdjustInterval) +\n        \" scaleProfitOffset=\" + Util.DoubleMaxString(order.m_scaleProfitOffset) +\n        \" scaleAutoReset=\" + order.m_scaleAutoReset +\n        \" scaleInitPosition=\" + Util.IntMaxString(order.m_scaleInitPosition) +\n        \" scaleInitFillQty=\" + Util.IntMaxString(order.m_scaleInitFillQty) +\n        \" scaleRandomPercent=\" + order.m_scaleRandomPercent +\n        \" hedgeType=\" + order.m_hedgeType +\n        \" hedgeParam=\" + order.m_hedgeParam +\n        \" account=\" + order.m_account +\n        \" settlingFirm=\" + order.m_settlingFirm +\n        \" clearingAccount=\" + order.m_clearingAccount +\n        \" clearingIntent=\" + order.m_clearingIntent +\n        \" notHeld=\" + order.m_notHeld +\n        \" whatIf=\" + order.m_whatIf\n        ;\n\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tif (contract.m_comboLegsDescrip != null) {\n        \t\tmsg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n        \t}\n        \t\n           \tmsg += \" comboLegs={\";\n            if (contract.m_comboLegs != null) {\n            \tfor (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n            \t\tComboLeg comboLeg = (ComboLeg)contract.m_comboLegs.get(i);\n            \t\tmsg += \" leg \" + (i+1) + \": \"; \n            \t\tmsg += \"conId=\" +  comboLeg.m_conId;\n            \t\tmsg += \" ratio=\" +  comboLeg.m_ratio;\n            \t\tmsg += \" action=\" +  comboLeg.m_action;\n            \t\tmsg += \" exchange=\" +  comboLeg.m_exchange;\n            \t\tmsg += \" openClose=\" +  comboLeg.m_openClose;\n            \t\tmsg += \" shortSaleSlot=\" +  comboLeg.m_shortSaleSlot;\n            \t\tmsg += \" designatedLocation=\" +  comboLeg.m_designatedLocation;\n            \t\tmsg += \" exemptCode=\" +  comboLeg.m_exemptCode;\n            \t\tif (order.m_orderComboLegs != null && contract.m_comboLegs.size() == order.m_orderComboLegs.size()) {\n            \t\t\tOrderComboLeg orderComboLeg = (OrderComboLeg)order.m_orderComboLegs.get(i);\n            \t\t\tmsg += \" price=\" +  Util.DoubleMaxString(orderComboLeg.m_price);\n            \t\t}\n            \t\tmsg += \";\";\n            \t}\n            }\n           \tmsg += \"}\";\n           \t\n        \tif (order.m_basisPoints != Double.MAX_VALUE) {\n        \t\tmsg += \" basisPoints=\" + Util.DoubleMaxString(order.m_basisPoints);\n        \t\tmsg += \" basisPointsType=\" + Util.IntMaxString(order.m_basisPointsType);\n        \t}\n        }\n        \n    \tif (contract.m_underComp != null) {\n    \t\tUnderComp underComp = contract.m_underComp;\n    \t\tmsg +=\n    \t\t\t\" underComp.conId =\" + underComp.m_conId +\n    \t\t\t\" underComp.delta =\" + underComp.m_delta +\n    \t\t\t\" underComp.price =\" + underComp.m_price ;\n    \t}\n    \t\n    \tif (!Util.StringIsEmpty(order.m_algoStrategy)) {\n    \t\tmsg += \" algoStrategy=\" + order.m_algoStrategy;\n    \t\tmsg += \" algoParams={\";\n    \t\tif (order.m_algoParams != null) {\n    \t\t\tVector algoParams = order.m_algoParams;\n    \t\t\tfor (int i = 0; i < algoParams.size(); ++i) {\n    \t\t\t\tTagValue param = (TagValue)algoParams.elementAt(i);\n    \t\t\t\tif (i > 0) {\n    \t\t\t\t\tmsg += \",\";\n    \t\t\t\t}\n    \t\t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n    \t\t\t}\n    \t\t}\n    \t\tmsg += \"}\";\n    \t}\n    \t\n        if (\"BAG\".equals(contract.m_secType)) {\n        \tmsg += \" smartComboRoutingParams={\";\n        \tif (order.m_smartComboRoutingParams != null) {\n        \t\tVector smartComboRoutingParams = order.m_smartComboRoutingParams;\n        \t\tfor (int i = 0; i < smartComboRoutingParams.size(); ++i) {\n        \t\t\tTagValue param = (TagValue)smartComboRoutingParams.elementAt(i);\n        \t\t\tif (i > 0) {\n        \t\t\t\tmsg += \",\";\n        \t\t\t}\n        \t\t\tmsg += param.m_tag + \"=\" + param.m_value;\n        \t\t}\n        \t}\n        \tmsg += \"}\";\n        }\n    \n        String orderStateMsg =\n        \t\" status=\" + orderState.m_status\n        \t+ \" initMargin=\" + orderState.m_initMargin\n        \t+ \" maintMargin=\" + orderState.m_maintMargin\n        \t+ \" equityWithLoan=\" + orderState.m_equityWithLoan\n        \t+ \" commission=\" + Util.DoubleMaxString(orderState.m_commission)\n        \t+ \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission)\n        \t+ \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission)\n        \t+ \" commissionCurrency=\" + orderState.m_commissionCurrency\n        \t+ \" warningText=\" + orderState.m_warningText\n\t\t;\n\n        return msg + orderStateMsg;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprotected void init() {\n        taskTimeout = new Runnable() {\n            @Override\n            public void run() {\n                pendingDataProcessors= null;\n                for(byte it: successfulProcessors) {\n                    removeProcessor(true, it);\n                }\n                createProcessorsTask.setError(new TimeoutException(\"Creating data processor timed out\"));\n            }\n        };\n\n        this.mwPrivate.addResponseHandler(new Pair<>(DATA_PROCESSOR.id, ADD), new JseMetaWearBoard.RegisterResponseHandler() {\n            @Override\n            public void onResponseReceived(byte[] response) {\n                timeoutFuture.cancel(false);\n\n                Processor current = pendingDataProcessors.poll();\n                current.editor.source.eventConfig[2]= response[2];\n                if (current.state != null) {\n                    current.state.eventConfig[2] = response[2];\n                }\n                activeProcessors.put(response[2], current);\n                successfulProcessors.add(response[2]);\n\n                createProcessor();\n            }\n        });\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic int\n    normalizeMe() throws IllegalArgumentException {\n        int src;\n        int wordcount = 0;\n        int bitcount  = 0;\n        int v = 0;\n        for ( src= nWords-1 ; src >= 0 && (v=data[src]) == 0 ; src--){\n            wordcount += 1;\n        }\n        if ( src < 0 ){\n            throw new IllegalArgumentException(\"zero value\");\n        }\n        \n        nWords -= wordcount;\n        \n        if ( (v & 0xf0000000) != 0 ){\n            for( bitcount = 32 ; (v & 0xf0000000) != 0 ; bitcount-- )\n                v >>>= 1;\n        } else {\n            while ( v <= 0x000fffff ){\n                v <<= 8;\n                bitcount += 8;\n            }\n            while ( v <= 0x07ffffff ){\n                v <<= 1;\n                bitcount += 1;\n            }\n        }\n        if ( bitcount != 0 )\n            lshiftMe( bitcount );\n        return bitcount;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate PolicyDescriptions createPolicyDescriptions(Map<URI, PolicyDescription> policies) {\n        PolicyDescriptions pd = new PolicyDescriptions();\n        for(URI key : policies.keySet()) {\n            PolicyDescriptionsEntry entry = new PolicyDescriptionsEntry();\n            entry.setKey(key);\n            entry.setValue(policies.get(key));\n            pd.getEntry().add(entry);\n        }\n        return pd;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public URI resolve(URI uri) {\n        return resolve(this, uri);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@RequestMapping(value = \"api\", method = {RequestMethod.GET,\n            RequestMethod.POST}, produces = {\"application/json;charset=UTF-8\"})\n    @ResponseBody\n    public String api(HttpServletRequest request, Model model,\n                      @RequestParam(\"WIDout_trade_no\") String out_trade_no,\n                      @RequestParam(\"WIDsubject\") String subject,\n                      @RequestParam(\"WIDtotal_fee\") String total_fee,\n                      @RequestParam(\"WIDshow_url\") String show_url,\n                      @RequestParam(\"WIDbody\") String body\n    ) {\n\n        Map<String, String> sParaTemp = new HashMap<String, String>();\n        sParaTemp.put(\"service\", AlipayConfig.service);\n        sParaTemp.put(\"partner\", AlipayConfig.partner);\n        sParaTemp.put(\"seller_id\", AlipayConfig.seller_id);\n        sParaTemp.put(\"_input_charset\", AlipayConfig.input_charset);\n        sParaTemp.put(\"payment_type\", AlipayConfig.payment_type);\n        sParaTemp.put(\"notify_url\", AlipayConfig.notify_url);\n        sParaTemp.put(\"return_url\", AlipayConfig.return_url);\n        sParaTemp.put(\"out_trade_no\", out_trade_no);\n        sParaTemp.put(\"subject\", subject);\n        sParaTemp.put(\"total_fee\", total_fee);\n        sParaTemp.put(\"show_url\", show_url);\n        sParaTemp.put(\"body\", body);\n\n\n\n\n        Map<String, String> sPara = AlipaySubmit.buildRequestPara(sParaTemp);\n\n        JSONObject ret = JsonUtil.getOkJson();\n        ret.put(\"params\", sPara);\n        return ret.toString();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic ShortcutView(final Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t\tpm = context.getPackageManager();\n\t\t\n\t\tsec = PreferenceManager.getDefaultSharedPreferences(getContext());\n\n\t\tpkg = sec.getString(\"pkg\", \"\");\n\t\tpin = sec.getString(\"pin\", \"\");\t\t\n\t\t\n\t\t\n\t\tfor (int i = 0; i < CAPACITY; i++) {\n\t\t\tfinal int b = i;\n\t\t\tApplicationInfo ai = null;\n\t\t\tString sv = null;\n\t\t\tString s = Settings.System.getString(context.getContentResolver(), \"PiSC\" + i);\n\n\t\t\tif (s == null | s == \"\") {\n\n\t\t\t\tSettings.System.putString(context.getContentResolver(), \"PiSC\"+b, \"com.pilockerstable\");\n\t\t\t}\n\t\t\tsv = s;\n\t\t\tShortCut sc = new ShortCut(context, attrs);\n\t\t\t\n\t\t\ttry {\n\t\t\t\tai = pm.getApplicationInfo(sv, 0);\n\t\t\t} catch (NameNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\ttry{\n\t\t\tString App_Name = (String) pm.getApplicationLabel(ai);\n\t\t\tDrawable Icon = pm.getApplicationIcon(ai);\n\t\t\tShortcutter st = new Shortcutter(App_Name, Icon);\n\t\t\tsc.setName(st.getName());\n\t\t\tsc.setImage(st.getIcon());\t\t\t\n\t\t\taddView(sc);\n\t\t\t\n\t\t\t}catch(Exception e){\n\t\t\t\tSettings.System.putString(context.getContentResolver(), \"PiSC\"+b, \"com.pilockerstable\");\n\t\t\t}\n\t\t\t\n\t\t\tsc.setOnClickListener(new OnClickListener() {\n\t\t\t\t\n\t\t\t\tString sv = Settings.System.getString( context.getContentResolver(), \"PiSC\" + b);\n\n\t\t\t\t@Override \n\t\t\t\tpublic void onClick(View arg0) {\n\n\t\t\t\t\tif( pin.equals(\"\") || pin.equals(null) || pin.isEmpty()) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t((Activity) context).finish();\n\t\t\t\t\t\tIntent i = new Intent();\n\t\t\t\t\t\ti.setClass(getContext(), LockerService.class);\n\t\t\t\t\t\tcontext.startService(i);\n\t\t\t\t\t\tIntent LaunchIntent = context.getPackageManager().getLaunchIntentForPackage(sv);\n\t\t\t\t\t\tcontext.startActivity(LaunchIntent);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t}else{\n\t\t\t\t\t\n\t\t\t\t\tsave(\"pkg\", \"true\");\n\t\t\t\t\tIntent x = new Intent(getContext(), PinActivity.class);\n\t\t\t\t\tx.putExtra(\"sv\", sv);\n\t\t\t\t\tcontext.startActivity(x);\n\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    private void addEntries(String newEntries, String modifications, String comment) {\n        boolean modified = false;\n        int childcount = 0;\n        String lastadded = null;\n        DefaultMutableTreeNode insert = (DefaultMutableTreeNode) jTreeDesktop.getLastSelectedPathComponent();\n        if (!insert.getAllowsChildren()) {\n            DefaultMutableTreeNode parent = (DefaultMutableTreeNode) insert.getParent();\n            childcount = parent.getIndex(insert) + 1;\n            insert = parent;\n        }\n        int[] entries = Tools.retrieveEntryNumbersFromInput(newEntries, dataObj.getCount(Daten.ZKNCOUNT));\n        LinkedList<Integer> multipleEntries = new LinkedList<>();\n        showMultipleEntryMsg = true;\n        if (entries != null) {\n            for (int cnt : entries) {\n                if (noDoubleEntries(insert, cnt)) {\n                    for (int me = 0; me < desktopObj.getCount(); me++) {\n                        if (desktopObj.checkForDoubleEntry(me, cnt)) {\n                            multipleEntries.add(cnt);\n                        }\n                    }\n                    lastadded = desktopObj.addEntry(TreeUtil.getNodeTimestamp(insert),\n                            String.valueOf(cnt),\n                            childcount);\n                    if (modifications != null && !modifications.isEmpty()) {\n                        desktopObj.addModifiedEntry(lastadded, modifications);\n                    }\n                    if (comment != null && !comment.isEmpty()) {\n                        desktopObj.setComment(lastadded, comment);\n                    }\n                    modified = true;\n                    childcount++;\n                }\n            }\n        }\n        if (modified) {\n            updateTreeView();\n            selectTreePath(lastadded);\n            showMultipleOccurencesMessage(Tools.retrieveDoubleEntries(desktopObj, multipleEntries));\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic UApp initConfig() {\n    if(conf==null) conf=new UConfig();\n    conf.put(CONFW,1024).put(CONFH,768);\n    conf.put(CONFWINX,0).put(CONFWINY,0);\n    conf.put(CONFDECORATED,false).put(CONFRENDERER, OPENGL);\n    conf.put(CONFPATH,UFile.getCurrentDir());\n    conf.put(CONFDATAPATH,UFile.getCurrentDir());\n    \n    conf.list();\n    appFlags=new HashMap<Integer,Integer>();\n    return this;\n  }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\t@Override\n\tpublic synchronized void clearContexts(Resource... contexts)\n\t\tthrows IOException\n\t{\n\n\n\t\tlogger.debug(\"deleting contexts: {}\", Arrays.toString(contexts));\n\n\t\tfor (Resource context : contexts) {\n\t\t\tString contextString = SearchFields.getContextID(context);\n\t\t\tTerm contextTerm = new Term(SearchFields.CONTEXT_FIELD_NAME, contextString);\n\n\n\t\t\tgetIndexWriter().deleteDocuments(contextTerm);\n\t\t}\n\n\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n        public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps) {\n            return setImageAttachmentsForObject(objectProperty, bitmaps, false);\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tprotected void fireVetoableChange (String name, Object o, Object n)\n\t\tthrows PropertyVetoException\n\t{\n\t\tif (_vetoableSupport != null)\n\t\t\t_vetoableSupport.fireVetoableChange(name, o, n);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\n\n    \n\n\n    @Override\n    public DataInputStream getFileObject(URI fileUri, int start, int limit)\n            throws CatalogIOException {\n\n        Path objectPath = Paths.get(fileUri);\n\n        if (Files.isRegularFile(objectPath)) {\n            try {\n                if (start == -1 && limit == -1) {\n                    return new DataInputStream(Files.newInputStream(objectPath));\n                } else {\n                    return new DataInputStream(IOUtils.headOffset(objectPath, start, limit));\n                }\n            } catch (IOException e) {\n                throw new CatalogIOException(\"Unable to read file\", e);\n            }\n        } else {\n            throw new CatalogIOException(\"Not a regular file: \" + objectPath.toAbsolutePath().toString());\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n        protected void execute2() {\n            versionTo = 24;\n\n            sql = \"DROP TABLE IF EXISTS newuser\";\n            DbUtils.execSQL(db, sql);\n\n            sql = \"UPDATE user SET user_created_date = 0 WHERE user_created_date IS NULL\";\n            DbUtils.execSQL(db, sql);\n            sql = \"UPDATE user SET user_oid = ('andstatustemp:' || _id) WHERE user_oid IS NULL\";\n            DbUtils.execSQL(db, sql);\n\n            sql = \"CREATE TABLE newuser (_id INTEGER PRIMARY KEY AUTOINCREMENT,origin_id INTEGER NOT NULL,user_oid TEXT,username TEXT NOT NULL,webfinger_id TEXT NOT NULL,real_name TEXT,user_description TEXT,location TEXT,profile_url TEXT,homepage TEXT,avatar_url TEXT,banner_url TEXT,msg_count INTEGER DEFAULT 0 NOT NULL,favorited_count INTEGER DEFAULT 0 NOT NULL,following_count INTEGER DEFAULT 0 NOT NULL,followers_count INTEGER DEFAULT 0 NOT NULL,user_created_date INTEGER,user_updated_date INTEGER,user_ins_date INTEGER NOT NULL,home_timeline_position TEXT DEFAULT '' NOT NULL,home_timeline_item_date INTEGER DEFAULT 0 NOT NULL,home_timeline_date INTEGER DEFAULT 0 NOT NULL,favorites_timeline_position TEXT DEFAULT '' NOT NULL,favorites_timeline_item_date INTEGER DEFAULT 0 NOT NULL,favorites_timeline_date INTEGER DEFAULT 0 NOT NULL,direct_timeline_position TEXT DEFAULT '' NOT NULL,direct_timeline_item_date INTEGER DEFAULT 0 NOT NULL,direct_timeline_date INTEGER DEFAULT 0 NOT NULL,mentions_timeline_position TEXT DEFAULT '' NOT NULL,mentions_timeline_item_date INTEGER DEFAULT 0 NOT NULL,mentions_timeline_date INTEGER DEFAULT 0 NOT NULL,user_timeline_position TEXT DEFAULT '' NOT NULL,user_timeline_item_date INTEGER DEFAULT 0 NOT NULL,user_timeline_date INTEGER DEFAULT 0 NOT NULL,following_user_date INTEGER DEFAULT 0 NOT NULL,followers_user_date INTEGER DEFAULT 0 NOT NULL,user_msg_id INTEGER DEFAULT 0 NOT NULL,user_msg_date INTEGER DEFAULT 0 NOT NULL)\";\n            DbUtils.execSQL(db, sql);\n            sql = \"INSERT INTO newuser (\" +\n                    \" _id, origin_id, user_oid, username, webfinger_id, real_name, user_description, location,\" +\n                    \" profile_url, homepage, avatar_url, banner_url,\" +\n                    \" msg_count, favorited_count, following_count, followers_count,\" +\n                    \" user_created_date, user_updated_date, user_ins_date,\" +\n                    \" home_timeline_position, home_timeline_item_date, home_timeline_date, favorites_timeline_position, favorites_timeline_item_date, favorites_timeline_date, direct_timeline_position, direct_timeline_item_date, direct_timeline_date, mentions_timeline_position, mentions_timeline_item_date, mentions_timeline_date, user_timeline_position, user_timeline_item_date, user_timeline_date,\" +\n                    \" following_user_date, followers_user_date, user_msg_id, user_msg_date\" +\n                    \") SELECT \" +\n                    \" _id, origin_id, user_oid, username, webfinger_id, real_name, user_description, NULL,\" +\n                    \" url,         homepage, avatar_url, NULL,\" +\n                    \"         0,               0,               0,               0,\" +\n                    \" user_created_date,                 0, user_ins_date,\" +\n                    \" home_timeline_position, home_timeline_item_date, home_timeline_date, favorites_timeline_position, favorites_timeline_item_date, favorites_timeline_date, direct_timeline_position, direct_timeline_item_date, direct_timeline_date, mentions_timeline_position, mentions_timeline_item_date, mentions_timeline_date, user_timeline_position, user_timeline_item_date, user_timeline_date,\" +\n                    \" following_user_date,                   0, user_msg_id, user_msg_date\" +\n                    \" FROM user\";\n            DbUtils.execSQL(db, sql);\n\n            sql = \"DROP INDEX idx_user_origin\";\n            DbUtils.execSQL(db, sql);\n            sql = \"DROP TABLE user\";\n            DbUtils.execSQL(db, sql);\n\n            sql = \"ALTER TABLE newuser RENAME TO user\";\n            DbUtils.execSQL(db, sql);\n            try {\n                sql = \"CREATE UNIQUE INDEX idx_user_origin ON user (origin_id, user_oid)\";\n                DbUtils.execSQL(db, sql);\n            } catch (Exception e) {\n                MyLog.i(this, \"Couldn't create unique constraint\", e);\n                sql = \"CREATE INDEX idx_user_origin ON user (origin_id, user_oid)\";\n                DbUtils.execSQL(db, sql);\n            }\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate String buildElements() {\n\n        StringBuilder xml = new StringBuilder();\n\n        xml.append(\"<xml>\");\n\n        if (es != null && es.size() > 0){\n            for (E e : es){\n                xml.append(e.render());\n            }\n        }\n\n        xml.append(\"</xml>\");\n\n        return xml.toString();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public boolean isSourceEncodingSupported(AudioFormat.Encoding sourceEncoding){\n\n        AudioFormat.Encoding sourceEncodings[] = getSourceEncodings();\n\n        for(int i=0; i<sourceEncodings.length; i++) {\n            if( sourceEncoding.equals( sourceEncodings[i]) ) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public Map<String, String> getExamples() {\n        return new ExampleMapFactory()\n                .put(\"int x=5;\\nObject a,b;\\nif(a.hashCode()!=x){\\n\\tx = b.hashCode();\\n} else {\\nx=b.hashCode()+4;}\",\n                        \"int x=5;\\nObject a,b;\\nif(a.hashCode()!=x)\\n\\tx = b.hashCode();\\nelse\\nx=b.hashCode()+4;\")\n                .put(\"if(true){\\n\\tSystem.out.println();\\n} else {\\n\\tSystem.out.println();\\n}\", \"if(true)\\n\\tSystem.out.println();\\n else\\n\\tSystem.out.println();\\n\")\n                .put(\"if(true)\\n\\tSystem.out.println();\\n else {\\n\\tSystem.out.println();\\n}\", null)\n                .put(\"if(true){\\n\\tSystem.out.println();\\n} else\\n\\tSystem.out.println();\", null)\n                .put(\"if(true)\\n\\tSystem.out.println();\\n else\\n\\tSystem.out.println();\", null)\n                .put(\"if(true){\\nif(true){\\n\\tSystem.out.println();\\n} else{\\n\\tSystem.out.println();\\n}\\n}\", \"if(true){\\nif(true)\\n\\tSystem.out.println();\\n else\\n\\tSystem.out.println();\\n}\")\n                .put(\"if(true)\\nif(true){\\n\\tSystem.out.println();\\n} else{\\n\\tSystem.out.println();\\n}\", \"if(true)\\nif(true)\\n\\tSystem.out.println();\\n else\\n\\tSystem.out.println();\")\n                .map();\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void onSurfaceCreated(GL10 gl, EGLConfig config) {\n\n        SetupTriangle();\n        SetupImage();\n\n        GLES20.glClearColor(0.0f, 0.0f, 0.0f, 0.0f);\n\n\n        int vertexShader = GraphicTools.loadShader(GLES20.GL_VERTEX_SHADER, GraphicTools.vs_Image);\n        int fragmentShader = GraphicTools.loadShader(GLES20.GL_FRAGMENT_SHADER, GraphicTools.fs_Image);\n\n        GraphicTools.sp_Image = GLES20.glCreateProgram();             // create empty OpenGL ES Program\n        GLES20.glAttachShader(GraphicTools.sp_Image, vertexShader);   // add the vertex shader to program\n        GLES20.glAttachShader(GraphicTools.sp_Image, fragmentShader); // add the fragment shader to program\n        GLES20.glLinkProgram(GraphicTools.sp_Image);                  // creates OpenGL ES program executables\n\n\n        GLES20.glUseProgram(GraphicTools.sp_Image);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public PasswordImpl(SaltProvider saltProvider, ConfigCoder configCoder, HashAlgorithmRegistry hashAlgorithmRegistry, HashAlgorithm defaultHashAlgorithm) {\n        this.saltProvider = Preconditions.checkNotNull(saltProvider, \"saltProvider\");\n        this.configCoder = Preconditions.checkNotNull(configCoder, \"configCoder\");\n        this.hashAlgorithmRegistry = Preconditions.checkNotNull(hashAlgorithmRegistry, \"hashAlgorithmRegistry\");\n        this.defaultHashAlgorithm = Preconditions.checkNotNull(defaultHashAlgorithm, \"defaultHashAlgorithm\");\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic BitMapFontViewer getViewer( String input, int color ) {\n\t\tif (this.fontImage == null) {\n\t\t\tinitFont();\n\t\t\tif (this.fontImage == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\tif (!this.hasMixedCase) {\n\t\t\tinput = input.toLowerCase();\n\t\t}\n\t\tint length = input.length();\n\t\tint[] indeces = new int[ length ];\n\t\tfor (int i = length - 1; i >= 0; i-- ) {\n\t\t\tchar inputCharacter = input.charAt(i);\n\t\t\tif (inputCharacter == '\\n') {\n\t\t\t\tindeces[i] = BitMapFontViewer.ABSOLUTE_LINE_BREAK;\n\t\t\t} else {\n\t\t\t\tindeces[i] = this.characterMap.indexOf( inputCharacter );\n\t\t\t}\n\t\t}\n\t\tif (color != -1 && color != 0)\n\t\t{\n\t\t\treturn new BitMapFontViewer( this.fontImage, color, indeces, this.xPositions, this.characterWidths, this.fontHeight, this.spaceIndex, 1 );\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn new BitMapFontViewer( this.fontImage, indeces, this.xPositions, this.characterWidths, this.fontHeight, this.spaceIndex, 1 );\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)\n    {\n        double[] rect_out = new double[4];\n        int retVal = floodFill_0(image.nativeObj, mask.nativeObj, seedPoint.x, seedPoint.y, newVal.val[0], newVal.val[1], newVal.val[2], newVal.val[3], rect_out, loDiff.val[0], loDiff.val[1], loDiff.val[2], loDiff.val[3], upDiff.val[0], upDiff.val[1], upDiff.val[2], upDiff.val[3], flags);\n        if(rect!=null){ rect.x = (int)rect_out[0]; rect.y = (int)rect_out[1]; rect.width = (int)rect_out[2]; rect.height = (int)rect_out[3]; } \n        return retVal;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"net.chrisrichardson.eventstore.examples.customersandorders\"))\n                .build()\n                .pathMapping(\"/\")\n                .genericModelSubstitutes(ResponseEntity.class, CompletableFuture.class)\n                .alternateTypeRules(\n                        newRule(typeResolver.resolve(DeferredResult.class,\n                                        typeResolver.resolve(ResponseEntity.class, WildcardType.class)),\n                                typeResolver.resolve(WildcardType.class))\n                )\n                .useDefaultResponseMessages(false)\n                ;\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@SuppressLint(\"NewApi\")\n\tpublic static Bitmap fastblur(Context context, Bitmap sentBitmap, int radius) {\n\n\t\tif (Build.VERSION.SDK_INT > 16) {\n\t\t\tBitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n\t\t\tfinal RenderScript rs = RenderScript.create(context);\n\t\t\tfinal Allocation input = Allocation.createFromBitmap(rs,\n\t\t\t\t\tsentBitmap, Allocation.MipmapControl.MIPMAP_NONE,\n\t\t\t\t\tAllocation.USAGE_SCRIPT);\n\t\t\tfinal Allocation output = Allocation.createTyped(rs,\n\t\t\t\t\tinput.getType());\n\t\t\tfinal ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs,\n\t\t\t\t\tElement.U8_4(rs));\n\t\t\tscript.setRadius(radius );\n\t\t\tscript.setInput(input);\n\t\t\tscript.forEach(output);\n\t\t\toutput.copyTo(bitmap);\n\t\t\treturn bitmap;\n\t\t}\n\n\t\tBitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);\n\n\t\tif (radius < 1) {\n\t\t\treturn (null);\n\t\t}\n\n\t\tint w = bitmap.getWidth();\n\t\tint h = bitmap.getHeight();\n\n\t\tint[] pix = new int[w * h];\n\t\tLog.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n\t\tbitmap.getPixels(pix, 0, w, 0, 0, w, h);\n\n\t\tint wm = w - 1;\n\t\tint hm = h - 1;\n\t\tint wh = w * h;\n\t\tint div = radius + radius + 1;\n\n\t\tint r[] = new int[wh];\n\t\tint g[] = new int[wh];\n\t\tint b[] = new int[wh];\n\t\tint rsum, gsum, bsum, x, y, i, p, yp, yi, yw;\n\t\tint vmin[] = new int[Math.max(w, h)];\n\n\t\tint divsum = (div + 1) >> 1;\n\t\tdivsum *= divsum;\n\t\tint dv[] = new int[256 * divsum];\n\t\tfor (i = 0; i < 256 * divsum; i++) {\n\t\t\tdv[i] = (i / divsum);\n\t\t}\n\n\t\tyw = yi = 0;\n\n\t\tint[][] stack = new int[div][3];\n\t\tint stackpointer;\n\t\tint stackstart;\n\t\tint[] sir;\n\t\tint rbs;\n\t\tint r1 = radius + 1;\n\t\tint routsum, goutsum, boutsum;\n\t\tint rinsum, ginsum, binsum;\n\n\t\tfor (y = 0; y < h; y++) {\n\t\t\trinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n\t\t\tfor (i = -radius; i <= radius; i++) {\n\t\t\t\tp = pix[yi + Math.min(wm, Math.max(i, 0))];\n\t\t\t\tsir = stack[i + radius];\n\t\t\t\tsir[0] = (p & 0xff0000) >> 16;\n\t\t\t\tsir[1] = (p & 0x00ff00) >> 8;\n\t\t\t\tsir[2] = (p & 0x0000ff);\n\t\t\t\trbs = r1 - Math.abs(i);\n\t\t\t\trsum += sir[0] * rbs;\n\t\t\t\tgsum += sir[1] * rbs;\n\t\t\t\tbsum += sir[2] * rbs;\n\t\t\t\tif (i > 0) {\n\t\t\t\t\trinsum += sir[0];\n\t\t\t\t\tginsum += sir[1];\n\t\t\t\t\tbinsum += sir[2];\n\t\t\t\t} else {\n\t\t\t\t\troutsum += sir[0];\n\t\t\t\t\tgoutsum += sir[1];\n\t\t\t\t\tboutsum += sir[2];\n\t\t\t\t}\n\t\t\t}\n\t\t\tstackpointer = radius;\n\n\t\t\tfor (x = 0; x < w; x++) {\n\n\t\t\t\tr[yi] = dv[rsum];\n\t\t\t\tg[yi] = dv[gsum];\n\t\t\t\tb[yi] = dv[bsum];\n\n\t\t\t\trsum -= routsum;\n\t\t\t\tgsum -= goutsum;\n\t\t\t\tbsum -= boutsum;\n\n\t\t\t\tstackstart = stackpointer - radius + div;\n\t\t\t\tsir = stack[stackstart % div];\n\n\t\t\t\troutsum -= sir[0];\n\t\t\t\tgoutsum -= sir[1];\n\t\t\t\tboutsum -= sir[2];\n\n\t\t\t\tif (y == 0) {\n\t\t\t\t\tvmin[x] = Math.min(x + radius + 1, wm);\n\t\t\t\t}\n\t\t\t\tp = pix[yw + vmin[x]];\n\n\t\t\t\tsir[0] = (p & 0xff0000) >> 16;\n\t\t\t\tsir[1] = (p & 0x00ff00) >> 8;\n\t\t\t\tsir[2] = (p & 0x0000ff);\n\n\t\t\t\trinsum += sir[0];\n\t\t\t\tginsum += sir[1];\n\t\t\t\tbinsum += sir[2];\n\n\t\t\t\trsum += rinsum;\n\t\t\t\tgsum += ginsum;\n\t\t\t\tbsum += binsum;\n\n\t\t\t\tstackpointer = (stackpointer + 1) % div;\n\t\t\t\tsir = stack[(stackpointer) % div];\n\n\t\t\t\troutsum += sir[0];\n\t\t\t\tgoutsum += sir[1];\n\t\t\t\tboutsum += sir[2];\n\n\t\t\t\trinsum -= sir[0];\n\t\t\t\tginsum -= sir[1];\n\t\t\t\tbinsum -= sir[2];\n\n\t\t\t\tyi++;\n\t\t\t}\n\t\t\tyw += w;\n\t\t}\n\t\tfor (x = 0; x < w; x++) {\n\t\t\trinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;\n\t\t\typ = -radius * w;\n\t\t\tfor (i = -radius; i <= radius; i++) {\n\t\t\t\tyi = Math.max(0, yp) + x;\n\n\t\t\t\tsir = stack[i + radius];\n\n\t\t\t\tsir[0] = r[yi];\n\t\t\t\tsir[1] = g[yi];\n\t\t\t\tsir[2] = b[yi];\n\n\t\t\t\trbs = r1 - Math.abs(i);\n\n\t\t\t\trsum += r[yi] * rbs;\n\t\t\t\tgsum += g[yi] * rbs;\n\t\t\t\tbsum += b[yi] * rbs;\n\n\t\t\t\tif (i > 0) {\n\t\t\t\t\trinsum += sir[0];\n\t\t\t\t\tginsum += sir[1];\n\t\t\t\t\tbinsum += sir[2];\n\t\t\t\t} else {\n\t\t\t\t\troutsum += sir[0];\n\t\t\t\t\tgoutsum += sir[1];\n\t\t\t\t\tboutsum += sir[2];\n\t\t\t\t}\n\n\t\t\t\tif (i < hm) {\n\t\t\t\t\typ += w;\n\t\t\t\t}\n\t\t\t}\n\t\t\tyi = x;\n\t\t\tstackpointer = radius;\n\t\t\tfor (y = 0; y < h; y++) {\n\t\t\t\tpix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16)\n\t\t\t\t\t\t| (dv[gsum] << 8) | dv[bsum];\n\n\t\t\t\trsum -= routsum;\n\t\t\t\tgsum -= goutsum;\n\t\t\t\tbsum -= boutsum;\n\n\t\t\t\tstackstart = stackpointer - radius + div;\n\t\t\t\tsir = stack[stackstart % div];\n\n\t\t\t\troutsum -= sir[0];\n\t\t\t\tgoutsum -= sir[1];\n\t\t\t\tboutsum -= sir[2];\n\n\t\t\t\tif (x == 0) {\n\t\t\t\t\tvmin[y] = Math.min(y + r1, hm) * w;\n\t\t\t\t}\n\t\t\t\tp = x + vmin[y];\n\n\t\t\t\tsir[0] = r[p];\n\t\t\t\tsir[1] = g[p];\n\t\t\t\tsir[2] = b[p];\n\n\t\t\t\trinsum += sir[0];\n\t\t\t\tginsum += sir[1];\n\t\t\t\tbinsum += sir[2];\n\n\t\t\t\trsum += rinsum;\n\t\t\t\tgsum += ginsum;\n\t\t\t\tbsum += binsum;\n\n\t\t\t\tstackpointer = (stackpointer + 1) % div;\n\t\t\t\tsir = stack[stackpointer];\n\n\t\t\t\troutsum += sir[0];\n\t\t\t\tgoutsum += sir[1];\n\t\t\t\tboutsum += sir[2];\n\n\t\t\t\trinsum -= sir[0];\n\t\t\t\tginsum -= sir[1];\n\t\t\t\tbinsum -= sir[2];\n\n\t\t\t\tyi += w;\n\t\t\t}\n\t\t}\n\n\t\tLog.e(\"pix\", w + \" \" + h + \" \" + pix.length);\n\t\tbitmap.setPixels(pix, 0, w, 0, 0, w, h);\n\t\treturn (bitmap);\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static String getActionName(ActionListener listener)\n\t{\n\t\tEnumeration enu = getActions();\n\t\twhile(enu.hasMoreElements())\n\t\t{\n\t\t\tString name = (String)enu.nextElement();\n\t\t\tActionListener _listener = getAction(name);\n\t\t\tif(_listener == listener)\n\t\t\t\treturn name;\n\t\t}\n\t\treturn null;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n    public void printMethods(){\n        MethodData[] methods = cls.getMethods();\n        for(int m = 0; m < methods.length; m++){\n            String[] accflags = methods[m].getAccess();\n            if(checkAccess(accflags)){\n                if(!(env. showLineAndLocal || env.showDisassembled || env.showVerbose\n                     ||  env.showInternalSigs || env.showallAttr)){\n                    out.print(\"    \");\n                }\n                printMethodSignature(methods[m], accflags);\n                printExceptions(methods[m]);\n                out.println(\";\");\n\n                if (env.showInternalSigs){\n                    out.println(\"  Signature: \" + (methods[m].getInternalSig()));\n                }\n\n                if(env.showDisassembled && ! env.showallAttr) {\n                    printcodeSequence(methods[m]);\n                    printExceptionTable(methods[m]);\n                    out.println();\n                }\n\n                if (env.showLineAndLocal) {\n                    printLineNumTable(methods[m]);\n                    printLocVarTable(methods[m]);\n                    out.println();\n                }\n\n                if (env.showallAttr){\n                    printMethodAttributes(methods[m]);\n                }\n            }\n        }\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\nprivate String endCapture() {\n            int end = current == -1 ? index : index - 1;\n            String captured;\n            if (captureBuffer.length() > 0) {\n                captureBuffer.append(json.substring(captureStart, end));\n                captured = captureBuffer.toString();\n                captureBuffer.setLength(0);\n            } else {\n                captured = json.substring(captureStart, end);\n            }\n            captureStart = -1;\n            return captured;\n        }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic boolean stem() {\n            int v_1;\n            int v_2;\n            int v_3;\n            int v_4;\n            int v_5;\n            int v_6;\n                    v_1 = cursor;\n                    lab0: do {\n                        if (!r_mark_regions())\n                        {\n                            break lab0;\n                        }\n                    } while (false);\n                    cursor = v_1;\n                    limit_backward = cursor; cursor = limit;\n                    v_2 = limit - cursor;\n                    lab1: do {\n                        if (!r_attached_pronoun())\n                        {\n                            break lab1;\n                        }\n                    } while (false);\n                    cursor = limit - v_2;\n                    v_3 = limit - cursor;\n                    lab2: do {\n                        lab3: do {\n                            v_4 = limit - cursor;\n                            lab4: do {\n                                if (!r_standard_suffix())\n                                {\n                                    break lab4;\n                                }\n                                break lab3;\n                            } while (false);\n                            cursor = limit - v_4;\n                            lab5: do {\n                                if (!r_y_verb_suffix())\n                                {\n                                    break lab5;\n                                }\n                                break lab3;\n                            } while (false);\n                            cursor = limit - v_4;\n                            if (!r_verb_suffix())\n                            {\n                                break lab2;\n                            }\n                        } while (false);\n                    } while (false);\n                    cursor = limit - v_3;\n                    v_5 = limit - cursor;\n                    lab6: do {\n                        if (!r_residual_suffix())\n                        {\n                            break lab6;\n                        }\n                    } while (false);\n                    cursor = limit - v_5;\n                    cursor = limit_backward;                    // do, line 225\n                    v_6 = cursor;\n                    lab7: do {\n                        if (!r_postlude())\n                        {\n                            break lab7;\n                        }\n                    } while (false);\n                    cursor = v_6;\n                    return true;\n                }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic final DenseMatrix zeros(ValueType valueType, long... size) {\n\t\tswitch (size.length) {\n\t\tcase 0:\n\t\t\tthrow new RuntimeException(\"Size not defined\");\n\t\tcase 1:\n\t\t\tthrow new RuntimeException(\"Size must be at least 2-dimensional\");\n\t\tdefault:\n\t\t\tswitch (valueType) {\n\t\t\tcase BIGDECIMAL:\n\t\t\t\treturn new DefaultDenseBigDecimalMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BIGINTEGER:\n\t\t\t\treturn new DefaultDenseBigIntegerMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BOOLEAN:\n\t\t\t\treturn new ArrayDenseBooleanMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase BYTE:\n\t\t\t\treturn new DefaultDenseByteMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase CHAR:\n\t\t\t\treturn new DefaultDenseCharMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase DOUBLE:\n\t\t\t\tif (size.length == 2) {\n\t\t\t\t\treturn new DefaultDenseDoubleMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\t\t} else {\n\t\t\t\t\treturn new DefaultDenseDoubleMatrixMultiD(size);\n\t\t\t\t}\n\t\t\tcase FLOAT:\n\t\t\t\treturn new DefaultDenseFloatMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase INT:\n\t\t\t\treturn new DefaultDenseIntMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase LONG:\n\t\t\t\treturn new DefaultDenseLongMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase OBJECT:\n\t\t\t\treturn ObjectMatrix.Factory.zeros(size);\n\t\t\tcase SHORT:\n\t\t\t\treturn new DefaultDenseShortMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tcase STRING:\n\t\t\t\treturn new DefaultDenseStringMatrix2D(MathUtil.longToInt(size[ROW]),\n\t\t\t\t\t\tMathUtil.longToInt(size[COLUMN]));\n\t\t\tdefault:\n\t\t\t\tthrow new RuntimeException(\"unknown value type: \" + valueType);\n\t\t\t}\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static LuaFunction gsub() {\n\t\treturn GSUB;\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Transient\n    public String[] getFieldNames() {\n        return new String[] {\n                \"id\",\n                \"userId\",\n                \"userName\",\n                \"linkedInvoices\",\n                \"paymentMethod\",\n                \"currency\",\n                \"amount\",\n                \"balance\",\n                \"isRefund\",\n                \"isPreauth\",\n                \"createdDate\",\n                \"paymentDate\",\n                \"paymentNotes\",\n\n                \"paymentProcessor\",\n                \"code1\",\n                \"code2\",\n                \"code3\",\n                \"approvalCode\",\n                \"avs\",\n                \"transactionId\",\n                \"md5\",\n                \"cardCode\",\n                \"responseMessage\",\n\n                \"cardName\",\n                \"cardNumber\",\n                \"cardType\",\n                \"cardExpiry\",\n\n                \"achAccountName\",\n                \"achBankName\",\n                \"achAccountType\",\n\n                \"chequeBankName\",\n                \"chequeNumber\",\n                \"chequeDate\",\n        };\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\n@Override\n    public void onDownloadError(int index, String message) {\n    for (int i = 0; i < mDownloadStatus.length; i++) {\n        if (mDownloadStatus[i] != DownFile.DownloadStatus.FINISH && mDownloadStatus[i] != DownFile.DownloadStatus.ERROR) {\n            mDownloadThreads[i].cancel();\n        }\n    }\n        notifyUpdate(downFile, Constants.WHAT_ERROR);\n    }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic static com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse parse(java.io.Reader r) throws org.apache.xmlbeans.XmlException, java.io.IOException {\n          return (com.microsoft.schemas.crm._2007.webservices.TargetQueuedCampaignResponse) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( r, type, null ); }\n}", "nl": " "}
{"code": "class EmptyClass {\n\npublic void addTail(T item){\n\t\tif(!isEmpty()){\n\t\t\ttail.next=new Node<T>(item);\n\t\t\ttail=tail.next;\n\t\t}else{\n\t\t\thead=tail=new Node<T>(item);\n\t\t}\n\t}\n}", "nl": " "}
{"code": "class EmptyClass {\n\n\n\tpublic static <P extends IUnlistedProperty<T>, T> T getStatePropertySafely(@Nullable TileEntity te, Class<? extends Block> block, P property, T defaultVal, boolean actual, boolean extended) {\n\t\tif(te == null || te.getWorld() == null) {\n\t\t\treturn defaultVal;\n\t\t}\n\t\tIBlockState state = te.getWorld().getBlockState(te.getPos());\n\t\tif(block.isInstance(state.getBlock())) {\n\t\t\tif(actual) {\n\t\t\t\tstate = state.getActualState(te.getWorld(), te.getPos());\n\t\t\t}\n\t\t\tif(extended) {\n\t\t\t\tstate = state.getBlock().getExtendedState(state, te.getWorld(), te.getPos());\n\t\t\t}\n\t\t\tif(state instanceof IExtendedBlockState) {\n\t\t\t\treturn ((IExtendedBlockState)state).getValue(property);\n\t\t\t}\n\t\t}\n\t\treturn defaultVal;\n\t}\n}", "nl": " "}
